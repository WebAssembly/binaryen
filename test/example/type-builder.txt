;; Test canonicalization
;; Test basic
;; Test recursive types
(type $0 (func (result (ref null $0))))

(type $0 (func (result (ref null $1))))
(type $1 (func (result (ref null $0))))

(type $0 (func (result (ref null $1))))
(type $1 (func (result (ref null $2))))
(type $2 (func (result (ref null $3))))
(type $3 (func (result (ref null $4))))
(type $4 (func (result (ref null $0))))

(type $0 (func))
(type $0 (func))
(type $2 (func (result (ref null $0) (ref null $2))))
(type $3 (func (result (ref null $0) (ref null $3))))
(type $4 (func (result (ref null $2))))
(type $5 (func (result (ref null $3))))

(type $0 (func (result (ref null $0))))
(type $1 (func (result (ref null $0))))

any
(type $1 (func (param anyref) (result (ref null $1))))

;; Test canonicalization
;; Test basic
;; Test recursive types
(type $0 (func (result (ref null $0))))

(type $0 (func (result (ref null $1))))
(type $1 (func (result (ref null $0))))

(type $0 (func (result (ref null $1))))
(type $1 (func (result (ref null $2))))
(type $2 (func (result (ref null $3))))
(type $3 (func (result (ref null $4))))
(type $4 (func (result (ref null $0))))

(type $0 (func))
(type $0 (func))
(type $2 (func (result (ref null $0) (ref null $2))))
(type $3 (func (result (ref null $0) (ref null $3))))
(type $4 (func (result (ref null $2))))
(type $5 (func (result (ref null $3))))

(type $0 (func (result (ref null $0))))
(type $1 (func (result (ref null $0))))

any
(type $1 (func (param anyref) (result (ref null $1))))

