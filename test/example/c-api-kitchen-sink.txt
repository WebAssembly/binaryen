// beginning a Binaryen API trace
#include <math.h>
#include <map>
#include "binaryen-c.h"
int main() {
  std::map<size_t, BinaryenType> types;
  std::map<size_t, BinaryenExpressionRef> expressions;
  std::map<size_t, BinaryenFunctionRef> functions;
  std::map<size_t, BinaryenGlobalRef> globals;
  std::map<size_t, BinaryenEventRef> events;
  std::map<size_t, BinaryenExportRef> exports;
  std::map<size_t, RelooperBlockRef> relooperBlocks;
  BinaryenModuleRef the_module = NULL;
  RelooperRef the_relooper = NULL;
  the_module = BinaryenModuleCreate();
  expressions[size_t(NULL)] = BinaryenExpressionRef(NULL);
  expressions[1] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[2] = BinaryenConst(the_module, BinaryenLiteralInt64(2));
  expressions[3] = BinaryenConst(the_module, BinaryenLiteralFloat32(3.14));
  expressions[4] = BinaryenConst(the_module, BinaryenLiteralFloat64(2.1828));
  expressions[5] = BinaryenConst(the_module, BinaryenLiteralFloat32(NAN));
  expressions[6] = BinaryenConst(the_module, BinaryenLiteralFloat64(NAN));
  {
    uint8_t t0[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[7] = BinaryenConst(the_module, BinaryenLiteralVec128(t0));
  }
  expressions[8] = BinaryenConst(the_module, BinaryenLiteralInt32(13));
  expressions[9] = BinaryenConst(the_module, BinaryenLiteralFloat64(3.7));
  expressions[10] = BinaryenConst(the_module, BinaryenLiteralInt32(13));
  expressions[11] = BinaryenConst(the_module, BinaryenLiteralInt64(37));
  expressions[12] = BinaryenConst(the_module, BinaryenLiteralFloat32(1.3));
  expressions[13] = BinaryenConst(the_module, BinaryenLiteralFloat64(3.7));
  expressions[14] = BinaryenConst(the_module, BinaryenLiteralInt32(13));
  expressions[15] = BinaryenConst(the_module, BinaryenLiteralInt64(37));
  expressions[16] = BinaryenConst(the_module, BinaryenLiteralFloat32(1.3));
  expressions[17] = BinaryenConst(the_module, BinaryenLiteralFloat64(3.7));
  expressions[18] = BinaryenConst(the_module, BinaryenLiteralInt32(13));
  expressions[19] = BinaryenConst(the_module, BinaryenLiteralInt64(37));
  expressions[20] = BinaryenConst(the_module, BinaryenLiteralFloat32(1.3));
  expressions[21] = BinaryenConst(the_module, BinaryenLiteralFloat64(3.7));
  expressions[22] = BinaryenConst(the_module, BinaryenLiteralInt32(13));
  expressions[23] = BinaryenConst(the_module, BinaryenLiteralInt64(37));
  expressions[24] = BinaryenConst(the_module, BinaryenLiteralFloat32(1.3));
  expressions[25] = BinaryenConst(the_module, BinaryenLiteralFloat64(3.7));
  {
    BinaryenType t1[] = {BinaryenTypeInt32(), BinaryenTypeInt64(), BinaryenTypeFloat32(), BinaryenTypeFloat64()};
    types[0] = BinaryenTypeCreate(t1, 4);
  }
  expressions[26] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[27] = BinaryenConst(the_module, BinaryenLiteralInt32(2));
  expressions[28] = BinaryenConst(the_module, BinaryenLiteralInt32(3));
  expressions[29] = BinaryenConst(the_module, BinaryenLiteralInt32(4));
  expressions[30] = BinaryenConst(the_module, BinaryenLiteralInt32(5));
  expressions[31] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  expressions[32] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[33] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  expressions[34] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[35] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[36] = BinaryenConst(the_module, BinaryenLiteralInt32(3));
  expressions[37] = BinaryenConst(the_module, BinaryenLiteralInt32(5));
  expressions[38] = BinaryenConst(the_module, BinaryenLiteralInt32(10));
  expressions[39] = BinaryenConst(the_module, BinaryenLiteralInt32(11));
  expressions[40] = BinaryenConst(the_module, BinaryenLiteralInt32(110));
  expressions[41] = BinaryenConst(the_module, BinaryenLiteralInt64(111));
  expressions[42] = BinaryenRefNull(the_module);
  expressions[43] = BinaryenRefFunc(the_module, "kitchen()sinker");
  BinaryenAddEvent(the_module, "a-event", 0, BinaryenTypeInt32(), BinaryenTypeNone());
  expressions[44] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  {
    BinaryenExpressionRef operands[] = { expressions[44] };
    expressions[45] = BinaryenThrow(the_module, "a-event", operands, 1);
  }
  expressions[46] = BinaryenPop(the_module, BinaryenTypeExnref());
  expressions[47] = BinaryenLocalSet(the_module, 5, expressions[46]);
  expressions[48] = BinaryenLocalGet(the_module, 5, BinaryenTypeExnref());
  expressions[49] = BinaryenBrOnExn(the_module, "try-block", "a-event", expressions[48]);
  expressions[50] = BinaryenRethrow(the_module, expressions[49]);
  {
    BinaryenExpressionRef children[] = { expressions[50] };
    expressions[51] = BinaryenBlock(the_module, "try-block", children, 1, BinaryenTypeInt32());
  }
  expressions[52] = BinaryenDrop(the_module, expressions[51]);
  {
    BinaryenExpressionRef children[] = { expressions[47], expressions[52] };
    expressions[53] = BinaryenBlock(the_module, NULL, children, 2, BinaryenTypeNone());
  }
  expressions[54] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[55] = BinaryenUnary(the_module, 0, expressions[54]);
  expressions[56] = BinaryenConst(the_module, BinaryenLiteralInt64(-22));
  expressions[57] = BinaryenUnary(the_module, 3, expressions[56]);
  expressions[58] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[59] = BinaryenUnary(the_module, 4, expressions[58]);
  expressions[60] = BinaryenConst(the_module, BinaryenLiteralFloat32(-33.612));
  expressions[61] = BinaryenUnary(the_module, 6, expressions[60]);
  expressions[62] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9005.84));
  expressions[63] = BinaryenUnary(the_module, 9, expressions[62]);
  expressions[64] = BinaryenConst(the_module, BinaryenLiteralFloat32(-33.612));
  expressions[65] = BinaryenUnary(the_module, 10, expressions[64]);
  expressions[66] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9005.84));
  expressions[67] = BinaryenUnary(the_module, 13, expressions[66]);
  expressions[68] = BinaryenConst(the_module, BinaryenLiteralFloat32(-33.612));
  expressions[69] = BinaryenUnary(the_module, 14, expressions[68]);
  expressions[70] = BinaryenConst(the_module, BinaryenLiteralFloat32(-33.612));
  expressions[71] = BinaryenUnary(the_module, 16, expressions[70]);
  expressions[72] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9005.84));
  expressions[73] = BinaryenUnary(the_module, 19, expressions[72]);
  expressions[74] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[75] = BinaryenUnary(the_module, 20, expressions[74]);
  expressions[76] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[77] = BinaryenUnary(the_module, 22, expressions[76]);
  expressions[78] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[79] = BinaryenUnary(the_module, 23, expressions[78]);
  expressions[80] = BinaryenConst(the_module, BinaryenLiteralInt64(-22));
  expressions[81] = BinaryenUnary(the_module, 24, expressions[80]);
  expressions[82] = BinaryenConst(the_module, BinaryenLiteralFloat32(-33.612));
  expressions[83] = BinaryenUnary(the_module, 25, expressions[82]);
  expressions[84] = BinaryenConst(the_module, BinaryenLiteralFloat32(-33.612));
  expressions[85] = BinaryenUnary(the_module, 26, expressions[84]);
  expressions[86] = BinaryenConst(the_module, BinaryenLiteralFloat32(-33.612));
  expressions[87] = BinaryenUnary(the_module, 27, expressions[86]);
  expressions[88] = BinaryenConst(the_module, BinaryenLiteralFloat32(-33.612));
  expressions[89] = BinaryenUnary(the_module, 28, expressions[88]);
  expressions[90] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9005.84));
  expressions[91] = BinaryenUnary(the_module, 29, expressions[90]);
  expressions[92] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9005.84));
  expressions[93] = BinaryenUnary(the_module, 30, expressions[92]);
  expressions[94] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9005.84));
  expressions[95] = BinaryenUnary(the_module, 31, expressions[94]);
  expressions[96] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9005.84));
  expressions[97] = BinaryenUnary(the_module, 32, expressions[96]);
  expressions[98] = BinaryenConst(the_module, BinaryenLiteralFloat32(-33.612));
  expressions[99] = BinaryenUnary(the_module, 52, expressions[98]);
  expressions[100] = BinaryenConst(the_module, BinaryenLiteralFloat32(-33.612));
  expressions[101] = BinaryenUnary(the_module, 56, expressions[100]);
  expressions[102] = BinaryenConst(the_module, BinaryenLiteralFloat32(-33.612));
  expressions[103] = BinaryenUnary(the_module, 53, expressions[102]);
  expressions[104] = BinaryenConst(the_module, BinaryenLiteralFloat32(-33.612));
  expressions[105] = BinaryenUnary(the_module, 57, expressions[104]);
  expressions[106] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9005.84));
  expressions[107] = BinaryenUnary(the_module, 54, expressions[106]);
  expressions[108] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9005.84));
  expressions[109] = BinaryenUnary(the_module, 58, expressions[108]);
  expressions[110] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9005.84));
  expressions[111] = BinaryenUnary(the_module, 55, expressions[110]);
  expressions[112] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9005.84));
  expressions[113] = BinaryenUnary(the_module, 59, expressions[112]);
  expressions[114] = BinaryenConst(the_module, BinaryenLiteralFloat32(-33.612));
  expressions[115] = BinaryenUnary(the_module, 33, expressions[114]);
  expressions[116] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9005.84));
  expressions[117] = BinaryenUnary(the_module, 34, expressions[116]);
  expressions[118] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[119] = BinaryenUnary(the_module, 35, expressions[118]);
  expressions[120] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[121] = BinaryenUnary(the_module, 36, expressions[120]);
  expressions[122] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[123] = BinaryenUnary(the_module, 37, expressions[122]);
  expressions[124] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[125] = BinaryenUnary(the_module, 38, expressions[124]);
  expressions[126] = BinaryenConst(the_module, BinaryenLiteralInt64(-22));
  expressions[127] = BinaryenUnary(the_module, 39, expressions[126]);
  expressions[128] = BinaryenConst(the_module, BinaryenLiteralInt64(-22));
  expressions[129] = BinaryenUnary(the_module, 40, expressions[128]);
  expressions[130] = BinaryenConst(the_module, BinaryenLiteralInt64(-22));
  expressions[131] = BinaryenUnary(the_module, 41, expressions[130]);
  expressions[132] = BinaryenConst(the_module, BinaryenLiteralInt64(-22));
  expressions[133] = BinaryenUnary(the_module, 42, expressions[132]);
  expressions[134] = BinaryenConst(the_module, BinaryenLiteralFloat32(-33.612));
  expressions[135] = BinaryenUnary(the_module, 43, expressions[134]);
  expressions[136] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9005.84));
  expressions[137] = BinaryenUnary(the_module, 44, expressions[136]);
  expressions[138] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[139] = BinaryenUnary(the_module, 45, expressions[138]);
  expressions[140] = BinaryenConst(the_module, BinaryenLiteralInt64(-22));
  expressions[141] = BinaryenUnary(the_module, 46, expressions[140]);
  expressions[142] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[143] = BinaryenUnary(the_module, 60, expressions[142]);
  expressions[144] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[145] = BinaryenUnary(the_module, 61, expressions[144]);
  expressions[146] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[147] = BinaryenUnary(the_module, 62, expressions[146]);
  expressions[148] = BinaryenConst(the_module, BinaryenLiteralInt64(-22));
  expressions[149] = BinaryenUnary(the_module, 63, expressions[148]);
  expressions[150] = BinaryenConst(the_module, BinaryenLiteralFloat32(-33.612));
  expressions[151] = BinaryenUnary(the_module, 64, expressions[150]);
  expressions[152] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9005.84));
  expressions[153] = BinaryenUnary(the_module, 65, expressions[152]);
  {
    uint8_t t2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[154] = BinaryenConst(the_module, BinaryenLiteralVec128(t2));
  }
  expressions[155] = BinaryenUnary(the_module, 66, expressions[154]);
  {
    uint8_t t3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[156] = BinaryenConst(the_module, BinaryenLiteralVec128(t3));
  }
  expressions[157] = BinaryenUnary(the_module, 67, expressions[156]);
  {
    uint8_t t4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[158] = BinaryenConst(the_module, BinaryenLiteralVec128(t4));
  }
  expressions[159] = BinaryenUnary(the_module, 68, expressions[158]);
  {
    uint8_t t5[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[160] = BinaryenConst(the_module, BinaryenLiteralVec128(t5));
  }
  expressions[161] = BinaryenUnary(the_module, 69, expressions[160]);
  {
    uint8_t t6[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[162] = BinaryenConst(the_module, BinaryenLiteralVec128(t6));
  }
  expressions[163] = BinaryenUnary(the_module, 70, expressions[162]);
  {
    uint8_t t7[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[164] = BinaryenConst(the_module, BinaryenLiteralVec128(t7));
  }
  expressions[165] = BinaryenUnary(the_module, 71, expressions[164]);
  {
    uint8_t t8[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[166] = BinaryenConst(the_module, BinaryenLiteralVec128(t8));
  }
  expressions[167] = BinaryenUnary(the_module, 72, expressions[166]);
  {
    uint8_t t9[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[168] = BinaryenConst(the_module, BinaryenLiteralVec128(t9));
  }
  expressions[169] = BinaryenUnary(the_module, 73, expressions[168]);
  {
    uint8_t t10[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[170] = BinaryenConst(the_module, BinaryenLiteralVec128(t10));
  }
  expressions[171] = BinaryenUnary(the_module, 74, expressions[170]);
  {
    uint8_t t11[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[172] = BinaryenConst(the_module, BinaryenLiteralVec128(t11));
  }
  expressions[173] = BinaryenUnary(the_module, 75, expressions[172]);
  {
    uint8_t t12[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[174] = BinaryenConst(the_module, BinaryenLiteralVec128(t12));
  }
  expressions[175] = BinaryenUnary(the_module, 76, expressions[174]);
  {
    uint8_t t13[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[176] = BinaryenConst(the_module, BinaryenLiteralVec128(t13));
  }
  expressions[177] = BinaryenUnary(the_module, 77, expressions[176]);
  {
    uint8_t t14[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[178] = BinaryenConst(the_module, BinaryenLiteralVec128(t14));
  }
  expressions[179] = BinaryenUnary(the_module, 78, expressions[178]);
  {
    uint8_t t15[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[180] = BinaryenConst(the_module, BinaryenLiteralVec128(t15));
  }
  expressions[181] = BinaryenUnary(the_module, 79, expressions[180]);
  {
    uint8_t t16[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[182] = BinaryenConst(the_module, BinaryenLiteralVec128(t16));
  }
  expressions[183] = BinaryenUnary(the_module, 80, expressions[182]);
  {
    uint8_t t17[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[184] = BinaryenConst(the_module, BinaryenLiteralVec128(t17));
  }
  expressions[185] = BinaryenUnary(the_module, 81, expressions[184]);
  {
    uint8_t t18[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[186] = BinaryenConst(the_module, BinaryenLiteralVec128(t18));
  }
  expressions[187] = BinaryenUnary(the_module, 82, expressions[186]);
  {
    uint8_t t19[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[188] = BinaryenConst(the_module, BinaryenLiteralVec128(t19));
  }
  expressions[189] = BinaryenUnary(the_module, 83, expressions[188]);
  {
    uint8_t t20[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[190] = BinaryenConst(the_module, BinaryenLiteralVec128(t20));
  }
  expressions[191] = BinaryenUnary(the_module, 84, expressions[190]);
  {
    uint8_t t21[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[192] = BinaryenConst(the_module, BinaryenLiteralVec128(t21));
  }
  expressions[193] = BinaryenUnary(the_module, 85, expressions[192]);
  {
    uint8_t t22[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[194] = BinaryenConst(the_module, BinaryenLiteralVec128(t22));
  }
  expressions[195] = BinaryenUnary(the_module, 86, expressions[194]);
  {
    uint8_t t23[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[196] = BinaryenConst(the_module, BinaryenLiteralVec128(t23));
  }
  expressions[197] = BinaryenUnary(the_module, 87, expressions[196]);
  {
    uint8_t t24[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[198] = BinaryenConst(the_module, BinaryenLiteralVec128(t24));
  }
  expressions[199] = BinaryenUnary(the_module, 88, expressions[198]);
  {
    uint8_t t25[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[200] = BinaryenConst(the_module, BinaryenLiteralVec128(t25));
  }
  expressions[201] = BinaryenUnary(the_module, 89, expressions[200]);
  {
    uint8_t t26[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[202] = BinaryenConst(the_module, BinaryenLiteralVec128(t26));
  }
  expressions[203] = BinaryenUnary(the_module, 90, expressions[202]);
  {
    uint8_t t27[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[204] = BinaryenConst(the_module, BinaryenLiteralVec128(t27));
  }
  expressions[205] = BinaryenUnary(the_module, 91, expressions[204]);
  {
    uint8_t t28[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[206] = BinaryenConst(the_module, BinaryenLiteralVec128(t28));
  }
  expressions[207] = BinaryenUnary(the_module, 92, expressions[206]);
  {
    uint8_t t29[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[208] = BinaryenConst(the_module, BinaryenLiteralVec128(t29));
  }
  expressions[209] = BinaryenUnary(the_module, 93, expressions[208]);
  {
    uint8_t t30[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[210] = BinaryenConst(the_module, BinaryenLiteralVec128(t30));
  }
  expressions[211] = BinaryenUnary(the_module, 94, expressions[210]);
  {
    uint8_t t31[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[212] = BinaryenConst(the_module, BinaryenLiteralVec128(t31));
  }
  expressions[213] = BinaryenUnary(the_module, 95, expressions[212]);
  {
    uint8_t t32[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[214] = BinaryenConst(the_module, BinaryenLiteralVec128(t32));
  }
  expressions[215] = BinaryenUnary(the_module, 96, expressions[214]);
  {
    uint8_t t33[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[216] = BinaryenConst(the_module, BinaryenLiteralVec128(t33));
  }
  expressions[217] = BinaryenUnary(the_module, 97, expressions[216]);
  {
    uint8_t t34[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[218] = BinaryenConst(the_module, BinaryenLiteralVec128(t34));
  }
  expressions[219] = BinaryenUnary(the_module, 98, expressions[218]);
  {
    uint8_t t35[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[220] = BinaryenConst(the_module, BinaryenLiteralVec128(t35));
  }
  expressions[221] = BinaryenUnary(the_module, 99, expressions[220]);
  {
    uint8_t t36[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[222] = BinaryenConst(the_module, BinaryenLiteralVec128(t36));
  }
  expressions[223] = BinaryenUnary(the_module, 100, expressions[222]);
  {
    uint8_t t37[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[224] = BinaryenConst(the_module, BinaryenLiteralVec128(t37));
  }
  expressions[225] = BinaryenUnary(the_module, 101, expressions[224]);
  {
    uint8_t t38[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[226] = BinaryenConst(the_module, BinaryenLiteralVec128(t38));
  }
  expressions[227] = BinaryenUnary(the_module, 102, expressions[226]);
  {
    uint8_t t39[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[228] = BinaryenConst(the_module, BinaryenLiteralVec128(t39));
  }
  expressions[229] = BinaryenUnary(the_module, 103, expressions[228]);
  {
    uint8_t t40[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[230] = BinaryenConst(the_module, BinaryenLiteralVec128(t40));
  }
  expressions[231] = BinaryenUnary(the_module, 104, expressions[230]);
  {
    uint8_t t41[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[232] = BinaryenConst(the_module, BinaryenLiteralVec128(t41));
  }
  expressions[233] = BinaryenUnary(the_module, 105, expressions[232]);
  {
    uint8_t t42[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[234] = BinaryenConst(the_module, BinaryenLiteralVec128(t42));
  }
  expressions[235] = BinaryenUnary(the_module, 106, expressions[234]);
  expressions[236] = BinaryenConst(the_module, BinaryenLiteralInt32(-11));
  expressions[237] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[238] = BinaryenBinary(the_module, 0, expressions[237], expressions[236]);
  expressions[239] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9007.33));
  expressions[240] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9005.84));
  expressions[241] = BinaryenBinary(the_module, 64, expressions[240], expressions[239]);
  expressions[242] = BinaryenConst(the_module, BinaryenLiteralInt32(-11));
  expressions[243] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[244] = BinaryenBinary(the_module, 3, expressions[243], expressions[242]);
  expressions[245] = BinaryenConst(the_module, BinaryenLiteralInt64(-23));
  expressions[246] = BinaryenConst(the_module, BinaryenLiteralInt64(-22));
  expressions[247] = BinaryenBinary(the_module, 29, expressions[246], expressions[245]);
  expressions[248] = BinaryenConst(the_module, BinaryenLiteralInt64(-23));
  expressions[249] = BinaryenConst(the_module, BinaryenLiteralInt64(-22));
  expressions[250] = BinaryenBinary(the_module, 30, expressions[249], expressions[248]);
  expressions[251] = BinaryenConst(the_module, BinaryenLiteralInt32(-11));
  expressions[252] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[253] = BinaryenBinary(the_module, 6, expressions[252], expressions[251]);
  expressions[254] = BinaryenConst(the_module, BinaryenLiteralInt32(-11));
  expressions[255] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[256] = BinaryenBinary(the_module, 7, expressions[255], expressions[254]);
  expressions[257] = BinaryenConst(the_module, BinaryenLiteralInt64(-23));
  expressions[258] = BinaryenConst(the_module, BinaryenLiteralInt64(-22));
  expressions[259] = BinaryenBinary(the_module, 33, expressions[258], expressions[257]);
  expressions[260] = BinaryenConst(the_module, BinaryenLiteralInt32(-11));
  expressions[261] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[262] = BinaryenBinary(the_module, 9, expressions[261], expressions[260]);
  expressions[263] = BinaryenConst(the_module, BinaryenLiteralInt64(-23));
  expressions[264] = BinaryenConst(the_module, BinaryenLiteralInt64(-22));
  expressions[265] = BinaryenBinary(the_module, 35, expressions[264], expressions[263]);
  expressions[266] = BinaryenConst(the_module, BinaryenLiteralInt64(-23));
  expressions[267] = BinaryenConst(the_module, BinaryenLiteralInt64(-22));
  expressions[268] = BinaryenBinary(the_module, 36, expressions[267], expressions[266]);
  expressions[269] = BinaryenConst(the_module, BinaryenLiteralInt32(-11));
  expressions[270] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[271] = BinaryenBinary(the_module, 12, expressions[270], expressions[269]);
  expressions[272] = BinaryenConst(the_module, BinaryenLiteralInt32(-11));
  expressions[273] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[274] = BinaryenBinary(the_module, 13, expressions[273], expressions[272]);
  expressions[275] = BinaryenConst(the_module, BinaryenLiteralInt64(-23));
  expressions[276] = BinaryenConst(the_module, BinaryenLiteralInt64(-22));
  expressions[277] = BinaryenBinary(the_module, 39, expressions[276], expressions[275]);
  expressions[278] = BinaryenConst(the_module, BinaryenLiteralFloat32(-62.5));
  expressions[279] = BinaryenConst(the_module, BinaryenLiteralFloat32(-33.612));
  expressions[280] = BinaryenBinary(the_module, 53, expressions[279], expressions[278]);
  expressions[281] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9007.33));
  expressions[282] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9005.84));
  expressions[283] = BinaryenBinary(the_module, 67, expressions[282], expressions[281]);
  expressions[284] = BinaryenConst(the_module, BinaryenLiteralFloat32(-62.5));
  expressions[285] = BinaryenConst(the_module, BinaryenLiteralFloat32(-33.612));
  expressions[286] = BinaryenBinary(the_module, 55, expressions[285], expressions[284]);
  expressions[287] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9007.33));
  expressions[288] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9005.84));
  expressions[289] = BinaryenBinary(the_module, 69, expressions[288], expressions[287]);
  expressions[290] = BinaryenConst(the_module, BinaryenLiteralInt32(-11));
  expressions[291] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[292] = BinaryenBinary(the_module, 15, expressions[291], expressions[290]);
  expressions[293] = BinaryenConst(the_module, BinaryenLiteralFloat32(-62.5));
  expressions[294] = BinaryenConst(the_module, BinaryenLiteralFloat32(-33.612));
  expressions[295] = BinaryenBinary(the_module, 58, expressions[294], expressions[293]);
  expressions[296] = BinaryenConst(the_module, BinaryenLiteralInt32(-11));
  expressions[297] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[298] = BinaryenBinary(the_module, 17, expressions[297], expressions[296]);
  expressions[299] = BinaryenConst(the_module, BinaryenLiteralInt64(-23));
  expressions[300] = BinaryenConst(the_module, BinaryenLiteralInt64(-22));
  expressions[301] = BinaryenBinary(the_module, 43, expressions[300], expressions[299]);
  expressions[302] = BinaryenConst(the_module, BinaryenLiteralInt64(-23));
  expressions[303] = BinaryenConst(the_module, BinaryenLiteralInt64(-22));
  expressions[304] = BinaryenBinary(the_module, 44, expressions[303], expressions[302]);
  expressions[305] = BinaryenConst(the_module, BinaryenLiteralInt32(-11));
  expressions[306] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[307] = BinaryenBinary(the_module, 20, expressions[306], expressions[305]);
  expressions[308] = BinaryenConst(the_module, BinaryenLiteralInt64(-23));
  expressions[309] = BinaryenConst(the_module, BinaryenLiteralInt64(-22));
  expressions[310] = BinaryenBinary(the_module, 46, expressions[309], expressions[308]);
  expressions[311] = BinaryenConst(the_module, BinaryenLiteralInt32(-11));
  expressions[312] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[313] = BinaryenBinary(the_module, 22, expressions[312], expressions[311]);
  expressions[314] = BinaryenConst(the_module, BinaryenLiteralInt32(-11));
  expressions[315] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  expressions[316] = BinaryenBinary(the_module, 23, expressions[315], expressions[314]);
  expressions[317] = BinaryenConst(the_module, BinaryenLiteralInt64(-23));
  expressions[318] = BinaryenConst(the_module, BinaryenLiteralInt64(-22));
  expressions[319] = BinaryenBinary(the_module, 49, expressions[318], expressions[317]);
  expressions[320] = BinaryenConst(the_module, BinaryenLiteralFloat32(-62.5));
  expressions[321] = BinaryenConst(the_module, BinaryenLiteralFloat32(-33.612));
  expressions[322] = BinaryenBinary(the_module, 59, expressions[321], expressions[320]);
  expressions[323] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9007.33));
  expressions[324] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9005.84));
  expressions[325] = BinaryenBinary(the_module, 73, expressions[324], expressions[323]);
  expressions[326] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9007.33));
  expressions[327] = BinaryenConst(the_module, BinaryenLiteralFloat64(-9005.84));
  expressions[328] = BinaryenBinary(the_module, 74, expressions[327], expressions[326]);
  expressions[329] = BinaryenConst(the_module, BinaryenLiteralFloat32(-62.5));
  expressions[330] = BinaryenConst(the_module, BinaryenLiteralFloat32(-33.612));
  expressions[331] = BinaryenBinary(the_module, 62, expressions[330], expressions[329]);
  {
    uint8_t t43[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[332] = BinaryenConst(the_module, BinaryenLiteralVec128(t43));
  }
  {
    uint8_t t44[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[333] = BinaryenConst(the_module, BinaryenLiteralVec128(t44));
  }
  expressions[334] = BinaryenBinary(the_module, 76, expressions[333], expressions[332]);
  {
    uint8_t t45[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[335] = BinaryenConst(the_module, BinaryenLiteralVec128(t45));
  }
  {
    uint8_t t46[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[336] = BinaryenConst(the_module, BinaryenLiteralVec128(t46));
  }
  expressions[337] = BinaryenBinary(the_module, 77, expressions[336], expressions[335]);
  {
    uint8_t t47[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[338] = BinaryenConst(the_module, BinaryenLiteralVec128(t47));
  }
  {
    uint8_t t48[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[339] = BinaryenConst(the_module, BinaryenLiteralVec128(t48));
  }
  expressions[340] = BinaryenBinary(the_module, 78, expressions[339], expressions[338]);
  {
    uint8_t t49[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[341] = BinaryenConst(the_module, BinaryenLiteralVec128(t49));
  }
  {
    uint8_t t50[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[342] = BinaryenConst(the_module, BinaryenLiteralVec128(t50));
  }
  expressions[343] = BinaryenBinary(the_module, 79, expressions[342], expressions[341]);
  {
    uint8_t t51[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[344] = BinaryenConst(the_module, BinaryenLiteralVec128(t51));
  }
  {
    uint8_t t52[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[345] = BinaryenConst(the_module, BinaryenLiteralVec128(t52));
  }
  expressions[346] = BinaryenBinary(the_module, 80, expressions[345], expressions[344]);
  {
    uint8_t t53[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[347] = BinaryenConst(the_module, BinaryenLiteralVec128(t53));
  }
  {
    uint8_t t54[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[348] = BinaryenConst(the_module, BinaryenLiteralVec128(t54));
  }
  expressions[349] = BinaryenBinary(the_module, 81, expressions[348], expressions[347]);
  {
    uint8_t t55[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[350] = BinaryenConst(the_module, BinaryenLiteralVec128(t55));
  }
  {
    uint8_t t56[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[351] = BinaryenConst(the_module, BinaryenLiteralVec128(t56));
  }
  expressions[352] = BinaryenBinary(the_module, 82, expressions[351], expressions[350]);
  {
    uint8_t t57[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[353] = BinaryenConst(the_module, BinaryenLiteralVec128(t57));
  }
  {
    uint8_t t58[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[354] = BinaryenConst(the_module, BinaryenLiteralVec128(t58));
  }
  expressions[355] = BinaryenBinary(the_module, 83, expressions[354], expressions[353]);
  {
    uint8_t t59[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[356] = BinaryenConst(the_module, BinaryenLiteralVec128(t59));
  }
  {
    uint8_t t60[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[357] = BinaryenConst(the_module, BinaryenLiteralVec128(t60));
  }
  expressions[358] = BinaryenBinary(the_module, 84, expressions[357], expressions[356]);
  {
    uint8_t t61[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[359] = BinaryenConst(the_module, BinaryenLiteralVec128(t61));
  }
  {
    uint8_t t62[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[360] = BinaryenConst(the_module, BinaryenLiteralVec128(t62));
  }
  expressions[361] = BinaryenBinary(the_module, 85, expressions[360], expressions[359]);
  {
    uint8_t t63[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[362] = BinaryenConst(the_module, BinaryenLiteralVec128(t63));
  }
  {
    uint8_t t64[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[363] = BinaryenConst(the_module, BinaryenLiteralVec128(t64));
  }
  expressions[364] = BinaryenBinary(the_module, 86, expressions[363], expressions[362]);
  {
    uint8_t t65[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[365] = BinaryenConst(the_module, BinaryenLiteralVec128(t65));
  }
  {
    uint8_t t66[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[366] = BinaryenConst(the_module, BinaryenLiteralVec128(t66));
  }
  expressions[367] = BinaryenBinary(the_module, 87, expressions[366], expressions[365]);
  {
    uint8_t t67[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[368] = BinaryenConst(the_module, BinaryenLiteralVec128(t67));
  }
  {
    uint8_t t68[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[369] = BinaryenConst(the_module, BinaryenLiteralVec128(t68));
  }
  expressions[370] = BinaryenBinary(the_module, 88, expressions[369], expressions[368]);
  {
    uint8_t t69[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[371] = BinaryenConst(the_module, BinaryenLiteralVec128(t69));
  }
  {
    uint8_t t70[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[372] = BinaryenConst(the_module, BinaryenLiteralVec128(t70));
  }
  expressions[373] = BinaryenBinary(the_module, 89, expressions[372], expressions[371]);
  {
    uint8_t t71[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[374] = BinaryenConst(the_module, BinaryenLiteralVec128(t71));
  }
  {
    uint8_t t72[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[375] = BinaryenConst(the_module, BinaryenLiteralVec128(t72));
  }
  expressions[376] = BinaryenBinary(the_module, 90, expressions[375], expressions[374]);
  {
    uint8_t t73[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[377] = BinaryenConst(the_module, BinaryenLiteralVec128(t73));
  }
  {
    uint8_t t74[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[378] = BinaryenConst(the_module, BinaryenLiteralVec128(t74));
  }
  expressions[379] = BinaryenBinary(the_module, 91, expressions[378], expressions[377]);
  {
    uint8_t t75[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[380] = BinaryenConst(the_module, BinaryenLiteralVec128(t75));
  }
  {
    uint8_t t76[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[381] = BinaryenConst(the_module, BinaryenLiteralVec128(t76));
  }
  expressions[382] = BinaryenBinary(the_module, 92, expressions[381], expressions[380]);
  {
    uint8_t t77[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[383] = BinaryenConst(the_module, BinaryenLiteralVec128(t77));
  }
  {
    uint8_t t78[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[384] = BinaryenConst(the_module, BinaryenLiteralVec128(t78));
  }
  expressions[385] = BinaryenBinary(the_module, 93, expressions[384], expressions[383]);
  {
    uint8_t t79[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[386] = BinaryenConst(the_module, BinaryenLiteralVec128(t79));
  }
  {
    uint8_t t80[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[387] = BinaryenConst(the_module, BinaryenLiteralVec128(t80));
  }
  expressions[388] = BinaryenBinary(the_module, 94, expressions[387], expressions[386]);
  {
    uint8_t t81[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[389] = BinaryenConst(the_module, BinaryenLiteralVec128(t81));
  }
  {
    uint8_t t82[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[390] = BinaryenConst(the_module, BinaryenLiteralVec128(t82));
  }
  expressions[391] = BinaryenBinary(the_module, 95, expressions[390], expressions[389]);
  {
    uint8_t t83[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[392] = BinaryenConst(the_module, BinaryenLiteralVec128(t83));
  }
  {
    uint8_t t84[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[393] = BinaryenConst(the_module, BinaryenLiteralVec128(t84));
  }
  expressions[394] = BinaryenBinary(the_module, 96, expressions[393], expressions[392]);
  {
    uint8_t t85[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[395] = BinaryenConst(the_module, BinaryenLiteralVec128(t85));
  }
  {
    uint8_t t86[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[396] = BinaryenConst(the_module, BinaryenLiteralVec128(t86));
  }
  expressions[397] = BinaryenBinary(the_module, 97, expressions[396], expressions[395]);
  {
    uint8_t t87[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[398] = BinaryenConst(the_module, BinaryenLiteralVec128(t87));
  }
  {
    uint8_t t88[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[399] = BinaryenConst(the_module, BinaryenLiteralVec128(t88));
  }
  expressions[400] = BinaryenBinary(the_module, 98, expressions[399], expressions[398]);
  {
    uint8_t t89[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[401] = BinaryenConst(the_module, BinaryenLiteralVec128(t89));
  }
  {
    uint8_t t90[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[402] = BinaryenConst(the_module, BinaryenLiteralVec128(t90));
  }
  expressions[403] = BinaryenBinary(the_module, 99, expressions[402], expressions[401]);
  {
    uint8_t t91[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[404] = BinaryenConst(the_module, BinaryenLiteralVec128(t91));
  }
  {
    uint8_t t92[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[405] = BinaryenConst(the_module, BinaryenLiteralVec128(t92));
  }
  expressions[406] = BinaryenBinary(the_module, 100, expressions[405], expressions[404]);
  {
    uint8_t t93[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[407] = BinaryenConst(the_module, BinaryenLiteralVec128(t93));
  }
  {
    uint8_t t94[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[408] = BinaryenConst(the_module, BinaryenLiteralVec128(t94));
  }
  expressions[409] = BinaryenBinary(the_module, 101, expressions[408], expressions[407]);
  {
    uint8_t t95[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[410] = BinaryenConst(the_module, BinaryenLiteralVec128(t95));
  }
  {
    uint8_t t96[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[411] = BinaryenConst(the_module, BinaryenLiteralVec128(t96));
  }
  expressions[412] = BinaryenBinary(the_module, 102, expressions[411], expressions[410]);
  {
    uint8_t t97[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[413] = BinaryenConst(the_module, BinaryenLiteralVec128(t97));
  }
  {
    uint8_t t98[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[414] = BinaryenConst(the_module, BinaryenLiteralVec128(t98));
  }
  expressions[415] = BinaryenBinary(the_module, 103, expressions[414], expressions[413]);
  {
    uint8_t t99[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[416] = BinaryenConst(the_module, BinaryenLiteralVec128(t99));
  }
  {
    uint8_t t100[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[417] = BinaryenConst(the_module, BinaryenLiteralVec128(t100));
  }
  expressions[418] = BinaryenBinary(the_module, 104, expressions[417], expressions[416]);
  {
    uint8_t t101[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[419] = BinaryenConst(the_module, BinaryenLiteralVec128(t101));
  }
  {
    uint8_t t102[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[420] = BinaryenConst(the_module, BinaryenLiteralVec128(t102));
  }
  expressions[421] = BinaryenBinary(the_module, 105, expressions[420], expressions[419]);
  {
    uint8_t t103[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[422] = BinaryenConst(the_module, BinaryenLiteralVec128(t103));
  }
  {
    uint8_t t104[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[423] = BinaryenConst(the_module, BinaryenLiteralVec128(t104));
  }
  expressions[424] = BinaryenBinary(the_module, 106, expressions[423], expressions[422]);
  {
    uint8_t t105[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[425] = BinaryenConst(the_module, BinaryenLiteralVec128(t105));
  }
  {
    uint8_t t106[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[426] = BinaryenConst(the_module, BinaryenLiteralVec128(t106));
  }
  expressions[427] = BinaryenBinary(the_module, 107, expressions[426], expressions[425]);
  {
    uint8_t t107[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[428] = BinaryenConst(the_module, BinaryenLiteralVec128(t107));
  }
  {
    uint8_t t108[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[429] = BinaryenConst(the_module, BinaryenLiteralVec128(t108));
  }
  expressions[430] = BinaryenBinary(the_module, 108, expressions[429], expressions[428]);
  {
    uint8_t t109[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[431] = BinaryenConst(the_module, BinaryenLiteralVec128(t109));
  }
  {
    uint8_t t110[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[432] = BinaryenConst(the_module, BinaryenLiteralVec128(t110));
  }
  expressions[433] = BinaryenBinary(the_module, 109, expressions[432], expressions[431]);
  {
    uint8_t t111[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[434] = BinaryenConst(the_module, BinaryenLiteralVec128(t111));
  }
  {
    uint8_t t112[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[435] = BinaryenConst(the_module, BinaryenLiteralVec128(t112));
  }
  expressions[436] = BinaryenBinary(the_module, 110, expressions[435], expressions[434]);
  {
    uint8_t t113[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[437] = BinaryenConst(the_module, BinaryenLiteralVec128(t113));
  }
  {
    uint8_t t114[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[438] = BinaryenConst(the_module, BinaryenLiteralVec128(t114));
  }
  expressions[439] = BinaryenBinary(the_module, 111, expressions[438], expressions[437]);
  {
    uint8_t t115[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[440] = BinaryenConst(the_module, BinaryenLiteralVec128(t115));
  }
  {
    uint8_t t116[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[441] = BinaryenConst(the_module, BinaryenLiteralVec128(t116));
  }
  expressions[442] = BinaryenBinary(the_module, 112, expressions[441], expressions[440]);
  {
    uint8_t t117[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[443] = BinaryenConst(the_module, BinaryenLiteralVec128(t117));
  }
  {
    uint8_t t118[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[444] = BinaryenConst(the_module, BinaryenLiteralVec128(t118));
  }
  expressions[445] = BinaryenBinary(the_module, 113, expressions[444], expressions[443]);
  {
    uint8_t t119[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[446] = BinaryenConst(the_module, BinaryenLiteralVec128(t119));
  }
  {
    uint8_t t120[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[447] = BinaryenConst(the_module, BinaryenLiteralVec128(t120));
  }
  expressions[448] = BinaryenBinary(the_module, 114, expressions[447], expressions[446]);
  {
    uint8_t t121[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[449] = BinaryenConst(the_module, BinaryenLiteralVec128(t121));
  }
  {
    uint8_t t122[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[450] = BinaryenConst(the_module, BinaryenLiteralVec128(t122));
  }
  expressions[451] = BinaryenBinary(the_module, 115, expressions[450], expressions[449]);
  {
    uint8_t t123[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[452] = BinaryenConst(the_module, BinaryenLiteralVec128(t123));
  }
  {
    uint8_t t124[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[453] = BinaryenConst(the_module, BinaryenLiteralVec128(t124));
  }
  expressions[454] = BinaryenBinary(the_module, 116, expressions[453], expressions[452]);
  {
    uint8_t t125[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[455] = BinaryenConst(the_module, BinaryenLiteralVec128(t125));
  }
  {
    uint8_t t126[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[456] = BinaryenConst(the_module, BinaryenLiteralVec128(t126));
  }
  expressions[457] = BinaryenBinary(the_module, 117, expressions[456], expressions[455]);
  {
    uint8_t t127[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[458] = BinaryenConst(the_module, BinaryenLiteralVec128(t127));
  }
  {
    uint8_t t128[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[459] = BinaryenConst(the_module, BinaryenLiteralVec128(t128));
  }
  expressions[460] = BinaryenBinary(the_module, 118, expressions[459], expressions[458]);
  {
    uint8_t t129[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[461] = BinaryenConst(the_module, BinaryenLiteralVec128(t129));
  }
  {
    uint8_t t130[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[462] = BinaryenConst(the_module, BinaryenLiteralVec128(t130));
  }
  expressions[463] = BinaryenBinary(the_module, 119, expressions[462], expressions[461]);
  {
    uint8_t t131[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[464] = BinaryenConst(the_module, BinaryenLiteralVec128(t131));
  }
  {
    uint8_t t132[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[465] = BinaryenConst(the_module, BinaryenLiteralVec128(t132));
  }
  expressions[466] = BinaryenBinary(the_module, 120, expressions[465], expressions[464]);
  {
    uint8_t t133[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[467] = BinaryenConst(the_module, BinaryenLiteralVec128(t133));
  }
  {
    uint8_t t134[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[468] = BinaryenConst(the_module, BinaryenLiteralVec128(t134));
  }
  expressions[469] = BinaryenBinary(the_module, 121, expressions[468], expressions[467]);
  {
    uint8_t t135[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[470] = BinaryenConst(the_module, BinaryenLiteralVec128(t135));
  }
  {
    uint8_t t136[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[471] = BinaryenConst(the_module, BinaryenLiteralVec128(t136));
  }
  expressions[472] = BinaryenBinary(the_module, 122, expressions[471], expressions[470]);
  {
    uint8_t t137[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[473] = BinaryenConst(the_module, BinaryenLiteralVec128(t137));
  }
  {
    uint8_t t138[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[474] = BinaryenConst(the_module, BinaryenLiteralVec128(t138));
  }
  expressions[475] = BinaryenBinary(the_module, 123, expressions[474], expressions[473]);
  {
    uint8_t t139[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[476] = BinaryenConst(the_module, BinaryenLiteralVec128(t139));
  }
  {
    uint8_t t140[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[477] = BinaryenConst(the_module, BinaryenLiteralVec128(t140));
  }
  expressions[478] = BinaryenBinary(the_module, 124, expressions[477], expressions[476]);
  {
    uint8_t t141[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[479] = BinaryenConst(the_module, BinaryenLiteralVec128(t141));
  }
  {
    uint8_t t142[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[480] = BinaryenConst(the_module, BinaryenLiteralVec128(t142));
  }
  expressions[481] = BinaryenBinary(the_module, 125, expressions[480], expressions[479]);
  {
    uint8_t t143[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[482] = BinaryenConst(the_module, BinaryenLiteralVec128(t143));
  }
  {
    uint8_t t144[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[483] = BinaryenConst(the_module, BinaryenLiteralVec128(t144));
  }
  expressions[484] = BinaryenBinary(the_module, 126, expressions[483], expressions[482]);
  {
    uint8_t t145[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[485] = BinaryenConst(the_module, BinaryenLiteralVec128(t145));
  }
  {
    uint8_t t146[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[486] = BinaryenConst(the_module, BinaryenLiteralVec128(t146));
  }
  expressions[487] = BinaryenBinary(the_module, 127, expressions[486], expressions[485]);
  {
    uint8_t t147[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[488] = BinaryenConst(the_module, BinaryenLiteralVec128(t147));
  }
  {
    uint8_t t148[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[489] = BinaryenConst(the_module, BinaryenLiteralVec128(t148));
  }
  expressions[490] = BinaryenBinary(the_module, 128, expressions[489], expressions[488]);
  {
    uint8_t t149[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[491] = BinaryenConst(the_module, BinaryenLiteralVec128(t149));
  }
  {
    uint8_t t150[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[492] = BinaryenConst(the_module, BinaryenLiteralVec128(t150));
  }
  expressions[493] = BinaryenBinary(the_module, 129, expressions[492], expressions[491]);
  {
    uint8_t t151[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[494] = BinaryenConst(the_module, BinaryenLiteralVec128(t151));
  }
  {
    uint8_t t152[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[495] = BinaryenConst(the_module, BinaryenLiteralVec128(t152));
  }
  expressions[496] = BinaryenBinary(the_module, 130, expressions[495], expressions[494]);
  {
    uint8_t t153[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[497] = BinaryenConst(the_module, BinaryenLiteralVec128(t153));
  }
  {
    uint8_t t154[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[498] = BinaryenConst(the_module, BinaryenLiteralVec128(t154));
  }
  expressions[499] = BinaryenBinary(the_module, 131, expressions[498], expressions[497]);
  {
    uint8_t t155[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[500] = BinaryenConst(the_module, BinaryenLiteralVec128(t155));
  }
  {
    uint8_t t156[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[501] = BinaryenConst(the_module, BinaryenLiteralVec128(t156));
  }
  expressions[502] = BinaryenBinary(the_module, 132, expressions[501], expressions[500]);
  {
    uint8_t t157[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[503] = BinaryenConst(the_module, BinaryenLiteralVec128(t157));
  }
  {
    uint8_t t158[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[504] = BinaryenConst(the_module, BinaryenLiteralVec128(t158));
  }
  expressions[505] = BinaryenBinary(the_module, 133, expressions[504], expressions[503]);
  {
    uint8_t t159[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[506] = BinaryenConst(the_module, BinaryenLiteralVec128(t159));
  }
  {
    uint8_t t160[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[507] = BinaryenConst(the_module, BinaryenLiteralVec128(t160));
  }
  expressions[508] = BinaryenBinary(the_module, 134, expressions[507], expressions[506]);
  {
    uint8_t t161[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[509] = BinaryenConst(the_module, BinaryenLiteralVec128(t161));
  }
  {
    uint8_t t162[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[510] = BinaryenConst(the_module, BinaryenLiteralVec128(t162));
  }
  expressions[511] = BinaryenBinary(the_module, 135, expressions[510], expressions[509]);
  {
    uint8_t t163[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[512] = BinaryenConst(the_module, BinaryenLiteralVec128(t163));
  }
  {
    uint8_t t164[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[513] = BinaryenConst(the_module, BinaryenLiteralVec128(t164));
  }
  expressions[514] = BinaryenBinary(the_module, 136, expressions[513], expressions[512]);
  {
    uint8_t t165[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[515] = BinaryenConst(the_module, BinaryenLiteralVec128(t165));
  }
  {
    uint8_t t166[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[516] = BinaryenConst(the_module, BinaryenLiteralVec128(t166));
  }
  expressions[517] = BinaryenBinary(the_module, 137, expressions[516], expressions[515]);
  {
    uint8_t t167[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[518] = BinaryenConst(the_module, BinaryenLiteralVec128(t167));
  }
  {
    uint8_t t168[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[519] = BinaryenConst(the_module, BinaryenLiteralVec128(t168));
  }
  expressions[520] = BinaryenBinary(the_module, 138, expressions[519], expressions[518]);
  {
    uint8_t t169[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[521] = BinaryenConst(the_module, BinaryenLiteralVec128(t169));
  }
  {
    uint8_t t170[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[522] = BinaryenConst(the_module, BinaryenLiteralVec128(t170));
  }
  expressions[523] = BinaryenBinary(the_module, 139, expressions[522], expressions[521]);
  {
    uint8_t t171[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[524] = BinaryenConst(the_module, BinaryenLiteralVec128(t171));
  }
  {
    uint8_t t172[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[525] = BinaryenConst(the_module, BinaryenLiteralVec128(t172));
  }
  expressions[526] = BinaryenBinary(the_module, 140, expressions[525], expressions[524]);
  {
    uint8_t t173[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[527] = BinaryenConst(the_module, BinaryenLiteralVec128(t173));
  }
  {
    uint8_t t174[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[528] = BinaryenConst(the_module, BinaryenLiteralVec128(t174));
  }
  expressions[529] = BinaryenBinary(the_module, 141, expressions[528], expressions[527]);
  {
    uint8_t t175[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[530] = BinaryenConst(the_module, BinaryenLiteralVec128(t175));
  }
  {
    uint8_t t176[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[531] = BinaryenConst(the_module, BinaryenLiteralVec128(t176));
  }
  expressions[532] = BinaryenBinary(the_module, 142, expressions[531], expressions[530]);
  {
    uint8_t t177[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[533] = BinaryenConst(the_module, BinaryenLiteralVec128(t177));
  }
  {
    uint8_t t178[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[534] = BinaryenConst(the_module, BinaryenLiteralVec128(t178));
  }
  expressions[535] = BinaryenBinary(the_module, 143, expressions[534], expressions[533]);
  {
    uint8_t t179[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[536] = BinaryenConst(the_module, BinaryenLiteralVec128(t179));
  }
  {
    uint8_t t180[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[537] = BinaryenConst(the_module, BinaryenLiteralVec128(t180));
  }
  expressions[538] = BinaryenBinary(the_module, 144, expressions[537], expressions[536]);
  {
    uint8_t t181[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[539] = BinaryenConst(the_module, BinaryenLiteralVec128(t181));
  }
  {
    uint8_t t182[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[540] = BinaryenConst(the_module, BinaryenLiteralVec128(t182));
  }
  expressions[541] = BinaryenBinary(the_module, 145, expressions[540], expressions[539]);
  {
    uint8_t t183[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[542] = BinaryenConst(the_module, BinaryenLiteralVec128(t183));
  }
  {
    uint8_t t184[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[543] = BinaryenConst(the_module, BinaryenLiteralVec128(t184));
  }
  expressions[544] = BinaryenBinary(the_module, 146, expressions[543], expressions[542]);
  {
    uint8_t t185[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[545] = BinaryenConst(the_module, BinaryenLiteralVec128(t185));
  }
  {
    uint8_t t186[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[546] = BinaryenConst(the_module, BinaryenLiteralVec128(t186));
  }
  expressions[547] = BinaryenBinary(the_module, 147, expressions[546], expressions[545]);
  {
    uint8_t t187[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[548] = BinaryenConst(the_module, BinaryenLiteralVec128(t187));
  }
  {
    uint8_t t188[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[549] = BinaryenConst(the_module, BinaryenLiteralVec128(t188));
  }
  expressions[550] = BinaryenBinary(the_module, 148, expressions[549], expressions[548]);
  {
    uint8_t t189[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[551] = BinaryenConst(the_module, BinaryenLiteralVec128(t189));
  }
  {
    uint8_t t190[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[552] = BinaryenConst(the_module, BinaryenLiteralVec128(t190));
  }
  expressions[553] = BinaryenBinary(the_module, 154, expressions[552], expressions[551]);
  {
    uint8_t t191[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[554] = BinaryenConst(the_module, BinaryenLiteralVec128(t191));
  }
  {
    uint8_t t192[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[555] = BinaryenConst(the_module, BinaryenLiteralVec128(t192));
  }
  expressions[556] = BinaryenBinary(the_module, 155, expressions[555], expressions[554]);
  {
    uint8_t t193[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[557] = BinaryenConst(the_module, BinaryenLiteralVec128(t193));
  }
  {
    uint8_t t194[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[558] = BinaryenConst(the_module, BinaryenLiteralVec128(t194));
  }
  expressions[559] = BinaryenBinary(the_module, 156, expressions[558], expressions[557]);
  {
    uint8_t t195[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[560] = BinaryenConst(the_module, BinaryenLiteralVec128(t195));
  }
  {
    uint8_t t196[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[561] = BinaryenConst(the_module, BinaryenLiteralVec128(t196));
  }
  expressions[562] = BinaryenBinary(the_module, 157, expressions[561], expressions[560]);
  {
    uint8_t t197[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[563] = BinaryenConst(the_module, BinaryenLiteralVec128(t197));
  }
  {
    uint8_t t198[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[564] = BinaryenConst(the_module, BinaryenLiteralVec128(t198));
  }
  expressions[565] = BinaryenBinary(the_module, 158, expressions[564], expressions[563]);
  {
    uint8_t t199[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[566] = BinaryenConst(the_module, BinaryenLiteralVec128(t199));
  }
  {
    uint8_t t200[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[567] = BinaryenConst(the_module, BinaryenLiteralVec128(t200));
  }
  expressions[568] = BinaryenBinary(the_module, 149, expressions[567], expressions[566]);
  {
    uint8_t t201[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[569] = BinaryenConst(the_module, BinaryenLiteralVec128(t201));
  }
  {
    uint8_t t202[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[570] = BinaryenConst(the_module, BinaryenLiteralVec128(t202));
  }
  expressions[571] = BinaryenBinary(the_module, 150, expressions[570], expressions[569]);
  {
    uint8_t t203[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[572] = BinaryenConst(the_module, BinaryenLiteralVec128(t203));
  }
  {
    uint8_t t204[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[573] = BinaryenConst(the_module, BinaryenLiteralVec128(t204));
  }
  expressions[574] = BinaryenBinary(the_module, 151, expressions[573], expressions[572]);
  {
    uint8_t t205[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[575] = BinaryenConst(the_module, BinaryenLiteralVec128(t205));
  }
  {
    uint8_t t206[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[576] = BinaryenConst(the_module, BinaryenLiteralVec128(t206));
  }
  expressions[577] = BinaryenBinary(the_module, 152, expressions[576], expressions[575]);
  {
    uint8_t t207[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[578] = BinaryenConst(the_module, BinaryenLiteralVec128(t207));
  }
  {
    uint8_t t208[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[579] = BinaryenConst(the_module, BinaryenLiteralVec128(t208));
  }
  expressions[580] = BinaryenBinary(the_module, 153, expressions[579], expressions[578]);
  {
    uint8_t t209[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[581] = BinaryenConst(the_module, BinaryenLiteralVec128(t209));
  }
  {
    uint8_t t210[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[582] = BinaryenConst(the_module, BinaryenLiteralVec128(t210));
  }
  expressions[583] = BinaryenBinary(the_module, 159, expressions[582], expressions[581]);
  {
    uint8_t t211[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[584] = BinaryenConst(the_module, BinaryenLiteralVec128(t211));
  }
  {
    uint8_t t212[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[585] = BinaryenConst(the_module, BinaryenLiteralVec128(t212));
  }
  expressions[586] = BinaryenBinary(the_module, 160, expressions[585], expressions[584]);
  {
    uint8_t t213[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[587] = BinaryenConst(the_module, BinaryenLiteralVec128(t213));
  }
  {
    uint8_t t214[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[588] = BinaryenConst(the_module, BinaryenLiteralVec128(t214));
  }
  expressions[589] = BinaryenBinary(the_module, 161, expressions[588], expressions[587]);
  {
    uint8_t t215[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[590] = BinaryenConst(the_module, BinaryenLiteralVec128(t215));
  }
  {
    uint8_t t216[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[591] = BinaryenConst(the_module, BinaryenLiteralVec128(t216));
  }
  expressions[592] = BinaryenBinary(the_module, 162, expressions[591], expressions[590]);
  {
    uint8_t t217[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[593] = BinaryenConst(the_module, BinaryenLiteralVec128(t217));
  }
  {
    uint8_t t218[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[594] = BinaryenConst(the_module, BinaryenLiteralVec128(t218));
  }
  expressions[595] = BinaryenBinary(the_module, 163, expressions[594], expressions[593]);
  {
    uint8_t t219[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[596] = BinaryenConst(the_module, BinaryenLiteralVec128(t219));
  }
  {
    uint8_t t220[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[597] = BinaryenConst(the_module, BinaryenLiteralVec128(t220));
  }
  expressions[598] = BinaryenBinary(the_module, 164, expressions[597], expressions[596]);
  {
    uint8_t t221[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[599] = BinaryenConst(the_module, BinaryenLiteralVec128(t221));
  }
  {
    uint8_t t222[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[600] = BinaryenConst(the_module, BinaryenLiteralVec128(t222));
  }
  expressions[601] = BinaryenBinary(the_module, 165, expressions[600], expressions[599]);
  {
    uint8_t t223[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[602] = BinaryenConst(the_module, BinaryenLiteralVec128(t223));
  }
  {
    uint8_t t224[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[603] = BinaryenConst(the_module, BinaryenLiteralVec128(t224));
  }
  expressions[604] = BinaryenBinary(the_module, 166, expressions[603], expressions[602]);
  {
    uint8_t t225[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[605] = BinaryenConst(the_module, BinaryenLiteralVec128(t225));
  }
  {
    uint8_t t226[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[606] = BinaryenConst(the_module, BinaryenLiteralVec128(t226));
  }
  expressions[607] = BinaryenBinary(the_module, 167, expressions[606], expressions[605]);
  {
    uint8_t t227[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[608] = BinaryenConst(the_module, BinaryenLiteralVec128(t227));
  }
  {
    uint8_t t228[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[609] = BinaryenConst(the_module, BinaryenLiteralVec128(t228));
  }
  expressions[610] = BinaryenBinary(the_module, 168, expressions[609], expressions[608]);
  {
    uint8_t t229[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[611] = BinaryenConst(the_module, BinaryenLiteralVec128(t229));
  }
  {
    uint8_t t230[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[612] = BinaryenConst(the_module, BinaryenLiteralVec128(t230));
  }
  expressions[613] = BinaryenBinary(the_module, 169, expressions[612], expressions[611]);
  {
    uint8_t t231[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[614] = BinaryenConst(the_module, BinaryenLiteralVec128(t231));
  }
  {
    uint8_t t232[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[615] = BinaryenConst(the_module, BinaryenLiteralVec128(t232));
  }
  expressions[616] = BinaryenBinary(the_module, 170, expressions[615], expressions[614]);
  {
    uint8_t t233[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[617] = BinaryenConst(the_module, BinaryenLiteralVec128(t233));
  }
  {
    uint8_t t234[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[618] = BinaryenConst(the_module, BinaryenLiteralVec128(t234));
  }
  expressions[619] = BinaryenBinary(the_module, 171, expressions[618], expressions[617]);
  {
    uint8_t t235[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[620] = BinaryenConst(the_module, BinaryenLiteralVec128(t235));
  }
  {
    uint8_t t236[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[621] = BinaryenConst(the_module, BinaryenLiteralVec128(t236));
  }
  expressions[622] = BinaryenBinary(the_module, 172, expressions[621], expressions[620]);
  {
    uint8_t t237[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[623] = BinaryenConst(the_module, BinaryenLiteralVec128(t237));
  }
  expressions[624] = BinaryenSIMDExtract(the_module, 0, expressions[623], 0);
  {
    uint8_t t238[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[625] = BinaryenConst(the_module, BinaryenLiteralVec128(t238));
  }
  expressions[626] = BinaryenSIMDExtract(the_module, 1, expressions[625], 0);
  {
    uint8_t t239[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[627] = BinaryenConst(the_module, BinaryenLiteralVec128(t239));
  }
  expressions[628] = BinaryenSIMDExtract(the_module, 2, expressions[627], 0);
  {
    uint8_t t240[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[629] = BinaryenConst(the_module, BinaryenLiteralVec128(t240));
  }
  expressions[630] = BinaryenSIMDExtract(the_module, 3, expressions[629], 0);
  {
    uint8_t t241[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[631] = BinaryenConst(the_module, BinaryenLiteralVec128(t241));
  }
  expressions[632] = BinaryenSIMDExtract(the_module, 4, expressions[631], 0);
  {
    uint8_t t242[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[633] = BinaryenConst(the_module, BinaryenLiteralVec128(t242));
  }
  expressions[634] = BinaryenSIMDExtract(the_module, 5, expressions[633], 0);
  {
    uint8_t t243[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[635] = BinaryenConst(the_module, BinaryenLiteralVec128(t243));
  }
  expressions[636] = BinaryenSIMDExtract(the_module, 6, expressions[635], 0);
  {
    uint8_t t244[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[637] = BinaryenConst(the_module, BinaryenLiteralVec128(t244));
  }
  expressions[638] = BinaryenSIMDExtract(the_module, 7, expressions[637], 0);
  expressions[639] = BinaryenConst(the_module, BinaryenLiteralInt32(42));
  {
    uint8_t t245[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[640] = BinaryenConst(the_module, BinaryenLiteralVec128(t245));
  }
  expressions[641] = BinaryenSIMDReplace(the_module, 0, expressions[640], 0, expressions[639]);
  expressions[642] = BinaryenConst(the_module, BinaryenLiteralInt32(42));
  {
    uint8_t t246[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[643] = BinaryenConst(the_module, BinaryenLiteralVec128(t246));
  }
  expressions[644] = BinaryenSIMDReplace(the_module, 1, expressions[643], 0, expressions[642]);
  expressions[645] = BinaryenConst(the_module, BinaryenLiteralInt32(42));
  {
    uint8_t t247[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[646] = BinaryenConst(the_module, BinaryenLiteralVec128(t247));
  }
  expressions[647] = BinaryenSIMDReplace(the_module, 2, expressions[646], 0, expressions[645]);
  expressions[648] = BinaryenConst(the_module, BinaryenLiteralInt64(42));
  {
    uint8_t t248[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[649] = BinaryenConst(the_module, BinaryenLiteralVec128(t248));
  }
  expressions[650] = BinaryenSIMDReplace(the_module, 3, expressions[649], 0, expressions[648]);
  expressions[651] = BinaryenConst(the_module, BinaryenLiteralFloat32(42));
  {
    uint8_t t249[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[652] = BinaryenConst(the_module, BinaryenLiteralVec128(t249));
  }
  expressions[653] = BinaryenSIMDReplace(the_module, 4, expressions[652], 0, expressions[651]);
  expressions[654] = BinaryenConst(the_module, BinaryenLiteralFloat64(42));
  {
    uint8_t t250[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[655] = BinaryenConst(the_module, BinaryenLiteralVec128(t250));
  }
  expressions[656] = BinaryenSIMDReplace(the_module, 5, expressions[655], 0, expressions[654]);
  {
    uint8_t t251[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[657] = BinaryenConst(the_module, BinaryenLiteralVec128(t251));
  }
  expressions[658] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[659] = BinaryenSIMDShift(the_module, 0, expressions[657], expressions[658]);
  {
    uint8_t t252[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[660] = BinaryenConst(the_module, BinaryenLiteralVec128(t252));
  }
  expressions[661] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[662] = BinaryenSIMDShift(the_module, 1, expressions[660], expressions[661]);
  {
    uint8_t t253[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[663] = BinaryenConst(the_module, BinaryenLiteralVec128(t253));
  }
  expressions[664] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[665] = BinaryenSIMDShift(the_module, 2, expressions[663], expressions[664]);
  {
    uint8_t t254[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[666] = BinaryenConst(the_module, BinaryenLiteralVec128(t254));
  }
  expressions[667] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[668] = BinaryenSIMDShift(the_module, 3, expressions[666], expressions[667]);
  {
    uint8_t t255[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[669] = BinaryenConst(the_module, BinaryenLiteralVec128(t255));
  }
  expressions[670] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[671] = BinaryenSIMDShift(the_module, 4, expressions[669], expressions[670]);
  {
    uint8_t t256[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[672] = BinaryenConst(the_module, BinaryenLiteralVec128(t256));
  }
  expressions[673] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[674] = BinaryenSIMDShift(the_module, 5, expressions[672], expressions[673]);
  {
    uint8_t t257[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[675] = BinaryenConst(the_module, BinaryenLiteralVec128(t257));
  }
  expressions[676] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[677] = BinaryenSIMDShift(the_module, 6, expressions[675], expressions[676]);
  {
    uint8_t t258[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[678] = BinaryenConst(the_module, BinaryenLiteralVec128(t258));
  }
  expressions[679] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[680] = BinaryenSIMDShift(the_module, 7, expressions[678], expressions[679]);
  {
    uint8_t t259[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[681] = BinaryenConst(the_module, BinaryenLiteralVec128(t259));
  }
  expressions[682] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[683] = BinaryenSIMDShift(the_module, 8, expressions[681], expressions[682]);
  {
    uint8_t t260[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[684] = BinaryenConst(the_module, BinaryenLiteralVec128(t260));
  }
  expressions[685] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[686] = BinaryenSIMDShift(the_module, 9, expressions[684], expressions[685]);
  {
    uint8_t t261[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[687] = BinaryenConst(the_module, BinaryenLiteralVec128(t261));
  }
  expressions[688] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[689] = BinaryenSIMDShift(the_module, 10, expressions[687], expressions[688]);
  {
    uint8_t t262[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[690] = BinaryenConst(the_module, BinaryenLiteralVec128(t262));
  }
  expressions[691] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[692] = BinaryenSIMDShift(the_module, 11, expressions[690], expressions[691]);
  expressions[693] = BinaryenConst(the_module, BinaryenLiteralInt32(128));
  expressions[694] = BinaryenSIMDLoad(the_module, 0, 0, 1, expressions[693]);
  expressions[695] = BinaryenConst(the_module, BinaryenLiteralInt32(128));
  expressions[696] = BinaryenSIMDLoad(the_module, 1, 16, 1, expressions[695]);
  expressions[697] = BinaryenConst(the_module, BinaryenLiteralInt32(128));
  expressions[698] = BinaryenSIMDLoad(the_module, 2, 16, 4, expressions[697]);
  expressions[699] = BinaryenConst(the_module, BinaryenLiteralInt32(128));
  expressions[700] = BinaryenSIMDLoad(the_module, 3, 0, 4, expressions[699]);
  expressions[701] = BinaryenConst(the_module, BinaryenLiteralInt32(128));
  expressions[702] = BinaryenSIMDLoad(the_module, 4, 0, 8, expressions[701]);
  expressions[703] = BinaryenConst(the_module, BinaryenLiteralInt32(128));
  expressions[704] = BinaryenSIMDLoad(the_module, 5, 0, 8, expressions[703]);
  expressions[705] = BinaryenConst(the_module, BinaryenLiteralInt32(128));
  expressions[706] = BinaryenSIMDLoad(the_module, 6, 0, 8, expressions[705]);
  expressions[707] = BinaryenConst(the_module, BinaryenLiteralInt32(128));
  expressions[708] = BinaryenSIMDLoad(the_module, 7, 0, 8, expressions[707]);
  expressions[709] = BinaryenConst(the_module, BinaryenLiteralInt32(128));
  expressions[710] = BinaryenSIMDLoad(the_module, 8, 0, 8, expressions[709]);
  expressions[711] = BinaryenConst(the_module, BinaryenLiteralInt32(128));
  expressions[712] = BinaryenSIMDLoad(the_module, 9, 0, 8, expressions[711]);
  {
    uint8_t t263[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[713] = BinaryenConst(the_module, BinaryenLiteralVec128(t263));
  }
  {
    uint8_t t264[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[714] = BinaryenConst(the_module, BinaryenLiteralVec128(t264));
  }
  {
    uint8_t mask[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    expressions[715] = BinaryenSIMDShuffle(the_module, expressions[713], expressions[714], mask);
  }
  {
    uint8_t t265[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[716] = BinaryenConst(the_module, BinaryenLiteralVec128(t265));
  }
  {
    uint8_t t266[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[717] = BinaryenConst(the_module, BinaryenLiteralVec128(t266));
  }
  {
    uint8_t t267[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[718] = BinaryenConst(the_module, BinaryenLiteralVec128(t267));
  }
  expressions[719] = BinaryenSIMDTernary(the_module, 0, expressions[716], expressions[717], expressions[718]);
  {
    uint8_t t268[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[720] = BinaryenConst(the_module, BinaryenLiteralVec128(t268));
  }
  {
    uint8_t t269[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[721] = BinaryenConst(the_module, BinaryenLiteralVec128(t269));
  }
  {
    uint8_t t270[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[722] = BinaryenConst(the_module, BinaryenLiteralVec128(t270));
  }
  expressions[723] = BinaryenSIMDTernary(the_module, 1, expressions[720], expressions[721], expressions[722]);
  {
    uint8_t t271[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[724] = BinaryenConst(the_module, BinaryenLiteralVec128(t271));
  }
  {
    uint8_t t272[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[725] = BinaryenConst(the_module, BinaryenLiteralVec128(t272));
  }
  {
    uint8_t t273[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[726] = BinaryenConst(the_module, BinaryenLiteralVec128(t273));
  }
  expressions[727] = BinaryenSIMDTernary(the_module, 2, expressions[724], expressions[725], expressions[726]);
  {
    uint8_t t274[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[728] = BinaryenConst(the_module, BinaryenLiteralVec128(t274));
  }
  {
    uint8_t t275[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[729] = BinaryenConst(the_module, BinaryenLiteralVec128(t275));
  }
  {
    uint8_t t276[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[730] = BinaryenConst(the_module, BinaryenLiteralVec128(t276));
  }
  expressions[731] = BinaryenSIMDTernary(the_module, 3, expressions[728], expressions[729], expressions[730]);
  {
    uint8_t t277[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[732] = BinaryenConst(the_module, BinaryenLiteralVec128(t277));
  }
  {
    uint8_t t278[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[733] = BinaryenConst(the_module, BinaryenLiteralVec128(t278));
  }
  {
    uint8_t t279[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
    expressions[734] = BinaryenConst(the_module, BinaryenLiteralVec128(t279));
  }
  expressions[735] = BinaryenSIMDTernary(the_module, 4, expressions[732], expressions[733], expressions[734]);
  expressions[736] = BinaryenConst(the_module, BinaryenLiteralInt32(1024));
  expressions[737] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  expressions[738] = BinaryenConst(the_module, BinaryenLiteralInt32(12));
  expressions[739] = BinaryenMemoryInit(the_module, 0, expressions[736], expressions[737], expressions[738]);
  expressions[740] = BinaryenDataDrop(the_module, 0);
  expressions[741] = BinaryenConst(the_module, BinaryenLiteralInt32(2048));
  expressions[742] = BinaryenConst(the_module, BinaryenLiteralInt32(1024));
  expressions[743] = BinaryenConst(the_module, BinaryenLiteralInt32(12));
  expressions[744] = BinaryenMemoryCopy(the_module, expressions[741], expressions[742], expressions[743]);
  expressions[745] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  expressions[746] = BinaryenConst(the_module, BinaryenLiteralInt32(42));
  expressions[747] = BinaryenConst(the_module, BinaryenLiteralInt32(1024));
  expressions[748] = BinaryenMemoryFill(the_module, expressions[745], expressions[746], expressions[747]);
  {
    BinaryenExpressionRef children[] = { 0 };
    expressions[749] = BinaryenBlock(the_module, NULL, children, 0, BinaryenTypeAuto());
  }
  expressions[750] = BinaryenIf(the_module, expressions[26], expressions[27], expressions[28]);
  expressions[751] = BinaryenIf(the_module, expressions[29], expressions[30], expressions[0]);
  expressions[752] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  expressions[753] = BinaryenLoop(the_module, "in", expressions[752]);
  expressions[754] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  expressions[755] = BinaryenLoop(the_module, NULL, expressions[754]);
  expressions[756] = BinaryenBreak(the_module, "the-value", expressions[31], expressions[32]);
  expressions[757] = BinaryenConst(the_module, BinaryenLiteralInt32(2));
  expressions[758] = BinaryenBreak(the_module, "the-nothing", expressions[757], expressions[0]);
  expressions[759] = BinaryenConst(the_module, BinaryenLiteralInt32(3));
  expressions[760] = BinaryenBreak(the_module, "the-value", expressions[0], expressions[759]);
  expressions[761] = BinaryenBreak(the_module, "the-nothing", expressions[0], expressions[0]);
  {
    const char* names[] = { "the-value" };
    expressions[762] = BinaryenSwitch(the_module, names, 1, "the-value", expressions[33], expressions[34]);
  }
  expressions[763] = BinaryenConst(the_module, BinaryenLiteralInt32(2));
  {
    const char* names[] = { "the-nothing" };
    expressions[764] = BinaryenSwitch(the_module, names, 1, "the-nothing", expressions[763], expressions[0]);
  }
  {
    BinaryenExpressionRef operands[] = { expressions[10], expressions[11], expressions[12], expressions[13] };
    expressions[765] = BinaryenCall(the_module, "kitchen()sinker", operands, 4, BinaryenTypeInt32());
  }
  expressions[766] = BinaryenUnary(the_module, 20, expressions[765]);
  {
    BinaryenExpressionRef operands[] = { expressions[8], expressions[9] };
    expressions[767] = BinaryenCall(the_module, "an-imported", operands, 2, BinaryenTypeFloat32());
  }
  expressions[768] = BinaryenUnary(the_module, 25, expressions[767]);
  expressions[769] = BinaryenUnary(the_module, 20, expressions[768]);
  expressions[770] = BinaryenConst(the_module, BinaryenLiteralInt32(2449));
  {
    BinaryenExpressionRef operands[] = { expressions[14], expressions[15], expressions[16], expressions[17] };
    expressions[771] = BinaryenCallIndirect(the_module, expressions[770], operands, 4, types[0], BinaryenTypeInt32());
  }
  expressions[772] = BinaryenUnary(the_module, 20, expressions[771]);
  expressions[773] = BinaryenLocalGet(the_module, 0, BinaryenTypeInt32());
  expressions[774] = BinaryenDrop(the_module, expressions[773]);
  expressions[775] = BinaryenConst(the_module, BinaryenLiteralInt32(101));
  expressions[776] = BinaryenLocalSet(the_module, 0, expressions[775]);
  expressions[777] = BinaryenConst(the_module, BinaryenLiteralInt32(102));
  expressions[778] = BinaryenLocalTee(the_module, 0, expressions[777], BinaryenTypeInt32());
  expressions[779] = BinaryenDrop(the_module, expressions[778]);
  expressions[780] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[781] = BinaryenLoad(the_module, 4, 0, 0, 0, BinaryenTypeInt32(), expressions[780]);
  expressions[782] = BinaryenConst(the_module, BinaryenLiteralInt32(8));
  expressions[783] = BinaryenLoad(the_module, 2, 1, 2, 1, BinaryenTypeInt64(), expressions[782]);
  expressions[784] = BinaryenConst(the_module, BinaryenLiteralInt32(2));
  expressions[785] = BinaryenLoad(the_module, 4, 0, 0, 0, BinaryenTypeFloat32(), expressions[784]);
  expressions[786] = BinaryenConst(the_module, BinaryenLiteralInt32(9));
  expressions[787] = BinaryenLoad(the_module, 8, 0, 2, 8, BinaryenTypeFloat64(), expressions[786]);
  expressions[788] = BinaryenStore(the_module, 4, 0, 0, expressions[38], expressions[39], BinaryenTypeInt32());
  expressions[789] = BinaryenStore(the_module, 8, 2, 4, expressions[40], expressions[41], BinaryenTypeInt64());
  expressions[790] = BinaryenSelect(the_module, expressions[35], expressions[36], expressions[37], BinaryenTypeAuto());
  expressions[791] = BinaryenConst(the_module, BinaryenLiteralInt32(1337));
  expressions[792] = BinaryenReturn(the_module, expressions[791]);
  {
    BinaryenExpressionRef operands[] = { expressions[10], expressions[11], expressions[12], expressions[13] };
    expressions[793] = BinaryenReturnCall(the_module, "kitchen()sinker", operands, 4, BinaryenTypeInt32());
  }
  expressions[794] = BinaryenConst(the_module, BinaryenLiteralInt32(2449));
  {
    BinaryenExpressionRef operands[] = { expressions[14], expressions[15], expressions[16], expressions[17] };
    expressions[795] = BinaryenReturnCallIndirect(the_module, expressions[794], operands, 4, types[0], BinaryenTypeInt32());
  }
  expressions[796] = BinaryenRefIsNull(the_module, expressions[42]);
  expressions[797] = BinaryenRefIsNull(the_module, expressions[43]);
  expressions[798] = BinaryenSelect(the_module, expressions[35], expressions[42], expressions[43], BinaryenTypeFuncref());
  expressions[799] = BinaryenTry(the_module, expressions[45], expressions[53]);
  expressions[800] = BinaryenAtomicLoad(the_module, 4, 0, BinaryenTypeInt32(), expressions[31]);
  expressions[801] = BinaryenAtomicStore(the_module, 4, 0, expressions[31], expressions[800], BinaryenTypeInt32());
  expressions[802] = BinaryenAtomicWait(the_module, expressions[31], expressions[31], expressions[41], BinaryenTypeInt32());
  expressions[803] = BinaryenDrop(the_module, expressions[802]);
  expressions[804] = BinaryenAtomicNotify(the_module, expressions[31], expressions[31]);
  expressions[805] = BinaryenDrop(the_module, expressions[804]);
  expressions[806] = BinaryenAtomicFence(the_module);
  {
    BinaryenExpressionRef operands[] = { expressions[18], expressions[19], expressions[20], expressions[21] };
    expressions[807] = BinaryenTupleMake(the_module, operands, 4);
  }
  {
    BinaryenExpressionRef operands[] = { expressions[22], expressions[23], expressions[24], expressions[25] };
    expressions[808] = BinaryenTupleMake(the_module, operands, 4);
  }
  expressions[809] = BinaryenTupleExtract(the_module, expressions[808], 2);
  expressions[810] = BinaryenPop(the_module, BinaryenTypeInt32());
  expressions[811] = BinaryenPush(the_module, expressions[810]);
  expressions[812] = BinaryenPop(the_module, BinaryenTypeInt64());
  expressions[813] = BinaryenPush(the_module, expressions[812]);
  expressions[814] = BinaryenPop(the_module, BinaryenTypeFloat32());
  expressions[815] = BinaryenPush(the_module, expressions[814]);
  expressions[816] = BinaryenPop(the_module, BinaryenTypeFloat64());
  expressions[817] = BinaryenPush(the_module, expressions[816]);
  expressions[818] = BinaryenPop(the_module, BinaryenTypeFuncref());
  expressions[819] = BinaryenPush(the_module, expressions[818]);
  expressions[820] = BinaryenPop(the_module, BinaryenTypeAnyref());
  expressions[821] = BinaryenPush(the_module, expressions[820]);
  expressions[822] = BinaryenPop(the_module, BinaryenTypeNullref());
  expressions[823] = BinaryenPush(the_module, expressions[822]);
  expressions[824] = BinaryenPop(the_module, BinaryenTypeExnref());
  expressions[825] = BinaryenPush(the_module, expressions[824]);
  expressions[826] = BinaryenPop(the_module, BinaryenTypeFuncref());
  expressions[827] = BinaryenPush(the_module, expressions[826]);
  expressions[828] = BinaryenPop(the_module, BinaryenTypeNullref());
  expressions[829] = BinaryenPush(the_module, expressions[828]);
  expressions[830] = BinaryenPop(the_module, BinaryenTypeExnref());
  expressions[831] = BinaryenPush(the_module, expressions[830]);
  expressions[832] = BinaryenNop(the_module);
  expressions[833] = BinaryenUnreachable(the_module);
  BinaryenExpressionPrint(expressions[61]);
(f32.neg
 (f32.const -33.61199951171875)
)
  {
    BinaryenExpressionRef children[] = { expressions[55], expressions[57], expressions[59], expressions[61], expressions[63], 
       expressions[65], expressions[67], expressions[69], expressions[71], expressions[73], expressions[75], 
       expressions[77], expressions[79], expressions[81], expressions[83], expressions[85], expressions[87], 
       expressions[89], expressions[91], expressions[93], expressions[95], expressions[97], expressions[99], 
       expressions[101], expressions[103], expressions[105], expressions[107], expressions[109], expressions[111], 
       expressions[113], expressions[115], expressions[117], expressions[119], expressions[121], expressions[123], 
       expressions[125], expressions[127], expressions[129], expressions[131], expressions[133], expressions[135], 
       expressions[137], expressions[139], expressions[141], expressions[143], expressions[145], expressions[147], 
       expressions[149], expressions[151], expressions[153], expressions[155], expressions[157], expressions[159], 
       expressions[161], expressions[163], expressions[165], expressions[167], expressions[169], expressions[171], 
       expressions[173], expressions[175], expressions[177], expressions[179], expressions[181], expressions[183], 
       expressions[185], expressions[187], expressions[189], expressions[191], expressions[193], expressions[195], 
       expressions[197], expressions[199], expressions[201], expressions[203], expressions[205], expressions[207], 
       expressions[209], expressions[211], expressions[213], expressions[215], expressions[217], expressions[219], 
       expressions[221], expressions[223], expressions[225], expressions[227], expressions[229], expressions[231], 
       expressions[233], expressions[235], expressions[238], expressions[241], expressions[244], expressions[247], 
       expressions[250], expressions[253], expressions[256], expressions[259], expressions[262], expressions[265], 
       expressions[268], expressions[271], expressions[274], expressions[277], expressions[280], expressions[283], 
       expressions[286], expressions[289], expressions[292], expressions[295], expressions[298], expressions[301], 
       expressions[304], expressions[307], expressions[310], expressions[313], expressions[316], expressions[319], 
       expressions[322], expressions[325], expressions[328], expressions[331], expressions[334], expressions[337], 
       expressions[340], expressions[343], expressions[346], expressions[349], expressions[352], expressions[355], 
       expressions[358], expressions[361], expressions[364], expressions[367], expressions[370], expressions[373], 
       expressions[376], expressions[379], expressions[382], expressions[385], expressions[388], expressions[391], 
       expressions[394], expressions[397], expressions[400], expressions[403], expressions[406], expressions[409], 
       expressions[412], expressions[415], expressions[418], expressions[421], expressions[424], expressions[427], 
       expressions[430], expressions[433], expressions[436], expressions[439], expressions[442], expressions[445], 
       expressions[448], expressions[451], expressions[454], expressions[457], expressions[460], expressions[463], 
       expressions[466], expressions[469], expressions[472], expressions[475], expressions[478], expressions[481], 
       expressions[484], expressions[487], expressions[490], expressions[493], expressions[496], expressions[499], 
       expressions[502], expressions[505], expressions[508], expressions[511], expressions[514], expressions[517], 
       expressions[520], expressions[523], expressions[526], expressions[529], expressions[532], expressions[535], 
       expressions[538], expressions[541], expressions[544], expressions[547], expressions[550], expressions[553], 
       expressions[556], expressions[559], expressions[562], expressions[565], expressions[568], expressions[571], 
       expressions[574], expressions[577], expressions[580], expressions[583], expressions[586], expressions[589], 
       expressions[592], expressions[595], expressions[598], expressions[601], expressions[604], expressions[607], 
       expressions[610], expressions[613], expressions[616], expressions[619], expressions[622], expressions[624], 
       expressions[626], expressions[628], expressions[630], expressions[632], expressions[634], expressions[636], 
       expressions[638], expressions[641], expressions[644], expressions[647], expressions[650], expressions[653], 
       expressions[656], expressions[659], expressions[662], expressions[665], expressions[668], expressions[671], 
       expressions[674], expressions[677], expressions[680], expressions[683], expressions[686], expressions[689], 
       expressions[692], expressions[694], expressions[696], expressions[698], expressions[700], expressions[702], 
       expressions[704], expressions[706], expressions[708], expressions[710], expressions[712], expressions[715], 
       expressions[719], expressions[723], expressions[727], expressions[731], expressions[735], expressions[739], 
       expressions[740], expressions[744], expressions[748], expressions[749], expressions[750], expressions[751], 
       expressions[753], expressions[755], expressions[756], expressions[758], expressions[760], expressions[761], 
       expressions[762], expressions[764], expressions[766], expressions[769], expressions[772], expressions[774], 
       expressions[776], expressions[779], expressions[781], expressions[783], expressions[785], expressions[787], 
       expressions[788], expressions[789], expressions[790], expressions[792], expressions[793], expressions[795], 
       expressions[796], expressions[797], expressions[798], expressions[799], expressions[801], expressions[803], 
       expressions[805], expressions[806], expressions[807], expressions[809], expressions[811], expressions[813], 
       expressions[815], expressions[817], expressions[819], expressions[821], expressions[823], expressions[825], 
       expressions[827], expressions[829], expressions[831], expressions[832], expressions[833] };
    expressions[834] = BinaryenBlock(the_module, "the-value", children, 316, BinaryenTypeAuto());
  }
  expressions[835] = BinaryenDrop(the_module, expressions[834]);
  {
    BinaryenExpressionRef children[] = { expressions[835] };
    expressions[836] = BinaryenBlock(the_module, "the-nothing", children, 1, BinaryenTypeAuto());
  }
  expressions[837] = BinaryenConst(the_module, BinaryenLiteralInt32(42));
  {
    BinaryenExpressionRef children[] = { expressions[836], expressions[837] };
    expressions[838] = BinaryenBlock(the_module, "the-body", children, 2, BinaryenTypeAuto());
  }
  {
    BinaryenType varTypes[] = { BinaryenTypeInt32(), BinaryenTypeExnref() };
    functions[0] = BinaryenAddFunction(the_module, "kitchen()sinker", types[0], BinaryenTypeInt32(), varTypes, 2, expressions[838]);
  }
  expressions[839] = BinaryenConst(the_module, BinaryenLiteralInt32(7));
  globals[0] = BinaryenAddGlobal(the_module, "a-global", BinaryenTypeInt32(), 0, expressions[839]);
  expressions[840] = BinaryenConst(the_module, BinaryenLiteralFloat32(7.5));
  globals[1] = BinaryenAddGlobal(the_module, "a-mutable-global", BinaryenTypeFloat32(), 1, expressions[840]);
  {
    BinaryenType t280[] = {BinaryenTypeInt32(), BinaryenTypeFloat64()};
    types[1] = BinaryenTypeCreate(t280, 2);
  }
  BinaryenAddFunctionImport(the_module, "an-imported", "module", "base", types[1], BinaryenTypeFloat32());
  exports[0] = BinaryenAddFunctionExport(the_module, "kitchen()sinker", "kitchen_sinker");
  BinaryenFunctionGetName(functions[0]);
  expressions[841] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  {
    const char* funcNames[] = { "kitchen()sinker" };
    BinaryenSetFunctionTable(the_module, 1, 1, funcNames, 1, expressions[841]);
  }
  expressions[842] = BinaryenConst(the_module, BinaryenLiteralInt32(10));
  {
    const char segment0[] = { 104, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100 };
    const char segment1[] = { 73, 32, 97, 109, 32, 112, 97, 115, 115, 105, 118, 101 };
    const char* segments[] = { segment0, segment1 };
    int8_t segmentPassive[] = { 0, 1 };
    BinaryenExpressionRef segmentOffsets[] = { expressions[842], expressions[0] };
    BinaryenIndex segmentSizes[] = { 12, 12 };
    BinaryenSetMemory(the_module, 1, 256, "mem", segments, segmentPassive, segmentOffsets, segmentSizes, 2, 1);
  }
  expressions[843] = BinaryenNop(the_module);
  {
    BinaryenType varTypes[] = { 0 };
    functions[1] = BinaryenAddFunction(the_module, "starter", BinaryenTypeNone(), BinaryenTypeNone(), varTypes, 0, expressions[843]);
  }
  BinaryenSetStart(the_module, functions[1]);
  BinaryenModuleAutoDrop(the_module);
  BinaryenModuleSetFeatures(the_module, 1023);
  BinaryenModuleGetFeatures(the_module);
  BinaryenModuleValidate(the_module);
  BinaryenModulePrint(the_module);
(module
 (type $i32_i64_f32_f64_=>_i32 (func (param i32 i64 f32 f64) (result i32)))
 (type $none_=>_none (func))
 (type $i32_=>_none (func (param i32)))
 (type $i32_f64_=>_f32 (func (param i32 f64) (result f32)))
 (import "module" "base" (func $an-imported (param i32 f64) (result f32)))
 (memory $0 (shared 1 256))
 (data (i32.const 10) "hello, world")
 (data passive "I am passive")
 (table $0 1 1 funcref)
 (elem (i32.const 0) "$kitchen()sinker")
 (global $a-global i32 (i32.const 7))
 (global $a-mutable-global (mut f32) (f32.const 7.5))
 (event $a-event (attr 0) (param i32))
 (export "kitchen_sinker" (func "$kitchen()sinker"))
 (export "mem" (memory $0))
 (start $starter)
 (func "$kitchen()sinker" (param $0 i32) (param $1 i64) (param $2 f32) (param $3 f64) (result i32)
  (local $4 i32)
  (local $5 exnref)
  (block $the-body (result i32)
   (block $the-nothing
    (drop
     (block $the-value (result i32)
      (drop
       (i32.clz
        (i32.const -10)
       )
      )
      (drop
       (i64.ctz
        (i64.const -22)
       )
      )
      (drop
       (i32.popcnt
        (i32.const -10)
       )
      )
      (drop
       (f32.neg
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (f64.abs
        (f64.const -9005.841)
       )
      )
      (drop
       (f32.ceil
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (f64.floor
        (f64.const -9005.841)
       )
      )
      (drop
       (f32.trunc
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (f32.nearest
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (f64.sqrt
        (f64.const -9005.841)
       )
      )
      (drop
       (i32.eqz
        (i32.const -10)
       )
      )
      (drop
       (i64.extend_i32_s
        (i32.const -10)
       )
      )
      (drop
       (i64.extend_i32_u
        (i32.const -10)
       )
      )
      (drop
       (i32.wrap_i64
        (i64.const -22)
       )
      )
      (drop
       (i32.trunc_f32_s
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (i64.trunc_f32_s
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (i32.trunc_f32_u
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (i64.trunc_f32_u
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (i32.trunc_f64_s
        (f64.const -9005.841)
       )
      )
      (drop
       (i64.trunc_f64_s
        (f64.const -9005.841)
       )
      )
      (drop
       (i32.trunc_f64_u
        (f64.const -9005.841)
       )
      )
      (drop
       (i64.trunc_f64_u
        (f64.const -9005.841)
       )
      )
      (drop
       (i32.trunc_sat_f32_s
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (i64.trunc_sat_f32_s
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (i32.trunc_sat_f32_u
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (i64.trunc_sat_f32_u
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (i32.trunc_sat_f64_s
        (f64.const -9005.841)
       )
      )
      (drop
       (i64.trunc_sat_f64_s
        (f64.const -9005.841)
       )
      )
      (drop
       (i32.trunc_sat_f64_u
        (f64.const -9005.841)
       )
      )
      (drop
       (i64.trunc_sat_f64_u
        (f64.const -9005.841)
       )
      )
      (drop
       (i32.reinterpret_f32
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (i64.reinterpret_f64
        (f64.const -9005.841)
       )
      )
      (drop
       (f32.convert_i32_s
        (i32.const -10)
       )
      )
      (drop
       (f64.convert_i32_s
        (i32.const -10)
       )
      )
      (drop
       (f32.convert_i32_u
        (i32.const -10)
       )
      )
      (drop
       (f64.convert_i32_u
        (i32.const -10)
       )
      )
      (drop
       (f32.convert_i64_s
        (i64.const -22)
       )
      )
      (drop
       (f64.convert_i64_s
        (i64.const -22)
       )
      )
      (drop
       (f32.convert_i64_u
        (i64.const -22)
       )
      )
      (drop
       (f64.convert_i64_u
        (i64.const -22)
       )
      )
      (drop
       (f64.promote_f32
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (f32.demote_f64
        (f64.const -9005.841)
       )
      )
      (drop
       (f32.reinterpret_i32
        (i32.const -10)
       )
      )
      (drop
       (f64.reinterpret_i64
        (i64.const -22)
       )
      )
      (drop
       (i8x16.splat
        (i32.const -10)
       )
      )
      (drop
       (i16x8.splat
        (i32.const -10)
       )
      )
      (drop
       (i32x4.splat
        (i32.const -10)
       )
      )
      (drop
       (i64x2.splat
        (i64.const -22)
       )
      )
      (drop
       (f32x4.splat
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (f64x2.splat
        (f64.const -9005.841)
       )
      )
      (drop
       (v128.not
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.abs
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.neg
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.any_true
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.all_true
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.bitmask
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.abs
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.neg
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.any_true
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.all_true
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.bitmask
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.abs
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.neg
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.any_true
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.all_true
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.bitmask
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i64x2.neg
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i64x2.any_true
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i64x2.all_true
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.abs
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.neg
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.sqrt
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.abs
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.neg
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.sqrt
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.trunc_sat_f32x4_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.trunc_sat_f32x4_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i64x2.trunc_sat_f64x2_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i64x2.trunc_sat_f64x2_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.convert_i32x4_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.convert_i32x4_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.convert_i64x2_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.convert_i64x2_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.widen_low_i8x16_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.widen_high_i8x16_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.widen_low_i8x16_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.widen_high_i8x16_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.widen_low_i16x8_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.widen_high_i16x8_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.widen_low_i16x8_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.widen_high_i16x8_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32.add
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (f64.sub
        (f64.const -9005.841)
        (f64.const -9007.333)
       )
      )
      (drop
       (i32.div_s
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (i64.div_u
        (i64.const -22)
        (i64.const -23)
       )
      )
      (drop
       (i64.rem_s
        (i64.const -22)
        (i64.const -23)
       )
      )
      (drop
       (i32.rem_u
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (i32.and
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (i64.or
        (i64.const -22)
        (i64.const -23)
       )
      )
      (drop
       (i32.xor
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (i64.shl
        (i64.const -22)
        (i64.const -23)
       )
      )
      (drop
       (i64.shr_u
        (i64.const -22)
        (i64.const -23)
       )
      )
      (drop
       (i32.shr_s
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (i32.rotl
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (i64.rotr
        (i64.const -22)
        (i64.const -23)
       )
      )
      (drop
       (f32.div
        (f32.const -33.61199951171875)
        (f32.const -62.5)
       )
      )
      (drop
       (f64.copysign
        (f64.const -9005.841)
        (f64.const -9007.333)
       )
      )
      (drop
       (f32.min
        (f32.const -33.61199951171875)
        (f32.const -62.5)
       )
      )
      (drop
       (f64.max
        (f64.const -9005.841)
        (f64.const -9007.333)
       )
      )
      (drop
       (i32.eq
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (f32.ne
        (f32.const -33.61199951171875)
        (f32.const -62.5)
       )
      )
      (drop
       (i32.lt_s
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (i64.lt_u
        (i64.const -22)
        (i64.const -23)
       )
      )
      (drop
       (i64.le_s
        (i64.const -22)
        (i64.const -23)
       )
      )
      (drop
       (i32.le_u
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (i64.gt_s
        (i64.const -22)
        (i64.const -23)
       )
      )
      (drop
       (i32.gt_u
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (i32.ge_s
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (i64.ge_u
        (i64.const -22)
        (i64.const -23)
       )
      )
      (drop
       (f32.lt
        (f32.const -33.61199951171875)
        (f32.const -62.5)
       )
      )
      (drop
       (f64.le
        (f64.const -9005.841)
        (f64.const -9007.333)
       )
      )
      (drop
       (f64.gt
        (f64.const -9005.841)
        (f64.const -9007.333)
       )
      )
      (drop
       (f32.ge
        (f32.const -33.61199951171875)
        (f32.const -62.5)
       )
      )
      (drop
       (i8x16.eq
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.ne
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.lt_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.lt_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.gt_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.gt_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.le_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.le_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.ge_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.ge_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.eq
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.ne
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.lt_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.lt_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.gt_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.gt_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.le_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.le_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.ge_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.ge_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.eq
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.ne
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.lt_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.lt_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.gt_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.gt_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.le_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.le_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.ge_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.ge_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.eq
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.ne
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.lt
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.gt
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.le
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.ge
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.eq
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.ne
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.lt
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.gt
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.le
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.ge
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (v128.and
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (v128.or
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (v128.xor
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (v128.andnot
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.add
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.add_saturate_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.add_saturate_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.sub
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.sub_saturate_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.sub_saturate_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.mul
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.min_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.min_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.max_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.max_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.avgr_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.add
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.add_saturate_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.add_saturate_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.sub
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.sub_saturate_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.sub_saturate_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.mul
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.min_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.min_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.max_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.max_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.avgr_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.add
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.sub
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.mul
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i64x2.add
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i64x2.sub
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.add
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.sub
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.mul
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.min_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.min_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.max_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.max_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.dot_i16x8_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.div
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.min
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.max
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.add
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.sub
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.mul
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.div
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.min
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.max
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.narrow_i16x8_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.narrow_i16x8_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.narrow_i32x4_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.narrow_i32x4_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (v8x16.swizzle
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.extract_lane_s 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.extract_lane_u 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.extract_lane_s 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.extract_lane_u 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.extract_lane 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i64x2.extract_lane 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.extract_lane 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.extract_lane 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.replace_lane 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 42)
       )
      )
      (drop
       (i16x8.replace_lane 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 42)
       )
      )
      (drop
       (i32x4.replace_lane 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 42)
       )
      )
      (drop
       (i64x2.replace_lane 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i64.const 42)
       )
      )
      (drop
       (f32x4.replace_lane 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (f32.const 42)
       )
      )
      (drop
       (f64x2.replace_lane 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (f64.const 42)
       )
      )
      (drop
       (i8x16.shl
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (i8x16.shr_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (i8x16.shr_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (i16x8.shl
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (i16x8.shr_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (i16x8.shr_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (i32x4.shl
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (i32x4.shr_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (i32x4.shr_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (i64x2.shl
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (i64x2.shr_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (i64x2.shr_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (v8x16.load_splat
        (i32.const 128)
       )
      )
      (drop
       (v16x8.load_splat offset=16 align=1
        (i32.const 128)
       )
      )
      (drop
       (v32x4.load_splat offset=16
        (i32.const 128)
       )
      )
      (drop
       (v64x2.load_splat align=4
        (i32.const 128)
       )
      )
      (drop
       (i16x8.load8x8_s
        (i32.const 128)
       )
      )
      (drop
       (i16x8.load8x8_u
        (i32.const 128)
       )
      )
      (drop
       (i32x4.load16x4_s
        (i32.const 128)
       )
      )
      (drop
       (i32x4.load16x4_u
        (i32.const 128)
       )
      )
      (drop
       (i64x2.load32x2_s
        (i32.const 128)
       )
      )
      (drop
       (i64x2.load32x2_u
        (i32.const 128)
       )
      )
      (drop
       (v8x16.shuffle 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (v128.bitselect
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.qfma
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.qfms
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.qfma
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.qfms
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (memory.init 0
       (i32.const 1024)
       (i32.const 0)
       (i32.const 12)
      )
      (data.drop 0)
      (memory.copy
       (i32.const 2048)
       (i32.const 1024)
       (i32.const 12)
      )
      (memory.fill
       (i32.const 0)
       (i32.const 42)
       (i32.const 1024)
      )
      (block
      )
      (if
       (i32.const 1)
       (drop
        (i32.const 2)
       )
       (drop
        (i32.const 3)
       )
      )
      (if
       (i32.const 4)
       (drop
        (i32.const 5)
       )
      )
      (drop
       (loop $in (result i32)
        (i32.const 0)
       )
      )
      (drop
       (loop (result i32)
        (i32.const 0)
       )
      )
      (drop
       (br_if $the-value
        (i32.const 1)
        (i32.const 0)
       )
      )
      (br_if $the-nothing
       (i32.const 2)
      )
      (br $the-value
       (i32.const 3)
      )
      (br $the-nothing)
      (br_table $the-value $the-value
       (i32.const 1)
       (i32.const 0)
      )
      (br_table $the-nothing $the-nothing
       (i32.const 2)
      )
      (drop
       (i32.eqz
        (call "$kitchen()sinker"
         (i32.const 13)
         (i64.const 37)
         (f32.const 1.2999999523162842)
         (f64.const 3.7)
        )
       )
      )
      (drop
       (i32.eqz
        (i32.trunc_f32_s
         (call $an-imported
          (i32.const 13)
          (f64.const 3.7)
         )
        )
       )
      )
      (drop
       (i32.eqz
        (call_indirect (type $i32_i64_f32_f64_=>_i32)
         (i32.const 13)
         (i64.const 37)
         (f32.const 1.2999999523162842)
         (f64.const 3.7)
         (i32.const 2449)
        )
       )
      )
      (drop
       (local.get $0)
      )
      (local.set $0
       (i32.const 101)
      )
      (drop
       (local.tee $0
        (i32.const 102)
       )
      )
      (drop
       (i32.load
        (i32.const 1)
       )
      )
      (drop
       (i64.load16_s offset=2 align=1
        (i32.const 8)
       )
      )
      (drop
       (f32.load
        (i32.const 2)
       )
      )
      (drop
       (f64.load offset=2
        (i32.const 9)
       )
      )
      (i32.store
       (i32.const 10)
       (i32.const 11)
      )
      (i64.store offset=2 align=4
       (i32.const 110)
       (i64.const 111)
      )
      (drop
       (select
        (i32.const 3)
        (i32.const 5)
        (i32.const 1)
       )
      )
      (return
       (i32.const 1337)
      )
      (return_call "$kitchen()sinker"
       (i32.const 13)
       (i64.const 37)
       (f32.const 1.2999999523162842)
       (f64.const 3.7)
      )
      (return_call_indirect (type $i32_i64_f32_f64_=>_i32)
       (i32.const 13)
       (i64.const 37)
       (f32.const 1.2999999523162842)
       (f64.const 3.7)
       (i32.const 2449)
      )
      (drop
       (ref.is_null
        (ref.null)
       )
      )
      (drop
       (ref.is_null
        (ref.func "$kitchen()sinker")
       )
      )
      (drop
       (select (result funcref)
        (ref.null)
        (ref.func "$kitchen()sinker")
        (i32.const 1)
       )
      )
      (try
       (throw $a-event
        (i32.const 0)
       )
       (catch
        (local.set $5
         (exnref.pop)
        )
        (drop
         (block $try-block (result i32)
          (rethrow
           (br_on_exn $try-block $a-event
            (local.get $5)
           )
          )
         )
        )
       )
      )
      (i32.atomic.store
       (i32.const 0)
       (i32.atomic.load
        (i32.const 0)
       )
      )
      (drop
       (i32.atomic.wait
        (i32.const 0)
        (i32.const 0)
        (i64.const 111)
       )
      )
      (drop
       (atomic.notify
        (i32.const 0)
        (i32.const 0)
       )
      )
      (atomic.fence)
      (drop
       (tuple.make
        (i32.const 13)
        (i64.const 37)
        (f32.const 1.2999999523162842)
        (f64.const 3.7)
       )
      )
      (drop
       (tuple.extract 2
        (tuple.make
         (i32.const 13)
         (i64.const 37)
         (f32.const 1.2999999523162842)
         (f64.const 3.7)
        )
       )
      )
      (push
       (i32.pop)
      )
      (push
       (i64.pop)
      )
      (push
       (f32.pop)
      )
      (push
       (f64.pop)
      )
      (push
       (funcref.pop)
      )
      (push
       (anyref.pop)
      )
      (push
       (nullref.pop)
      )
      (push
       (exnref.pop)
      )
      (push
       (funcref.pop)
      )
      (push
       (nullref.pop)
      )
      (push
       (exnref.pop)
      )
      (nop)
      (unreachable)
     )
    )
   )
   (i32.const 42)
  )
 )
 (func $starter
  (nop)
 )
)
  BinaryenModuleDispose(the_module);
  types.clear();
  expressions.clear();
  functions.clear();
  globals.clear();
  events.clear();
  exports.clear();
  relooperBlocks.clear();
  the_module = BinaryenModuleCreate();
  expressions[size_t(NULL)] = BinaryenExpressionRef(NULL);
  BinaryenAddFunctionImport(the_module, "check", "module", "check", BinaryenTypeInt32(), BinaryenTypeNone());
  the_relooper = RelooperCreate(the_module);
  expressions[1] = BinaryenConst(the_module, BinaryenLiteralInt32(1337));
  {
    BinaryenExpressionRef operands[] = { expressions[1] };
    expressions[2] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[0] = RelooperAddBlock(the_relooper, expressions[2]);
  expressions[3] = RelooperRenderAndDispose(the_relooper, relooperBlocks[0], 0);
  {
    BinaryenType varTypes[] = { BinaryenTypeInt32() };
    functions[0] = BinaryenAddFunction(the_module, "just-one-block", BinaryenTypeNone(), BinaryenTypeNone(), varTypes, 1, expressions[3]);
  }
  the_relooper = RelooperCreate(the_module);
  expressions[4] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  {
    BinaryenExpressionRef operands[] = { expressions[4] };
    expressions[5] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[0] = RelooperAddBlock(the_relooper, expressions[5]);
  expressions[6] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  {
    BinaryenExpressionRef operands[] = { expressions[6] };
    expressions[7] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[1] = RelooperAddBlock(the_relooper, expressions[7]);
  RelooperAddBranch(relooperBlocks[0], relooperBlocks[1], expressions[0], expressions[0]);
  expressions[8] = RelooperRenderAndDispose(the_relooper, relooperBlocks[0], 0);
  {
    BinaryenType varTypes[] = { BinaryenTypeInt32() };
    functions[1] = BinaryenAddFunction(the_module, "two-blocks", BinaryenTypeNone(), BinaryenTypeNone(), varTypes, 1, expressions[8]);
  }
  the_relooper = RelooperCreate(the_module);
  expressions[9] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  {
    BinaryenExpressionRef operands[] = { expressions[9] };
    expressions[10] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[0] = RelooperAddBlock(the_relooper, expressions[10]);
  expressions[11] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  {
    BinaryenExpressionRef operands[] = { expressions[11] };
    expressions[12] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[1] = RelooperAddBlock(the_relooper, expressions[12]);
  expressions[13] = BinaryenConst(the_module, BinaryenLiteralInt32(77));
  expressions[14] = BinaryenDrop(the_module, expressions[13]);
  RelooperAddBranch(relooperBlocks[0], relooperBlocks[1], expressions[0], expressions[14]);
  expressions[15] = RelooperRenderAndDispose(the_relooper, relooperBlocks[0], 0);
  {
    BinaryenType varTypes[] = { BinaryenTypeInt32() };
    functions[2] = BinaryenAddFunction(the_module, "two-blocks-plus-code", BinaryenTypeNone(), BinaryenTypeNone(), varTypes, 1, expressions[15]);
  }
  the_relooper = RelooperCreate(the_module);
  expressions[16] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  {
    BinaryenExpressionRef operands[] = { expressions[16] };
    expressions[17] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[0] = RelooperAddBlock(the_relooper, expressions[17]);
  expressions[18] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  {
    BinaryenExpressionRef operands[] = { expressions[18] };
    expressions[19] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[1] = RelooperAddBlock(the_relooper, expressions[19]);
  RelooperAddBranch(relooperBlocks[0], relooperBlocks[1], expressions[0], expressions[0]);
  RelooperAddBranch(relooperBlocks[1], relooperBlocks[0], expressions[0], expressions[0]);
  expressions[20] = RelooperRenderAndDispose(the_relooper, relooperBlocks[0], 0);
  {
    BinaryenType varTypes[] = { BinaryenTypeInt32() };
    functions[3] = BinaryenAddFunction(the_module, "loop", BinaryenTypeNone(), BinaryenTypeNone(), varTypes, 1, expressions[20]);
  }
  the_relooper = RelooperCreate(the_module);
  expressions[21] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  {
    BinaryenExpressionRef operands[] = { expressions[21] };
    expressions[22] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[0] = RelooperAddBlock(the_relooper, expressions[22]);
  expressions[23] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  {
    BinaryenExpressionRef operands[] = { expressions[23] };
    expressions[24] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[1] = RelooperAddBlock(the_relooper, expressions[24]);
  expressions[25] = BinaryenConst(the_module, BinaryenLiteralInt32(33));
  expressions[26] = BinaryenDrop(the_module, expressions[25]);
  RelooperAddBranch(relooperBlocks[0], relooperBlocks[1], expressions[0], expressions[26]);
  expressions[27] = BinaryenConst(the_module, BinaryenLiteralInt32(-66));
  expressions[28] = BinaryenDrop(the_module, expressions[27]);
  RelooperAddBranch(relooperBlocks[1], relooperBlocks[0], expressions[0], expressions[28]);
  expressions[29] = RelooperRenderAndDispose(the_relooper, relooperBlocks[0], 0);
  {
    BinaryenType varTypes[] = { BinaryenTypeInt32() };
    functions[4] = BinaryenAddFunction(the_module, "loop-plus-code", BinaryenTypeNone(), BinaryenTypeNone(), varTypes, 1, expressions[29]);
  }
  the_relooper = RelooperCreate(the_module);
  expressions[30] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  {
    BinaryenExpressionRef operands[] = { expressions[30] };
    expressions[31] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[0] = RelooperAddBlock(the_relooper, expressions[31]);
  expressions[32] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  {
    BinaryenExpressionRef operands[] = { expressions[32] };
    expressions[33] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[1] = RelooperAddBlock(the_relooper, expressions[33]);
  expressions[34] = BinaryenConst(the_module, BinaryenLiteralInt32(2));
  {
    BinaryenExpressionRef operands[] = { expressions[34] };
    expressions[35] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[2] = RelooperAddBlock(the_relooper, expressions[35]);
  expressions[36] = BinaryenConst(the_module, BinaryenLiteralInt32(55));
  RelooperAddBranch(relooperBlocks[0], relooperBlocks[1], expressions[36], expressions[0]);
  RelooperAddBranch(relooperBlocks[0], relooperBlocks[2], expressions[0], expressions[0]);
  expressions[37] = RelooperRenderAndDispose(the_relooper, relooperBlocks[0], 0);
  {
    BinaryenType varTypes[] = { BinaryenTypeInt32() };
    functions[5] = BinaryenAddFunction(the_module, "split", BinaryenTypeNone(), BinaryenTypeNone(), varTypes, 1, expressions[37]);
  }
  the_relooper = RelooperCreate(the_module);
  expressions[38] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  {
    BinaryenExpressionRef operands[] = { expressions[38] };
    expressions[39] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[0] = RelooperAddBlock(the_relooper, expressions[39]);
  expressions[40] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  {
    BinaryenExpressionRef operands[] = { expressions[40] };
    expressions[41] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[1] = RelooperAddBlock(the_relooper, expressions[41]);
  expressions[42] = BinaryenConst(the_module, BinaryenLiteralInt32(2));
  {
    BinaryenExpressionRef operands[] = { expressions[42] };
    expressions[43] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[2] = RelooperAddBlock(the_relooper, expressions[43]);
  expressions[44] = BinaryenConst(the_module, BinaryenLiteralInt32(10));
  expressions[45] = BinaryenDrop(the_module, expressions[44]);
  expressions[46] = BinaryenConst(the_module, BinaryenLiteralInt32(55));
  RelooperAddBranch(relooperBlocks[0], relooperBlocks[1], expressions[46], expressions[45]);
  expressions[47] = BinaryenConst(the_module, BinaryenLiteralInt32(20));
  expressions[48] = BinaryenDrop(the_module, expressions[47]);
  RelooperAddBranch(relooperBlocks[0], relooperBlocks[2], expressions[0], expressions[48]);
  expressions[49] = RelooperRenderAndDispose(the_relooper, relooperBlocks[0], 0);
  {
    BinaryenType varTypes[] = { BinaryenTypeInt32() };
    functions[6] = BinaryenAddFunction(the_module, "split-plus-code", BinaryenTypeNone(), BinaryenTypeNone(), varTypes, 1, expressions[49]);
  }
  the_relooper = RelooperCreate(the_module);
  expressions[50] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  {
    BinaryenExpressionRef operands[] = { expressions[50] };
    expressions[51] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[0] = RelooperAddBlock(the_relooper, expressions[51]);
  expressions[52] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  {
    BinaryenExpressionRef operands[] = { expressions[52] };
    expressions[53] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[1] = RelooperAddBlock(the_relooper, expressions[53]);
  expressions[54] = BinaryenConst(the_module, BinaryenLiteralInt32(2));
  {
    BinaryenExpressionRef operands[] = { expressions[54] };
    expressions[55] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[2] = RelooperAddBlock(the_relooper, expressions[55]);
  expressions[56] = BinaryenConst(the_module, BinaryenLiteralInt32(55));
  RelooperAddBranch(relooperBlocks[0], relooperBlocks[1], expressions[56], expressions[0]);
  RelooperAddBranch(relooperBlocks[0], relooperBlocks[2], expressions[0], expressions[0]);
  RelooperAddBranch(relooperBlocks[1], relooperBlocks[2], expressions[0], expressions[0]);
  expressions[57] = RelooperRenderAndDispose(the_relooper, relooperBlocks[0], 0);
  {
    BinaryenType varTypes[] = { BinaryenTypeInt32() };
    functions[7] = BinaryenAddFunction(the_module, "if", BinaryenTypeNone(), BinaryenTypeNone(), varTypes, 1, expressions[57]);
  }
  the_relooper = RelooperCreate(the_module);
  expressions[58] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  {
    BinaryenExpressionRef operands[] = { expressions[58] };
    expressions[59] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[0] = RelooperAddBlock(the_relooper, expressions[59]);
  expressions[60] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  {
    BinaryenExpressionRef operands[] = { expressions[60] };
    expressions[61] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[1] = RelooperAddBlock(the_relooper, expressions[61]);
  expressions[62] = BinaryenConst(the_module, BinaryenLiteralInt32(2));
  {
    BinaryenExpressionRef operands[] = { expressions[62] };
    expressions[63] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[2] = RelooperAddBlock(the_relooper, expressions[63]);
  expressions[64] = BinaryenConst(the_module, BinaryenLiteralInt32(-1));
  expressions[65] = BinaryenDrop(the_module, expressions[64]);
  expressions[66] = BinaryenConst(the_module, BinaryenLiteralInt32(55));
  RelooperAddBranch(relooperBlocks[0], relooperBlocks[1], expressions[66], expressions[65]);
  expressions[67] = BinaryenConst(the_module, BinaryenLiteralInt32(-2));
  expressions[68] = BinaryenDrop(the_module, expressions[67]);
  RelooperAddBranch(relooperBlocks[0], relooperBlocks[2], expressions[0], expressions[68]);
  expressions[69] = BinaryenConst(the_module, BinaryenLiteralInt32(-3));
  expressions[70] = BinaryenDrop(the_module, expressions[69]);
  RelooperAddBranch(relooperBlocks[1], relooperBlocks[2], expressions[0], expressions[70]);
  expressions[71] = RelooperRenderAndDispose(the_relooper, relooperBlocks[0], 0);
  {
    BinaryenType varTypes[] = { BinaryenTypeInt32() };
    functions[8] = BinaryenAddFunction(the_module, "if-plus-code", BinaryenTypeNone(), BinaryenTypeNone(), varTypes, 1, expressions[71]);
  }
  the_relooper = RelooperCreate(the_module);
  expressions[72] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  {
    BinaryenExpressionRef operands[] = { expressions[72] };
    expressions[73] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[0] = RelooperAddBlock(the_relooper, expressions[73]);
  expressions[74] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  {
    BinaryenExpressionRef operands[] = { expressions[74] };
    expressions[75] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[1] = RelooperAddBlock(the_relooper, expressions[75]);
  expressions[76] = BinaryenConst(the_module, BinaryenLiteralInt32(2));
  {
    BinaryenExpressionRef operands[] = { expressions[76] };
    expressions[77] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[2] = RelooperAddBlock(the_relooper, expressions[77]);
  expressions[78] = BinaryenConst(the_module, BinaryenLiteralInt32(3));
  {
    BinaryenExpressionRef operands[] = { expressions[78] };
    expressions[79] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[3] = RelooperAddBlock(the_relooper, expressions[79]);
  expressions[80] = BinaryenConst(the_module, BinaryenLiteralInt32(55));
  RelooperAddBranch(relooperBlocks[0], relooperBlocks[1], expressions[80], expressions[0]);
  RelooperAddBranch(relooperBlocks[0], relooperBlocks[2], expressions[0], expressions[0]);
  RelooperAddBranch(relooperBlocks[1], relooperBlocks[3], expressions[0], expressions[0]);
  RelooperAddBranch(relooperBlocks[2], relooperBlocks[3], expressions[0], expressions[0]);
  expressions[81] = RelooperRenderAndDispose(the_relooper, relooperBlocks[0], 0);
  {
    BinaryenType varTypes[] = { BinaryenTypeInt32() };
    functions[9] = BinaryenAddFunction(the_module, "if-else", BinaryenTypeNone(), BinaryenTypeNone(), varTypes, 1, expressions[81]);
  }
  the_relooper = RelooperCreate(the_module);
  expressions[82] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  {
    BinaryenExpressionRef operands[] = { expressions[82] };
    expressions[83] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[0] = RelooperAddBlock(the_relooper, expressions[83]);
  expressions[84] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  {
    BinaryenExpressionRef operands[] = { expressions[84] };
    expressions[85] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[1] = RelooperAddBlock(the_relooper, expressions[85]);
  expressions[86] = BinaryenConst(the_module, BinaryenLiteralInt32(2));
  {
    BinaryenExpressionRef operands[] = { expressions[86] };
    expressions[87] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[2] = RelooperAddBlock(the_relooper, expressions[87]);
  RelooperAddBranch(relooperBlocks[0], relooperBlocks[1], expressions[0], expressions[0]);
  expressions[88] = BinaryenConst(the_module, BinaryenLiteralInt32(10));
  RelooperAddBranch(relooperBlocks[1], relooperBlocks[0], expressions[88], expressions[0]);
  RelooperAddBranch(relooperBlocks[1], relooperBlocks[2], expressions[0], expressions[0]);
  expressions[89] = RelooperRenderAndDispose(the_relooper, relooperBlocks[0], 0);
  {
    BinaryenType varTypes[] = { BinaryenTypeInt32() };
    functions[10] = BinaryenAddFunction(the_module, "loop-tail", BinaryenTypeNone(), BinaryenTypeNone(), varTypes, 1, expressions[89]);
  }
  the_relooper = RelooperCreate(the_module);
  expressions[90] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  {
    BinaryenExpressionRef operands[] = { expressions[90] };
    expressions[91] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[0] = RelooperAddBlock(the_relooper, expressions[91]);
  expressions[92] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  {
    BinaryenExpressionRef operands[] = { expressions[92] };
    expressions[93] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[1] = RelooperAddBlock(the_relooper, expressions[93]);
  expressions[94] = BinaryenConst(the_module, BinaryenLiteralInt32(2));
  {
    BinaryenExpressionRef operands[] = { expressions[94] };
    expressions[95] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[2] = RelooperAddBlock(the_relooper, expressions[95]);
  expressions[96] = BinaryenConst(the_module, BinaryenLiteralInt32(3));
  {
    BinaryenExpressionRef operands[] = { expressions[96] };
    expressions[97] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[3] = RelooperAddBlock(the_relooper, expressions[97]);
  expressions[98] = BinaryenConst(the_module, BinaryenLiteralInt32(4));
  {
    BinaryenExpressionRef operands[] = { expressions[98] };
    expressions[99] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[4] = RelooperAddBlock(the_relooper, expressions[99]);
  expressions[100] = BinaryenConst(the_module, BinaryenLiteralInt32(5));
  {
    BinaryenExpressionRef operands[] = { expressions[100] };
    expressions[101] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[5] = RelooperAddBlock(the_relooper, expressions[101]);
  expressions[102] = BinaryenConst(the_module, BinaryenLiteralInt32(6));
  {
    BinaryenExpressionRef operands[] = { expressions[102] };
    expressions[103] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[6] = RelooperAddBlock(the_relooper, expressions[103]);
  expressions[104] = BinaryenConst(the_module, BinaryenLiteralInt32(10));
  expressions[105] = BinaryenDrop(the_module, expressions[104]);
  RelooperAddBranch(relooperBlocks[0], relooperBlocks[1], expressions[0], expressions[105]);
  expressions[106] = BinaryenConst(the_module, BinaryenLiteralInt32(-2));
  RelooperAddBranch(relooperBlocks[1], relooperBlocks[2], expressions[106], expressions[0]);
  expressions[107] = BinaryenConst(the_module, BinaryenLiteralInt32(20));
  expressions[108] = BinaryenDrop(the_module, expressions[107]);
  RelooperAddBranch(relooperBlocks[1], relooperBlocks[6], expressions[0], expressions[108]);
  expressions[109] = BinaryenConst(the_module, BinaryenLiteralInt32(-6));
  RelooperAddBranch(relooperBlocks[2], relooperBlocks[3], expressions[109], expressions[0]);
  expressions[110] = BinaryenConst(the_module, BinaryenLiteralInt32(30));
  expressions[111] = BinaryenDrop(the_module, expressions[110]);
  RelooperAddBranch(relooperBlocks[2], relooperBlocks[1], expressions[0], expressions[111]);
  expressions[112] = BinaryenConst(the_module, BinaryenLiteralInt32(-10));
  RelooperAddBranch(relooperBlocks[3], relooperBlocks[4], expressions[112], expressions[0]);
  RelooperAddBranch(relooperBlocks[3], relooperBlocks[5], expressions[0], expressions[0]);
  RelooperAddBranch(relooperBlocks[4], relooperBlocks[5], expressions[0], expressions[0]);
  expressions[113] = BinaryenConst(the_module, BinaryenLiteralInt32(40));
  expressions[114] = BinaryenDrop(the_module, expressions[113]);
  RelooperAddBranch(relooperBlocks[5], relooperBlocks[6], expressions[0], expressions[114]);
  expressions[115] = RelooperRenderAndDispose(the_relooper, relooperBlocks[0], 0);
  {
    BinaryenType varTypes[] = { BinaryenTypeInt32() };
    functions[11] = BinaryenAddFunction(the_module, "nontrivial-loop-plus-phi-to-head", BinaryenTypeNone(), BinaryenTypeNone(), varTypes, 1, expressions[115]);
  }
  the_relooper = RelooperCreate(the_module);
  expressions[116] = BinaryenConst(the_module, BinaryenLiteralInt32(-99));
  expressions[117] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  {
    BinaryenExpressionRef operands[] = { expressions[117] };
    expressions[118] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[0] = RelooperAddBlockWithSwitch(the_relooper, expressions[118], expressions[116]);
  expressions[119] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  {
    BinaryenExpressionRef operands[] = { expressions[119] };
    expressions[120] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[1] = RelooperAddBlock(the_relooper, expressions[120]);
  expressions[121] = BinaryenConst(the_module, BinaryenLiteralInt32(2));
  {
    BinaryenExpressionRef operands[] = { expressions[121] };
    expressions[122] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[2] = RelooperAddBlock(the_relooper, expressions[122]);
  expressions[123] = BinaryenConst(the_module, BinaryenLiteralInt32(3));
  {
    BinaryenExpressionRef operands[] = { expressions[123] };
    expressions[124] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[3] = RelooperAddBlock(the_relooper, expressions[124]);
  {
    BinaryenIndex indexes[] = { 2, 5 };
    RelooperAddBranchForSwitch(relooperBlocks[0], relooperBlocks[1], indexes, 2, expressions[0]);
  }
  expressions[125] = BinaryenConst(the_module, BinaryenLiteralInt32(55));
  expressions[126] = BinaryenDrop(the_module, expressions[125]);
  {
    BinaryenIndex indexes[] = { 4 };
    RelooperAddBranchForSwitch(relooperBlocks[0], relooperBlocks[2], indexes, 1, expressions[126]);
  }
  {
    BinaryenIndex indexes[] = { 0 };
    RelooperAddBranchForSwitch(relooperBlocks[0], relooperBlocks[3], indexes, 0, expressions[0]);
  }
  expressions[127] = RelooperRenderAndDispose(the_relooper, relooperBlocks[0], 0);
  {
    BinaryenType varTypes[] = { BinaryenTypeInt32() };
    functions[12] = BinaryenAddFunction(the_module, "switch", BinaryenTypeNone(), BinaryenTypeNone(), varTypes, 1, expressions[127]);
  }
  the_relooper = RelooperCreate(the_module);
  expressions[128] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  {
    BinaryenExpressionRef operands[] = { expressions[128] };
    expressions[129] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[0] = RelooperAddBlock(the_relooper, expressions[129]);
  expressions[130] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  {
    BinaryenExpressionRef operands[] = { expressions[130] };
    expressions[131] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[1] = RelooperAddBlock(the_relooper, expressions[131]);
  expressions[132] = BinaryenConst(the_module, BinaryenLiteralInt32(2));
  {
    BinaryenExpressionRef operands[] = { expressions[132] };
    expressions[133] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  relooperBlocks[2] = RelooperAddBlock(the_relooper, expressions[133]);
  expressions[134] = BinaryenConst(the_module, BinaryenLiteralInt32(10));
  RelooperAddBranch(relooperBlocks[0], relooperBlocks[1], expressions[134], expressions[0]);
  RelooperAddBranch(relooperBlocks[0], relooperBlocks[2], expressions[0], expressions[0]);
  RelooperAddBranch(relooperBlocks[1], relooperBlocks[2], expressions[0], expressions[0]);
  RelooperAddBranch(relooperBlocks[2], relooperBlocks[1], expressions[0], expressions[0]);
  expressions[135] = RelooperRenderAndDispose(the_relooper, relooperBlocks[0], 3);
  {
    BinaryenType varTypes[] = { BinaryenTypeInt32(), BinaryenTypeInt32(), BinaryenTypeInt64(), BinaryenTypeInt32(), BinaryenTypeFloat32(), BinaryenTypeFloat64(), BinaryenTypeInt32() };
    functions[13] = BinaryenAddFunction(the_module, "duffs-device", BinaryenTypeNone(), BinaryenTypeNone(), varTypes, 7, expressions[135]);
  }
  the_relooper = RelooperCreate(the_module);
  expressions[136] = BinaryenConst(the_module, BinaryenLiteralInt32(42));
  {
    BinaryenExpressionRef operands[] = { expressions[136] };
    expressions[137] = BinaryenCall(the_module, "check", operands, 1, BinaryenTypeNone());
  }
  expressions[138] = BinaryenConst(the_module, BinaryenLiteralInt32(1337));
  expressions[139] = BinaryenReturn(the_module, expressions[138]);
  {
    BinaryenExpressionRef children[] = { expressions[137], expressions[139] };
    expressions[140] = BinaryenBlock(the_module, "the-list", children, 2, BinaryenTypeAuto());
  }
  relooperBlocks[0] = RelooperAddBlock(the_relooper, expressions[140]);
  expressions[141] = RelooperRenderAndDispose(the_relooper, relooperBlocks[0], 0);
  {
    BinaryenType varTypes[] = { BinaryenTypeInt32() };
    functions[14] = BinaryenAddFunction(the_module, "return", BinaryenTypeNone(), BinaryenTypeInt32(), varTypes, 1, expressions[141]);
  }
raw:
  BinaryenModulePrint(the_module);
(module
 (type $none_=>_none (func))
 (type $i32_=>_none (func (param i32)))
 (type $none_=>_i32 (func (result i32)))
 (import "module" "check" (func $check (param i32)))
 (func $just-one-block
  (local $0 i32)
  (call $check
   (i32.const 1337)
  )
 )
 (func $two-blocks
  (local $0 i32)
  (block
   (call $check
    (i32.const 0)
   )
   (call $check
    (i32.const 1)
   )
  )
 )
 (func $two-blocks-plus-code
  (local $0 i32)
  (block
   (block
    (call $check
     (i32.const 0)
    )
    (drop
     (i32.const 77)
    )
   )
   (call $check
    (i32.const 1)
   )
  )
 )
 (func $loop
  (local $0 i32)
  (loop $shape$0$continue
   (block
    (call $check
     (i32.const 0)
    )
    (call $check
     (i32.const 1)
    )
   )
   (block
    (br $shape$0$continue)
   )
  )
 )
 (func $loop-plus-code
  (local $0 i32)
  (loop $shape$0$continue
   (block
    (block
     (call $check
      (i32.const 0)
     )
     (drop
      (i32.const 33)
     )
    )
    (call $check
     (i32.const 1)
    )
   )
   (block
    (drop
     (i32.const -66)
    )
    (br $shape$0$continue)
   )
  )
 )
 (func $split
  (local $0 i32)
  (call $check
   (i32.const 0)
  )
  (if
   (i32.const 55)
   (block
    (call $check
     (i32.const 1)
    )
   )
   (block
    (call $check
     (i32.const 2)
    )
   )
  )
 )
 (func $split-plus-code
  (local $0 i32)
  (call $check
   (i32.const 0)
  )
  (if
   (i32.const 55)
   (block
    (drop
     (i32.const 10)
    )
    (block
     (call $check
      (i32.const 1)
     )
    )
   )
   (block
    (drop
     (i32.const 20)
    )
    (block
     (call $check
      (i32.const 2)
     )
    )
   )
  )
 )
 (func $if
  (local $0 i32)
  (block $block$3$break
   (call $check
    (i32.const 0)
   )
   (if
    (i32.const 55)
    (block
     (call $check
      (i32.const 1)
     )
     (block
      (br $block$3$break)
     )
    )
    (br $block$3$break)
   )
  )
  (block
   (call $check
    (i32.const 2)
   )
  )
 )
 (func $if-plus-code
  (local $0 i32)
  (block $block$3$break
   (call $check
    (i32.const 0)
   )
   (if
    (i32.const 55)
    (block
     (drop
      (i32.const -1)
     )
     (block
      (call $check
       (i32.const 1)
      )
      (block
       (drop
        (i32.const -3)
       )
       (br $block$3$break)
      )
     )
    )
    (block
     (drop
      (i32.const -2)
     )
     (br $block$3$break)
    )
   )
  )
  (block
   (call $check
    (i32.const 2)
   )
  )
 )
 (func $if-else
  (local $0 i32)
  (block $block$4$break
   (call $check
    (i32.const 0)
   )
   (if
    (i32.const 55)
    (block
     (call $check
      (i32.const 1)
     )
     (block
      (br $block$4$break)
     )
    )
    (block
     (call $check
      (i32.const 2)
     )
     (block
      (br $block$4$break)
     )
    )
   )
  )
  (block
   (call $check
    (i32.const 3)
   )
  )
 )
 (func $loop-tail
  (local $0 i32)
  (block $block$3$break
   (loop $shape$0$continue
    (block
     (call $check
      (i32.const 0)
     )
     (call $check
      (i32.const 1)
     )
    )
    (if
     (i32.const 10)
     (br $shape$0$continue)
     (br $block$3$break)
    )
   )
  )
  (block
   (call $check
    (i32.const 2)
   )
  )
 )
 (func $nontrivial-loop-plus-phi-to-head
  (local $0 i32)
  (block $block$2$break
   (call $check
    (i32.const 0)
   )
   (block
    (drop
     (i32.const 10)
    )
    (br $block$2$break)
   )
  )
  (block
   (block $block$7$break
    (block $block$4$break
     (loop $shape$1$continue
      (block $block$3$break
       (call $check
        (i32.const 1)
       )
       (if
        (i32.const -2)
        (br $block$3$break)
        (block
         (drop
          (i32.const 20)
         )
         (br $block$7$break)
        )
       )
      )
      (block
       (call $check
        (i32.const 2)
       )
       (if
        (i32.const -6)
        (br $block$4$break)
        (block
         (drop
          (i32.const 30)
         )
         (br $shape$1$continue)
        )
       )
      )
     )
    )
    (block
     (block $block$6$break
      (call $check
       (i32.const 3)
      )
      (if
       (i32.const -10)
       (block
        (call $check
         (i32.const 4)
        )
        (block
         (br $block$6$break)
        )
       )
       (br $block$6$break)
      )
     )
     (block
      (call $check
       (i32.const 5)
      )
      (block
       (drop
        (i32.const 40)
       )
       (br $block$7$break)
      )
     )
    )
   )
   (block
    (call $check
     (i32.const 6)
    )
   )
  )
 )
 (func $switch
  (local $0 i32)
  (call $check
   (i32.const 0)
  )
  (block $switch$1$leave
   (block $switch$1$default
    (block $switch$1$case$3
     (block $switch$1$case$2
      (br_table $switch$1$default $switch$1$default $switch$1$case$2 $switch$1$default $switch$1$case$3 $switch$1$case$2 $switch$1$default
       (i32.const -99)
      )
     )
     (block
      (block
       (call $check
        (i32.const 1)
       )
      )
     )
     (br $switch$1$leave)
    )
    (block
     (drop
      (i32.const 55)
     )
     (block
      (call $check
       (i32.const 2)
      )
     )
    )
    (br $switch$1$leave)
   )
   (block
    (block
     (call $check
      (i32.const 3)
     )
    )
   )
   (br $switch$1$leave)
  )
 )
 (func $duffs-device
  (local $0 i32)
  (local $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 f32)
  (local $5 f64)
  (local $6 i32)
  (block
   (block $block$3$break
    (block $block$2$break
     (call $check
      (i32.const 0)
     )
     (if
      (i32.const 10)
      (block
       (local.set $3
        (i32.const 2)
       )
       (br $block$2$break)
      )
      (block
       (local.set $3
        (i32.const 3)
       )
       (br $block$3$break)
      )
     )
    )
   )
  )
  (loop $shape$1$continue
   (if
    (i32.eq
     (local.get $3)
     (i32.const 2)
    )
    (block
     (local.set $3
      (i32.const 0)
     )
     (call $check
      (i32.const 1)
     )
     (block
      (local.set $3
       (i32.const 3)
      )
      (br $shape$1$continue)
     )
    )
    (if
     (i32.eq
      (local.get $3)
      (i32.const 3)
     )
     (block
      (local.set $3
       (i32.const 0)
      )
      (call $check
       (i32.const 2)
      )
      (block
       (local.set $3
        (i32.const 2)
       )
       (br $shape$1$continue)
      )
     )
    )
   )
  )
 )
 (func $return (result i32)
  (local $0 i32)
  (block
   (call $check
    (i32.const 42)
   )
   (return
    (i32.const 1337)
   )
  )
 )
)
  BinaryenModuleValidate(the_module);
  BinaryenModuleOptimize(the_module);
  BinaryenModuleValidate(the_module);
optimized:
  BinaryenModulePrint(the_module);
(module
)
  BinaryenModuleDispose(the_module);
  types.clear();
  expressions.clear();
  functions.clear();
  globals.clear();
  events.clear();
  exports.clear();
  relooperBlocks.clear();
  // BinaryenTypeNone: 0
  // BinaryenTypeUnreachable: 1
  // BinaryenTypeInt32: 2
  // BinaryenTypeInt64: 3
  // BinaryenTypeFloat32: 4
  // BinaryenTypeFloat64: 5
  // BinaryenTypeVec128: 6
  // BinaryenTypeFuncref: 7
  // BinaryenTypeAnyref: 8
  // BinaryenTypeNullref: 9
  // BinaryenTypeExnref: 10
  // BinaryenTypeAuto: -1
  {
    BinaryenType t281[] = {BinaryenTypeInt32(), BinaryenTypeInt32()};
    types[0] = BinaryenTypeCreate(t281, 2);
  }
  {
    BinaryenType t282[] = {BinaryenTypeInt32(), BinaryenTypeInt32()};
    types[0] = BinaryenTypeCreate(t282, 2);
  }
  {
    BinaryenType t283[] = {BinaryenTypeFloat32(), BinaryenTypeFloat32()};
    types[1] = BinaryenTypeCreate(t283, 2);
  }
  return 0;
}
// ending a Binaryen API trace
  // BinaryenTypeNone: 0
  // BinaryenTypeUnreachable: 1
  // BinaryenTypeInt32: 2
  // BinaryenTypeInt64: 3
  // BinaryenTypeFloat32: 4
  // BinaryenTypeFloat64: 5
  // BinaryenTypeVec128: 6
  // BinaryenTypeFuncref: 7
  // BinaryenTypeAnyref: 8
  // BinaryenTypeNullref: 9
  // BinaryenTypeExnref: 10
  // BinaryenTypeAuto: -1
BinaryenFeatureMVP: 0
BinaryenFeatureAtomics: 1
BinaryenFeatureBulkMemory: 16
BinaryenFeatureMutableGlobals: 2
BinaryenFeatureNontrappingFPToInt: 4
BinaryenFeatureSignExt: 32
BinaryenFeatureSIMD128: 8
BinaryenFeatureExceptionHandling: 64
BinaryenFeatureTailCall: 128
BinaryenFeatureReferenceTypes: 256
BinaryenFeatureMultivalue: 512
BinaryenFeatureAll: 1023
(f32.neg
 (f32.const -33.61199951171875)
)
(module
 (type $i32_i64_f32_f64_=>_i32 (func (param i32 i64 f32 f64) (result i32)))
 (type $none_=>_none (func))
 (type $i32_=>_none (func (param i32)))
 (type $i32_f64_=>_f32 (func (param i32 f64) (result f32)))
 (import "module" "base" (func $an-imported (param i32 f64) (result f32)))
 (memory $0 (shared 1 256))
 (data (i32.const 10) "hello, world")
 (data passive "I am passive")
 (table $0 1 1 funcref)
 (elem (i32.const 0) "$kitchen()sinker")
 (global $a-global i32 (i32.const 7))
 (global $a-mutable-global (mut f32) (f32.const 7.5))
 (event $a-event (attr 0) (param i32))
 (export "kitchen_sinker" (func "$kitchen()sinker"))
 (export "mem" (memory $0))
 (start $starter)
 (func "$kitchen()sinker" (param $0 i32) (param $1 i64) (param $2 f32) (param $3 f64) (result i32)
  (local $4 i32)
  (local $5 exnref)
  (block $the-body (result i32)
   (block $the-nothing
    (drop
     (block $the-value (result i32)
      (drop
       (i32.clz
        (i32.const -10)
       )
      )
      (drop
       (i64.ctz
        (i64.const -22)
       )
      )
      (drop
       (i32.popcnt
        (i32.const -10)
       )
      )
      (drop
       (f32.neg
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (f64.abs
        (f64.const -9005.841)
       )
      )
      (drop
       (f32.ceil
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (f64.floor
        (f64.const -9005.841)
       )
      )
      (drop
       (f32.trunc
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (f32.nearest
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (f64.sqrt
        (f64.const -9005.841)
       )
      )
      (drop
       (i32.eqz
        (i32.const -10)
       )
      )
      (drop
       (i64.extend_i32_s
        (i32.const -10)
       )
      )
      (drop
       (i64.extend_i32_u
        (i32.const -10)
       )
      )
      (drop
       (i32.wrap_i64
        (i64.const -22)
       )
      )
      (drop
       (i32.trunc_f32_s
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (i64.trunc_f32_s
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (i32.trunc_f32_u
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (i64.trunc_f32_u
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (i32.trunc_f64_s
        (f64.const -9005.841)
       )
      )
      (drop
       (i64.trunc_f64_s
        (f64.const -9005.841)
       )
      )
      (drop
       (i32.trunc_f64_u
        (f64.const -9005.841)
       )
      )
      (drop
       (i64.trunc_f64_u
        (f64.const -9005.841)
       )
      )
      (drop
       (i32.trunc_sat_f32_s
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (i64.trunc_sat_f32_s
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (i32.trunc_sat_f32_u
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (i64.trunc_sat_f32_u
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (i32.trunc_sat_f64_s
        (f64.const -9005.841)
       )
      )
      (drop
       (i64.trunc_sat_f64_s
        (f64.const -9005.841)
       )
      )
      (drop
       (i32.trunc_sat_f64_u
        (f64.const -9005.841)
       )
      )
      (drop
       (i64.trunc_sat_f64_u
        (f64.const -9005.841)
       )
      )
      (drop
       (i32.reinterpret_f32
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (i64.reinterpret_f64
        (f64.const -9005.841)
       )
      )
      (drop
       (f32.convert_i32_s
        (i32.const -10)
       )
      )
      (drop
       (f64.convert_i32_s
        (i32.const -10)
       )
      )
      (drop
       (f32.convert_i32_u
        (i32.const -10)
       )
      )
      (drop
       (f64.convert_i32_u
        (i32.const -10)
       )
      )
      (drop
       (f32.convert_i64_s
        (i64.const -22)
       )
      )
      (drop
       (f64.convert_i64_s
        (i64.const -22)
       )
      )
      (drop
       (f32.convert_i64_u
        (i64.const -22)
       )
      )
      (drop
       (f64.convert_i64_u
        (i64.const -22)
       )
      )
      (drop
       (f64.promote_f32
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (f32.demote_f64
        (f64.const -9005.841)
       )
      )
      (drop
       (f32.reinterpret_i32
        (i32.const -10)
       )
      )
      (drop
       (f64.reinterpret_i64
        (i64.const -22)
       )
      )
      (drop
       (i8x16.splat
        (i32.const -10)
       )
      )
      (drop
       (i16x8.splat
        (i32.const -10)
       )
      )
      (drop
       (i32x4.splat
        (i32.const -10)
       )
      )
      (drop
       (i64x2.splat
        (i64.const -22)
       )
      )
      (drop
       (f32x4.splat
        (f32.const -33.61199951171875)
       )
      )
      (drop
       (f64x2.splat
        (f64.const -9005.841)
       )
      )
      (drop
       (v128.not
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.abs
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.neg
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.any_true
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.all_true
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.bitmask
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.abs
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.neg
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.any_true
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.all_true
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.bitmask
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.abs
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.neg
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.any_true
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.all_true
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.bitmask
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i64x2.neg
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i64x2.any_true
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i64x2.all_true
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.abs
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.neg
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.sqrt
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.abs
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.neg
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.sqrt
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.trunc_sat_f32x4_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.trunc_sat_f32x4_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i64x2.trunc_sat_f64x2_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i64x2.trunc_sat_f64x2_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.convert_i32x4_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.convert_i32x4_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.convert_i64x2_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.convert_i64x2_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.widen_low_i8x16_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.widen_high_i8x16_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.widen_low_i8x16_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.widen_high_i8x16_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.widen_low_i16x8_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.widen_high_i16x8_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.widen_low_i16x8_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.widen_high_i16x8_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32.add
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (f64.sub
        (f64.const -9005.841)
        (f64.const -9007.333)
       )
      )
      (drop
       (i32.div_s
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (i64.div_u
        (i64.const -22)
        (i64.const -23)
       )
      )
      (drop
       (i64.rem_s
        (i64.const -22)
        (i64.const -23)
       )
      )
      (drop
       (i32.rem_u
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (i32.and
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (i64.or
        (i64.const -22)
        (i64.const -23)
       )
      )
      (drop
       (i32.xor
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (i64.shl
        (i64.const -22)
        (i64.const -23)
       )
      )
      (drop
       (i64.shr_u
        (i64.const -22)
        (i64.const -23)
       )
      )
      (drop
       (i32.shr_s
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (i32.rotl
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (i64.rotr
        (i64.const -22)
        (i64.const -23)
       )
      )
      (drop
       (f32.div
        (f32.const -33.61199951171875)
        (f32.const -62.5)
       )
      )
      (drop
       (f64.copysign
        (f64.const -9005.841)
        (f64.const -9007.333)
       )
      )
      (drop
       (f32.min
        (f32.const -33.61199951171875)
        (f32.const -62.5)
       )
      )
      (drop
       (f64.max
        (f64.const -9005.841)
        (f64.const -9007.333)
       )
      )
      (drop
       (i32.eq
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (f32.ne
        (f32.const -33.61199951171875)
        (f32.const -62.5)
       )
      )
      (drop
       (i32.lt_s
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (i64.lt_u
        (i64.const -22)
        (i64.const -23)
       )
      )
      (drop
       (i64.le_s
        (i64.const -22)
        (i64.const -23)
       )
      )
      (drop
       (i32.le_u
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (i64.gt_s
        (i64.const -22)
        (i64.const -23)
       )
      )
      (drop
       (i32.gt_u
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (i32.ge_s
        (i32.const -10)
        (i32.const -11)
       )
      )
      (drop
       (i64.ge_u
        (i64.const -22)
        (i64.const -23)
       )
      )
      (drop
       (f32.lt
        (f32.const -33.61199951171875)
        (f32.const -62.5)
       )
      )
      (drop
       (f64.le
        (f64.const -9005.841)
        (f64.const -9007.333)
       )
      )
      (drop
       (f64.gt
        (f64.const -9005.841)
        (f64.const -9007.333)
       )
      )
      (drop
       (f32.ge
        (f32.const -33.61199951171875)
        (f32.const -62.5)
       )
      )
      (drop
       (i8x16.eq
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.ne
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.lt_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.lt_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.gt_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.gt_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.le_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.le_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.ge_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.ge_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.eq
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.ne
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.lt_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.lt_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.gt_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.gt_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.le_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.le_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.ge_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.ge_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.eq
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.ne
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.lt_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.lt_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.gt_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.gt_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.le_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.le_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.ge_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.ge_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.eq
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.ne
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.lt
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.gt
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.le
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.ge
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.eq
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.ne
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.lt
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.gt
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.le
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.ge
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (v128.and
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (v128.or
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (v128.xor
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (v128.andnot
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.add
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.add_saturate_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.add_saturate_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.sub
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.sub_saturate_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.sub_saturate_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.mul
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.min_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.min_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.max_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.max_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.avgr_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.add
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.add_saturate_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.add_saturate_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.sub
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.sub_saturate_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.sub_saturate_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.mul
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.min_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.min_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.max_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.max_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.avgr_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.add
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.sub
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.mul
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i64x2.add
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i64x2.sub
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.add
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.sub
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.mul
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.min_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.min_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.max_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.max_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.dot_i16x8_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.div
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.min
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.max
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.add
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.sub
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.mul
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.div
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.min
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.max
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.narrow_i16x8_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.narrow_i16x8_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.narrow_i32x4_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.narrow_i32x4_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (v8x16.swizzle
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.extract_lane_s 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.extract_lane_u 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.extract_lane_s 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i16x8.extract_lane_u 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i32x4.extract_lane 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i64x2.extract_lane 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.extract_lane 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.extract_lane 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (i8x16.replace_lane 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 42)
       )
      )
      (drop
       (i16x8.replace_lane 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 42)
       )
      )
      (drop
       (i32x4.replace_lane 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 42)
       )
      )
      (drop
       (i64x2.replace_lane 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i64.const 42)
       )
      )
      (drop
       (f32x4.replace_lane 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (f32.const 42)
       )
      )
      (drop
       (f64x2.replace_lane 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (f64.const 42)
       )
      )
      (drop
       (i8x16.shl
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (i8x16.shr_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (i8x16.shr_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (i16x8.shl
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (i16x8.shr_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (i16x8.shr_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (i32x4.shl
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (i32x4.shr_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (i32x4.shr_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (i64x2.shl
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (i64x2.shr_s
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (i64x2.shr_u
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (i32.const 1)
       )
      )
      (drop
       (v8x16.load_splat
        (i32.const 128)
       )
      )
      (drop
       (v16x8.load_splat offset=16 align=1
        (i32.const 128)
       )
      )
      (drop
       (v32x4.load_splat offset=16
        (i32.const 128)
       )
      )
      (drop
       (v64x2.load_splat align=4
        (i32.const 128)
       )
      )
      (drop
       (i16x8.load8x8_s
        (i32.const 128)
       )
      )
      (drop
       (i16x8.load8x8_u
        (i32.const 128)
       )
      )
      (drop
       (i32x4.load16x4_s
        (i32.const 128)
       )
      )
      (drop
       (i32x4.load16x4_u
        (i32.const 128)
       )
      )
      (drop
       (i64x2.load32x2_s
        (i32.const 128)
       )
      )
      (drop
       (i64x2.load32x2_u
        (i32.const 128)
       )
      )
      (drop
       (v8x16.shuffle 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (v128.bitselect
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.qfma
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f32x4.qfms
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.qfma
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (drop
       (f64x2.qfms
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
        (v128.const i32x4 0x04030201 0x08070605 0x0c0b0a09 0x100f0e0d)
       )
      )
      (memory.init 0
       (i32.const 1024)
       (i32.const 0)
       (i32.const 12)
      )
      (data.drop 0)
      (memory.copy
       (i32.const 2048)
       (i32.const 1024)
       (i32.const 12)
      )
      (memory.fill
       (i32.const 0)
       (i32.const 42)
       (i32.const 1024)
      )
      (block
      )
      (if
       (i32.const 1)
       (drop
        (i32.const 2)
       )
       (drop
        (i32.const 3)
       )
      )
      (if
       (i32.const 4)
       (drop
        (i32.const 5)
       )
      )
      (drop
       (loop $in (result i32)
        (i32.const 0)
       )
      )
      (drop
       (loop (result i32)
        (i32.const 0)
       )
      )
      (drop
       (br_if $the-value
        (i32.const 1)
        (i32.const 0)
       )
      )
      (br_if $the-nothing
       (i32.const 2)
      )
      (br $the-value
       (i32.const 3)
      )
      (br $the-nothing)
      (br_table $the-value $the-value
       (i32.const 1)
       (i32.const 0)
      )
      (br_table $the-nothing $the-nothing
       (i32.const 2)
      )
      (drop
       (i32.eqz
        (call "$kitchen()sinker"
         (i32.const 13)
         (i64.const 37)
         (f32.const 1.2999999523162842)
         (f64.const 3.7)
        )
       )
      )
      (drop
       (i32.eqz
        (i32.trunc_f32_s
         (call $an-imported
          (i32.const 13)
          (f64.const 3.7)
         )
        )
       )
      )
      (drop
       (i32.eqz
        (call_indirect (type $i32_i64_f32_f64_=>_i32)
         (i32.const 13)
         (i64.const 37)
         (f32.const 1.2999999523162842)
         (f64.const 3.7)
         (i32.const 2449)
        )
       )
      )
      (drop
       (local.get $0)
      )
      (local.set $0
       (i32.const 101)
      )
      (drop
       (local.tee $0
        (i32.const 102)
       )
      )
      (drop
       (i32.load
        (i32.const 1)
       )
      )
      (drop
       (i64.load16_s offset=2 align=1
        (i32.const 8)
       )
      )
      (drop
       (f32.load
        (i32.const 2)
       )
      )
      (drop
       (f64.load offset=2
        (i32.const 9)
       )
      )
      (i32.store
       (i32.const 10)
       (i32.const 11)
      )
      (i64.store offset=2 align=4
       (i32.const 110)
       (i64.const 111)
      )
      (drop
       (select
        (i32.const 3)
        (i32.const 5)
        (i32.const 1)
       )
      )
      (return
       (i32.const 1337)
      )
      (return_call "$kitchen()sinker"
       (i32.const 13)
       (i64.const 37)
       (f32.const 1.2999999523162842)
       (f64.const 3.7)
      )
      (return_call_indirect (type $i32_i64_f32_f64_=>_i32)
       (i32.const 13)
       (i64.const 37)
       (f32.const 1.2999999523162842)
       (f64.const 3.7)
       (i32.const 2449)
      )
      (drop
       (ref.is_null
        (ref.null)
       )
      )
      (drop
       (ref.is_null
        (ref.func "$kitchen()sinker")
       )
      )
      (drop
       (select (result funcref)
        (ref.null)
        (ref.func "$kitchen()sinker")
        (i32.const 1)
       )
      )
      (try
       (throw $a-event
        (i32.const 0)
       )
       (catch
        (local.set $5
         (exnref.pop)
        )
        (drop
         (block $try-block (result i32)
          (rethrow
           (br_on_exn $try-block $a-event
            (local.get $5)
           )
          )
         )
        )
       )
      )
      (i32.atomic.store
       (i32.const 0)
       (i32.atomic.load
        (i32.const 0)
       )
      )
      (drop
       (i32.atomic.wait
        (i32.const 0)
        (i32.const 0)
        (i64.const 111)
       )
      )
      (drop
       (atomic.notify
        (i32.const 0)
        (i32.const 0)
       )
      )
      (atomic.fence)
      (drop
       (tuple.make
        (i32.const 13)
        (i64.const 37)
        (f32.const 1.2999999523162842)
        (f64.const 3.7)
       )
      )
      (drop
       (tuple.extract 2
        (tuple.make
         (i32.const 13)
         (i64.const 37)
         (f32.const 1.2999999523162842)
         (f64.const 3.7)
        )
       )
      )
      (push
       (i32.pop)
      )
      (push
       (i64.pop)
      )
      (push
       (f32.pop)
      )
      (push
       (f64.pop)
      )
      (push
       (funcref.pop)
      )
      (push
       (anyref.pop)
      )
      (push
       (nullref.pop)
      )
      (push
       (exnref.pop)
      )
      (push
       (funcref.pop)
      )
      (push
       (nullref.pop)
      )
      (push
       (exnref.pop)
      )
      (nop)
      (unreachable)
     )
    )
   )
   (i32.const 42)
  )
 )
 (func $starter
  (nop)
 )
)
(module
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_i64 (func (result i64)))
 (func $unreachable-fn (result i32)
  (call_indirect (type $none_=>_i64)
   (unreachable)
  )
 )
)
raw:
(module
 (type $none_=>_none (func))
 (type $i32_=>_none (func (param i32)))
 (type $none_=>_i32 (func (result i32)))
 (import "module" "check" (func $check (param i32)))
 (func $just-one-block
  (local $0 i32)
  (call $check
   (i32.const 1337)
  )
 )
 (func $two-blocks
  (local $0 i32)
  (block
   (call $check
    (i32.const 0)
   )
   (call $check
    (i32.const 1)
   )
  )
 )
 (func $two-blocks-plus-code
  (local $0 i32)
  (block
   (block
    (call $check
     (i32.const 0)
    )
    (drop
     (i32.const 77)
    )
   )
   (call $check
    (i32.const 1)
   )
  )
 )
 (func $loop
  (local $0 i32)
  (loop $shape$0$continue
   (block
    (call $check
     (i32.const 0)
    )
    (call $check
     (i32.const 1)
    )
   )
   (block
    (br $shape$0$continue)
   )
  )
 )
 (func $loop-plus-code
  (local $0 i32)
  (loop $shape$0$continue
   (block
    (block
     (call $check
      (i32.const 0)
     )
     (drop
      (i32.const 33)
     )
    )
    (call $check
     (i32.const 1)
    )
   )
   (block
    (drop
     (i32.const -66)
    )
    (br $shape$0$continue)
   )
  )
 )
 (func $split
  (local $0 i32)
  (call $check
   (i32.const 0)
  )
  (if
   (i32.const 55)
   (block
    (call $check
     (i32.const 1)
    )
   )
   (block
    (call $check
     (i32.const 2)
    )
   )
  )
 )
 (func $split-plus-code
  (local $0 i32)
  (call $check
   (i32.const 0)
  )
  (if
   (i32.const 55)
   (block
    (drop
     (i32.const 10)
    )
    (block
     (call $check
      (i32.const 1)
     )
    )
   )
   (block
    (drop
     (i32.const 20)
    )
    (block
     (call $check
      (i32.const 2)
     )
    )
   )
  )
 )
 (func $if
  (local $0 i32)
  (block $block$3$break
   (call $check
    (i32.const 0)
   )
   (if
    (i32.const 55)
    (block
     (call $check
      (i32.const 1)
     )
     (block
      (br $block$3$break)
     )
    )
    (br $block$3$break)
   )
  )
  (block
   (call $check
    (i32.const 2)
   )
  )
 )
 (func $if-plus-code
  (local $0 i32)
  (block $block$3$break
   (call $check
    (i32.const 0)
   )
   (if
    (i32.const 55)
    (block
     (drop
      (i32.const -1)
     )
     (block
      (call $check
       (i32.const 1)
      )
      (block
       (drop
        (i32.const -3)
       )
       (br $block$3$break)
      )
     )
    )
    (block
     (drop
      (i32.const -2)
     )
     (br $block$3$break)
    )
   )
  )
  (block
   (call $check
    (i32.const 2)
   )
  )
 )
 (func $if-else
  (local $0 i32)
  (block $block$4$break
   (call $check
    (i32.const 0)
   )
   (if
    (i32.const 55)
    (block
     (call $check
      (i32.const 1)
     )
     (block
      (br $block$4$break)
     )
    )
    (block
     (call $check
      (i32.const 2)
     )
     (block
      (br $block$4$break)
     )
    )
   )
  )
  (block
   (call $check
    (i32.const 3)
   )
  )
 )
 (func $loop-tail
  (local $0 i32)
  (block $block$3$break
   (loop $shape$0$continue
    (block
     (call $check
      (i32.const 0)
     )
     (call $check
      (i32.const 1)
     )
    )
    (if
     (i32.const 10)
     (br $shape$0$continue)
     (br $block$3$break)
    )
   )
  )
  (block
   (call $check
    (i32.const 2)
   )
  )
 )
 (func $nontrivial-loop-plus-phi-to-head
  (local $0 i32)
  (block $block$2$break
   (call $check
    (i32.const 0)
   )
   (block
    (drop
     (i32.const 10)
    )
    (br $block$2$break)
   )
  )
  (block
   (block $block$7$break
    (block $block$4$break
     (loop $shape$1$continue
      (block $block$3$break
       (call $check
        (i32.const 1)
       )
       (if
        (i32.const -2)
        (br $block$3$break)
        (block
         (drop
          (i32.const 20)
         )
         (br $block$7$break)
        )
       )
      )
      (block
       (call $check
        (i32.const 2)
       )
       (if
        (i32.const -6)
        (br $block$4$break)
        (block
         (drop
          (i32.const 30)
         )
         (br $shape$1$continue)
        )
       )
      )
     )
    )
    (block
     (block $block$6$break
      (call $check
       (i32.const 3)
      )
      (if
       (i32.const -10)
       (block
        (call $check
         (i32.const 4)
        )
        (block
         (br $block$6$break)
        )
       )
       (br $block$6$break)
      )
     )
     (block
      (call $check
       (i32.const 5)
      )
      (block
       (drop
        (i32.const 40)
       )
       (br $block$7$break)
      )
     )
    )
   )
   (block
    (call $check
     (i32.const 6)
    )
   )
  )
 )
 (func $switch
  (local $0 i32)
  (call $check
   (i32.const 0)
  )
  (block $switch$1$leave
   (block $switch$1$default
    (block $switch$1$case$3
     (block $switch$1$case$2
      (br_table $switch$1$default $switch$1$default $switch$1$case$2 $switch$1$default $switch$1$case$3 $switch$1$case$2 $switch$1$default
       (i32.const -99)
      )
     )
     (block
      (block
       (call $check
        (i32.const 1)
       )
      )
     )
     (br $switch$1$leave)
    )
    (block
     (drop
      (i32.const 55)
     )
     (block
      (call $check
       (i32.const 2)
      )
     )
    )
    (br $switch$1$leave)
   )
   (block
    (block
     (call $check
      (i32.const 3)
     )
    )
   )
   (br $switch$1$leave)
  )
 )
 (func $duffs-device
  (local $0 i32)
  (local $1 i32)
  (local $2 i64)
  (local $3 i32)
  (local $4 f32)
  (local $5 f64)
  (local $6 i32)
  (block
   (block $block$3$break
    (block $block$2$break
     (call $check
      (i32.const 0)
     )
     (if
      (i32.const 10)
      (block
       (local.set $3
        (i32.const 2)
       )
       (br $block$2$break)
      )
      (block
       (local.set $3
        (i32.const 3)
       )
       (br $block$3$break)
      )
     )
    )
   )
  )
  (loop $shape$1$continue
   (if
    (i32.eq
     (local.get $3)
     (i32.const 2)
    )
    (block
     (local.set $3
      (i32.const 0)
     )
     (call $check
      (i32.const 1)
     )
     (block
      (local.set $3
       (i32.const 3)
      )
      (br $shape$1$continue)
     )
    )
    (if
     (i32.eq
      (local.get $3)
      (i32.const 3)
     )
     (block
      (local.set $3
       (i32.const 0)
      )
      (call $check
       (i32.const 2)
      )
      (block
       (local.set $3
        (i32.const 2)
       )
       (br $shape$1$continue)
      )
     )
    )
   )
  )
 )
 (func $return (result i32)
  (local $0 i32)
  (block
   (call $check
    (i32.const 42)
   )
   (return
    (i32.const 1337)
   )
  )
 )
)
optimized:
(module
)
module loaded from binary form:
(module
 (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
 (func $adder (param $0 i32) (param $1 i32) (result i32)
  (i32.add
   (local.get $0)
   (local.get $1)
  )
 )
)
module s-expr printed (in memory):
(module
 (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
 (func $adder (param $0 i32) (param $1 i32) (result i32)
  (i32.add
   (local.get $0)
   (local.get $1)
  )
 )
)

module s-expr printed (in memory, caller-owned):
(module
 (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
 (func $adder (param $0 i32) (param $1 i32) (result i32)
  (i32.add
   (local.get $0)
   (local.get $1)
  )
 )
)

(module
 (type $none_=>_none (func))
 (type $i32_=>_none (func (param i32)))
 (import "spectest" "print" (func $print-i32 (param i32)))
 (start $starter)
 (func $starter
  (call $print-i32
   (i32.const 1234)
  )
 )
)
1234 : i32
(module
 (type $none_=>_none (func))
 (func $func
  (local $0 i32)
  (local.set $0
   (i64.const 1234)
  )
 )
)
validation: 0
(module
 (type $none_=>_none (func))
 (memory $0 1 256)
 (data (i32.const 10) "hello, world")
 (data (global.get $a-global) "segment data 2")
 (table $0 1 1 funcref)
 (elem (i32.const 0) $fn0 $fn1 $fn2)
 (global $a-global i32 (i32.const 125))
 (export "export0" (func $fn0))
 (export "export1" (func $fn1))
 (export "export2" (func $fn2))
 (export "mem" (memory $0))
 (func $fn0
  (nop)
 )
 (func $fn1
  (nop)
 )
 (func $fn2
  (nop)
 )
)
