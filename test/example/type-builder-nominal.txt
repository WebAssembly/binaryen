;; Test TypeBuilder
Before setting heap types:
$sig => (; temp ;) (func)
$struct => (; temp ;) (func)
$array => (; temp ;) (func)
(ref $sig) => (; temp ;) (ref $0)
(ref $struct) => (; temp ;) (ref $1)
(ref $array) => (; temp ;) (ref $2)
(ref null $array) => (; temp ;) (ref null $2)
After setting heap types:
$sig => (; temp ;) (func (param (; temp ;) (ref $1)) (result (; temp ;) (ref $2) i32))
$struct => (; temp ;) (struct (field (; temp ;) (ref null $2)))
$array => (; temp ;) (array (mut anyref))
(ref $sig) => (; temp ;) (ref $0)
(ref $struct) => (; temp ;) (ref $1)
(ref $array) => (; temp ;) (ref $2)
(ref null $array) => (; temp ;) (ref null $2)
After building types:
$sig => (func (param (ref $1)) (result (ref $2) i32))
$struct => (struct (field (ref null $2)))
$array => (array (mut anyref))
(ref $sig) => (ref $0)
(ref $struct) => (ref $1)
(ref $array) => (ref $2)
(ref null $array) => (ref null $2)
;; Test canonicalization
;; Test basic
;; Test canonical signatures
;; Test recursive types
(func (result (ref null $0)))

(func (result (ref null $1)))
(func (result (ref null $0)))

(func (result (ref null $1)))
(func (result (ref null $2)))
(func (result (ref null $3)))
(func (result (ref null $4)))
(func (result (ref null $0)))

(func (result (ref null $0) (ref null $2)))
(func (result (ref null $1) (ref null $3)))
(func)
(func)
(func (result (ref null $0)))
(func (result (ref null $1)))

(func (result (ref null $0)))
(func (result (ref null $0)))

;; Test subtyping
;; Test TypeBuilder
Before setting heap types:
$sig => (; temp ;) (func)
$struct => (; temp ;) (func)
$array => (; temp ;) (func)
(ref $sig) => (; temp ;) (ref $0)
(ref $struct) => (; temp ;) (ref $1)
(ref $array) => (; temp ;) (ref $2)
(ref null $array) => (; temp ;) (ref null $2)
After setting heap types:
$sig => (; temp ;) (func (param (; temp ;) (ref $1)) (result (; temp ;) (ref $2) i32))
$struct => (; temp ;) (struct (field (; temp ;) (ref null $2)))
$array => (; temp ;) (array (mut anyref))
(ref $sig) => (; temp ;) (ref $0)
(ref $struct) => (; temp ;) (ref $1)
(ref $array) => (; temp ;) (ref $2)
(ref null $array) => (; temp ;) (ref null $2)
After building types:
$sig => (func (param (ref $1)) (result (ref $2) i32))
$struct => (struct (field (ref null $2)))
$array => (array (mut anyref))
(ref $sig) => (ref $0)
(ref $struct) => (ref $1)
(ref $array) => (ref $2)
(ref null $array) => (ref null $2)
;; Test canonicalization
;; Test basic
;; Test canonical signatures
;; Test recursive types
(func (result (ref null $0)))

(func (result (ref null $1)))
(func (result (ref null $0)))

(func (result (ref null $1)))
(func (result (ref null $2)))
(func (result (ref null $3)))
(func (result (ref null $4)))
(func (result (ref null $0)))

(func (result (ref null $0) (ref null $2)))
(func (result (ref null $1) (ref null $3)))
(func)
(func)
(func (result (ref null $0)))
(func (result (ref null $1)))

(func (result (ref null $0)))
(func (result (ref null $0)))

;; Test subtyping
