;; Test TypeBuilder
Before setting heap types:
$sig => (type $0 (; temp ;) (func))
$struct => (type $1 (; temp ;) (func))
$array => (type $2 (; temp ;) (func))
(ref $sig) => (; temp ;) (ref $0)
(ref $struct) => (; temp ;) (ref $1)
(ref $array) => (; temp ;) (ref $2)
(ref null $array) => (; temp ;) (ref null $2)
After setting heap types:
$sig => (type $0 (; temp ;) (func (param (; temp ;) (ref $1)) (result (; temp ;) (ref $2) i32)))
$struct => (type $1 (; temp ;) (struct (field (; temp ;) (ref null $2))))
$array => (type $2 (; temp ;) (array (mut anyref)))
(ref $sig) => (; temp ;) (ref $0)
(ref $struct) => (; temp ;) (ref $1)
(ref $array) => (; temp ;) (ref $2)
(ref null $array) => (; temp ;) (ref null $2)
After building types:
$sig => (type $0 (func (param (ref $1)) (result (ref $2) i32)))
$struct => (type $1 (struct (field (ref null $2))))
$array => (type $2 (array (mut anyref)))
(ref $sig) => (ref $0)
(ref $struct) => (ref $1)
(ref $array) => (ref $2)
(ref null $array) => (ref null $2)
;; Test canonicalization
;; Test basic
;; Test canonical signatures
;; Test recursive types
(type $0 (func (result (ref null $0))))

(type $0 (func (result (ref null $1))))
(type $1 (func (result (ref null $0))))

(type $0 (func (result (ref null $1))))
(type $1 (func (result (ref null $2))))
(type $2 (func (result (ref null $3))))
(type $3 (func (result (ref null $4))))
(type $4 (func (result (ref null $0))))

(type $0 (func (result (ref null $0) (ref null $2))))
(type $1 (func (result (ref null $1) (ref null $3))))
(type $2 (func))
(type $3 (func))
(type $4 (func (result (ref null $0))))
(type $5 (func (result (ref null $1))))

(type $0 (func (result (ref null $0))))
(type $1 (func (result (ref null $0))))

;; Test subtyping
;; Test TypeBuilder
Before setting heap types:
$sig => (type $0 (; temp ;) (func))
$struct => (type $1 (; temp ;) (func))
$array => (type $2 (; temp ;) (func))
(ref $sig) => (; temp ;) (ref $0)
(ref $struct) => (; temp ;) (ref $1)
(ref $array) => (; temp ;) (ref $2)
(ref null $array) => (; temp ;) (ref null $2)
After setting heap types:
$sig => (type $0 (; temp ;) (func (param (; temp ;) (ref $1)) (result (; temp ;) (ref $2) i32)))
$struct => (type $1 (; temp ;) (struct (field (; temp ;) (ref null $2))))
$array => (type $2 (; temp ;) (array (mut anyref)))
(ref $sig) => (; temp ;) (ref $0)
(ref $struct) => (; temp ;) (ref $1)
(ref $array) => (; temp ;) (ref $2)
(ref null $array) => (; temp ;) (ref null $2)
After building types:
$sig => (type $0 (func (param (ref $1)) (result (ref $2) i32)))
$struct => (type $1 (struct (field (ref null $2))))
$array => (type $2 (array (mut anyref)))
(ref $sig) => (ref $0)
(ref $struct) => (ref $1)
(ref $array) => (ref $2)
(ref null $array) => (ref null $2)
;; Test canonicalization
;; Test basic
;; Test canonical signatures
;; Test recursive types
(type $0 (func (result (ref null $0))))

(type $0 (func (result (ref null $1))))
(type $1 (func (result (ref null $0))))

(type $0 (func (result (ref null $1))))
(type $1 (func (result (ref null $2))))
(type $2 (func (result (ref null $3))))
(type $3 (func (result (ref null $4))))
(type $4 (func (result (ref null $0))))

(type $0 (func (result (ref null $0) (ref null $2))))
(type $1 (func (result (ref null $1) (ref null $3))))
(type $2 (func))
(type $3 (func))
(type $4 (func (result (ref null $0))))
(type $5 (func (result (ref null $1))))

(type $0 (func (result (ref null $0))))
(type $1 (func (result (ref null $0))))

;; Test subtyping
