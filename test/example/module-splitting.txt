Before:
(module
)
Keeping: <none>
After:
(module
)
Secondary:
(module
)


Before:
(module
 (type $i32_=>_none (func (param i32)))
 (global $glob (mut i32) (i32.const 7))
 (memory $mem (shared 3 42))
 (table $tab 3 42 funcref)
 (event $e (attr 0) (param i32))
)
Keeping: <none>
After:
(module
 (type $i32_=>_none (func (param i32)))
 (global $glob (mut i32) (i32.const 7))
 (memory $mem (shared 3 42))
 (table $tab 3 42 funcref)
 (event $e (attr 0) (param i32))
 (export "%memory" (memory $mem))
 (export "%table" (table $tab))
 (export "%global" (global $glob))
 (export "%event" (event $e))
)
Secondary:
(module
 (type $i32_=>_none (func (param i32)))
 (import "primary" "%memory" (memory $mem (shared 3 42)))
 (import "primary" "%table" (table $tab 3 42 funcref))
 (import "primary" "%global" (global $glob (mut i32)))
 (import "primary" "%event" (event $e (attr 0) (param i32)))
)


Before:
(module
 (type $i32_=>_none (func (param i32)))
 (import "env" "mem" (memory $mem (shared 3 42)))
 (import "env" "tab" (table $tab 3 42 funcref))
 (import "env" "glob" (global $glob (mut i32)))
 (import "env" "e" (event $e (attr 0) (param i32)))
)
Keeping: <none>
After:
(module
 (type $i32_=>_none (func (param i32)))
 (import "env" "mem" (memory $mem (shared 3 42)))
 (import "env" "tab" (table $tab 3 42 funcref))
 (import "env" "glob" (global $glob (mut i32)))
 (import "env" "e" (event $e (attr 0) (param i32)))
 (export "%memory" (memory $mem))
 (export "%table" (table $tab))
 (export "%global" (global $glob))
 (export "%event" (event $e))
)
Secondary:
(module
 (type $i32_=>_none (func (param i32)))
 (import "primary" "%memory" (memory $mem (shared 3 42)))
 (import "primary" "%table" (table $tab 3 42 funcref))
 (import "primary" "%global" (global $glob (mut i32)))
 (import "primary" "%event" (event $e (attr 0) (param i32)))
)


Before:
(module
 (type $i32_=>_none (func (param i32)))
 (global $glob (mut i32) (i32.const 7))
 (memory $mem (shared 3 42))
 (table $tab 3 42 funcref)
 (event $e (attr 0) (param i32))
 (export "mem" (memory $mem))
 (export "tab" (table $tab))
 (export "glob" (global $glob))
 (export "e" (event $e))
)
Keeping: <none>
After:
(module
 (type $i32_=>_none (func (param i32)))
 (global $glob (mut i32) (i32.const 7))
 (memory $mem (shared 3 42))
 (table $tab 3 42 funcref)
 (event $e (attr 0) (param i32))
 (export "mem" (memory $mem))
 (export "tab" (table $tab))
 (export "glob" (global $glob))
 (export "e" (event $e))
)
Secondary:
(module
 (type $i32_=>_none (func (param i32)))
 (import "primary" "mem" (memory $mem (shared 3 42)))
 (import "primary" "tab" (table $tab 3 42 funcref))
 (import "primary" "glob" (global $glob (mut i32)))
 (import "primary" "e" (event $e (attr 0) (param i32)))
)


Before:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)
Keeping: foo
After:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)
Secondary:
(module
)


Before:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (export "foo" (func $foo))
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)
Keeping: foo
After:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (export "foo" (func $foo))
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)
Secondary:
(module
)


Before:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (table $table 1 funcref)
 (elem (i32.const 0) $foo)
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)
Keeping: foo
After:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (table $table 1 funcref)
 (elem (i32.const 0) $foo)
 (export "%table" (table $table))
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)
Secondary:
(module
 (import "primary" "%table" (table $table 1 funcref))
)


Before:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (table $table 2 funcref)
 (elem (i32.const 0) $foo $foo)
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)
Keeping: foo
After:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (table $table 2 funcref)
 (elem (i32.const 0) $foo $foo)
 (export "%table" (table $table))
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)
Secondary:
(module
 (import "primary" "%table" (table $table 2 funcref))
)


Before:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "env" "base" (global $base i32))
 (table $table 1 funcref)
 (elem (global.get $base) $foo)
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)
Keeping: foo
After:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "env" "base" (global $base i32))
 (table $table 1 funcref)
 (elem (global.get $base) $foo)
 (export "%table" (table $table))
 (export "%global" (global $base))
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)
Secondary:
(module
 (import "primary" "%table" (table $table 1 funcref))
 (import "primary" "%global" (global $base i32))
)


Before:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "env" "base" (global $base i32))
 (table $table 2 funcref)
 (elem (global.get $base) $foo $foo)
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)
Keeping: foo
After:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "env" "base" (global $base i32))
 (table $table 2 funcref)
 (elem (global.get $base) $foo $foo)
 (export "%table" (table $table))
 (export "%global" (global $base))
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)
Secondary:
(module
 (import "primary" "%table" (table $table 2 funcref))
 (import "primary" "%global" (global $base i32))
)


Before:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "env" "foo" (func $foo (param i32) (result i32)))
)
Keeping: foo
After:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "env" "foo" (func $foo (param i32) (result i32)))
)
Secondary:
(module
)


Before:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "env" "foo" (func $foo (param i32) (result i32)))
 (table $table 1000 funcref)
 (elem (i32.const 42) $foo)
 (export "foo" (func $foo))
)
Keeping: foo
After:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "env" "foo" (func $foo (param i32) (result i32)))
 (table $table 1000 funcref)
 (elem (i32.const 42) $foo)
 (export "foo" (func $foo))
 (export "%table" (table $table))
)
Secondary:
(module
 (import "primary" "%table" (table $table 1000 funcref))
)


Before:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "env" "base" (global $base i32))
 (import "env" "foo" (func $foo (param i32) (result i32)))
 (table $table 1000 funcref)
 (elem (global.get $base) $foo)
 (export "foo" (func $foo))
)
Keeping: foo
After:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "env" "base" (global $base i32))
 (import "env" "foo" (func $foo (param i32) (result i32)))
 (table $table 1000 funcref)
 (elem (global.get $base) $foo)
 (export "foo" (func $foo))
 (export "%table" (table $table))
 (export "%global" (global $base))
)
Secondary:
(module
 (import "primary" "%table" (table $table 1000 funcref))
 (import "primary" "%global" (global $base i32))
)


Before:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)
Keeping: <none>
After:
(module
)
Secondary:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)


Before:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (export "foo" (func $foo))
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)
Keeping: <none>
After:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "placeholder" "0" (func $placeholder_0 (param i32) (result i32)))
 (table $0 1 funcref)
 (elem (i32.const 0) $placeholder_0)
 (export "foo" (func $foo))
 (export "%table" (table $0))
 (func $foo (param $0 i32) (result i32)
  (call_indirect $0 (type $i32_=>_i32)
   (local.get $0)
   (i32.const 0)
  )
 )
)
Secondary:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "primary" "%table" (table $0 1 funcref))
 (elem (i32.const 0) $foo)
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)


Before:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (table $table 1 funcref)
 (elem (i32.const 0) $foo)
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)
Keeping: <none>
After:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "placeholder" "0" (func $placeholder_0 (param i32) (result i32)))
 (table $table 1 funcref)
 (elem (i32.const 0) $placeholder_0)
 (export "%table" (table $table))
)
Secondary:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "primary" "%table" (table $table 1 funcref))
 (elem (i32.const 0) $foo)
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)


Before:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (table $table 2 funcref)
 (elem (i32.const 0) $foo $foo)
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)
Keeping: <none>
After:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "placeholder" "0" (func $placeholder_0 (param i32) (result i32)))
 (import "placeholder" "1" (func $placeholder_1 (param i32) (result i32)))
 (table $table 2 funcref)
 (elem (i32.const 0) $placeholder_0 $placeholder_1)
 (export "%table" (table $table))
)
Secondary:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "primary" "%table" (table $table 2 funcref))
 (elem (i32.const 0) $foo $foo)
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)


Before:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (table $table 1000 funcref)
 (elem (i32.const 42) $foo)
 (export "foo" (func $foo))
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)
Keeping: <none>
After:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "placeholder" "42" (func $placeholder_42 (param i32) (result i32)))
 (table $table 1000 funcref)
 (elem (i32.const 42) $placeholder_42)
 (export "foo" (func $foo))
 (export "%table" (table $table))
 (func $foo (param $0 i32) (result i32)
  (call_indirect $table (type $i32_=>_i32)
   (local.get $0)
   (i32.const 42)
  )
 )
)
Secondary:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "primary" "%table" (table $table 1000 funcref))
 (elem (i32.const 42) $foo)
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)


Before:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "env" "base" (global $base i32))
 (table $table 1000 funcref)
 (elem (global.get $base) $foo)
 (export "foo" (func $foo))
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)
Keeping: <none>
After:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "env" "base" (global $base i32))
 (import "placeholder" "0" (func $placeholder_0 (param i32) (result i32)))
 (table $table 1000 funcref)
 (elem (global.get $base) $placeholder_0)
 (export "foo" (func $foo))
 (export "%table" (table $table))
 (export "%global" (global $base))
 (func $foo (param $0 i32) (result i32)
  (call_indirect $table (type $i32_=>_i32)
   (local.get $0)
   (global.get $base)
  )
 )
)
Secondary:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "primary" "%table" (table $table 1000 funcref))
 (import "primary" "%global" (global $base i32))
 (elem (global.get $base) $foo)
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)


Before:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "env" "base" (global $base i32))
 (table $table 1000 funcref)
 (elem (global.get $base) $foo $foo)
 (export "foo" (func $foo))
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)
Keeping: <none>
After:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "env" "base" (global $base i32))
 (import "placeholder" "0" (func $placeholder_0 (param i32) (result i32)))
 (import "placeholder" "1" (func $placeholder_1 (param i32) (result i32)))
 (table $table 1000 funcref)
 (elem (global.get $base) $placeholder_0 $placeholder_1)
 (export "foo" (func $foo))
 (export "%table" (table $table))
 (export "%global" (global $base))
 (func $foo (param $0 i32) (result i32)
  (call_indirect $table (type $i32_=>_i32)
   (local.get $0)
   (global.get $base)
  )
 )
)
Secondary:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "primary" "%table" (table $table 1000 funcref))
 (import "primary" "%global" (global $base i32))
 (elem (global.get $base) $foo $foo)
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)


Before:
(module
 (type $none_=>_none (func))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "env" "base" (global $base i32))
 (table $table 1000 funcref)
 (elem (global.get $base) $null $foo)
 (export "foo" (func $foo))
 (func $null
  (nop)
 )
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)
Keeping: null
After:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "base" (global $base i32))
 (import "placeholder" "1" (func $placeholder_1 (param i32) (result i32)))
 (table $table 1000 funcref)
 (elem (global.get $base) $null $placeholder_1)
 (export "foo" (func $foo))
 (export "%null" (func $null))
 (export "%table" (table $table))
 (export "%global" (global $base))
 (func $null
  (nop)
 )
 (func $foo (param $0 i32) (result i32)
  (call_indirect $table (type $i32_=>_i32)
   (local.get $0)
   (i32.add
    (global.get $base)
    (i32.const 1)
   )
  )
 )
)
Secondary:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "primary" "%table" (table $table 1000 funcref))
 (import "primary" "%global" (global $base i32))
 (import "primary" "%null" (func $null))
 (elem (global.get $base) $null $foo)
 (func $foo (param $0 i32) (result i32)
  (local.get $0)
 )
)


Before:
(module
 (type $none_=>_none (func))
 (func $foo
  (call $bar)
 )
 (func $bar
  (nop)
 )
)
Keeping: bar, foo
After:
(module
 (type $none_=>_none (func))
 (func $foo
  (call $bar)
 )
 (func $bar
  (nop)
 )
)
Secondary:
(module
)


Before:
(module
 (type $none_=>_none (func))
 (func $foo
  (call $bar)
 )
 (func $bar
  (nop)
 )
)
Keeping: bar
After:
(module
 (type $none_=>_none (func))
 (export "%bar" (func $bar))
 (func $bar
  (nop)
 )
)
Secondary:
(module
 (type $none_=>_none (func))
 (import "primary" "%bar" (func $bar))
 (func $foo
  (call $bar)
 )
)


Before:
(module
 (type $none_=>_none (func))
 (func $foo
  (call $bar)
 )
 (func $bar
  (nop)
 )
)
Keeping: foo
After:
(module
 (type $none_=>_none (func))
 (import "placeholder" "0" (func $placeholder_0))
 (table $0 1 funcref)
 (elem (i32.const 0) $placeholder_0)
 (export "%table" (table $0))
 (func $foo
  (call_indirect $0 (type $none_=>_none)
   (i32.const 0)
  )
 )
)
Secondary:
(module
 (type $none_=>_none (func))
 (import "primary" "%table" (table $0 1 funcref))
 (elem (i32.const 0) $bar)
 (func $bar
  (nop)
 )
)


Before:
(module
 (type $none_=>_none (func))
 (func $foo
  (call $bar)
 )
 (func $bar
  (nop)
 )
)
Keeping: <none>
After:
(module
)
Secondary:
(module
 (type $none_=>_none (func))
 (func $bar
  (nop)
 )
 (func $foo
  (call $bar)
 )
)


Before:
(module
 (type $none_=>_none (func))
 (export "%foo" (func $bar))
 (func $foo
  (nop)
 )
 (func $bar
  (call $foo)
 )
)
Keeping: foo
After:
(module
 (type $none_=>_none (func))
 (import "placeholder" "0" (func $placeholder_0))
 (table $0 1 funcref)
 (elem (i32.const 0) $placeholder_0)
 (export "%foo" (func $bar))
 (export "%foo_0" (func $foo))
 (export "%table" (table $0))
 (func $foo
  (nop)
 )
 (func $bar
  (call_indirect $0 (type $none_=>_none)
   (i32.const 0)
  )
 )
)
Secondary:
(module
 (type $none_=>_none (func))
 (import "primary" "%table" (table $0 1 funcref))
 (import "primary" "%foo_0" (func $foo))
 (elem (i32.const 0) $bar)
 (func $bar
  (call $foo)
 )
)


Before:
(module
 (type $none_=>_none (func))
 (table $table 4 funcref)
 (elem (i32.const 0) $foo $bar $baz $quux)
 (func $foo
  (nop)
 )
 (func $bar
  (nop)
 )
 (func $baz
  (nop)
 )
 (func $quux
  (nop)
 )
)
Keeping: bar, quux
After:
(module
 (type $none_=>_none (func))
 (import "placeholder" "0" (func $placeholder_0))
 (import "placeholder" "2" (func $placeholder_2))
 (table $table 4 funcref)
 (elem (i32.const 0) $placeholder_0 $bar $placeholder_2 $quux)
 (export "%table" (table $table))
 (func $bar
  (nop)
 )
 (func $quux
  (nop)
 )
)
Secondary:
(module
 (type $none_=>_none (func))
 (import "primary" "%table" (table $table 4 funcref))
 (elem $0 (i32.const 0) $foo)
 (elem $1 (i32.const 2) $baz)
 (func $baz
  (nop)
 )
 (func $foo
  (nop)
 )
)


Before:
(module
 (type $none_=>_none (func))
 (import "env" "base" (global $base i32))
 (table $table 4 funcref)
 (elem (global.get $base) $foo $bar $baz $quux)
 (func $foo
  (nop)
 )
 (func $bar
  (nop)
 )
 (func $baz
  (nop)
 )
 (func $quux
  (nop)
 )
)
Keeping: bar, quux
After:
(module
 (type $none_=>_none (func))
 (import "env" "base" (global $base i32))
 (import "placeholder" "0" (func $placeholder_0))
 (import "placeholder" "2" (func $placeholder_2))
 (table $table 4 funcref)
 (elem (global.get $base) $placeholder_0 $bar $placeholder_2 $quux)
 (export "%bar" (func $bar))
 (export "%table" (table $table))
 (export "%global" (global $base))
 (func $bar
  (nop)
 )
 (func $quux
  (nop)
 )
)
Secondary:
(module
 (type $none_=>_none (func))
 (import "primary" "%table" (table $table 4 funcref))
 (import "primary" "%global" (global $base i32))
 (import "primary" "%bar" (func $bar))
 (elem (global.get $base) $foo $bar $baz)
 (func $baz
  (nop)
 )
 (func $foo
  (nop)
 )
)


Before:
(module
 (type $none_=>_none (func))
 (table $table 4 funcref)
 (elem (i32.const 0) $foo $bar $baz $quux)
 (func $foo
  (nop)
 )
 (func $bar
  (nop)
 )
 (func $baz
  (nop)
 )
 (func $quux
  (nop)
 )
)
Keeping: baz
After:
(module
 (type $none_=>_none (func))
 (import "placeholder" "0" (func $placeholder_0))
 (import "placeholder" "1" (func $placeholder_1))
 (import "placeholder" "3" (func $placeholder_3))
 (table $table 4 funcref)
 (elem (i32.const 0) $placeholder_0 $placeholder_1 $baz $placeholder_3)
 (export "%table" (table $table))
 (func $baz
  (nop)
 )
)
Secondary:
(module
 (type $none_=>_none (func))
 (import "primary" "%table" (table $table 4 funcref))
 (elem $0 (i32.const 0) $foo $bar)
 (elem $1 (i32.const 3) $quux)
 (func $bar
  (nop)
 )
 (func $foo
  (nop)
 )
 (func $quux
  (nop)
 )
)


Before:
(module
 (type $none_=>_none (func))
 (import "env" "base" (global $base i32))
 (table $table 4 funcref)
 (elem (global.get $base) $foo $bar $baz $quux)
 (func $foo
  (nop)
 )
 (func $bar
  (nop)
 )
 (func $baz
  (nop)
 )
 (func $quux
  (nop)
 )
)
Keeping: baz
After:
(module
 (type $none_=>_none (func))
 (import "env" "base" (global $base i32))
 (import "placeholder" "0" (func $placeholder_0))
 (import "placeholder" "1" (func $placeholder_1))
 (import "placeholder" "3" (func $placeholder_3))
 (table $table 4 funcref)
 (elem (global.get $base) $placeholder_0 $placeholder_1 $baz $placeholder_3)
 (export "%baz" (func $baz))
 (export "%table" (table $table))
 (export "%global" (global $base))
 (func $baz
  (nop)
 )
)
Secondary:
(module
 (type $none_=>_none (func))
 (import "primary" "%table" (table $table 4 funcref))
 (import "primary" "%global" (global $base i32))
 (import "primary" "%baz" (func $baz))
 (elem (global.get $base) $foo $bar $baz $quux)
 (func $bar
  (nop)
 )
 (func $foo
  (nop)
 )
 (func $quux
  (nop)
 )
)


Before:
(module
 (type $none_=>_none (func))
 (import "env" "base" (global $base i32))
 (table $table 2 funcref)
 (elem (global.get $base) $foo $bar)
 (func $foo
  (nop)
 )
 (func $bar
  (call $foo)
 )
)
Keeping: foo
After:
(module
 (type $none_=>_none (func))
 (import "env" "base" (global $base i32))
 (import "placeholder" "1" (func $placeholder_1))
 (table $table 2 funcref)
 (elem (global.get $base) $foo $placeholder_1)
 (export "%foo" (func $foo))
 (export "%table" (table $table))
 (export "%global" (global $base))
 (func $foo
  (nop)
 )
)
Secondary:
(module
 (type $none_=>_none (func))
 (import "primary" "%table" (table $table 2 funcref))
 (import "primary" "%global" (global $base i32))
 (import "primary" "%foo" (func $foo))
 (elem (global.get $base) $foo $bar)
 (func $bar
  (call $foo)
 )
)


Before:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (table $table 1 1 funcref)
 (elem (i32.const 0) $foo)
 (func $foo (param $0 i32) (result i32)
  (call $bar
   (i32.const 0)
  )
 )
 (func $bar (param $0 i32) (result i32)
  (call $foo
   (i32.const 1)
  )
 )
)
Keeping: foo
After:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "placeholder" "1" (func $placeholder_1 (param i32) (result i32)))
 (table $table 2 2 funcref)
 (elem (i32.const 0) $foo $placeholder_1)
 (export "%foo" (func $foo))
 (export "%table" (table $table))
 (func $foo (param $0 i32) (result i32)
  (call_indirect $table (type $i32_=>_i32)
   (i32.const 0)
   (i32.const 1)
  )
 )
)
Secondary:
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "primary" "%table" (table $table 2 2 funcref))
 (import "primary" "%foo" (func $foo (param i32) (result i32)))
 (elem (i32.const 1) $bar)
 (func $bar (param $0 i32) (result i32)
  (call $foo
   (i32.const 1)
  )
 )
)


Before:
(module
 (type $none_=>_none (func))
 (export "foo1" (func $foo))
 (export "foo2" (func $foo))
 (func $foo
  (nop)
 )
)
Keeping: <none>
After:
(module
 (type $none_=>_none (func))
 (import "placeholder" "0" (func $placeholder_0))
 (table $0 1 funcref)
 (elem (i32.const 0) $placeholder_0)
 (export "foo1" (func $foo))
 (export "foo2" (func $foo))
 (export "%table" (table $0))
 (func $foo
  (call_indirect $0 (type $none_=>_none)
   (i32.const 0)
  )
 )
)
Secondary:
(module
 (type $none_=>_none (func))
 (import "primary" "%table" (table $0 1 funcref))
 (elem (i32.const 0) $foo)
 (func $foo
  (nop)
 )
)


Minimized names primary:
(module
 (type $none_=>_none (func))
 (export "already_exported" (func $050))
 (export "% " (func $000))
 (export "%!" (func $001))
 (export "%"" (func $002))
 (export "%#" (func $003))
 (export "%$" (func $004))
 (export "%%" (func $005))
 (export "%&" (func $006))
 (export "%'" (func $007))
 (export "%(" (func $008))
 (export "%)" (func $009))
 (export "%*" (func $010))
 (export "%+" (func $011))
 (export "%," (func $012))
 (export "%-" (func $013))
 (export "%." (func $014))
 (export "%/" (func $015))
 (export "%0" (func $016))
 (export "%1" (func $017))
 (export "%2" (func $018))
 (export "%3" (func $019))
 (export "%4" (func $020))
 (export "%5" (func $021))
 (export "%6" (func $022))
 (export "%7" (func $023))
 (export "%8" (func $024))
 (export "%9" (func $025))
 (export "%:" (func $026))
 (export "%;" (func $027))
 (export "%<" (func $028))
 (export "%=" (func $029))
 (export "%>" (func $030))
 (export "%?" (func $031))
 (export "%@" (func $032))
 (export "%A" (func $033))
 (export "%B" (func $034))
 (export "%C" (func $035))
 (export "%D" (func $036))
 (export "%E" (func $037))
 (export "%F" (func $038))
 (export "%G" (func $039))
 (export "%H" (func $040))
 (export "%I" (func $041))
 (export "%J" (func $042))
 (export "%K" (func $043))
 (export "%L" (func $044))
 (export "%M" (func $045))
 (export "%N" (func $046))
 (export "%O" (func $047))
 (export "%P" (func $048))
 (export "%Q" (func $049))
 (export "%R" (func $051))
 (export "%S" (func $052))
 (export "%T" (func $053))
 (export "%U" (func $054))
 (export "%V" (func $055))
 (export "%W" (func $056))
 (export "%X" (func $057))
 (export "%Y" (func $058))
 (export "%Z" (func $059))
 (export "%[" (func $060))
 (export "%\" (func $061))
 (export "%]" (func $062))
 (export "%^" (func $063))
 (export "%_" (func $064))
 (export "%`" (func $065))
 (export "%a" (func $066))
 (export "%b" (func $067))
 (export "%c" (func $068))
 (export "%d" (func $069))
 (export "%e" (func $070))
 (export "%f" (func $071))
 (export "%g" (func $072))
 (export "%h" (func $073))
 (export "%i" (func $074))
 (export "%j" (func $075))
 (export "%k" (func $076))
 (export "%l" (func $077))
 (export "%m" (func $078))
 (export "%n" (func $079))
 (export "%o" (func $080))
 (export "%p" (func $081))
 (export "%q" (func $082))
 (export "%r" (func $083))
 (export "%s" (func $084))
 (export "%t" (func $085))
 (export "%u" (func $086))
 (export "%v" (func $087))
 (export "%w" (func $088))
 (export "%x" (func $089))
 (export "%y" (func $090))
 (export "%z" (func $091))
 (export "%{" (func $092))
 (export "%|" (func $093))
 (export "%}" (func $094))
 (export "%~" (func $095))
 (export "% !" (func $096))
 (export "%!!" (func $097))
 (export "%"!" (func $098))
 (export "%#!" (func $099))
 (func $000
  (nop)
 )
 (func $001
  (nop)
 )
 (func $002
  (nop)
 )
 (func $003
  (nop)
 )
 (func $004
  (nop)
 )
 (func $005
  (nop)
 )
 (func $006
  (nop)
 )
 (func $007
  (nop)
 )
 (func $008
  (nop)
 )
 (func $009
  (nop)
 )
 (func $010
  (nop)
 )
 (func $011
  (nop)
 )
 (func $012
  (nop)
 )
 (func $013
  (nop)
 )
 (func $014
  (nop)
 )
 (func $015
  (nop)
 )
 (func $016
  (nop)
 )
 (func $017
  (nop)
 )
 (func $018
  (nop)
 )
 (func $019
  (nop)
 )
 (func $020
  (nop)
 )
 (func $021
  (nop)
 )
 (func $022
  (nop)
 )
 (func $023
  (nop)
 )
 (func $024
  (nop)
 )
 (func $025
  (nop)
 )
 (func $026
  (nop)
 )
 (func $027
  (nop)
 )
 (func $028
  (nop)
 )
 (func $029
  (nop)
 )
 (func $030
  (nop)
 )
 (func $031
  (nop)
 )
 (func $032
  (nop)
 )
 (func $033
  (nop)
 )
 (func $034
  (nop)
 )
 (func $035
  (nop)
 )
 (func $036
  (nop)
 )
 (func $037
  (nop)
 )
 (func $038
  (nop)
 )
 (func $039
  (nop)
 )
 (func $040
  (nop)
 )
 (func $041
  (nop)
 )
 (func $042
  (nop)
 )
 (func $043
  (nop)
 )
 (func $044
  (nop)
 )
 (func $045
  (nop)
 )
 (func $046
  (nop)
 )
 (func $047
  (nop)
 )
 (func $048
  (nop)
 )
 (func $049
  (nop)
 )
 (func $050
  (nop)
 )
 (func $051
  (nop)
 )
 (func $052
  (nop)
 )
 (func $053
  (nop)
 )
 (func $054
  (nop)
 )
 (func $055
  (nop)
 )
 (func $056
  (nop)
 )
 (func $057
  (nop)
 )
 (func $058
  (nop)
 )
 (func $059
  (nop)
 )
 (func $060
  (nop)
 )
 (func $061
  (nop)
 )
 (func $062
  (nop)
 )
 (func $063
  (nop)
 )
 (func $064
  (nop)
 )
 (func $065
  (nop)
 )
 (func $066
  (nop)
 )
 (func $067
  (nop)
 )
 (func $068
  (nop)
 )
 (func $069
  (nop)
 )
 (func $070
  (nop)
 )
 (func $071
  (nop)
 )
 (func $072
  (nop)
 )
 (func $073
  (nop)
 )
 (func $074
  (nop)
 )
 (func $075
  (nop)
 )
 (func $076
  (nop)
 )
 (func $077
  (nop)
 )
 (func $078
  (nop)
 )
 (func $079
  (nop)
 )
 (func $080
  (nop)
 )
 (func $081
  (nop)
 )
 (func $082
  (nop)
 )
 (func $083
  (nop)
 )
 (func $084
  (nop)
 )
 (func $085
  (nop)
 )
 (func $086
  (nop)
 )
 (func $087
  (nop)
 )
 (func $088
  (nop)
 )
 (func $089
  (nop)
 )
 (func $090
  (nop)
 )
 (func $091
  (nop)
 )
 (func $092
  (nop)
 )
 (func $093
  (nop)
 )
 (func $094
  (nop)
 )
 (func $095
  (nop)
 )
 (func $096
  (nop)
 )
 (func $097
  (nop)
 )
 (func $098
  (nop)
 )
 (func $099
  (nop)
 )
)

Minimized names secondary:
(module
 (type $none_=>_none (func))
 (import "primary" "% " (func $000))
 (import "primary" "%!" (func $001))
 (import "primary" "%"" (func $002))
 (import "primary" "%#" (func $003))
 (import "primary" "%$" (func $004))
 (import "primary" "%%" (func $005))
 (import "primary" "%&" (func $006))
 (import "primary" "%'" (func $007))
 (import "primary" "%(" (func $008))
 (import "primary" "%)" (func $009))
 (import "primary" "%*" (func $010))
 (import "primary" "%+" (func $011))
 (import "primary" "%," (func $012))
 (import "primary" "%-" (func $013))
 (import "primary" "%." (func $014))
 (import "primary" "%/" (func $015))
 (import "primary" "%0" (func $016))
 (import "primary" "%1" (func $017))
 (import "primary" "%2" (func $018))
 (import "primary" "%3" (func $019))
 (import "primary" "%4" (func $020))
 (import "primary" "%5" (func $021))
 (import "primary" "%6" (func $022))
 (import "primary" "%7" (func $023))
 (import "primary" "%8" (func $024))
 (import "primary" "%9" (func $025))
 (import "primary" "%:" (func $026))
 (import "primary" "%;" (func $027))
 (import "primary" "%<" (func $028))
 (import "primary" "%=" (func $029))
 (import "primary" "%>" (func $030))
 (import "primary" "%?" (func $031))
 (import "primary" "%@" (func $032))
 (import "primary" "%A" (func $033))
 (import "primary" "%B" (func $034))
 (import "primary" "%C" (func $035))
 (import "primary" "%D" (func $036))
 (import "primary" "%E" (func $037))
 (import "primary" "%F" (func $038))
 (import "primary" "%G" (func $039))
 (import "primary" "%H" (func $040))
 (import "primary" "%I" (func $041))
 (import "primary" "%J" (func $042))
 (import "primary" "%K" (func $043))
 (import "primary" "%L" (func $044))
 (import "primary" "%M" (func $045))
 (import "primary" "%N" (func $046))
 (import "primary" "%O" (func $047))
 (import "primary" "%P" (func $048))
 (import "primary" "%Q" (func $049))
 (import "primary" "already_exported" (func $050))
 (import "primary" "%R" (func $051))
 (import "primary" "%S" (func $052))
 (import "primary" "%T" (func $053))
 (import "primary" "%U" (func $054))
 (import "primary" "%V" (func $055))
 (import "primary" "%W" (func $056))
 (import "primary" "%X" (func $057))
 (import "primary" "%Y" (func $058))
 (import "primary" "%Z" (func $059))
 (import "primary" "%[" (func $060))
 (import "primary" "%\" (func $061))
 (import "primary" "%]" (func $062))
 (import "primary" "%^" (func $063))
 (import "primary" "%_" (func $064))
 (import "primary" "%`" (func $065))
 (import "primary" "%a" (func $066))
 (import "primary" "%b" (func $067))
 (import "primary" "%c" (func $068))
 (import "primary" "%d" (func $069))
 (import "primary" "%e" (func $070))
 (import "primary" "%f" (func $071))
 (import "primary" "%g" (func $072))
 (import "primary" "%h" (func $073))
 (import "primary" "%i" (func $074))
 (import "primary" "%j" (func $075))
 (import "primary" "%k" (func $076))
 (import "primary" "%l" (func $077))
 (import "primary" "%m" (func $078))
 (import "primary" "%n" (func $079))
 (import "primary" "%o" (func $080))
 (import "primary" "%p" (func $081))
 (import "primary" "%q" (func $082))
 (import "primary" "%r" (func $083))
 (import "primary" "%s" (func $084))
 (import "primary" "%t" (func $085))
 (import "primary" "%u" (func $086))
 (import "primary" "%v" (func $087))
 (import "primary" "%w" (func $088))
 (import "primary" "%x" (func $089))
 (import "primary" "%y" (func $090))
 (import "primary" "%z" (func $091))
 (import "primary" "%{" (func $092))
 (import "primary" "%|" (func $093))
 (import "primary" "%}" (func $094))
 (import "primary" "%~" (func $095))
 (import "primary" "% !" (func $096))
 (import "primary" "%!!" (func $097))
 (import "primary" "%"!" (func $098))
 (import "primary" "%#!" (func $099))
 (func $call
  (call $000)
  (call $001)
  (call $002)
  (call $003)
  (call $004)
  (call $005)
  (call $006)
  (call $007)
  (call $008)
  (call $009)
  (call $010)
  (call $011)
  (call $012)
  (call $013)
  (call $014)
  (call $015)
  (call $016)
  (call $017)
  (call $018)
  (call $019)
  (call $020)
  (call $021)
  (call $022)
  (call $023)
  (call $024)
  (call $025)
  (call $026)
  (call $027)
  (call $028)
  (call $029)
  (call $030)
  (call $031)
  (call $032)
  (call $033)
  (call $034)
  (call $035)
  (call $036)
  (call $037)
  (call $038)
  (call $039)
  (call $040)
  (call $041)
  (call $042)
  (call $043)
  (call $044)
  (call $045)
  (call $046)
  (call $047)
  (call $048)
  (call $049)
  (call $050)
  (call $051)
  (call $052)
  (call $053)
  (call $054)
  (call $055)
  (call $056)
  (call $057)
  (call $058)
  (call $059)
  (call $060)
  (call $061)
  (call $062)
  (call $063)
  (call $064)
  (call $065)
  (call $066)
  (call $067)
  (call $068)
  (call $069)
  (call $070)
  (call $071)
  (call $072)
  (call $073)
  (call $074)
  (call $075)
  (call $076)
  (call $077)
  (call $078)
  (call $079)
  (call $080)
  (call $081)
  (call $082)
  (call $083)
  (call $084)
  (call $085)
  (call $086)
  (call $087)
  (call $088)
  (call $089)
  (call $090)
  (call $091)
  (call $092)
  (call $093)
  (call $094)
  (call $095)
  (call $096)
  (call $097)
  (call $098)
  (call $099)
 )
)

