(module
 (import "env" "STACKTOP" (global $STACKTOP$asm2wasm$import i32))
 (import "env" "memory" (memory $0 (shared 256 256)))
 (import "env" "table" (table 0 0 anyfunc))
 (import "env" "memoryBase" (global $memoryBase i32))
 (import "env" "tableBase" (global $tableBase i32))
 (global $STACKTOP (mut i32) (get_global $STACKTOP$asm2wasm$import))
 (global $tempRet0 (mut i32) (i32.const 0))
 (export "test64" (func $legalstub$test64))
 (func $test64 (; 0 ;) (result i64)
  (local $x i64)
  (local $y i64)
  (local $z i32)
  (local $int32 i32)
  (local $float32 f32)
  (local $float64 f64)
  (i64.atomic.store
   (i32.const 4656)
   (i64.const 92)
  )
  (set_local $x
   (i64.atomic.load
    (i32.const 4656)
   )
  )
  (set_local $y
   (i64.atomic.rmw.add
    (get_local $int32)
    (i64.const 26)
   )
  )
  (set_local $x
   (i64.atomic.rmw.sub
    (i32.const 1024)
    (get_local $y)
   )
  )
  (set_local $y
   (i64.atomic.rmw.and
    (i32.const 1024)
    (get_local $x)
   )
  )
  (set_local $x
   (i64.atomic.rmw.or
    (i32.const 1024)
    (get_local $y)
   )
  )
  (set_local $y
   (i64.atomic.rmw.xor
    (i32.const 1024)
    (get_local $x)
   )
  )
  (set_local $x
   (i64.atomic.rmw.xchg
    (i32.const 1024)
    (get_local $y)
   )
  )
  (set_local $y
   (i64.atomic.rmw.cmpxchg
    (i32.const 1024)
    (get_local $x)
    (get_local $y)
   )
  )
  (return
   (get_local $x)
  )
 )
 (func $legalstub$test64 (; 1 ;) (result i32)
  (local $0 i64)
  (set_local $0
   (call $test64)
  )
  (set_global $tempRet0
   (i32.wrap/i64
    (i64.shr_u
     (get_local $0)
     (i64.const 32)
    )
   )
  )
  (i32.wrap/i64
   (get_local $0)
  )
 )
)
