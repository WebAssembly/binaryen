(module
 (import "env" "memory" (memory $0 1))
 (table 0 funcref)
 (data (i32.const 4) "\10\04\00\00")
 (export "zero_i32" (func $zero_i32))
 (export "one_i32" (func $one_i32))
 (export "max_i32" (func $max_i32))
 (export "min_i32" (func $min_i32))
 (export "zero_i64" (func $zero_i64))
 (export "one_i64" (func $one_i64))
 (export "max_i64" (func $max_i64))
 (export "min_i64" (func $min_i64))
 (export "negzero_f32" (func $negzero_f32))
 (export "zero_f32" (func $zero_f32))
 (export "one_f32" (func $one_f32))
 (export "two_f32" (func $two_f32))
 (export "nan_f32" (func $nan_f32))
 (export "negnan_f32" (func $negnan_f32))
 (export "inf_f32" (func $inf_f32))
 (export "neginf_f32" (func $neginf_f32))
 (export "custom_nan_f32" (func $custom_nan_f32))
 (export "custom_nans_f32" (func $custom_nans_f32))
 (export "negzero_f64" (func $negzero_f64))
 (export "zero_f64" (func $zero_f64))
 (export "one_f64" (func $one_f64))
 (export "two_f64" (func $two_f64))
 (export "nan_f64" (func $nan_f64))
 (export "negnan_f64" (func $negnan_f64))
 (export "inf_f64" (func $inf_f64))
 (export "neginf_f64" (func $neginf_f64))
 (export "custom_nan_f64" (func $custom_nan_f64))
 (export "custom_nans_f64" (func $custom_nans_f64))
 (export "stackSave" (func $stackSave))
 (export "stackAlloc" (func $stackAlloc))
 (export "stackRestore" (func $stackRestore))
 (func $zero_i32 (; 0 ;) (result i32)
  (return
   (i32.const 0)
  )
 )
 (func $one_i32 (; 1 ;) (result i32)
  (return
   (i32.const 1)
  )
 )
 (func $max_i32 (; 2 ;) (result i32)
  (return
   (i32.const 2147483647)
  )
 )
 (func $min_i32 (; 3 ;) (result i32)
  (return
   (i32.const -2147483648)
  )
 )
 (func $zero_i64 (; 4 ;) (result i64)
  (return
   (i64.const 0)
  )
 )
 (func $one_i64 (; 5 ;) (result i64)
  (return
   (i64.const 1)
  )
 )
 (func $max_i64 (; 6 ;) (result i64)
  (return
   (i64.const 9223372036854775807)
  )
 )
 (func $min_i64 (; 7 ;) (result i64)
  (return
   (i64.const -9223372036854775808)
  )
 )
 (func $negzero_f32 (; 8 ;) (result f32)
  (return
   (f32.const -0)
  )
 )
 (func $zero_f32 (; 9 ;) (result f32)
  (return
   (f32.const 0)
  )
 )
 (func $one_f32 (; 10 ;) (result f32)
  (return
   (f32.const 1)
  )
 )
 (func $two_f32 (; 11 ;) (result f32)
  (return
   (f32.const 2)
  )
 )
 (func $nan_f32 (; 12 ;) (result f32)
  (return
   (f32.const nan:0x400000)
  )
 )
 (func $negnan_f32 (; 13 ;) (result f32)
  (return
   (f32.const -nan:0x400000)
  )
 )
 (func $inf_f32 (; 14 ;) (result f32)
  (return
   (f32.const inf)
  )
 )
 (func $neginf_f32 (; 15 ;) (result f32)
  (return
   (f32.const -inf)
  )
 )
 (func $custom_nan_f32 (; 16 ;) (result f32)
  (return
   (f32.const -nan:0x6bcdef)
  )
 )
 (func $custom_nans_f32 (; 17 ;) (result f32)
  (return
   (f32.const -nan:0x6bcdef)
  )
 )
 (func $negzero_f64 (; 18 ;) (result f64)
  (return
   (f64.const -0)
  )
 )
 (func $zero_f64 (; 19 ;) (result f64)
  (return
   (f64.const 0)
  )
 )
 (func $one_f64 (; 20 ;) (result f64)
  (return
   (f64.const 1)
  )
 )
 (func $two_f64 (; 21 ;) (result f64)
  (return
   (f64.const 2)
  )
 )
 (func $nan_f64 (; 22 ;) (result f64)
  (return
   (f64.const nan:0x8000000000000)
  )
 )
 (func $negnan_f64 (; 23 ;) (result f64)
  (return
   (f64.const -nan:0x8000000000000)
  )
 )
 (func $inf_f64 (; 24 ;) (result f64)
  (return
   (f64.const inf)
  )
 )
 (func $neginf_f64 (; 25 ;) (result f64)
  (return
   (f64.const -inf)
  )
 )
 (func $custom_nan_f64 (; 26 ;) (result f64)
  (return
   (f64.const -nan:0xabcdef0123456)
  )
 )
 (func $custom_nans_f64 (; 27 ;) (result f64)
  (return
   (f64.const -nan:0x2bcdef0123456)
  )
 )
 (func $stackSave (; 28 ;) (result i32)
  (i32.load offset=4
   (i32.const 0)
  )
 )
 (func $stackAlloc (; 29 ;) (param $0 i32) (result i32)
  (local $1 i32)
  (i32.store offset=4
   (i32.const 0)
   (local.tee $1
    (i32.and
     (i32.sub
      (i32.load offset=4
       (i32.const 0)
      )
      (local.get $0)
     )
     (i32.const -16)
    )
   )
  )
  (local.get $1)
 )
 (func $stackRestore (; 30 ;) (param $0 i32)
  (i32.store offset=4
   (i32.const 0)
   (local.get $0)
  )
 )
)
;; METADATA: { "asmConsts": {},"staticBump": 1040, "initializers": [], "declares": [], "externs": [], "implementedFunctions": ["_zero_i32","_one_i32","_max_i32","_min_i32","_zero_i64","_one_i64","_max_i64","_min_i64","_negzero_f32","_zero_f32","_one_f32","_two_f32","_nan_f32","_negnan_f32","_inf_f32","_neginf_f32","_custom_nan_f32","_custom_nans_f32","_negzero_f64","_zero_f64","_one_f64","_two_f64","_nan_f64","_negnan_f64","_inf_f64","_neginf_f64","_custom_nan_f64","_custom_nans_f64","_stackSave","_stackAlloc","_stackRestore"], "exports": ["zero_i32","one_i32","max_i32","min_i32","zero_i64","one_i64","max_i64","min_i64","negzero_f32","zero_f32","one_f32","two_f32","nan_f32","negnan_f32","inf_f32","neginf_f32","custom_nan_f32","custom_nans_f32","negzero_f64","zero_f64","one_f64","two_f64","nan_f64","negnan_f64","inf_f64","neginf_f64","custom_nan_f64","custom_nans_f64","stackSave","stackAlloc","stackRestore"], "invokeFuncs": [] }
