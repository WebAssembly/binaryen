import * as env from 'env';

function asmFunc(imports) {
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var env = imports.env;
 var setTempRet0 = env.setTempRet0;
 var i64toi32_i32$HIGH_BITS = 0;
 function $0($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 << 24 >> 24;
 }
 
 function $1($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 << 16 >> 16;
 }
 
 function legalstub$2($0_1, $1_1) {
  $0_1 = $0_1 << 24 >> 24;
  i64toi32_i32$HIGH_BITS = $0_1 >> 31;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $0_1;
 }
 
 function legalstub$3($0_1, $1_1) {
  $0_1 = $0_1 << 16 >> 16;
  i64toi32_i32$HIGH_BITS = $0_1 >> 31;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $0_1;
 }
 
 function legalstub$4($0_1, $1_1) {
  i64toi32_i32$HIGH_BITS = $0_1 >> 31;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $0_1;
 }
 
 return {
  "test8": $0, 
  "test16": $1, 
  "test8_i64": legalstub$2, 
  "test16_i64": legalstub$3, 
  "test32_i64": legalstub$4
 };
}

var retasmFunc = asmFunc({
  "env": env,
});
export var test8 = retasmFunc.test8;
export var test16 = retasmFunc.test16;
export var test8_i64 = retasmFunc.test8_i64;
export var test16_i64 = retasmFunc.test16_i64;
export var test32_i64 = retasmFunc.test32_i64;
