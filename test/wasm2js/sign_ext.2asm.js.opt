import * as env from 'env';

function asmFunc(imports) {
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var env = imports.env;
 var setTempRet0 = env.setTempRet0;
 var i64toi32_i32$HIGH_BITS = 0;
 function test8($0) {
  $0 = $0 | 0;
  return $0 << 24 >> 24;
 }
 
 function test16($0) {
  $0 = $0 | 0;
  return $0 << 16 >> 16;
 }
 
 function legalstub$test8_i64($0, $1) {
  $0 = $0 << 24 >> 24;
  i64toi32_i32$HIGH_BITS = $0 >> 31;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $0;
 }
 
 function legalstub$test16_i64($0, $1) {
  $0 = $0 << 16 >> 16;
  i64toi32_i32$HIGH_BITS = $0 >> 31;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $0;
 }
 
 function legalstub$test32_i64($0, $1) {
  i64toi32_i32$HIGH_BITS = $0 >> 31;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $0;
 }
 
 return {
  "test8": test8, 
  "test16": test16, 
  "test8_i64": legalstub$test8_i64, 
  "test16_i64": legalstub$test16_i64, 
  "test32_i64": legalstub$test32_i64
 };
}

var retasmFunc = asmFunc({
  "env": env,
});
export var test8 = retasmFunc.test8;
export var test16 = retasmFunc.test16;
export var test8_i64 = retasmFunc.test8_i64;
export var test16_i64 = retasmFunc.test16_i64;
export var test32_i64 = retasmFunc.test32_i64;
