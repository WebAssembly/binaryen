
function asmFunc(env) {
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 var i64toi32_i32$HIGH_BITS = 0;
 function legalstub$1($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0;
  $8 = $0;
  $0 = 0;
  $7 = $2 & 63;
  $6 = $7;
  $3 = $6 & 31;
  if ($6 >>> 0 >= 32) {
   $3 = -1 >>> $3 | 0
  } else {
   $6 = -1 >>> $3 | 0;
   $0 = $6;
   $3 = $0 | (1 << $3) - 1 << 32 - $3;
  }
  $6 = $3 & $8;
  $0 = $0 & $1;
  $3 = $7 & 31;
  if ($7 >>> 0 >= 32) {
   $0 = $6 << $3;
   $6 = 0;
  } else {
   $0 = (1 << $3) - 1 & $6 >>> 32 - $3 | $0 << $3;
   $6 = $6 << $3;
  }
  $3 = $0;
  $2 = 0 - $2 & 63;
  $7 = $2;
  $0 = $7 & 31;
  if ($7 >>> 0 >= 32) {
   $0 = -1 << $0;
   $7 = 0;
  } else {
   $7 = -1 << $0;
   $0 = $7 | (1 << $0) - 1 & -1 >>> 32 - $0;
  }
  $8 = $7 & $8;
  $1 = $0 & $1;
  $0 = $2 & 31;
  if ($2 >>> 0 >= 32) {
   $2 = 0;
   $0 = $1 >>> $0 | 0;
  } else {
   $2 = $1 >>> $0 | 0;
   $0 = ((1 << $0) - 1 & $1) << 32 - $0 | $8 >>> $0;
  }
  $0 = $0 | $6;
  i64toi32_i32$HIGH_BITS = $2 | $3;
  return ($0 | 0) == ($4 | 0) & ($5 | 0) == (i64toi32_i32$HIGH_BITS | 0);
 }
 
 function legalstub$2($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $9 = $0;
  $7 = $2 & 63;
  $3 = $7;
  $0 = $3 & 31;
  if ($3 >>> 0 >= 32) {
   $0 = -1 << $0;
   $3 = 0;
  } else {
   $3 = -1 << $0;
   $0 = $3 | (1 << $0) - 1 & -1 >>> 32 - $0;
  }
  $8 = $3 & $9;
  $6 = $0 & $1;
  $3 = $7 & 31;
  if ($7 >>> 0 >= 32) {
   $0 = 0;
   $7 = $6 >>> $3 | 0;
  } else {
   $0 = $6 >>> $3 | 0;
   $7 = ((1 << $3) - 1 & $6) << 32 - $3 | $8 >>> $3;
  }
  $3 = $0;
  $6 = 0 - $2 & 63;
  $0 = $6;
  $2 = $0 & 31;
  if ($0 >>> 0 >= 32) {
   $0 = 0;
   $2 = -1 >>> $2 | 0;
  } else {
   $8 = -1 >>> $2 | 0;
   $0 = $8;
   $2 = $0 | (1 << $2) - 1 << 32 - $2;
  }
  $2 = $2 & $9;
  $1 = $0 & $1;
  $0 = $6 & 31;
  if ($6 >>> 0 >= 32) {
   $1 = $2 << $0;
   $0 = 0;
  } else {
   $1 = (1 << $0) - 1 & $2 >>> 32 - $0 | $1 << $0;
   $0 = $2 << $0;
  }
  $0 = $0 | $7;
  i64toi32_i32$HIGH_BITS = $1 | $3;
  return ($0 | 0) == ($4 | 0) & ($5 | 0) == (i64toi32_i32$HIGH_BITS | 0);
 }
 
 return {
  "rotl": legalstub$1, 
  "rotr": legalstub$2
 };
}

var retasmFunc = asmFunc(  { abort: function() { throw new Error('abort'); }
  });
export var rotl = retasmFunc.rotl;
export var rotr = retasmFunc.rotr;
