import * as env from 'env';


  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
function asmFunc(imports) {
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var env = imports.env;
 var setTempRet0 = env.setTempRet0;
 var i64toi32_i32$HIGH_BITS = 0;
 function f0() {
  return 2143289344;
 }
 
 function f2() {
  return -4194304;
 }
 
 function f4() {
  return 2141192192;
 }
 
 function f5() {
  return -1;
 }
 
 function f6() {
  return 2139169605;
 }
 
 function f7() {
  return 2142257232;
 }
 
 function f8() {
  return -5587746;
 }
 
 function f9() {
  return 2139095040;
 }
 
 function f11() {
  return -8388608;
 }
 
 function f12() {
  return 0;
 }
 
 function f14() {
  return -2147483648;
 }
 
 function f15() {
  return 1086918619;
 }
 
 function f16() {
  return 1;
 }
 
 function f17() {
  return 8388608;
 }
 
 function f18() {
  return 2139095039;
 }
 
 function f19() {
  return 8388607;
 }
 
 function f20() {
  return 1149239296;
 }
 
 function f29() {
  return 1343554297;
 }
 
 function legalstub$f30() {
  var $0 = 0, $1 = 0;
  wasm2js_scratch_store_f64(NaN);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  $1 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $0;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $1;
 }
 
 function legalstub$f32() {
  var $0 = 0, $1 = 0;
  wasm2js_scratch_store_f64(-NaN);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  $1 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $0;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $1;
 }
 
 function legalstub$f34() {
  var $0 = 0, $1 = 0;
  wasm2js_scratch_store_f64(NaN);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  $1 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $0;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $1;
 }
 
 function legalstub$f35() {
  var $0 = 0, $1 = 0;
  wasm2js_scratch_store_f64(-NaN);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  $1 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $0;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $1;
 }
 
 function legalstub$f36() {
  var $0 = 0, $1 = 0;
  wasm2js_scratch_store_f64(NaN);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  $1 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $0;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $1;
 }
 
 function legalstub$f37() {
  var $0 = 0, $1 = 0;
  wasm2js_scratch_store_f64(NaN);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  $1 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $0;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $1;
 }
 
 function legalstub$f38() {
  var $0 = 0, $1 = 0;
  wasm2js_scratch_store_f64(-NaN);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  $1 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $0;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $1;
 }
 
 function legalstub$f39() {
  var $0 = 0, $1 = 0;
  wasm2js_scratch_store_f64(Infinity);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  $1 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $0;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $1;
 }
 
 function legalstub$f41() {
  var $0 = 0, $1 = 0;
  wasm2js_scratch_store_f64(-Infinity);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  $1 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $0;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $1;
 }
 
 function legalstub$f42() {
  var $0 = 0, $1 = 0;
  wasm2js_scratch_store_f64(0.0);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  $1 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $0;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $1;
 }
 
 function legalstub$f44() {
  var $0 = 0, $1 = 0;
  wasm2js_scratch_store_f64(-0.0);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  $1 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $0;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $1;
 }
 
 function legalstub$f45() {
  var $0 = 0, $1 = 0;
  wasm2js_scratch_store_f64(6.283185307179586);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  $1 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $0;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $1;
 }
 
 function legalstub$f46() {
  var $0 = 0, $1 = 0;
  wasm2js_scratch_store_f64(5.0e-324);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  $1 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $0;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $1;
 }
 
 function legalstub$f47() {
  var $0 = 0, $1 = 0;
  wasm2js_scratch_store_f64(2.2250738585072014e-308);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  $1 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $0;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $1;
 }
 
 function legalstub$f48() {
  var $0 = 0, $1 = 0;
  wasm2js_scratch_store_f64(2.225073858507201e-308);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  $1 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $0;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $1;
 }
 
 function legalstub$f49() {
  var $0 = 0, $1 = 0;
  wasm2js_scratch_store_f64(1797693134862315708145274.0e284);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  $1 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $0;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $1;
 }
 
 function legalstub$f50() {
  var $0 = 0, $1 = 0;
  wasm2js_scratch_store_f64(1267650600228229401496703.0e6);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  $1 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $0;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $1;
 }
 
 function legalstub$f59() {
  var $0 = 0, $1 = 0;
  wasm2js_scratch_store_f64(1.e+100);
  $0 = wasm2js_scratch_load_i32(1) | 0;
  $1 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $0;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $1;
 }
 
 return {
  "f32_nan": f0, 
  "f32_positive_nan": f0, 
  "f32_negative_nan": f2, 
  "f32_plain_nan": f0, 
  "f32_informally_known_as_plain_snan": f4, 
  "f32_all_ones_nan": f5, 
  "f32_misc_nan": f6, 
  "f32_misc_positive_nan": f7, 
  "f32_misc_negative_nan": f8, 
  "f32_infinity": f9, 
  "f32_positive_infinity": f9, 
  "f32_negative_infinity": f11, 
  "f32_zero": f12, 
  "f32_positive_zero": f12, 
  "f32_negative_zero": f14, 
  "f32_misc": f15, 
  "f32_min_positive": f16, 
  "f32_min_normal": f17, 
  "f32_max_finite": f18, 
  "f32_max_subnormal": f19, 
  "f32_trailing_dot": f20, 
  "f32_dec_zero": f12, 
  "f32_dec_positive_zero": f12, 
  "f32_dec_negative_zero": f14, 
  "f32_dec_misc": f15, 
  "f32_dec_min_positive": f16, 
  "f32_dec_min_normal": f17, 
  "f32_dec_max_subnormal": f19, 
  "f32_dec_max_finite": f18, 
  "f32_dec_trailing_dot": f29, 
  "f64_nan": legalstub$f30, 
  "f64_positive_nan": legalstub$f30, 
  "f64_negative_nan": legalstub$f32, 
  "f64_plain_nan": legalstub$f30, 
  "f64_informally_known_as_plain_snan": legalstub$f34, 
  "f64_all_ones_nan": legalstub$f35, 
  "f64_misc_nan": legalstub$f36, 
  "f64_misc_positive_nan": legalstub$f37, 
  "f64_misc_negative_nan": legalstub$f38, 
  "f64_infinity": legalstub$f39, 
  "f64_positive_infinity": legalstub$f39, 
  "f64_negative_infinity": legalstub$f41, 
  "f64_zero": legalstub$f42, 
  "f64_positive_zero": legalstub$f42, 
  "f64_negative_zero": legalstub$f44, 
  "f64_misc": legalstub$f45, 
  "f64_min_positive": legalstub$f46, 
  "f64_min_normal": legalstub$f47, 
  "f64_max_subnormal": legalstub$f48, 
  "f64_max_finite": legalstub$f49, 
  "f64_trailing_dot": legalstub$f50, 
  "f64_dec_zero": legalstub$f42, 
  "f64_dec_positive_zero": legalstub$f42, 
  "f64_dec_negative_zero": legalstub$f44, 
  "f64_dec_misc": legalstub$f45, 
  "f64_dec_min_positive": legalstub$f46, 
  "f64_dec_min_normal": legalstub$f47, 
  "f64_dec_max_subnormal": legalstub$f48, 
  "f64_dec_max_finite": legalstub$f49, 
  "f64_dec_trailing_dot": legalstub$f59
 };
}

var retasmFunc = asmFunc({
  "env": env,
});
export var f32_nan = retasmFunc.f32_nan;
export var f32_positive_nan = retasmFunc.f32_positive_nan;
export var f32_negative_nan = retasmFunc.f32_negative_nan;
export var f32_plain_nan = retasmFunc.f32_plain_nan;
export var f32_informally_known_as_plain_snan = retasmFunc.f32_informally_known_as_plain_snan;
export var f32_all_ones_nan = retasmFunc.f32_all_ones_nan;
export var f32_misc_nan = retasmFunc.f32_misc_nan;
export var f32_misc_positive_nan = retasmFunc.f32_misc_positive_nan;
export var f32_misc_negative_nan = retasmFunc.f32_misc_negative_nan;
export var f32_infinity = retasmFunc.f32_infinity;
export var f32_positive_infinity = retasmFunc.f32_positive_infinity;
export var f32_negative_infinity = retasmFunc.f32_negative_infinity;
export var f32_zero = retasmFunc.f32_zero;
export var f32_positive_zero = retasmFunc.f32_positive_zero;
export var f32_negative_zero = retasmFunc.f32_negative_zero;
export var f32_misc = retasmFunc.f32_misc;
export var f32_min_positive = retasmFunc.f32_min_positive;
export var f32_min_normal = retasmFunc.f32_min_normal;
export var f32_max_finite = retasmFunc.f32_max_finite;
export var f32_max_subnormal = retasmFunc.f32_max_subnormal;
export var f32_trailing_dot = retasmFunc.f32_trailing_dot;
export var f32_dec_zero = retasmFunc.f32_dec_zero;
export var f32_dec_positive_zero = retasmFunc.f32_dec_positive_zero;
export var f32_dec_negative_zero = retasmFunc.f32_dec_negative_zero;
export var f32_dec_misc = retasmFunc.f32_dec_misc;
export var f32_dec_min_positive = retasmFunc.f32_dec_min_positive;
export var f32_dec_min_normal = retasmFunc.f32_dec_min_normal;
export var f32_dec_max_subnormal = retasmFunc.f32_dec_max_subnormal;
export var f32_dec_max_finite = retasmFunc.f32_dec_max_finite;
export var f32_dec_trailing_dot = retasmFunc.f32_dec_trailing_dot;
export var f64_nan = retasmFunc.f64_nan;
export var f64_positive_nan = retasmFunc.f64_positive_nan;
export var f64_negative_nan = retasmFunc.f64_negative_nan;
export var f64_plain_nan = retasmFunc.f64_plain_nan;
export var f64_informally_known_as_plain_snan = retasmFunc.f64_informally_known_as_plain_snan;
export var f64_all_ones_nan = retasmFunc.f64_all_ones_nan;
export var f64_misc_nan = retasmFunc.f64_misc_nan;
export var f64_misc_positive_nan = retasmFunc.f64_misc_positive_nan;
export var f64_misc_negative_nan = retasmFunc.f64_misc_negative_nan;
export var f64_infinity = retasmFunc.f64_infinity;
export var f64_positive_infinity = retasmFunc.f64_positive_infinity;
export var f64_negative_infinity = retasmFunc.f64_negative_infinity;
export var f64_zero = retasmFunc.f64_zero;
export var f64_positive_zero = retasmFunc.f64_positive_zero;
export var f64_negative_zero = retasmFunc.f64_negative_zero;
export var f64_misc = retasmFunc.f64_misc;
export var f64_min_positive = retasmFunc.f64_min_positive;
export var f64_min_normal = retasmFunc.f64_min_normal;
export var f64_max_subnormal = retasmFunc.f64_max_subnormal;
export var f64_max_finite = retasmFunc.f64_max_finite;
export var f64_trailing_dot = retasmFunc.f64_trailing_dot;
export var f64_dec_zero = retasmFunc.f64_dec_zero;
export var f64_dec_positive_zero = retasmFunc.f64_dec_positive_zero;
export var f64_dec_negative_zero = retasmFunc.f64_dec_negative_zero;
export var f64_dec_misc = retasmFunc.f64_dec_misc;
export var f64_dec_min_positive = retasmFunc.f64_dec_min_positive;
export var f64_dec_min_normal = retasmFunc.f64_dec_min_normal;
export var f64_dec_max_subnormal = retasmFunc.f64_dec_max_subnormal;
export var f64_dec_max_finite = retasmFunc.f64_dec_max_finite;
export var f64_dec_trailing_dot = retasmFunc.f64_dec_trailing_dot;
