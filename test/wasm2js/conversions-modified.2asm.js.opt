import * as env from 'env';


  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
function asmFunc(imports) {
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var env = imports.env;
 var setTempRet0 = env.setTempRet0;
 var i64toi32_i32$HIGH_BITS = 0;
 function f3($0) {
  $0 = Math_fround($0);
  return ~~$0 | 0;
 }
 
 function f4($0) {
  $0 = Math_fround($0);
  return ~~$0 >>> 0 | 0;
 }
 
 function f5($0) {
  $0 = +$0;
  return ~~$0 | 0;
 }
 
 function f6($0) {
  $0 = +$0;
  return ~~$0 >>> 0 | 0;
 }
 
 function f11($0) {
  $0 = $0 | 0;
  return Math_fround(Math_fround($0 | 0));
 }
 
 function f13($0) {
  $0 = $0 | 0;
  return +($0 | 0);
 }
 
 function f15($0) {
  $0 = $0 | 0;
  return Math_fround(Math_fround($0 >>> 0));
 }
 
 function f17($0) {
  $0 = $0 | 0;
  return +($0 >>> 0);
 }
 
 function f19($0) {
  $0 = Math_fround($0);
  return +$0;
 }
 
 function f20($0) {
  $0 = +$0;
  return Math_fround(Math_fround($0));
 }
 
 function f21($0) {
  $0 = $0 | 0;
  return Math_fround((wasm2js_scratch_store_i32(2, $0), wasm2js_scratch_load_f32()));
 }
 
 function f23($0) {
  $0 = Math_fround($0);
  return (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2)) | 0;
 }
 
 function legalstub$f0($0) {
  i64toi32_i32$HIGH_BITS = $0 >> 31;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $0;
 }
 
 function legalstub$f1($0) {
  i64toi32_i32$HIGH_BITS = 0;
  setTempRet0(0);
  return $0;
 }
 
 function legalstub$f2($0, $1) {
  return $0;
 }
 
 function legalstub$f7($0) {
  var $1 = 0, $2 = 0;
  $2 = ~~$0 >>> 0;
  if (Math_fround(Math_abs($0)) >= Math_fround(1.0)) {
   $1 = ~~($0 > Math_fround(0.0) ? Math_fround(Math_min(Math_fround(Math_floor(Math_fround($0 * Math_fround(2.3283064365386963e-10)))), Math_fround(4294967296.0))) : Math_fround(Math_ceil(Math_fround(Math_fround($0 - Math_fround(~~$0 >>> 0 >>> 0)) * Math_fround(2.3283064365386963e-10))))) >>> 0
  } else {
   $1 = 0
  }
  i64toi32_i32$HIGH_BITS = $1;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $2;
 }
 
 function legalstub$f9($0) {
  var $1 = 0, $2 = 0;
  $2 = ~~$0 >>> 0;
  if (Math_abs($0) >= 1.0) {
   $1 = ~~($0 > 0.0 ? Math_min(Math_floor($0 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($0 - +(~~$0 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0
  } else {
   $1 = 0
  }
  i64toi32_i32$HIGH_BITS = $1;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $2;
 }
 
 function legalstub$f12($0, $1) {
  return Math_fround(+($0 >>> 0) + +($1 | 0) * 4294967296.0);
 }
 
 function legalstub$f14($0, $1) {
  return +($0 >>> 0) + +($1 | 0) * 4294967296.0;
 }
 
 function legalstub$f16($0, $1) {
  return Math_fround(+($0 >>> 0) + +($1 >>> 0) * 4294967296.0);
 }
 
 function legalstub$f18($0, $1) {
  return +($0 >>> 0) + +($1 >>> 0) * 4294967296.0;
 }
 
 function legalstub$f22($0, $1) {
  wasm2js_scratch_store_i32(0, $0 | 0);
  wasm2js_scratch_store_i32(1, $1 | 0);
  return +wasm2js_scratch_load_f64();
 }
 
 function legalstub$f24($0) {
  var $1 = 0, $2 = 0;
  wasm2js_scratch_store_f64(+$0);
  $1 = wasm2js_scratch_load_i32(1) | 0;
  $2 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $1;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $2;
 }
 
 return {
  "i64_extend_s_i32": legalstub$f0, 
  "i64_extend_u_i32": legalstub$f1, 
  "i32_wrap_i64": legalstub$f2, 
  "i32_trunc_s_f32": f3, 
  "i32_trunc_u_f32": f4, 
  "i32_trunc_s_f64": f5, 
  "i32_trunc_u_f64": f6, 
  "i64_trunc_s_f32": legalstub$f7, 
  "i64_trunc_u_f32": legalstub$f7, 
  "i64_trunc_s_f64": legalstub$f9, 
  "i64_trunc_u_f64": legalstub$f9, 
  "f32_convert_s_i32": f11, 
  "f32_convert_s_i64": legalstub$f12, 
  "f64_convert_s_i32": f13, 
  "f64_convert_s_i64": legalstub$f14, 
  "f32_convert_u_i32": f15, 
  "f32_convert_u_i64": legalstub$f16, 
  "f64_convert_u_i32": f17, 
  "f64_convert_u_i64": legalstub$f18, 
  "f64_promote_f32": f19, 
  "f32_demote_f64": f20, 
  "f32_reinterpret_i32": f21, 
  "f64_reinterpret_i64": legalstub$f22, 
  "i32_reinterpret_f32": f23, 
  "i64_reinterpret_f64": legalstub$f24
 };
}

var retasmFunc = asmFunc({
  "env": env,
});
export var i64_extend_s_i32 = retasmFunc.i64_extend_s_i32;
export var i64_extend_u_i32 = retasmFunc.i64_extend_u_i32;
export var i32_wrap_i64 = retasmFunc.i32_wrap_i64;
export var i32_trunc_s_f32 = retasmFunc.i32_trunc_s_f32;
export var i32_trunc_u_f32 = retasmFunc.i32_trunc_u_f32;
export var i32_trunc_s_f64 = retasmFunc.i32_trunc_s_f64;
export var i32_trunc_u_f64 = retasmFunc.i32_trunc_u_f64;
export var i64_trunc_s_f32 = retasmFunc.i64_trunc_s_f32;
export var i64_trunc_u_f32 = retasmFunc.i64_trunc_u_f32;
export var i64_trunc_s_f64 = retasmFunc.i64_trunc_s_f64;
export var i64_trunc_u_f64 = retasmFunc.i64_trunc_u_f64;
export var f32_convert_s_i32 = retasmFunc.f32_convert_s_i32;
export var f32_convert_s_i64 = retasmFunc.f32_convert_s_i64;
export var f64_convert_s_i32 = retasmFunc.f64_convert_s_i32;
export var f64_convert_s_i64 = retasmFunc.f64_convert_s_i64;
export var f32_convert_u_i32 = retasmFunc.f32_convert_u_i32;
export var f32_convert_u_i64 = retasmFunc.f32_convert_u_i64;
export var f64_convert_u_i32 = retasmFunc.f64_convert_u_i32;
export var f64_convert_u_i64 = retasmFunc.f64_convert_u_i64;
export var f64_promote_f32 = retasmFunc.f64_promote_f32;
export var f32_demote_f64 = retasmFunc.f32_demote_f64;
export var f32_reinterpret_i32 = retasmFunc.f32_reinterpret_i32;
export var f64_reinterpret_i64 = retasmFunc.f64_reinterpret_i64;
export var i32_reinterpret_f32 = retasmFunc.i32_reinterpret_f32;
export var i64_reinterpret_f64 = retasmFunc.i64_reinterpret_f64;
