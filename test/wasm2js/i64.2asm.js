import { setTempRet0 } from 'env';
import { getTempRet0 } from 'env';


  var scratchBuffer = new ArrayBuffer(8);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function legalimport$wasm2js_scratch_load_i64() {
    if (typeof setTempRet0 === 'function') setTempRet0(i32ScratchView[1]);
    return i32ScratchView[0];
  }
      
  function legalimport$wasm2js_scratch_store_i64(low, high) {
    i32ScratchView[0] = low;
    i32ScratchView[1] = high;
  }
      
function asmFunc(global, env, buffer) {
 "almost asm";
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var setTempRet0 = env.setTempRet0;
 var getTempRet0 = env.getTempRet0;
 var i64toi32_i32$HIGH_BITS = 0;
 function $0($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = $0_1 + $2_1 | 0;
  $1_1 = $1_1 + $3_1 | 0;
  if ($0_1 >>> 0 < $2_1 >>> 0) {
   $1_1 = $1_1 + 1 | 0
  }
  i64toi32_i32$HIGH_BITS = $1_1;
  return $0_1 | 0;
 }
 
 function $1($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = ($0_1 >>> 0 < $2_1 >>> 0) + $3_1 | 0;
  $3_1 = $1_1 - $3_1 | 0;
  $0_1 = $0_1 - $2_1 | 0;
  i64toi32_i32$HIGH_BITS = $3_1;
  return $0_1 | 0;
 }
 
 function $2($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = __wasm_i64_mul($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $1_1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = $1_1;
  return $3_1 | 0;
 }
 
 function $3($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = __wasm_i64_sdiv($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $1_1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = $1_1;
  return $3_1 | 0;
 }
 
 function $4($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = __wasm_i64_udiv($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $1_1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = $1_1;
  return $3_1 | 0;
 }
 
 function $5($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = __wasm_i64_srem($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $1_1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = $1_1;
  return $3_1 | 0;
 }
 
 function $6($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = __wasm_i64_urem($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $1_1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = $1_1;
  return $3_1 | 0;
 }
 
 function $7($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = $1_1 & $3_1 | 0;
  $0_1 = $0_1 & $2_1 | 0;
  i64toi32_i32$HIGH_BITS = $3_1;
  return $0_1 | 0;
 }
 
 function $8($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = $1_1 | $3_1 | 0;
  $0_1 = $0_1 | $2_1 | 0;
  i64toi32_i32$HIGH_BITS = $3_1;
  return $0_1 | 0;
 }
 
 function $9($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = $1_1 ^ $3_1 | 0;
  $0_1 = $0_1 ^ $2_1 | 0;
  i64toi32_i32$HIGH_BITS = $3_1;
  return $0_1 | 0;
 }
 
 function $10($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = $2_1 & 31 | 0;
  if (32 >>> 0 <= ($2_1 & 63 | 0) >>> 0) {
   {
    $3_1 = $0_1 << $4_1 | 0;
    $0_1 = 0;
   }
  } else {
   {
    $3_1 = ((1 << $4_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($1_1 << $4_1 | 0) | 0;
    $0_1 = $0_1 << $4_1 | 0;
   }
  }
  i64toi32_i32$HIGH_BITS = $3_1;
  return $0_1 | 0;
 }
 
 function $11($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = $2_1 & 31 | 0;
  if (32 >>> 0 <= ($2_1 & 63 | 0) >>> 0) {
   {
    $3_1 = $1_1 >> 31 | 0;
    $0_1 = $1_1 >> $4_1 | 0;
   }
  } else {
   {
    $3_1 = $1_1 >> $4_1 | 0;
    $0_1 = (((1 << $4_1 | 0) - 1 | 0) & $1_1 | 0) << (32 - $4_1 | 0) | 0 | ($0_1 >>> $4_1 | 0) | 0;
   }
  }
  i64toi32_i32$HIGH_BITS = $3_1;
  return $0_1 | 0;
 }
 
 function $12($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = $2_1 & 31 | 0;
  if (32 >>> 0 <= ($2_1 & 63 | 0) >>> 0) {
   {
    $3_1 = 0;
    $0_1 = $1_1 >>> $4_1 | 0;
   }
  } else {
   {
    $3_1 = $1_1 >>> $4_1 | 0;
    $0_1 = (((1 << $4_1 | 0) - 1 | 0) & $1_1 | 0) << (32 - $4_1 | 0) | 0 | ($0_1 >>> $4_1 | 0) | 0;
   }
  }
  i64toi32_i32$HIGH_BITS = $3_1;
  return $0_1 | 0;
 }
 
 function $13($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = __wasm_rotl_i64($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $1_1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = $1_1;
  return $3_1 | 0;
 }
 
 function $14($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = __wasm_rotr_i64($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $1_1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = $1_1;
  return $3_1 | 0;
 }
 
 function $15($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $1_1 = Math_clz32($1_1);
  $2_1 = 0;
  if (($1_1 | 0) == (32 | 0)) {
   $1_1 = Math_clz32($0_1) + 32 | 0
  }
  i64toi32_i32$HIGH_BITS = $2_1;
  return $1_1 | 0;
 }
 
 function $16($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = __wasm_ctz_i64($0_1 | 0, $1_1 | 0) | 0;
  $0_1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = $0_1;
  return $1_1 | 0;
 }
 
 function $17($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = __wasm_popcnt_i64($0_1 | 0, $1_1 | 0) | 0;
  $0_1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = $0_1;
  return $1_1 | 0;
 }
 
 function $18($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return !($0_1 | $1_1 | 0) | 0;
 }
 
 function $19($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return ($0_1 | 0) == ($2_1 | 0) & ($1_1 | 0) == ($3_1 | 0) | 0 | 0;
 }
 
 function $20($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return ($0_1 | 0) != ($2_1 | 0) | ($1_1 | 0) != ($3_1 | 0) | 0 | 0;
 }
 
 function $21($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = $3_1;
  if (($1_1 | 0) < ($3_1 | 0)) {
   $0_1 = 1
  } else {
   if (($1_1 | 0) <= ($4_1 | 0)) {
    if ($0_1 >>> 0 >= $2_1 >>> 0) {
     $0_1 = 0
    } else {
     $0_1 = 1
    }
   } else {
    $0_1 = 0
   }
  }
  return $0_1 | 0;
 }
 
 function $22($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $1_1 >>> 0 < $3_1 >>> 0 | (($1_1 | 0) == ($3_1 | 0) & $0_1 >>> 0 < $2_1 >>> 0 | 0) | 0 | 0;
 }
 
 function $23($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = $3_1;
  if (($1_1 | 0) < ($3_1 | 0)) {
   $0_1 = 1
  } else {
   if (($1_1 | 0) <= ($4_1 | 0)) {
    if ($0_1 >>> 0 > $2_1 >>> 0) {
     $0_1 = 0
    } else {
     $0_1 = 1
    }
   } else {
    $0_1 = 0
   }
  }
  return $0_1 | 0;
 }
 
 function $24($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $1_1 >>> 0 < $3_1 >>> 0 | (($1_1 | 0) == ($3_1 | 0) & $0_1 >>> 0 <= $2_1 >>> 0 | 0) | 0 | 0;
 }
 
 function $25($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = $3_1;
  if (($1_1 | 0) > ($3_1 | 0)) {
   $0_1 = 1
  } else {
   if (($1_1 | 0) >= ($4_1 | 0)) {
    if ($0_1 >>> 0 <= $2_1 >>> 0) {
     $0_1 = 0
    } else {
     $0_1 = 1
    }
   } else {
    $0_1 = 0
   }
  }
  return $0_1 | 0;
 }
 
 function $26($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $1_1 >>> 0 > $3_1 >>> 0 | (($1_1 | 0) == ($3_1 | 0) & $0_1 >>> 0 > $2_1 >>> 0 | 0) | 0 | 0;
 }
 
 function $27($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = $3_1;
  if (($1_1 | 0) > ($3_1 | 0)) {
   $0_1 = 1
  } else {
   if (($1_1 | 0) >= ($4_1 | 0)) {
    if ($0_1 >>> 0 < $2_1 >>> 0) {
     $0_1 = 0
    } else {
     $0_1 = 1
    }
   } else {
    $0_1 = 0
   }
  }
  return $0_1 | 0;
 }
 
 function $28($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $1_1 >>> 0 > $3_1 >>> 0 | (($1_1 | 0) == ($3_1 | 0) & $0_1 >>> 0 >= $2_1 >>> 0 | 0) | 0 | 0;
 }
 
 function legalstub$0($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $4_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($6_1 << $4_1 | 0) | 0;
    $5_1 = $1_1 << $4_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $5_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $4_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($1_1 << $4_1 | 0) | 0;
    $5_1 = $0_1 << $4_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $5_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  $1_1 = $0($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
  $0_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $1_1;
  $2_1 = $0_1;
  $6_1 = $1_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   $0_1 = $0_1 >>> $4_1 | 0
  } else {
   $0_1 = (((1 << $4_1 | 0) - 1 | 0) & $0_1 | 0) << (32 - $4_1 | 0) | 0 | ($6_1 >>> $4_1 | 0) | 0
  }
  setTempRet0($0_1 | 0);
  return $3_1 | 0;
 }
 
 function legalstub$1($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $4_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($6_1 << $4_1 | 0) | 0;
    $5_1 = $1_1 << $4_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $5_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $4_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($1_1 << $4_1 | 0) | 0;
    $5_1 = $0_1 << $4_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $5_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  $1_1 = $1($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
  $0_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $1_1;
  $2_1 = $0_1;
  $6_1 = $1_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   $0_1 = $0_1 >>> $4_1 | 0
  } else {
   $0_1 = (((1 << $4_1 | 0) - 1 | 0) & $0_1 | 0) << (32 - $4_1 | 0) | 0 | ($6_1 >>> $4_1 | 0) | 0
  }
  setTempRet0($0_1 | 0);
  return $3_1 | 0;
 }
 
 function legalstub$2($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $4_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($6_1 << $4_1 | 0) | 0;
    $5_1 = $1_1 << $4_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $5_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $4_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($1_1 << $4_1 | 0) | 0;
    $5_1 = $0_1 << $4_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $5_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  $1_1 = $2($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
  $0_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $1_1;
  $2_1 = $0_1;
  $6_1 = $1_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   $0_1 = $0_1 >>> $4_1 | 0
  } else {
   $0_1 = (((1 << $4_1 | 0) - 1 | 0) & $0_1 | 0) << (32 - $4_1 | 0) | 0 | ($6_1 >>> $4_1 | 0) | 0
  }
  setTempRet0($0_1 | 0);
  return $3_1 | 0;
 }
 
 function legalstub$3($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $4_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($6_1 << $4_1 | 0) | 0;
    $5_1 = $1_1 << $4_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $5_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $4_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($1_1 << $4_1 | 0) | 0;
    $5_1 = $0_1 << $4_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $5_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  $1_1 = $3($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
  $0_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $1_1;
  $2_1 = $0_1;
  $6_1 = $1_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   $0_1 = $0_1 >>> $4_1 | 0
  } else {
   $0_1 = (((1 << $4_1 | 0) - 1 | 0) & $0_1 | 0) << (32 - $4_1 | 0) | 0 | ($6_1 >>> $4_1 | 0) | 0
  }
  setTempRet0($0_1 | 0);
  return $3_1 | 0;
 }
 
 function legalstub$4($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $4_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($6_1 << $4_1 | 0) | 0;
    $5_1 = $1_1 << $4_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $5_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $4_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($1_1 << $4_1 | 0) | 0;
    $5_1 = $0_1 << $4_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $5_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  $1_1 = $4($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
  $0_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $1_1;
  $2_1 = $0_1;
  $6_1 = $1_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   $0_1 = $0_1 >>> $4_1 | 0
  } else {
   $0_1 = (((1 << $4_1 | 0) - 1 | 0) & $0_1 | 0) << (32 - $4_1 | 0) | 0 | ($6_1 >>> $4_1 | 0) | 0
  }
  setTempRet0($0_1 | 0);
  return $3_1 | 0;
 }
 
 function legalstub$5($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $4_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($6_1 << $4_1 | 0) | 0;
    $5_1 = $1_1 << $4_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $5_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $4_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($1_1 << $4_1 | 0) | 0;
    $5_1 = $0_1 << $4_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $5_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  $1_1 = $5($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
  $0_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $1_1;
  $2_1 = $0_1;
  $6_1 = $1_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   $0_1 = $0_1 >>> $4_1 | 0
  } else {
   $0_1 = (((1 << $4_1 | 0) - 1 | 0) & $0_1 | 0) << (32 - $4_1 | 0) | 0 | ($6_1 >>> $4_1 | 0) | 0
  }
  setTempRet0($0_1 | 0);
  return $3_1 | 0;
 }
 
 function legalstub$6($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $4_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($6_1 << $4_1 | 0) | 0;
    $5_1 = $1_1 << $4_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $5_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $4_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($1_1 << $4_1 | 0) | 0;
    $5_1 = $0_1 << $4_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $5_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  $1_1 = $6($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
  $0_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $1_1;
  $2_1 = $0_1;
  $6_1 = $1_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   $0_1 = $0_1 >>> $4_1 | 0
  } else {
   $0_1 = (((1 << $4_1 | 0) - 1 | 0) & $0_1 | 0) << (32 - $4_1 | 0) | 0 | ($6_1 >>> $4_1 | 0) | 0
  }
  setTempRet0($0_1 | 0);
  return $3_1 | 0;
 }
 
 function legalstub$7($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $4_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($6_1 << $4_1 | 0) | 0;
    $5_1 = $1_1 << $4_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $5_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $4_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($1_1 << $4_1 | 0) | 0;
    $5_1 = $0_1 << $4_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $5_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  $1_1 = $7($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
  $0_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $1_1;
  $2_1 = $0_1;
  $6_1 = $1_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   $0_1 = $0_1 >>> $4_1 | 0
  } else {
   $0_1 = (((1 << $4_1 | 0) - 1 | 0) & $0_1 | 0) << (32 - $4_1 | 0) | 0 | ($6_1 >>> $4_1 | 0) | 0
  }
  setTempRet0($0_1 | 0);
  return $3_1 | 0;
 }
 
 function legalstub$8($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $4_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($6_1 << $4_1 | 0) | 0;
    $5_1 = $1_1 << $4_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $5_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $4_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($1_1 << $4_1 | 0) | 0;
    $5_1 = $0_1 << $4_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $5_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  $1_1 = $8($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
  $0_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $1_1;
  $2_1 = $0_1;
  $6_1 = $1_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   $0_1 = $0_1 >>> $4_1 | 0
  } else {
   $0_1 = (((1 << $4_1 | 0) - 1 | 0) & $0_1 | 0) << (32 - $4_1 | 0) | 0 | ($6_1 >>> $4_1 | 0) | 0
  }
  setTempRet0($0_1 | 0);
  return $3_1 | 0;
 }
 
 function legalstub$9($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $4_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($6_1 << $4_1 | 0) | 0;
    $5_1 = $1_1 << $4_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $5_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $4_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($1_1 << $4_1 | 0) | 0;
    $5_1 = $0_1 << $4_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $5_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  $1_1 = $9($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
  $0_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $1_1;
  $2_1 = $0_1;
  $6_1 = $1_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   $0_1 = $0_1 >>> $4_1 | 0
  } else {
   $0_1 = (((1 << $4_1 | 0) - 1 | 0) & $0_1 | 0) << (32 - $4_1 | 0) | 0 | ($6_1 >>> $4_1 | 0) | 0
  }
  setTempRet0($0_1 | 0);
  return $3_1 | 0;
 }
 
 function legalstub$10($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $4_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($6_1 << $4_1 | 0) | 0;
    $5_1 = $1_1 << $4_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $5_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $4_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($1_1 << $4_1 | 0) | 0;
    $5_1 = $0_1 << $4_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $5_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  $1_1 = $10($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
  $0_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $1_1;
  $2_1 = $0_1;
  $6_1 = $1_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   $0_1 = $0_1 >>> $4_1 | 0
  } else {
   $0_1 = (((1 << $4_1 | 0) - 1 | 0) & $0_1 | 0) << (32 - $4_1 | 0) | 0 | ($6_1 >>> $4_1 | 0) | 0
  }
  setTempRet0($0_1 | 0);
  return $3_1 | 0;
 }
 
 function legalstub$11($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $4_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($6_1 << $4_1 | 0) | 0;
    $5_1 = $1_1 << $4_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $5_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $4_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($1_1 << $4_1 | 0) | 0;
    $5_1 = $0_1 << $4_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $5_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  $1_1 = $11($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
  $0_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $1_1;
  $2_1 = $0_1;
  $6_1 = $1_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   $0_1 = $0_1 >>> $4_1 | 0
  } else {
   $0_1 = (((1 << $4_1 | 0) - 1 | 0) & $0_1 | 0) << (32 - $4_1 | 0) | 0 | ($6_1 >>> $4_1 | 0) | 0
  }
  setTempRet0($0_1 | 0);
  return $3_1 | 0;
 }
 
 function legalstub$12($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $4_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($6_1 << $4_1 | 0) | 0;
    $5_1 = $1_1 << $4_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $5_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $4_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($1_1 << $4_1 | 0) | 0;
    $5_1 = $0_1 << $4_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $5_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  $1_1 = $12($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
  $0_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $1_1;
  $2_1 = $0_1;
  $6_1 = $1_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   $0_1 = $0_1 >>> $4_1 | 0
  } else {
   $0_1 = (((1 << $4_1 | 0) - 1 | 0) & $0_1 | 0) << (32 - $4_1 | 0) | 0 | ($6_1 >>> $4_1 | 0) | 0
  }
  setTempRet0($0_1 | 0);
  return $3_1 | 0;
 }
 
 function legalstub$13($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $4_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($6_1 << $4_1 | 0) | 0;
    $5_1 = $1_1 << $4_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $5_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $4_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($1_1 << $4_1 | 0) | 0;
    $5_1 = $0_1 << $4_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $5_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  $1_1 = $13($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
  $0_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $1_1;
  $2_1 = $0_1;
  $6_1 = $1_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   $0_1 = $0_1 >>> $4_1 | 0
  } else {
   $0_1 = (((1 << $4_1 | 0) - 1 | 0) & $0_1 | 0) << (32 - $4_1 | 0) | 0 | ($6_1 >>> $4_1 | 0) | 0
  }
  setTempRet0($0_1 | 0);
  return $3_1 | 0;
 }
 
 function legalstub$14($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $4_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($6_1 << $4_1 | 0) | 0;
    $5_1 = $1_1 << $4_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $5_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $4_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $4_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($1_1 << $4_1 | 0) | 0;
    $5_1 = $0_1 << $4_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $5_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  $1_1 = $14($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
  $0_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $1_1;
  $2_1 = $0_1;
  $6_1 = $1_1;
  $5_1 = 32;
  $4_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   $0_1 = $0_1 >>> $4_1 | 0
  } else {
   $0_1 = (((1 << $4_1 | 0) - 1 | 0) & $0_1 | 0) << (32 - $4_1 | 0) | 0 | ($6_1 >>> $4_1 | 0) | 0
  }
  setTempRet0($0_1 | 0);
  return $3_1 | 0;
 }
 
 function legalstub$15($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = 0;
  $5_1 = $0_1;
  $6_1 = $3_1;
  $3_1 = 0;
  $4_1 = 32;
  $2_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $2_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $2_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $2_1 | 0) | 0) | 0 | ($3_1 << $2_1 | 0) | 0;
    $4_1 = $1_1 << $2_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $6_1;
  $3_1 = $5_1;
  $1_1 = $0_1 | $1_1 | 0;
  $1_1 = $15($3_1 | $4_1 | 0 | 0, $1_1 | 0) | 0;
  $3_1 = i64toi32_i32$HIGH_BITS;
  $6_1 = $1_1;
  $5_1 = $3_1;
  $0_1 = $1_1;
  $4_1 = 32;
  $2_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   $0_1 = $3_1 >>> $2_1 | 0
  } else {
   $0_1 = (((1 << $2_1 | 0) - 1 | 0) & $3_1 | 0) << (32 - $2_1 | 0) | 0 | ($0_1 >>> $2_1 | 0) | 0
  }
  setTempRet0($0_1 | 0);
  return $6_1 | 0;
 }
 
 function legalstub$16($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = 0;
  $5_1 = $0_1;
  $6_1 = $3_1;
  $3_1 = 0;
  $4_1 = 32;
  $2_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $2_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $2_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $2_1 | 0) | 0) | 0 | ($3_1 << $2_1 | 0) | 0;
    $4_1 = $1_1 << $2_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $6_1;
  $3_1 = $5_1;
  $1_1 = $0_1 | $1_1 | 0;
  $1_1 = $16($3_1 | $4_1 | 0 | 0, $1_1 | 0) | 0;
  $3_1 = i64toi32_i32$HIGH_BITS;
  $6_1 = $1_1;
  $5_1 = $3_1;
  $0_1 = $1_1;
  $4_1 = 32;
  $2_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   $0_1 = $3_1 >>> $2_1 | 0
  } else {
   $0_1 = (((1 << $2_1 | 0) - 1 | 0) & $3_1 | 0) << (32 - $2_1 | 0) | 0 | ($0_1 >>> $2_1 | 0) | 0
  }
  setTempRet0($0_1 | 0);
  return $6_1 | 0;
 }
 
 function legalstub$17($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = 0;
  $5_1 = $0_1;
  $6_1 = $3_1;
  $3_1 = 0;
  $4_1 = 32;
  $2_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $2_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $2_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $2_1 | 0) | 0) | 0 | ($3_1 << $2_1 | 0) | 0;
    $4_1 = $1_1 << $2_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $6_1;
  $3_1 = $5_1;
  $1_1 = $0_1 | $1_1 | 0;
  $1_1 = $17($3_1 | $4_1 | 0 | 0, $1_1 | 0) | 0;
  $3_1 = i64toi32_i32$HIGH_BITS;
  $6_1 = $1_1;
  $5_1 = $3_1;
  $0_1 = $1_1;
  $4_1 = 32;
  $2_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   $0_1 = $3_1 >>> $2_1 | 0
  } else {
   $0_1 = (((1 << $2_1 | 0) - 1 | 0) & $3_1 | 0) << (32 - $2_1 | 0) | 0 | ($0_1 >>> $2_1 | 0) | 0
  }
  setTempRet0($0_1 | 0);
  return $6_1 | 0;
 }
 
 function legalstub$18($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = 0;
  $6_1 = $2_1;
  $2_1 = 0;
  $3_1 = 32;
  $4_1 = $3_1 & 31 | 0;
  if (32 >>> 0 <= ($3_1 & 63 | 0) >>> 0) {
   {
    $5_1 = $1_1 << $4_1 | 0;
    $3_1 = 0;
   }
  } else {
   {
    $5_1 = ((1 << $4_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($2_1 << $4_1 | 0) | 0;
    $3_1 = $1_1 << $4_1 | 0;
   }
  }
  $1_1 = $5_1;
  $5_1 = $6_1;
  $2_1 = $0_1;
  $1_1 = $5_1 | $1_1 | 0;
  return $18($2_1 | $3_1 | 0 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function legalstub$19($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $4_1 = 32;
  $5_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $5_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $5_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $5_1 | 0) | 0) | 0 | ($6_1 << $5_1 | 0) | 0;
    $4_1 = $1_1 << $5_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $4_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $4_1 = 32;
  $5_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $5_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $5_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $5_1 | 0) | 0) | 0 | ($1_1 << $5_1 | 0) | 0;
    $4_1 = $0_1 << $5_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $4_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  return $19($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function legalstub$20($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $4_1 = 32;
  $5_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $5_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $5_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $5_1 | 0) | 0) | 0 | ($6_1 << $5_1 | 0) | 0;
    $4_1 = $1_1 << $5_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $4_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $4_1 = 32;
  $5_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $5_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $5_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $5_1 | 0) | 0) | 0 | ($1_1 << $5_1 | 0) | 0;
    $4_1 = $0_1 << $5_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $4_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  return $20($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function legalstub$21($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $4_1 = 32;
  $5_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $5_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $5_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $5_1 | 0) | 0) | 0 | ($6_1 << $5_1 | 0) | 0;
    $4_1 = $1_1 << $5_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $4_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $4_1 = 32;
  $5_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $5_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $5_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $5_1 | 0) | 0) | 0 | ($1_1 << $5_1 | 0) | 0;
    $4_1 = $0_1 << $5_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $4_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  return $21($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function legalstub$22($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $4_1 = 32;
  $5_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $5_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $5_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $5_1 | 0) | 0) | 0 | ($6_1 << $5_1 | 0) | 0;
    $4_1 = $1_1 << $5_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $4_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $4_1 = 32;
  $5_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $5_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $5_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $5_1 | 0) | 0) | 0 | ($1_1 << $5_1 | 0) | 0;
    $4_1 = $0_1 << $5_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $4_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  return $22($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function legalstub$23($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $4_1 = 32;
  $5_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $5_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $5_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $5_1 | 0) | 0) | 0 | ($6_1 << $5_1 | 0) | 0;
    $4_1 = $1_1 << $5_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $4_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $4_1 = 32;
  $5_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $5_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $5_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $5_1 | 0) | 0) | 0 | ($1_1 << $5_1 | 0) | 0;
    $4_1 = $0_1 << $5_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $4_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  return $23($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function legalstub$24($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $4_1 = 32;
  $5_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $5_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $5_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $5_1 | 0) | 0) | 0 | ($6_1 << $5_1 | 0) | 0;
    $4_1 = $1_1 << $5_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $4_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $4_1 = 32;
  $5_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $5_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $5_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $5_1 | 0) | 0) | 0 | ($1_1 << $5_1 | 0) | 0;
    $4_1 = $0_1 << $5_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $4_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  return $24($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function legalstub$25($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $4_1 = 32;
  $5_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $5_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $5_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $5_1 | 0) | 0) | 0 | ($6_1 << $5_1 | 0) | 0;
    $4_1 = $1_1 << $5_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $4_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $4_1 = 32;
  $5_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $5_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $5_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $5_1 | 0) | 0) | 0 | ($1_1 << $5_1 | 0) | 0;
    $4_1 = $0_1 << $5_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $4_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  return $25($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function legalstub$26($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $4_1 = 32;
  $5_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $5_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $5_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $5_1 | 0) | 0) | 0 | ($6_1 << $5_1 | 0) | 0;
    $4_1 = $1_1 << $5_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $4_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $4_1 = 32;
  $5_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $5_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $5_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $5_1 | 0) | 0) | 0 | ($1_1 << $5_1 | 0) | 0;
    $4_1 = $0_1 << $5_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $4_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  return $26($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function legalstub$27($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $4_1 = 32;
  $5_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $5_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $5_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $5_1 | 0) | 0) | 0 | ($6_1 << $5_1 | 0) | 0;
    $4_1 = $1_1 << $5_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $4_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $4_1 = 32;
  $5_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $5_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $5_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $5_1 | 0) | 0) | 0 | ($1_1 << $5_1 | 0) | 0;
    $4_1 = $0_1 << $5_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $4_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  return $27($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function legalstub$28($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = 0;
  $7_1 = $0_1;
  $8_1 = $6_1;
  $6_1 = 0;
  $4_1 = 32;
  $5_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $0_1 = $1_1 << $5_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $0_1 = ((1 << $5_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $5_1 | 0) | 0) | 0 | ($6_1 << $5_1 | 0) | 0;
    $4_1 = $1_1 << $5_1 | 0;
   }
  }
  $1_1 = $0_1;
  $0_1 = $8_1;
  $6_1 = $7_1;
  $1_1 = $0_1 | $1_1 | 0;
  $9_1 = $6_1 | $4_1 | 0;
  $7_1 = $1_1;
  $1_1 = 0;
  $8_1 = $1_1;
  $1_1 = 0;
  $0_1 = $3_1;
  $4_1 = 32;
  $5_1 = $4_1 & 31 | 0;
  if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
   {
    $6_1 = $0_1 << $5_1 | 0;
    $4_1 = 0;
   }
  } else {
   {
    $6_1 = ((1 << $5_1 | 0) - 1 | 0) & ($0_1 >>> (32 - $5_1 | 0) | 0) | 0 | ($1_1 << $5_1 | 0) | 0;
    $4_1 = $0_1 << $5_1 | 0;
   }
  }
  $0_1 = $6_1;
  $6_1 = $8_1;
  $1_1 = $2_1;
  $0_1 = $6_1 | $0_1 | 0;
  $2_1 = $1_1 | $4_1 | 0;
  $1_1 = $0_1;
  $0_1 = $7_1;
  return $28($9_1 | 0, $0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function legalfunc$wasm2js_scratch_load_i64() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $0_1 = 0;
  $5_1 = legalimport$wasm2js_scratch_load_i64() | 0;
  $6_1 = $0_1;
  $0_1 = 0;
  $1_1 = getTempRet0() | 0;
  $2_1 = 32;
  $3_1 = $2_1 & 31 | 0;
  if (32 >>> 0 <= ($2_1 & 63 | 0) >>> 0) {
   {
    $4_1 = $1_1 << $3_1 | 0;
    $2_1 = 0;
   }
  } else {
   {
    $4_1 = ((1 << $3_1 | 0) - 1 | 0) & ($1_1 >>> (32 - $3_1 | 0) | 0) | 0 | ($0_1 << $3_1 | 0) | 0;
    $2_1 = $1_1 << $3_1 | 0;
   }
  }
  $1_1 = $4_1;
  $4_1 = $6_1;
  $0_1 = $5_1;
  $1_1 = $4_1 | $1_1 | 0;
  $0_1 = $0_1 | $2_1 | 0;
  i64toi32_i32$HIGH_BITS = $1_1;
  return $0_1 | 0;
 }
 
 function legalfunc$wasm2js_scratch_store_i64($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $4_1 = $0_1;
  $3_1 = 32;
  $2_1 = $3_1 & 31 | 0;
  if (32 >>> 0 <= ($3_1 & 63 | 0) >>> 0) {
   $0_1 = $1_1 >>> $2_1 | 0
  } else {
   $0_1 = (((1 << $2_1 | 0) - 1 | 0) & $1_1 | 0) << (32 - $2_1 | 0) | 0 | ($0_1 >>> $2_1 | 0) | 0
  }
  legalimport$wasm2js_scratch_store_i64($4_1 | 0, $0_1 | 0);
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $5_1 = $2_1;
  $9_1 = $5_1 >>> 16 | 0;
  $10_1 = $0_1 >>> 16 | 0;
  $11_1 = Math_imul($9_1, $10_1);
  $8_1 = $5_1;
  $6_1 = $0_1;
  $7_1 = 32;
  $4_1 = $7_1 & 31 | 0;
  if (32 >>> 0 <= ($7_1 & 63 | 0) >>> 0) {
   $1_1 = $1_1 >>> $4_1 | 0
  } else {
   $1_1 = (((1 << $4_1 | 0) - 1 | 0) & $1_1 | 0) << (32 - $4_1 | 0) | 0 | ($6_1 >>> $4_1 | 0) | 0
  }
  $6_1 = $11_1 + Math_imul($8_1, $1_1) | 0;
  $1_1 = $2_1;
  $7_1 = 32;
  $4_1 = $7_1 & 31 | 0;
  if (32 >>> 0 <= ($7_1 & 63 | 0) >>> 0) {
   $1_1 = $3_1 >>> $4_1 | 0
  } else {
   $1_1 = (((1 << $4_1 | 0) - 1 | 0) & $3_1 | 0) << (32 - $4_1 | 0) | 0 | ($1_1 >>> $4_1 | 0) | 0
  }
  $1_1 = $6_1 + Math_imul($1_1, $0_1) | 0;
  $5_1 = $5_1 & 65535 | 0;
  $0_1 = $0_1 & 65535 | 0;
  $8_1 = Math_imul($5_1, $0_1);
  $5_1 = ($8_1 >>> 16 | 0) + Math_imul($5_1, $10_1) | 0;
  $1_1 = $1_1 + ($5_1 >>> 16 | 0) | 0;
  $5_1 = ($5_1 & 65535 | 0) + Math_imul($9_1, $0_1) | 0;
  $6_1 = 0;
  $3_1 = $1_1 + ($5_1 >>> 16 | 0) | 0;
  $7_1 = 32;
  $4_1 = $7_1 & 31 | 0;
  if (32 >>> 0 <= ($7_1 & 63 | 0) >>> 0) {
   {
    $1_1 = $3_1 << $4_1 | 0;
    $6_1 = 0;
   }
  } else {
   {
    $1_1 = ((1 << $4_1 | 0) - 1 | 0) & ($3_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($6_1 << $4_1 | 0) | 0;
    $6_1 = $3_1 << $4_1 | 0;
   }
  }
  $0_1 = $1_1;
  $1_1 = 0;
  $2_1 = $1_1;
  $1_1 = $0_1;
  $3_1 = $2_1;
  $7_1 = $5_1 << 16 | 0 | ($8_1 & 65535 | 0) | 0;
  $3_1 = $1_1 | $3_1 | 0;
  $6_1 = $6_1 | $7_1 | 0;
  i64toi32_i32$HIGH_BITS = $3_1;
  return $6_1 | 0;
 }
 
 function _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $8_1 = $1_1;
  $7_1 = $0_1;
  $6_1 = 63;
  $5_1 = $6_1 & 31 | 0;
  if (32 >>> 0 <= ($6_1 & 63 | 0) >>> 0) {
   {
    $4_1 = $8_1 >> 31 | 0;
    $5_1 = $8_1 >> $5_1 | 0;
   }
  } else {
   {
    $4_1 = $8_1 >> $5_1 | 0;
    $5_1 = (((1 << $5_1 | 0) - 1 | 0) & $8_1 | 0) << (32 - $5_1 | 0) | 0 | ($7_1 >>> $5_1 | 0) | 0;
   }
  }
  $10_1 = $4_1;
  $4_1 = $10_1;
  $8_1 = $5_1;
  $7_1 = $1_1;
  $6_1 = $0_1;
  $7_1 = $4_1 ^ $7_1 | 0;
  $4_1 = $8_1 ^ $6_1 | 0;
  $8_1 = $10_1;
  $6_1 = $5_1;
  $5_1 = $4_1 - $6_1 | 0;
  $10_1 = $4_1 >>> 0 < $6_1 >>> 0;
  $9_1 = $10_1 + $8_1 | 0;
  $9_1 = $7_1 - $9_1 | 0;
  $11_1 = $5_1;
  $12_1 = $9_1;
  $9_1 = $3_1;
  $7_1 = $2_1;
  $6_1 = 63;
  $8_1 = $6_1 & 31 | 0;
  if (32 >>> 0 <= ($6_1 & 63 | 0) >>> 0) {
   {
    $4_1 = $9_1 >> 31 | 0;
    $5_1 = $9_1 >> $8_1 | 0;
   }
  } else {
   {
    $4_1 = $9_1 >> $8_1 | 0;
    $5_1 = (((1 << $8_1 | 0) - 1 | 0) & $9_1 | 0) << (32 - $8_1 | 0) | 0 | ($7_1 >>> $8_1 | 0) | 0;
   }
  }
  $10_1 = $4_1;
  $4_1 = $10_1;
  $9_1 = $5_1;
  $7_1 = $3_1;
  $6_1 = $2_1;
  $7_1 = $4_1 ^ $7_1 | 0;
  $4_1 = $9_1 ^ $6_1 | 0;
  $9_1 = $10_1;
  $6_1 = $5_1;
  $8_1 = $4_1 - $6_1 | 0;
  $10_1 = $4_1 >>> 0 < $6_1 >>> 0;
  $5_1 = $10_1 + $9_1 | 0;
  $5_1 = $7_1 - $5_1 | 0;
  $4_1 = $5_1;
  $5_1 = $12_1;
  $4_1 = __wasm_i64_udiv($11_1 | 0, $5_1 | 0, $8_1 | 0, $4_1 | 0) | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $10_1 = $4_1;
  $8_1 = $5_1;
  $5_1 = $3_1;
  $7_1 = $2_1;
  $4_1 = $1_1;
  $6_1 = $0_1;
  $4_1 = $5_1 ^ $4_1 | 0;
  $5_1 = $7_1 ^ $6_1 | 0;
  $6_1 = 63;
  $9_1 = $6_1 & 31 | 0;
  if (32 >>> 0 <= ($6_1 & 63 | 0) >>> 0) {
   {
    $7_1 = $4_1 >> 31 | 0;
    $0_1 = $4_1 >> $9_1 | 0;
   }
  } else {
   {
    $7_1 = $4_1 >> $9_1 | 0;
    $0_1 = (((1 << $9_1 | 0) - 1 | 0) & $4_1 | 0) << (32 - $9_1 | 0) | 0 | ($5_1 >>> $9_1 | 0) | 0;
   }
  }
  $1_1 = $7_1;
  $7_1 = $8_1;
  $4_1 = $10_1;
  $5_1 = $1_1;
  $6_1 = $0_1;
  $5_1 = $7_1 ^ $5_1 | 0;
  $7_1 = $4_1 ^ $6_1 | 0;
  $4_1 = $1_1;
  $9_1 = $7_1 - $6_1 | 0;
  $10_1 = $7_1 >>> 0 < $6_1 >>> 0;
  $8_1 = $10_1 + $4_1 | 0;
  $8_1 = $5_1 - $8_1 | 0;
  $7_1 = $9_1;
  i64toi32_i32$HIGH_BITS = $8_1;
  return $7_1 | 0;
 }
 
 function _ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0;
  $5_1 = $1_1;
  $8_1 = $0_1;
  $7_1 = 63;
  $6_1 = $7_1 & 31 | 0;
  if (32 >>> 0 <= ($7_1 & 63 | 0) >>> 0) {
   {
    $4_1 = $5_1 >> 31 | 0;
    $11_1 = $5_1 >> $6_1 | 0;
   }
  } else {
   {
    $4_1 = $5_1 >> $6_1 | 0;
    $11_1 = (((1 << $6_1 | 0) - 1 | 0) & $5_1 | 0) << (32 - $6_1 | 0) | 0 | ($8_1 >>> $6_1 | 0) | 0;
   }
  }
  $10_1 = $4_1;
  $4_1 = $10_1;
  $5_1 = $11_1;
  $8_1 = $1_1;
  $7_1 = $0_1;
  $8_1 = $4_1 ^ $8_1 | 0;
  $4_1 = $5_1 ^ $7_1 | 0;
  $5_1 = $10_1;
  $7_1 = $11_1;
  $6_1 = $4_1 - $7_1 | 0;
  $0_1 = $4_1 >>> 0 < $7_1 >>> 0;
  $9_1 = $0_1 + $5_1 | 0;
  $9_1 = $8_1 - $9_1 | 0;
  $12_1 = $6_1;
  $13_1 = $9_1;
  $9_1 = $3_1;
  $8_1 = $2_1;
  $7_1 = 63;
  $5_1 = $7_1 & 31 | 0;
  if (32 >>> 0 <= ($7_1 & 63 | 0) >>> 0) {
   {
    $4_1 = $9_1 >> 31 | 0;
    $0_1 = $9_1 >> $5_1 | 0;
   }
  } else {
   {
    $4_1 = $9_1 >> $5_1 | 0;
    $0_1 = (((1 << $5_1 | 0) - 1 | 0) & $9_1 | 0) << (32 - $5_1 | 0) | 0 | ($8_1 >>> $5_1 | 0) | 0;
   }
  }
  $1_1 = $4_1;
  $4_1 = $1_1;
  $9_1 = $0_1;
  $8_1 = $3_1;
  $7_1 = $2_1;
  $8_1 = $4_1 ^ $8_1 | 0;
  $4_1 = $9_1 ^ $7_1 | 0;
  $9_1 = $1_1;
  $7_1 = $0_1;
  $5_1 = $4_1 - $7_1 | 0;
  $0_1 = $4_1 >>> 0 < $7_1 >>> 0;
  $6_1 = $0_1 + $9_1 | 0;
  $6_1 = $8_1 - $6_1 | 0;
  $4_1 = $6_1;
  $6_1 = $13_1;
  $4_1 = __wasm_i64_urem($12_1 | 0, $6_1 | 0, $5_1 | 0, $4_1 | 0) | 0;
  $6_1 = i64toi32_i32$HIGH_BITS;
  $8_1 = $4_1;
  $4_1 = $10_1;
  $7_1 = $11_1;
  $4_1 = $6_1 ^ $4_1 | 0;
  $6_1 = $8_1 ^ $7_1 | 0;
  $8_1 = $10_1;
  $9_1 = $6_1 - $7_1 | 0;
  $0_1 = $6_1 >>> 0 < $7_1 >>> 0;
  $5_1 = $0_1 + $8_1 | 0;
  $5_1 = $4_1 - $5_1 | 0;
  $6_1 = $9_1;
  i64toi32_i32$HIGH_BITS = $5_1;
  return $6_1 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$11 : {
            $7_1 = $1_1;
            $5_1 = $0_1;
            $4_1 = 32;
            $6_1 = $4_1 & 31 | 0;
            if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
             $10_1 = $7_1 >>> $6_1 | 0
            } else {
             $10_1 = (((1 << $6_1 | 0) - 1 | 0) & $7_1 | 0) << (32 - $6_1 | 0) | 0 | ($5_1 >>> $6_1 | 0) | 0
            }
            if ($10_1) {
             {
              $8_1 = $2_1;
              if (!$8_1) {
               break label$11
              }
              $9_1 = $3_1;
              $7_1 = $2_1;
              $4_1 = 32;
              $6_1 = $4_1 & 31 | 0;
              if (32 >>> 0 <= ($4_1 & 63 | 0) >>> 0) {
               $11_1 = $9_1 >>> $6_1 | 0
              } else {
               $11_1 = (((1 << $6_1 | 0) - 1 | 0) & $9_1 | 0) << (32 - $6_1 | 0) | 0 | ($7_1 >>> $6_1 | 0) | 0
              }
              if (!$11_1) {
               break label$9
              }
              $10_1 = Math_clz32($11_1) - Math_clz32($10_1) | 0;
              if ($10_1 >>> 0 <= 31 >>> 0) {
               break label$8
              }
              break label$2;
             }
            }
            $5_1 = $3_1;
            $9_1 = $2_1;
            $7_1 = 1;
            $4_1 = 0;
            if ($5_1 >>> 0 > $7_1 >>> 0 | (($5_1 | 0) == ($7_1 | 0) & $9_1 >>> 0 >= $4_1 >>> 0 | 0) | 0) {
             break label$2
            }
            $10_1 = $0_1;
            $8_1 = $2_1;
            $10_1 = ($10_1 >>> 0) / ($8_1 >>> 0) | 0;
            $9_1 = 0;
            legalfunc$wasm2js_scratch_store_i64($0_1 - Math_imul($10_1, $8_1) | 0 | 0, $9_1 | 0);
            $9_1 = 0;
            $5_1 = $10_1;
            i64toi32_i32$HIGH_BITS = $9_1;
            return $5_1 | 0;
           }
           $5_1 = $3_1;
           $4_1 = $2_1;
           $7_1 = 32;
           $6_1 = $7_1 & 31 | 0;
           if (32 >>> 0 <= ($7_1 & 63 | 0) >>> 0) {
            $8_1 = $5_1 >>> $6_1 | 0
           } else {
            $8_1 = (((1 << $6_1 | 0) - 1 | 0) & $5_1 | 0) << (32 - $6_1 | 0) | 0 | ($4_1 >>> $6_1 | 0) | 0
           }
           if (!$0_1) {
            break label$7
           }
           if (!$8_1) {
            break label$6
           }
           $11_1 = $8_1 + -1 | 0;
           if ($11_1 & $8_1 | 0) {
            break label$6
           }
           $9_1 = 0;
           $5_1 = $11_1 & $10_1 | 0;
           $7_1 = 32;
           $6_1 = $7_1 & 31 | 0;
           if (32 >>> 0 <= ($7_1 & 63 | 0) >>> 0) {
            {
             $4_1 = $5_1 << $6_1 | 0;
             $3_1 = 0;
            }
           } else {
            {
             $4_1 = ((1 << $6_1 | 0) - 1 | 0) & ($5_1 >>> (32 - $6_1 | 0) | 0) | 0 | ($9_1 << $6_1 | 0) | 0;
             $3_1 = $5_1 << $6_1 | 0;
            }
           }
           $2_1 = $4_1;
           $4_1 = $1_1;
           $9_1 = $0_1;
           $5_1 = 0;
           $7_1 = -1;
           $5_1 = $4_1 & $5_1 | 0;
           $7_1 = $9_1 & $7_1 | 0;
           $9_1 = $5_1;
           $5_1 = $2_1;
           $4_1 = $3_1;
           $9_1 = $5_1 | $9_1 | 0;
           legalfunc$wasm2js_scratch_store_i64($4_1 | $7_1 | 0 | 0, $9_1 | 0);
           $9_1 = 0;
           $4_1 = $10_1 >>> ((__wasm_ctz_i32($8_1 | 0) | 0) & 31 | 0) | 0;
           i64toi32_i32$HIGH_BITS = $9_1;
           return $4_1 | 0;
          }
          $11_1 = $8_1 + -1 | 0;
          if (!($11_1 & $8_1 | 0)) {
           break label$5
          }
          $10_1 = (Math_clz32($8_1) + 33 | 0) - Math_clz32($10_1) | 0;
          $8_1 = 0 - $10_1 | 0;
          break label$3;
         }
         $8_1 = 63 - $10_1 | 0;
         $10_1 = $10_1 + 1 | 0;
         break label$3;
        }
        $11_1 = ($10_1 >>> 0) / ($8_1 >>> 0) | 0;
        $4_1 = 0;
        $5_1 = $10_1 - Math_imul($11_1, $8_1) | 0;
        $7_1 = 32;
        $6_1 = $7_1 & 31 | 0;
        if (32 >>> 0 <= ($7_1 & 63 | 0) >>> 0) {
         {
          $9_1 = $5_1 << $6_1 | 0;
          $0_1 = 0;
         }
        } else {
         {
          $9_1 = ((1 << $6_1 | 0) - 1 | 0) & ($5_1 >>> (32 - $6_1 | 0) | 0) | 0 | ($4_1 << $6_1 | 0) | 0;
          $0_1 = $5_1 << $6_1 | 0;
         }
        }
        legalfunc$wasm2js_scratch_store_i64($0_1 | 0, $9_1 | 0);
        $9_1 = 0;
        $5_1 = $11_1;
        i64toi32_i32$HIGH_BITS = $9_1;
        return $5_1 | 0;
       }
       $10_1 = Math_clz32($8_1) - Math_clz32($10_1) | 0;
       if ($10_1 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      $5_1 = 0;
      legalfunc$wasm2js_scratch_store_i64($11_1 & $0_1 | 0 | 0, $5_1 | 0);
      if (($8_1 | 0) == (1 | 0)) {
       break label$1
      }
      $5_1 = 0;
      $9_1 = $5_1;
      $5_1 = $1_1;
      $4_1 = $0_1;
      $7_1 = __wasm_ctz_i32($8_1 | 0) | 0;
      $6_1 = $7_1 & 31 | 0;
      if (32 >>> 0 <= ($7_1 & 63 | 0) >>> 0) {
       {
        $9_1 = 0;
        $4_1 = $5_1 >>> $6_1 | 0;
       }
      } else {
       {
        $9_1 = $5_1 >>> $6_1 | 0;
        $4_1 = (((1 << $6_1 | 0) - 1 | 0) & $5_1 | 0) << (32 - $6_1 | 0) | 0 | ($4_1 >>> $6_1 | 0) | 0;
       }
      }
      i64toi32_i32$HIGH_BITS = $9_1;
      return $4_1 | 0;
     }
     $8_1 = 63 - $10_1 | 0;
     $10_1 = $10_1 + 1 | 0;
    }
    $4_1 = 0;
    $9_1 = $4_1;
    $4_1 = $1_1;
    $5_1 = $0_1;
    $7_1 = $10_1 & 63 | 0;
    $6_1 = $7_1 & 31 | 0;
    if (32 >>> 0 <= ($7_1 & 63 | 0) >>> 0) {
     {
      $9_1 = 0;
      $13_1 = $4_1 >>> $6_1 | 0;
     }
    } else {
     {
      $9_1 = $4_1 >>> $6_1 | 0;
      $13_1 = (((1 << $6_1 | 0) - 1 | 0) & $4_1 | 0) << (32 - $6_1 | 0) | 0 | ($5_1 >>> $6_1 | 0) | 0;
     }
    }
    $11_1 = $9_1;
    $9_1 = 0;
    $5_1 = $9_1;
    $9_1 = $1_1;
    $4_1 = $0_1;
    $7_1 = $8_1 & 63 | 0;
    $6_1 = $7_1 & 31 | 0;
    if (32 >>> 0 <= ($7_1 & 63 | 0) >>> 0) {
     {
      $5_1 = $4_1 << $6_1 | 0;
      $0_1 = 0;
     }
    } else {
     {
      $5_1 = ((1 << $6_1 | 0) - 1 | 0) & ($4_1 >>> (32 - $6_1 | 0) | 0) | 0 | ($9_1 << $6_1 | 0) | 0;
      $0_1 = $4_1 << $6_1 | 0;
     }
    }
    $1_1 = $5_1;
    label$13 : {
     if ($10_1) {
      {
       $5_1 = $3_1;
       $9_1 = $2_1;
       $4_1 = -1;
       $7_1 = -1;
       $6_1 = $9_1 + $7_1 | 0;
       $8_1 = $5_1 + $4_1 | 0;
       if ($6_1 >>> 0 < $7_1 >>> 0) {
        $8_1 = $8_1 + 1 | 0
       }
       $17_1 = $6_1;
       $15_1 = $8_1;
       label$15 : while (1) {
        $8_1 = $11_1;
        $5_1 = $13_1;
        $7_1 = 1;
        $4_1 = $7_1 & 31 | 0;
        if (32 >>> 0 <= ($7_1 & 63 | 0) >>> 0) {
         {
          $9_1 = $5_1 << $4_1 | 0;
          $12_1 = 0;
         }
        } else {
         {
          $9_1 = ((1 << $4_1 | 0) - 1 | 0) & ($5_1 >>> (32 - $4_1 | 0) | 0) | 0 | ($8_1 << $4_1 | 0) | 0;
          $12_1 = $5_1 << $4_1 | 0;
         }
        }
        $11_1 = $9_1;
        $9_1 = $1_1;
        $8_1 = $0_1;
        $7_1 = 63;
        $4_1 = $7_1 & 31 | 0;
        if (32 >>> 0 <= ($7_1 & 63 | 0) >>> 0) {
         {
          $5_1 = 0;
          $7_1 = $9_1 >>> $4_1 | 0;
         }
        } else {
         {
          $5_1 = $9_1 >>> $4_1 | 0;
          $7_1 = (((1 << $4_1 | 0) - 1 | 0) & $9_1 | 0) << (32 - $4_1 | 0) | 0 | ($8_1 >>> $4_1 | 0) | 0;
         }
        }
        $8_1 = $5_1;
        $5_1 = $11_1;
        $9_1 = $12_1;
        $8_1 = $5_1 | $8_1 | 0;
        $13_1 = $9_1 | $7_1 | 0;
        $11_1 = $8_1;
        $18_1 = $13_1;
        $19_1 = $8_1;
        $8_1 = $15_1;
        $5_1 = $17_1;
        $9_1 = $11_1;
        $7_1 = $13_1;
        $4_1 = $5_1 - $7_1 | 0;
        $5_1 = $5_1 >>> 0 < $7_1 >>> 0;
        $6_1 = $5_1 + $9_1 | 0;
        $6_1 = $8_1 - $6_1 | 0;
        $8_1 = $4_1;
        $7_1 = 63;
        $9_1 = $7_1 & 31 | 0;
        if (32 >>> 0 <= ($7_1 & 63 | 0) >>> 0) {
         {
          $5_1 = $6_1 >> 31 | 0;
          $14_1 = $6_1 >> $9_1 | 0;
         }
        } else {
         {
          $5_1 = $6_1 >> $9_1 | 0;
          $14_1 = (((1 << $9_1 | 0) - 1 | 0) & $6_1 | 0) << (32 - $9_1 | 0) | 0 | ($8_1 >>> $9_1 | 0) | 0;
         }
        }
        $12_1 = $5_1;
        $5_1 = $12_1;
        $6_1 = $14_1;
        $8_1 = $3_1;
        $7_1 = $2_1;
        $8_1 = $5_1 & $8_1 | 0;
        $7_1 = $6_1 & $7_1 | 0;
        $6_1 = $8_1;
        $8_1 = $19_1;
        $5_1 = $18_1;
        $9_1 = $5_1 - $7_1 | 0;
        $5_1 = $5_1 >>> 0 < $7_1 >>> 0;
        $4_1 = $5_1 + $6_1 | 0;
        $4_1 = $8_1 - $4_1 | 0;
        $13_1 = $9_1;
        $11_1 = $4_1;
        $4_1 = $1_1;
        $8_1 = $0_1;
        $7_1 = 1;
        $6_1 = $7_1 & 31 | 0;
        if (32 >>> 0 <= ($7_1 & 63 | 0) >>> 0) {
         {
          $5_1 = $8_1 << $6_1 | 0;
          $4_1 = 0;
         }
        } else {
         {
          $5_1 = ((1 << $6_1 | 0) - 1 | 0) & ($8_1 >>> (32 - $6_1 | 0) | 0) | 0 | ($4_1 << $6_1 | 0) | 0;
          $4_1 = $8_1 << $6_1 | 0;
         }
        }
        $8_1 = $16_1;
        $7_1 = $20_1;
        $8_1 = $5_1 | $8_1 | 0;
        $0_1 = $4_1 | $7_1 | 0;
        $1_1 = $8_1;
        $8_1 = $12_1;
        $5_1 = $14_1;
        $4_1 = 0;
        $7_1 = 1;
        $4_1 = $8_1 & $4_1 | 0;
        $14_1 = $5_1 & $7_1 | 0;
        $12_1 = $4_1;
        $20_1 = $14_1;
        $16_1 = $4_1;
        $10_1 = $10_1 + -1 | 0;
        if ($10_1) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    $4_1 = $11_1;
    legalfunc$wasm2js_scratch_store_i64($13_1 | 0, $4_1 | 0);
    $4_1 = $1_1;
    $8_1 = $0_1;
    $7_1 = 1;
    $6_1 = $7_1 & 31 | 0;
    if (32 >>> 0 <= ($7_1 & 63 | 0) >>> 0) {
     {
      $5_1 = $8_1 << $6_1 | 0;
      $4_1 = 0;
     }
    } else {
     {
      $5_1 = ((1 << $6_1 | 0) - 1 | 0) & ($8_1 >>> (32 - $6_1 | 0) | 0) | 0 | ($4_1 << $6_1 | 0) | 0;
      $4_1 = $8_1 << $6_1 | 0;
     }
    }
    $8_1 = $12_1;
    $7_1 = $14_1;
    $8_1 = $5_1 | $8_1 | 0;
    $4_1 = $4_1 | $7_1 | 0;
    i64toi32_i32$HIGH_BITS = $8_1;
    return $4_1 | 0;
   }
   $4_1 = $1_1;
   legalfunc$wasm2js_scratch_store_i64($0_1 | 0, $4_1 | 0);
   $4_1 = 0;
   $0_1 = 0;
   $1_1 = $4_1;
  }
  $4_1 = $1_1;
  $8_1 = $0_1;
  i64toi32_i32$HIGH_BITS = $4_1;
  return $8_1 | 0;
 }
 
 function __wasm_ctz_i64($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = $1_1;
  if (!!($0_1 | $3_1 | 0)) {
   {
    $3_1 = $1_1;
    $2_1 = $0_1;
    $6_1 = -1;
    $4_1 = -1;
    $2_1 = $2_1 + $4_1 | 0;
    $5_1 = $3_1 + $6_1 | 0;
    if ($2_1 >>> 0 < $4_1 >>> 0) {
     $5_1 = $5_1 + 1 | 0
    }
    $3_1 = $2_1;
    $2_1 = $1_1;
    $4_1 = $0_1;
    $2_1 = $5_1 ^ $2_1 | 0;
    $3_1 = $3_1 ^ $4_1 | 0;
    $4_1 = Math_clz32($2_1);
    $5_1 = 0;
    if (($4_1 | 0) == (32 | 0)) {
     $4_1 = Math_clz32($3_1) + 32 | 0
    }
    $2_1 = $5_1;
    $5_1 = 0;
    $3_1 = 63;
    $6_1 = $3_1 - $4_1 | 0;
    $2_1 = ($3_1 >>> 0 < $4_1 >>> 0) + $2_1 | 0;
    $2_1 = $5_1 - $2_1 | 0;
    $3_1 = $6_1;
    i64toi32_i32$HIGH_BITS = $2_1;
    return $3_1 | 0;
   }
  }
  $3_1 = 0;
  $2_1 = 64;
  i64toi32_i32$HIGH_BITS = $3_1;
  return $2_1 | 0;
 }
 
 function __wasm_i64_mul($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $1_1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = $1_1;
  return $3_1 | 0;
 }
 
 function __wasm_i64_sdiv($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $1_1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = $1_1;
  return $3_1 | 0;
 }
 
 function __wasm_i64_srem($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = _ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $1_1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = $1_1;
  return $3_1 | 0;
 }
 
 function __wasm_i64_udiv($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $1_1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = $1_1;
  return $3_1 | 0;
 }
 
 function __wasm_i64_urem($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $1_1 = legalfunc$wasm2js_scratch_load_i64() | 0;
  $3_1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = $3_1;
  return $1_1 | 0;
 }
 
 function __wasm_popcnt_i64($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   label$2 : while (1) {
    $4_1 = $1_1;
    $3_1 = !($0_1 | $4_1 | 0);
    $4_1 = $7_1;
    $2_1 = $8_1;
    if ($3_1) {
     break label$1
    }
    $4_1 = $1_1;
    $3_1 = $0_1;
    $2_1 = 0;
    $6_1 = 1;
    $5_1 = $3_1 - $6_1 | 0;
    $2_1 = ($3_1 >>> 0 < $6_1 >>> 0) + $2_1 | 0;
    $2_1 = $4_1 - $2_1 | 0;
    $0_1 = $2_1;
    $2_1 = $4_1;
    $4_1 = $3_1;
    $3_1 = $0_1;
    $3_1 = $2_1 & $3_1 | 0;
    $0_1 = $4_1 & $5_1 | 0;
    $1_1 = $3_1;
    $3_1 = $7_1;
    $2_1 = $8_1;
    $4_1 = 0;
    $6_1 = 1;
    $2_1 = $2_1 + $6_1 | 0;
    $5_1 = $3_1 + $4_1 | 0;
    if ($2_1 >>> 0 < $6_1 >>> 0) {
     $5_1 = $5_1 + 1 | 0
    }
    $8_1 = $2_1;
    $7_1 = $5_1;
    continue label$2;
   };
  }
  $5_1 = $4_1;
  i64toi32_i32$HIGH_BITS = $5_1;
  return $2_1 | 0;
 }
 
 function __wasm_rotl_i64($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $6_1 = $3_1;
  $7_1 = $2_1;
  $4_1 = 0;
  $5_1 = 63;
  $4_1 = $6_1 & $4_1 | 0;
  $10_1 = $7_1 & $5_1 | 0;
  $8_1 = $4_1;
  $4_1 = -1;
  $6_1 = -1;
  $5_1 = $10_1;
  $9_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $7_1 = 0;
    $4_1 = $4_1 >>> $9_1 | 0;
   }
  } else {
   {
    $7_1 = $4_1 >>> $9_1 | 0;
    $4_1 = (((1 << $9_1 | 0) - 1 | 0) & $4_1 | 0) << (32 - $9_1 | 0) | 0 | ($6_1 >>> $9_1 | 0) | 0;
   }
  }
  $6_1 = $1_1;
  $5_1 = $0_1;
  $6_1 = $7_1 & $6_1 | 0;
  $7_1 = $4_1 & $5_1 | 0;
  $5_1 = $10_1;
  $9_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $4_1 = $7_1 << $9_1 | 0;
    $10_1 = 0;
   }
  } else {
   {
    $4_1 = ((1 << $9_1 | 0) - 1 | 0) & ($7_1 >>> (32 - $9_1 | 0) | 0) | 0 | ($6_1 << $9_1 | 0) | 0;
    $10_1 = $7_1 << $9_1 | 0;
   }
  }
  $11_1 = $4_1;
  $4_1 = 0;
  $6_1 = 0;
  $7_1 = $3_1;
  $5_1 = $2_1;
  $9_1 = $6_1 - $5_1 | 0;
  $8_1 = ($6_1 >>> 0 < $5_1 >>> 0) + $7_1 | 0;
  $8_1 = $4_1 - $8_1 | 0;
  $4_1 = $9_1;
  $6_1 = 0;
  $5_1 = 63;
  $6_1 = $8_1 & $6_1 | 0;
  $2_1 = $4_1 & $5_1 | 0;
  $3_1 = $6_1;
  $6_1 = -1;
  $8_1 = -1;
  $5_1 = $2_1;
  $7_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $4_1 = $8_1 << $7_1 | 0;
    $6_1 = 0;
   }
  } else {
   {
    $4_1 = ((1 << $7_1 | 0) - 1 | 0) & ($8_1 >>> (32 - $7_1 | 0) | 0) | 0 | ($6_1 << $7_1 | 0) | 0;
    $6_1 = $8_1 << $7_1 | 0;
   }
  }
  $8_1 = $1_1;
  $5_1 = $0_1;
  $8_1 = $4_1 & $8_1 | 0;
  $4_1 = $6_1 & $5_1 | 0;
  $5_1 = $2_1;
  $7_1 = $5_1 & 31 | 0;
  if (32 >>> 0 <= ($5_1 & 63 | 0) >>> 0) {
   {
    $6_1 = 0;
    $5_1 = $8_1 >>> $7_1 | 0;
   }
  } else {
   {
    $6_1 = $8_1 >>> $7_1 | 0;
    $5_1 = (((1 << $7_1 | 0) - 1 | 0) & $8_1 | 0) << (32 - $7_1 | 0) | 0 | ($4_1 >>> $7_1 | 0) | 0;
   }
  }
  $4_1 = $6_1;
  $6_1 = $11_1;
  $8_1 = $10_1;
  $4_1 = $6_1 | $4_1 | 0;
  $8_1 = $8_1 | $5_1 | 0;
  i64toi32_i32$HIGH_BITS = $4_1;
  return $8_1 | 0;
 }
 
 function __wasm_rotr_i64($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $4_1 = $3_1;
  $7_1 = $2_1;
  $5_1 = 0;
  $6_1 = 63;
  $5_1 = $4_1 & $5_1 | 0;
  $10_1 = $7_1 & $6_1 | 0;
  $8_1 = $5_1;
  $5_1 = -1;
  $4_1 = -1;
  $6_1 = $10_1;
  $9_1 = $6_1 & 31 | 0;
  if (32 >>> 0 <= ($6_1 & 63 | 0) >>> 0) {
   {
    $7_1 = $4_1 << $9_1 | 0;
    $5_1 = 0;
   }
  } else {
   {
    $7_1 = ((1 << $9_1 | 0) - 1 | 0) & ($4_1 >>> (32 - $9_1 | 0) | 0) | 0 | ($5_1 << $9_1 | 0) | 0;
    $5_1 = $4_1 << $9_1 | 0;
   }
  }
  $4_1 = $1_1;
  $6_1 = $0_1;
  $4_1 = $7_1 & $4_1 | 0;
  $7_1 = $5_1 & $6_1 | 0;
  $6_1 = $10_1;
  $9_1 = $6_1 & 31 | 0;
  if (32 >>> 0 <= ($6_1 & 63 | 0) >>> 0) {
   {
    $5_1 = 0;
    $10_1 = $4_1 >>> $9_1 | 0;
   }
  } else {
   {
    $5_1 = $4_1 >>> $9_1 | 0;
    $10_1 = (((1 << $9_1 | 0) - 1 | 0) & $4_1 | 0) << (32 - $9_1 | 0) | 0 | ($7_1 >>> $9_1 | 0) | 0;
   }
  }
  $11_1 = $5_1;
  $5_1 = 0;
  $4_1 = 0;
  $7_1 = $3_1;
  $6_1 = $2_1;
  $9_1 = $4_1 - $6_1 | 0;
  $8_1 = ($4_1 >>> 0 < $6_1 >>> 0) + $7_1 | 0;
  $8_1 = $5_1 - $8_1 | 0;
  $5_1 = $9_1;
  $4_1 = 0;
  $6_1 = 63;
  $4_1 = $8_1 & $4_1 | 0;
  $2_1 = $5_1 & $6_1 | 0;
  $3_1 = $4_1;
  $4_1 = -1;
  $8_1 = -1;
  $6_1 = $2_1;
  $7_1 = $6_1 & 31 | 0;
  if (32 >>> 0 <= ($6_1 & 63 | 0) >>> 0) {
   {
    $5_1 = 0;
    $4_1 = $4_1 >>> $7_1 | 0;
   }
  } else {
   {
    $5_1 = $4_1 >>> $7_1 | 0;
    $4_1 = (((1 << $7_1 | 0) - 1 | 0) & $4_1 | 0) << (32 - $7_1 | 0) | 0 | ($8_1 >>> $7_1 | 0) | 0;
   }
  }
  $8_1 = $1_1;
  $6_1 = $0_1;
  $8_1 = $5_1 & $8_1 | 0;
  $5_1 = $4_1 & $6_1 | 0;
  $6_1 = $2_1;
  $7_1 = $6_1 & 31 | 0;
  if (32 >>> 0 <= ($6_1 & 63 | 0) >>> 0) {
   {
    $4_1 = $5_1 << $7_1 | 0;
    $6_1 = 0;
   }
  } else {
   {
    $4_1 = ((1 << $7_1 | 0) - 1 | 0) & ($5_1 >>> (32 - $7_1 | 0) | 0) | 0 | ($8_1 << $7_1 | 0) | 0;
    $6_1 = $5_1 << $7_1 | 0;
   }
  }
  $5_1 = $4_1;
  $4_1 = $11_1;
  $8_1 = $10_1;
  $5_1 = $4_1 | $5_1 | 0;
  $8_1 = $8_1 | $6_1 | 0;
  i64toi32_i32$HIGH_BITS = $5_1;
  return $8_1 | 0;
 }
 
 function __wasm_ctz_i32($0_1) {
  $0_1 = $0_1 | 0;
  if ($0_1) {
   return 31 - Math_clz32(($0_1 + -1 | 0) ^ $0_1 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 var FUNCTION_TABLE = [];
 return {
  "add": legalstub$0, 
  "sub": legalstub$1, 
  "mul": legalstub$2, 
  "div_s": legalstub$3, 
  "div_u": legalstub$4, 
  "rem_s": legalstub$5, 
  "rem_u": legalstub$6, 
  "and": legalstub$7, 
  "or": legalstub$8, 
  "xor": legalstub$9, 
  "shl": legalstub$10, 
  "shr_s": legalstub$11, 
  "shr_u": legalstub$12, 
  "rotl": legalstub$13, 
  "rotr": legalstub$14, 
  "clz": legalstub$15, 
  "ctz": legalstub$16, 
  "popcnt": legalstub$17, 
  "eqz": legalstub$18, 
  "eq": legalstub$19, 
  "ne": legalstub$20, 
  "lt_s": legalstub$21, 
  "lt_u": legalstub$22, 
  "le_s": legalstub$23, 
  "le_u": legalstub$24, 
  "gt_s": legalstub$25, 
  "gt_u": legalstub$26, 
  "ge_s": legalstub$27, 
  "ge_u": legalstub$28
 };
}

var memasmFunc = new ArrayBuffer(65536);
var retasmFunc = asmFunc({Math,Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,NaN,Infinity}, {abort:function() { throw new Error('abort'); },setTempRet0,getTempRet0},memasmFunc);
export var add = retasmFunc.add;
export var sub = retasmFunc.sub;
export var mul = retasmFunc.mul;
export var div_s = retasmFunc.div_s;
export var div_u = retasmFunc.div_u;
export var rem_s = retasmFunc.rem_s;
export var rem_u = retasmFunc.rem_u;
export var and = retasmFunc.and;
export var or = retasmFunc.or;
export var xor = retasmFunc.xor;
export var shl = retasmFunc.shl;
export var shr_s = retasmFunc.shr_s;
export var shr_u = retasmFunc.shr_u;
export var rotl = retasmFunc.rotl;
export var rotr = retasmFunc.rotr;
export var clz = retasmFunc.clz;
export var ctz = retasmFunc.ctz;
export var popcnt = retasmFunc.popcnt;
export var eqz = retasmFunc.eqz;
export var eq = retasmFunc.eq;
export var ne = retasmFunc.ne;
export var lt_s = retasmFunc.lt_s;
export var lt_u = retasmFunc.lt_u;
export var le_s = retasmFunc.le_s;
export var le_u = retasmFunc.le_u;
export var gt_s = retasmFunc.gt_s;
export var gt_u = retasmFunc.gt_u;
export var ge_s = retasmFunc.ge_s;
export var ge_u = retasmFunc.ge_u;
