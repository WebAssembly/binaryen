
function asmFunc(global, env, buffer) {
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 function zed($0) {
  zed($0);
 }
 
 function $1($0) {
  $0 = $0 | 0;
  a : {
   b : {
    switch ($0 | 0) {
    default:
     zed(-1);
     zed(-2);
    case 3:
     zed(-3);
     zed(-4);
    case 2:
     zed(-5);
     zed(-6);
     break a;
    case 0:
     break a;
    case 1:
     break b;
    };
   }
   zed(-7);
   zed(-8);
  }
  zed(-9);
  zed(-10);
 }
 
 function $2($0) {
  $0 = $0 | 0;
  a : {
   b : {
    c : {
     d : {
      switch ($0 | 0) {
      default:
       zed(-1);
       zed(-2);
       break c;
      case 0:
       break a;
      case 1:
       break b;
      case 2:
       break c;
      case 3:
       break d;
      };
     }
     zed(-3);
     zed(-4);
    }
    zed(-5);
    zed(-6);
    break a;
   }
   zed(-7);
   zed(-8);
  }
  zed(-9);
  zed(-10);
 }
 
 function $3($0) {
  $0 = $0 | 0;
  a : {
   b : {
    c : {
     d : {
      switch ($0 | 0) {
      default:
       if ($0) {
        break c
       }
       zed(-1);
       zed(-2);
       break;
      case 0:
       break a;
      case 1:
       break b;
      case 2:
       break c;
      case 3:
       break d;
      };
     }
     zed(-3);
     zed(-4);
    }
    zed(-5);
    zed(-6);
    break a;
   }
   zed(-7);
   zed(-8);
  }
  zed(-9);
  zed(-10);
 }
 
 function $4($0) {
  $0 = $0 | 0;
  a : {
   b : {
    c : {
     if ($0) {
      break c
     }
     d : {
      switch ($0 | 0) {
      default:
       if ($0) {
        break c
       }
       zed(-1);
       zed(-2);
       break;
      case 0:
       break a;
      case 1:
       break b;
      case 2:
       break c;
      case 3:
       break d;
      };
     }
     zed(-3);
     zed(-4);
    }
    zed(-5);
    zed(-6);
    break a;
   }
   zed(-7);
   zed(-8);
  }
  zed(-9);
  zed(-10);
 }
 
 return {
  "foo1": $1, 
  "foo2": $2, 
  "foo3": $3, 
  "foo4": $4
 };
}

var memasmFunc = new ArrayBuffer(65536);
var retasmFunc = asmFunc({}, {abort() { throw new Error('abort'); }},memasmFunc);
export var foo1 = retasmFunc.foo1;
export var foo2 = retasmFunc.foo2;
export var foo3 = retasmFunc.foo3;
export var foo4 = retasmFunc.foo4;
