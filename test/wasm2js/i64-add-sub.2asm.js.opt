
function asmFunc(env) {
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 function $1($0, $1_1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $1_1 = $1_1 + $3 | 0;
  $0 = $0 + $2 | 0;
  $1_1 = $2 >>> 0 > $0 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  return ($0 | 0) == ($4 | 0) & ($1_1 | 0) == ($5 | 0);
 }
 
 function legalstub$1($0, $1_1, $2, $3, $4, $5) {
  return $1($0, $1_1, $2, $3, $4, $5);
 }
 
 function legalstub$2($0, $1_1, $2, $3, $4, $5) {
  return ($4 | 0) == ($0 - $2 | 0) & ($5 | 0) == ($1_1 - (($0 >>> 0 < $2 >>> 0) + $3 | 0) | 0);
 }
 
 return {
  "check_add_i64": legalstub$1, 
  "check_sub_i64": legalstub$2
 };
}

var retasmFunc = asmFunc(  { abort: function() { throw new Error('abort'); }
  });
export var check_add_i64 = retasmFunc.check_add_i64;
export var check_sub_i64 = retasmFunc.check_sub_i64;
