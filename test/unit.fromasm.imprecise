(module
 (type $none_=>_none (func))
 (type $i32_=>_none (func (param i32)))
 (type $none_=>_i32 (func (result i32)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $f32_=>_none (func (param f32)))
 (type $none_=>_f64 (func (result f64)))
 (type $i32_i32_i32_=>_none (func (param i32 i32 i32)))
 (type $f64_f64_=>_f64 (func (param f64 f64) (result f64)))
 (type $i32_i32_=>_none (func (param i32 i32)))
 (type $i32_i32_i32_i32_=>_none (func (param i32 i32 i32 i32)))
 (type $i32_i32_i32_i32_i32_i32_i32_=>_none (func (param i32 i32 i32 i32 i32 i32 i32)))
 (type $i32_f32_=>_none (func (param i32 f32)))
 (type $i32_f64_f32_=>_none (func (param i32 f64 f32)))
 (type $f32_f64_=>_none (func (param f32 f64)))
 (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
 (type $f64_i32_=>_i32 (func (param f64 i32) (result i32)))
 (type $none_=>_f32 (func (result f32)))
 (type $i32_f32_f64_=>_f32 (func (param i32 f32 f64) (result f32)))
 (type $f64_=>_f64 (func (param f64) (result f64)))
 (import "env" "memory" (memory $9 256 256))
 (import "env" "table" (table $timport$10 25 25 funcref))
 (elem (global.get $gimport$7) $big_negative $big_negative $big_negative $big_negative $w $w $importedDoubles $w $fr $cneg $fr $fr $fr $fr $fr $fr $vi $vi $vi $vi $vi $vi $vi $vi $ii)
 (import "env" "__table_base" (global $gimport$7 i32))
 (import "env" "gb" (global $gimport$8 i32))
 (import "env" "setTempRet0" (func $setTempRet0 (param i32) (result i32)))
 (import "env" "abort" (func $abort (param f64) (result f64)))
 (import "env" "print" (func $print (param i32)))
 (import "env" "h" (func $h (param i32)))
 (import "env" "return_int" (func $return_int (result i32)))
 (import "env" "emscripten_log" (func $emscripten_log))
 (import "asm2wasm" "f64-rem" (func $f64-rem (param f64 f64) (result f64)))
 (global $global$0 (mut i32) (i32.const 0))
 (global $global$1 (mut i32) (i32.const 1337))
 (global $global$2 i32 (i32.const 42))
 (export "big_negative" (func $big_negative))
 (export "pick" (func $big_negative))
 (export "doubleCompares" (func $doubleCompares))
 (export "intOps" (func $intOps))
 (export "conversions" (func $conversions))
 (export "switcher" (func $switcher))
 (export "frem" (func $frem))
 (export "frem_float" (func $frem_float))
 (export "big_uint_div_u" (func $big_uint_div_u))
 (export "trapping_sint_div_s" (func $trapping_sint_div_s))
 (export "fr" (func $fr))
 (export "negZero" (func $negZero))
 (export "neg" (func $neg))
 (export "smallCompare" (func $smallCompare))
 (export "cneg_nosemicolon" (func $cneg_nosemicolon))
 (export "forLoop" (func $forLoop))
 (export "ceiling_32_64" (func $ceiling_32_64))
 (export "aborts" (func $aborts))
 (export "continues" (func $continues))
 (export "bitcasts" (func $bitcasts))
 (export "recursiveBlockMerging" (func $recursiveBlockMerging))
 (export "lb" (func $lb))
 (export "zeroInit" (func $zeroInit))
 (export "phi" (func $phi))
 (export "smallIf" (func $smallIf))
 (export "dropCall" (func $dropCall))
 (export "useGlobalSet" (func $useGlobalSet))
 (export "usesGlobalSet2" (func $usesGlobalSet2))
 (export "breakThroughMany" (func $breakThroughMany))
 (export "ifChainEmpty" (func $ifChainEmpty))
 (export "heap8NoShift" (func $heap8NoShift))
 (export "conditionalTypeFun" (func $conditionalTypeFun))
 (export "loadSigned" (func $loadSigned))
 (export "globalOpts" (func $globalOpts))
 (export "dropCallImport" (func $dropCallImport))
 (export "loophi" (func $loophi))
 (export "loophi2" (func $loophi2))
 (export "loophi2b" (func $loophi2b))
 (export "relooperJumpThreading" (func $relooperJumpThreading))
 (export "relooperJumpThreading__ZN4game14preloadweaponsEv" (func $relooperJumpThreading__ZN4game14preloadweaponsEv))
 (export "__Z12multi_varargiz" (func $__Z12multi_varargiz))
 (export "jumpThreadDrop" (func $jumpThreadDrop))
 (export "dropIgnoredImportInIf" (func $dropIgnoredImportInIf))
 (export "dropIgnoredImportsInIf" (func $dropIgnoredImportsInIf))
 (export "relooperJumpThreading_irreducible" (func $relooperJumpThreading_irreducible))
 (export "store_fround" (func $store_fround))
 (export "exportedNumber" (global $global$2))
 (export "relocatableAndModules" (func $relocatableAndModules))
 (export "exported_f32_user" (func $exported_f32_user))
 (export "keepAlive" (func $keepAlive))
 (func $big_negative
  (nop)
 )
 (func $importedDoubles (result f64)
  (if
   (i32.gt_s
    (global.get $global$0)
    (i32.const 0)
   )
   (return
    (f64.const -3.4)
   )
  )
  (f64.const 1.2)
 )
 (func $doubleCompares (param $0 f64) (param $1 f64) (result f64)
  (if
   (f64.gt
    (local.get $0)
    (f64.const 0)
   )
   (return
    (f64.const 1.2)
   )
  )
  (if
   (f64.gt
    (local.get $0)
    (f64.const 0)
   )
   (return
    (f64.const -3.4)
   )
  )
  (if
   (i32.gt_s
    (global.get $gimport$8)
    (i32.const 0)
   )
   (return
    (f64.const 5.6)
   )
  )
  (if
   (f64.lt
    (local.get $0)
    (local.get $1)
   )
   (return
    (local.get $0)
   )
  )
  (local.get $1)
 )
 (func $intOps (param $0 i32) (result i32)
  (i32.eqz
   (local.get $0)
  )
 )
 (func $conversions (param $0 i32) (param $1 f64) (param $2 f32)
  (nop)
 )
 (func $switcher (param $0 i32) (result i32)
  (block $label$1
   (block $label$2
    (block $label$3
     (br_table $label$3 $label$2 $label$1
      (i32.sub
       (local.get $0)
       (i32.const 1)
      )
     )
    )
    (return
     (i32.const 1)
    )
   )
   (return
    (i32.const 2)
   )
  )
  (block $label$4
   (block $label$5
    (block $label$6
     (br_table $label$5 $label$4 $label$4 $label$4 $label$4 $label$4 $label$4 $label$6 $label$4
      (i32.sub
       (local.get $0)
       (i32.const 5)
      )
     )
    )
    (return
     (i32.const 121)
    )
   )
   (return
    (i32.const 51)
   )
  )
  (loop $label$7
   (block $label$8
    (loop $label$9
     (block $label$10
      (br_table $label$10 $label$8 $label$8 $label$8 $label$8 $label$8 $label$9 $label$8
       (i32.add
        (local.get $0)
        (i32.const -110)
       )
      )
     )
    )
    (call $h
     (i32.const 120)
    )
    (br $label$7)
   )
  )
  (i32.const 0)
 )
 (func $frem (result f64)
  (call $f64-rem
   (f64.const 5.5)
   (f64.const 1.2)
  )
 )
 (func $frem_float (result f32)
  (f32.demote_f64
   (call $f64-rem
    (f64.const 5.5)
    (f64.const 1.2000000476837158)
   )
  )
 )
 (func $big_uint_div_u (result i32)
  (i32.const 2147483647)
 )
 (func $trapping_sint_div_s (result i32)
  (i32.div_s
   (i32.const -2147483648)
   (i32.const -1)
  )
 )
 (func $fr (param $0 f32)
  (nop)
 )
 (func $negZero (result f64)
  (f64.const -0)
 )
 (func $neg
  (call_indirect (type $f32_=>_none)
   (f32.const -0)
   (i32.const 9)
  )
 )
 (func $cneg (param $0 f32)
  (call_indirect (type $f32_=>_none)
   (local.get $0)
   (i32.const 9)
  )
 )
 (func $smallCompare (param $0 i32) (param $1 i32) (result i32)
  (if (result i32)
   (i32.lt_u
    (local.tee $0
     (select
      (i32.add
       (local.get $0)
       (i32.const 1)
      )
      (local.get $0)
      (i32.lt_s
       (local.get $0)
       (local.get $1)
      )
     )
    )
    (local.get $1)
   )
   (i32.add
    (local.get $0)
    (i32.const 1)
   )
   (local.get $0)
  )
 )
 (func $cneg_nosemicolon
  (call_indirect (type $i32_=>_none)
   (i32.const 1)
   (i32.const 17)
  )
 )
 (func $forLoop
  (local $0 i32)
  (local.set $0
   (i32.const 1)
  )
  (loop $label$1
   (if
    (i32.lt_s
     (local.get $0)
     (i32.const 200)
    )
    (block
     (call $h
      (local.get $0)
     )
     (local.set $0
      (i32.add
       (local.get $0)
       (i32.const 1)
      )
     )
     (br $label$1)
    )
   )
  )
 )
 (func $ceiling_32_64 (param $0 f32) (param $1 f64)
  (nop)
 )
 (func $aborts
  (drop
   (call $abort
    (f64.const 0)
   )
  )
  (drop
   (call $abort
    (f64.convert_i32_s
     (i32.const 55)
    )
   )
  )
  (drop
   (call $abort
    (f64.const 0)
   )
  )
  (drop
   (call $abort
    (f64.const 12.34)
   )
  )
  (drop
   (call $abort
    (f64.const 56.779998779296875)
   )
  )
 )
 (func $continues
  (loop $label$1
   (call $print
    (i32.const 1)
   )
   (loop $label$2
    (call $print
     (i32.const 5)
    )
    (br_if $label$2
     (call $return_int)
    )
   )
   (call $print
    (i32.const 2)
   )
   (br $label$1)
  )
 )
 (func $bitcasts (param $0 i32) (param $1 f32)
  (nop)
 )
 (func $recursiveBlockMerging (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (drop
   (call $lb
    (i32.add
     (local.get $0)
     (i32.const 22)
    )
   )
  )
  (drop
   (call $lb
    (i32.const 1)
   )
  )
  (drop
   (call $lb
    (i32.const 2)
   )
  )
  (i32.add
   (block (result i32)
    (local.set $2
     (i32.add
      (block (result i32)
       (local.set $1
        (i32.add
         (call $lb
          (i32.const 3)
         )
         (local.get $0)
        )
       )
       (drop
        (call $lb
         (i32.const 4)
        )
       )
       (drop
        (call $lb
         (i32.const 5)
        )
       )
       (drop
        (call $lb
         (i32.const 6)
        )
       )
       (local.get $1)
      )
      (call $lb
       (i32.const 7)
      )
     )
    )
    (drop
     (call $lb
      (i32.const 8)
     )
    )
    (drop
     (call $lb
      (i32.const 9)
     )
    )
    (drop
     (call $lb
      (i32.const 10)
     )
    )
    (drop
     (call $lb
      (i32.const 11)
     )
    )
    (local.get $2)
   )
   (call $lb
    (i32.const 12)
   )
  )
 )
 (func $lb (param $0 i32) (result i32)
  (i32.store
   (local.get $0)
   (i32.add
    (global.get $gimport$8)
    (i32.const 144)
   )
  )
  (i32.const 0)
 )
 (func $zeroInit (param $0 i32)
  (local $1 i32)
  (if
   (i32.eq
    (if (result i32)
     (call $lb
      (i32.const 0)
     )
     (if (result i32)
      (call $lb
       (i32.const 1)
      )
      (i32.const 3)
      (local.get $1)
     )
     (i32.const 3)
    )
    (i32.const 3)
   )
   (drop
    (call $lb
     (i32.const 2)
    )
   )
  )
 )
 (func $phi (result i32)
  (block $label$1 (result i32)
   (drop
    (br_if $label$1
     (i32.const 0)
     (call $lb
      (i32.const 1)
     )
    )
   )
   (i32.const 1)
  )
 )
 (func $smallIf
  (if
   (call $return_int)
   (drop
    (call $lb
     (i32.const 3)
    )
   )
  )
 )
 (func $dropCall (result i32)
  (if
   (call $return_int)
   (block
    (drop
     (call $phi)
    )
    (drop
     (call $setTempRet0
      (i32.const 10)
     )
    )
    (call $zeroInit
     (call $setTempRet0
      (i32.const 10)
     )
    )
   )
  )
  (call $phi)
 )
 (func $useGlobalSet (result i32)
  (global.set $global$0
   (i32.const 10)
  )
  (global.set $global$0
   (i32.const 20)
  )
  (global.set $global$0
   (i32.const 30)
  )
  (i32.const 30)
 )
 (func $usesGlobalSet2 (result i32)
  (global.set $global$0
   (i32.const 40)
  )
  (i32.const 50)
 )
 (func $breakThroughMany (param $0 i32)
  (if
   (local.get $0)
   (loop $label$2
    (if
     (local.get $0)
     (block
      (call $zeroInit
       (i32.const 0)
      )
      (br $label$2)
     )
    )
   )
  )
 )
 (func $ifChainEmpty (param $0 i32) (result i32)
  (if
   (i32.eq
    (local.get $0)
    (i32.const 4)
   )
   (return
    (i32.const 0)
   )
  )
  (i32.const 0)
 )
 (func $heap8NoShift (param $0 i32) (result i32)
  (i32.load8_s
   (local.get $0)
  )
 )
 (func $conditionalTypeFun
  (drop
   (if (result i32)
    (call $return_int)
    (i32.trunc_f64_s
     (call $abort
      (f64.convert_i32_s
       (i32.const 5)
      )
     )
    )
    (i32.const 2)
   )
  )
  (drop
   (if (result f64)
    (call $return_int)
    (call $abort
     (f64.convert_i32_s
      (i32.const 7)
     )
    )
    (f64.const 4.5)
   )
  )
 )
 (func $loadSigned (param $0 i32)
  (call $loadSigned
   (i32.load8_s
    (local.get $0)
   )
  )
  (call $loadSigned
   (i32.load8_s
    (local.get $0)
   )
  )
  (call $loadSigned
   (i32.load16_s
    (local.get $0)
   )
  )
  (call $loadSigned
   (i32.load16_s
    (local.get $0)
   )
  )
  (call $loadSigned
   (i32.shr_s
    (i32.shl
     (i32.load8_s
      (local.get $0)
     )
     (i32.const 24)
    )
    (i32.const 16)
   )
  )
  (call $loadSigned
   (i32.shr_s
    (i32.shl
     (i32.load8_u
      (local.get $0)
     )
     (i32.const 16)
    )
    (i32.const 24)
   )
  )
  (call $loadSigned
   (i32.shr_s
    (i32.shl
     (i32.load16_s
      (local.get $0)
     )
     (i32.const 16)
    )
    (i32.const 24)
   )
  )
  (call $loadSigned
   (i32.shr_s
    (i32.shl
     (i32.load16_u
      (local.get $0)
     )
     (i32.const 24)
    )
    (i32.const 16)
   )
  )
 )
 (func $w (result f64)
  (f64.const 0)
 )
 (func $globalOpts
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (i32.store8
   (i32.const 13)
   (i32.load
    (i32.const 12)
   )
  )
  (call $globalOpts)
  (global.set $global$0
   (block (result i32)
    (local.set $1
     (global.get $global$0)
    )
    (if
     (call $return_int)
     (global.set $global$0
      (i32.const 20)
     )
    )
    (local.get $1)
   )
  )
  (call $globalOpts)
  (global.set $global$0
   (block (result i32)
    (local.set $2
     (global.get $global$0)
    )
    (call $globalOpts)
    (local.get $2)
   )
  )
 )
 (func $dropCallImport
  (if
   (call $return_int)
   (drop
    (call $return_int)
   )
  )
 )
 (func $loophi (param $0 i32) (param $1 i32)
  (loop $label$1
   (block $label$2
    (call $loophi
     (local.get $0)
     (i32.const 0)
    )
    (br_if $label$2
     (select
      (local.get $0)
      (i32.const 0)
      (local.get $0)
     )
    )
    (br_if $label$1
     (i32.eq
      (local.get $1)
      (local.tee $0
       (i32.add
        (local.get $0)
        (i32.const 1)
       )
      )
     )
    )
   )
  )
 )
 (func $loophi2 (result i32)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (loop $label$1
   (block $label$2
    (local.set $0
     (i32.const 0)
    )
    (loop $label$3
     (local.set $2
      (local.get $0)
     )
     (br_if $label$2
      (select
       (call $return_int)
       (i32.const 0)
       (local.get $2)
      )
     )
     (br_if $label$3
      (local.tee $0
       (i32.add
        (local.get $0)
        (i32.const 1)
       )
      )
     )
    )
    (br $label$1)
   )
  )
  (local.get $1)
 )
 (func $loophi2b (result i32)
  (local $0 i32)
  (local $1 i32)
  (loop $label$1
   (block $label$2
    (local.set $0
     (i32.const 0)
    )
    (loop $label$3
     (local.set $1
      (local.get $0)
     )
     (br_if $label$2
      (select
       (call $return_int)
       (i32.const 0)
       (local.get $1)
      )
     )
     (br_if $label$3
      (local.tee $0
       (i32.add
        (local.get $0)
        (i32.const 1)
       )
      )
     )
    )
    (br $label$1)
   )
  )
  (local.get $0)
 )
 (func $relooperJumpThreading (param $0 i32) (result i32)
  (block $label$1
   (block $label$2
    (if
     (local.get $0)
     (block
      (call $h
       (i32.const 0)
      )
      (br $label$2)
     )
    )
    (br $label$1)
   )
   (call $h
    (i32.const 1)
   )
  )
  (call $h
   (i32.const -1)
  )
  (loop $label$4
   (br_if $label$4
    (i32.eqz
     (local.tee $0
      (i32.add
       (local.get $0)
       (i32.const 1)
      )
     )
    )
   )
  )
  (call $h
   (i32.const 2)
  )
  (call $h
   (i32.const 3)
  )
  (call $h
   (i32.const -2)
  )
  (block $label$5
   (block $label$6
    (block $label$7
     (if
      (local.get $0)
      (block
       (call $h
        (i32.const 4)
       )
       (br_if $label$7
        (i32.eq
         (local.get $0)
         (i32.const 3)
        )
       )
       (br $label$6)
      )
     )
     (br $label$5)
    )
    (call $h
     (i32.const 5)
    )
    (br $label$5)
   )
   (call $h
    (i32.const 6)
   )
  )
  (call $h
   (i32.const -3)
  )
  (block $label$9
   (block $label$10
    (block $label$11
     (if
      (local.get $0)
      (block
       (call $h
        (i32.const 7)
       )
       (br_if $label$11
        (i32.eq
         (local.get $0)
         (i32.const 5)
        )
       )
       (br $label$10)
      )
     )
     (br $label$9)
    )
    (call $h
     (i32.const 8)
    )
    (br_if $label$10
     (i32.eq
      (local.get $0)
      (i32.const 6)
     )
    )
    (br $label$9)
   )
   (call $h
    (i32.const 9)
   )
  )
  (call $h
   (i32.const -4)
  )
  (block $label$13
   (block $label$14
    (if
     (local.get $0)
     (block
      (call $h
       (i32.const 10)
      )
      (br $label$14)
     )
    )
    (br $label$13)
   )
   (call $h
    (i32.const 11)
   )
  )
  (call $h
   (i32.const -5)
  )
  (block $label$16
   (block $label$17
    (block $label$18
     (if
      (local.get $0)
      (block
       (call $h
        (i32.const 12)
       )
       (br_if $label$18
        (i32.eq
         (local.get $0)
         (i32.const 8)
        )
       )
       (br $label$17)
      )
     )
     (br $label$16)
    )
    (call $h
     (i32.const 13)
    )
    (br_if $label$17
     (local.get $0)
    )
    (br $label$16)
   )
   (call $h
    (i32.const 14)
   )
  )
  (call $h
   (i32.const -6)
  )
  (local.get $0)
 )
 (func $relooperJumpThreading__ZN4game14preloadweaponsEv (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (param $5 i32) (param $6 i32)
  (loop $label$1
   (block $label$2
    (if
     (local.get $1)
     (br_if $label$2
      (i32.eqz
       (local.get $2)
      )
     )
     (br_if $label$2
      (i32.eqz
       (local.get $3)
      )
     )
    )
    (br $label$1)
   )
   (i32.store
    (local.get $4)
    (local.get $5)
   )
   (br $label$1)
  )
 )
 (func $relooperJumpThreading_irreducible (param $0 i32)
  (local $1 i32)
  (if
   (i32.eq
    (local.get $0)
    (i32.const 100)
   )
   (loop $label$2
    (call $relooperJumpThreading_irreducible
     (i32.const 1337)
    )
    (br $label$2)
   )
  )
  (local.set $1
   (select
    (i32.const 2)
    (i32.const 10)
    (i32.eq
     (local.get $0)
     (i32.const 200)
    )
   )
  )
  (if
   (i32.eq
    (local.tee $1
     (select
      (i32.const 2)
      (local.get $1)
      (i32.eq
       (local.get $0)
       (i32.const 300)
      )
     )
    )
    (i32.const 2)
   )
   (call $relooperJumpThreading_irreducible
    (i32.const 1448)
   )
  )
  (if
   (i32.eq
    (local.get $1)
    (i32.const 10)
   )
   (call $relooperJumpThreading_irreducible
    (i32.const 2000)
   )
  )
 )
 (func $__Z12multi_varargiz (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32)
  (if
   (local.get $3)
   (loop $label$2
    (br_if $label$2
     (i32.eqz
      (local.get $2)
     )
    )
   )
   (drop
    (call $lb
     (i32.const 1)
    )
   )
  )
 )
 (func $jumpThreadDrop (result i32)
  (call $return_int)
 )
 (func $dropIgnoredImportInIf (param $0 i32) (param $1 i32) (param $2 i32)
  (if
   (local.get $0)
   (drop
    (call $lb
     (local.get $2)
    )
   )
  )
 )
 (func $dropIgnoredImportsInIf (param $0 i32) (param $1 i32) (param $2 i32)
  (drop
   (if (result i32)
    (local.get $0)
    (call $lb
     (local.get $1)
    )
    (call $lb
     (local.get $2)
    )
   )
  )
 )
 (func $store_fround (param $0 i32)
  (f64.store
   (i32.const 80)
   (f64.promote_f32
    (f32.convert_i32_s
     (local.get $0)
    )
   )
  )
 )
 (func $relocatableAndModules (result i32)
  (call_indirect (type $none_=>_none)
   (i32.const 10)
  )
  (call_indirect (type $none_=>_none)
   (i32.const 20)
  )
  (call_indirect (type $f64_i32_=>_i32)
   (f64.const 1.5)
   (i32.const 200)
   (i32.const 30)
  )
 )
 (func $exported_f32_user (param $0 i32) (param $1 f32) (param $2 f64) (result f32)
  (local.get $1)
 )
 (func $keepAlive
  (local $0 i32)
  (call_indirect (type $i32_=>_none)
   (i32.const 0)
   (i32.const 17)
  )
  (call_indirect (type $i32_=>_none)
   (block (result i32)
    (local.set $0
     (i32.const 0)
    )
    (global.set $global$0
     (i32.const 1)
    )
    (local.get $0)
   )
   (i32.const 17)
  )
  (call $emscripten_log)
  (drop
   (call $abort
    (f64.const 0)
   )
  )
  (drop
   (call $f64-rem
    (f64.const 9.78)
    (f64.const 1)
   )
  )
  (global.set $global$1
   (i32.add
    (global.get $global$1)
    (i32.const 1)
   )
  )
 )
 (func $vi (param $0 i32)
  (nop)
 )
 (func $ii (param $0 i32) (result i32)
  (local.get $0)
 )
)
