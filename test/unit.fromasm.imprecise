(module
  (memory 256 256)
  (type $FUNCSIG$ddd (func (param f64 f64) (result f64)))
  (type $FUNCSIG$vf (func (param f32)))
  (type $FUNCSIG$vi (func (param i32)))
  (type $FUNCSIG$ii (func (param i32) (result i32)))
  (type $FUNCSIG$dd (func (param f64) (result f64)))
  (import "global" "NaN" (global $t f64))
  (import "global" "Infinity" (global $u f64))
  (import "env" "tempDoublePtr" (global $tempDoublePtr i32))
  (import "env" "gb" (global $n i32))
  (import "env" "setTempRet0" (func $setTempRet0 (param i32) (result i32)))
  (import "env" "abort" (func $abort (param f64) (result f64)))
  (import "env" "print" (func $print (param i32)))
  (import "env" "h" (func $h (param i32)))
  (import "asm2wasm" "f64-rem" (func $f64-rem (param f64 f64) (result f64)))
  (import "env" "memory" (memory $memory))
  (import "env" "table" (table $table))
  (import "env" "memoryBase" (global $memoryBase i32))
  (import "env" "tableBase" (global $tableBase i32))
  (export "big_negative" (func $big_negative))
  (export "pick" (func $big_negative))
  (global $Int i32 (i32.const 0))
  (global $Double f64 (f64.const 0))
  (table 10 10 anyfunc)
  (elem (i32.const 0) $big_negative $big_negative $big_negative $big_negative $big_negative $big_negative $importedDoubles $big_negative $big_negative $cneg)
  (func $big_negative
    (nop)
  )
  (func $importedDoubles (result f64)
    (if
      (i32.gt_s
        (get_global $Int)
        (i32.const 0)
      )
      (return
        (f64.const -3.4)
      )
    )
    (if
      (f64.gt
        (get_global $Double)
        (f64.const 0)
      )
      (return
        (f64.const 5.6)
      )
    )
    (f64.const 1.2)
  )
  (func $doubleCompares (param $0 f64) (param $1 f64) (result f64)
    (local $2 f64)
    (local $3 i32)
    (if
      (f64.gt
        (get_local $0)
        (f64.const 0)
      )
      (return
        (f64.const 1.2)
      )
    )
    (if
      (f64.gt
        (get_local $2)
        (f64.const 0)
      )
      (return
        (f64.const -3.4)
      )
    )
    (if
      (i32.gt_s
        (get_local $3)
        (i32.const 0)
      )
      (return
        (f64.const 5.6)
      )
    )
    (if
      (f64.lt
        (get_local $0)
        (get_local $1)
      )
      (return
        (get_local $0)
      )
    )
    (get_local $1)
  )
  (func $intOps (result i32)
    (local $0 i32)
    (i32.eqz
      (get_local $0)
    )
  )
  (func $conversions
    (local $0 f32)
    (local $1 i32)
    (drop
      (f64.convert_s/i32
        (tee_local $1
          (i32.trunc_s/f32
            (get_local $0)
          )
        )
      )
    )
  )
  (func $switcher (param $0 i32) (result i32)
    (block $switch-default$3
      (block $switch-case$2
        (block $switch-case$1
          (br_table $switch-case$1 $switch-case$2 $switch-default$3
            (i32.sub
              (get_local $0)
              (i32.const 1)
            )
          )
        )
        (return
          (i32.const 1)
        )
      )
      (return
        (i32.const 2)
      )
    )
    (block $switch-default$7
      (block $switch-case$6
        (block $switch-case$5
          (br_table $switch-case$6 $switch-default$7 $switch-default$7 $switch-default$7 $switch-default$7 $switch-default$7 $switch-default$7 $switch-case$5 $switch-default$7
            (i32.sub
              (get_local $0)
              (i32.const 5)
            )
          )
        )
        (return
          (i32.const 121)
        )
      )
      (return
        (i32.const 51)
      )
    )
    (block $switch-default$16
      (block $switch-case$15
        (block $switch-case$12
          (block $switch-case$9
            (block $switch-case$8
              (br_table $switch-case$15 $switch-default$16 $switch-default$16 $switch-case$12 $switch-default$16 $switch-default$16 $switch-default$16 $switch-default$16 $switch-case$9 $switch-default$16 $switch-case$8 $switch-default$16
                (i32.sub
                  (get_local $0)
                  (i32.const 2)
                )
              )
            )
          )
        )
      )
    )
    (loop $label$continue$L1
      (block $label$break$L1
        (loop $label$continue$L3
          (block $label$break$L3
            (block $switch$17
              (block $switch-default$21
                (block $switch-case$20
                  (block $switch-case$19
                    (block $switch-case$18
                      (br_table $switch-case$18 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-case$20 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-default$21 $switch-case$19 $switch-default$21
                        (i32.sub
                          (get_local $0)
                          (i32.const -1)
                        )
                      )
                    )
                    (br $label$break$L1)
                  )
                  (br $switch$17)
                )
                (br $label$break$L3)
              )
              (br $label$break$L1)
            )
            (br $label$continue$L3)
          )
        )
        (call_import $h
          (i32.const 120)
        )
        (br $label$continue$L1)
      )
    )
    (i32.const 0)
  )
  (func $frem (result f64)
    (call_import $f64-rem
      (f64.const 5.5)
      (f64.const 1.2)
    )
  )
  (func $big_uint_div_u (result i32)
    (i32.const 2147483647)
  )
  (func $fr (param $0 f32)
    (nop)
  )
  (func $negZero (result f64)
    (f64.const -0)
  )
  (func $neg
    (local $0 f32)
    (call_indirect $FUNCSIG$vf
      (f32.neg
        (get_local $0)
      )
      (i32.add
        (i32.const 1)
        (i32.const 8)
      )
    )
  )
  (func $cneg (param $0 f32)
    (call_indirect $FUNCSIG$vf
      (get_local $0)
      (i32.add
        (i32.const 1)
        (i32.const 8)
      )
    )
  )
  (func $smallCompare (result i32)
    (local $0 i32)
    (local $1 i32)
    (if
      (i32.lt_s
        (get_local $0)
        (get_local $1)
      )
      (set_local $0
        (i32.add
          (get_local $0)
          (i32.const 1)
        )
      )
    )
    (if
      (i32.lt_u
        (get_local $0)
        (get_local $1)
      )
      (set_local $0
        (i32.add
          (get_local $0)
          (i32.const 1)
        )
      )
    )
    (get_local $0)
  )
  (func $cneg_nosemicolon
    (call_indirect $FUNCSIG$vi
      (i32.const 1)
      (i32.add
        (i32.const 1)
        (i32.const 8)
      )
    )
  )
  (func $forLoop
    (local $0 i32)
    (set_local $0
      (i32.const 1)
    )
    (loop $for-in$1
      (block $for-out$0
        (br_if $for-out$0
          (i32.ge_s
            (get_local $0)
            (i32.const 200)
          )
        )
        (call_import $h
          (get_local $0)
        )
        (set_local $0
          (i32.add
            (get_local $0)
            (i32.const 1)
          )
        )
        (br $for-in$1)
      )
    )
  )
  (func $ceiling_32_64 (param $0 f32) (param $1 f64)
    (nop)
  )
  (func $aborts
    (drop
      (call_import $abort
        (f64.const 0)
      )
    )
    (drop
      (call_import $abort
        (f64.convert_s/i32
          (i32.const 55)
        )
      )
    )
    (drop
      (call_import $abort
        (f64.const 0)
      )
    )
    (drop
      (call_import $abort
        (f64.const 12.34)
      )
    )
    (drop
      (call_import $abort
        (f64.promote/f32
          (f32.const 56.779998779296875)
        )
      )
    )
  )
  (func $continues
    (loop $while-in$1
      (call_import $print
        (i32.const 1)
      )
      (loop $unlikely-continue$3
        (call_import $print
          (i32.const 5)
        )
        (br_if $unlikely-continue$3
          (i32.const 0)
        )
      )
      (call_import $print
        (i32.const 2)
      )
      (br $while-in$1)
    )
  )
  (func $bitcasts (param $0 i32) (param $1 f32)
    (nop)
  )
  (func $recursiveBlockMerging (param $0 i32) (result i32)
    (drop
      (call $lb
        (i32.add
          (i32.add
            (i32.add
              (get_local $0)
              (i32.const 3)
            )
            (i32.const 7)
          )
          (i32.const 12)
        )
      )
    )
    (drop
      (call $lb
        (i32.const 1)
      )
    )
    (drop
      (call $lb
        (i32.const 2)
      )
    )
    (i32.add
      (i32.add
        (i32.add
          (get_local $0)
          (call $lb
            (i32.const 3)
          )
        )
        (block
          (drop
            (call $lb
              (i32.const 4)
            )
          )
          (drop
            (call $lb
              (i32.const 5)
            )
          )
          (drop
            (call $lb
              (i32.const 6)
            )
          )
          (call $lb
            (i32.const 7)
          )
        )
      )
      (block
        (drop
          (call $lb
            (i32.const 8)
          )
        )
        (drop
          (call $lb
            (i32.const 9)
          )
        )
        (drop
          (call $lb
            (i32.const 10)
          )
        )
        (drop
          (call $lb
            (i32.const 11)
          )
        )
        (call $lb
          (i32.const 12)
        )
      )
    )
  )
  (func $lb (param $0 i32) (result i32)
    (i32.store
      (get_local $0)
      (i32.add
        (i32.add
          (get_global $n)
          (i32.const 136)
        )
        (i32.const 8)
      )
    )
    (i32.const 0)
  )
  (func $zeroInit (param $0 i32)
    (local $1 i32)
    (if
      (call $lb
        (i32.const 0)
      )
      (if
        (call $lb
          (i32.const 1)
        )
        (set_local $1
          (i32.const 3)
        )
      )
      (set_local $1
        (i32.const 3)
      )
    )
    (if
      (i32.eq
        (get_local $1)
        (i32.const 3)
      )
      (call $lb
        (i32.const 2)
      )
    )
  )
  (func $phi (result i32)
    (block $do-once$0
      (br_if $do-once$0
        (i32.const 0)
        (call $lb
          (i32.const 1)
        )
      )
      (i32.const 1)
    )
  )
  (func $smallIf
    (block $do-once$0
      (if
        (i32.const 2)
        (drop
          (call $lb
            (i32.const 3)
          )
        )
      )
    )
  )
  (func $dropCall (result i32)
    (if
      (i32.const 0)
      (block
        (drop
          (call $phi)
        )
        (drop
          (call_import $setTempRet0
            (i32.const 10)
          )
        )
        (call $zeroInit
          (call_import $setTempRet0
            (i32.const 10)
          )
        )
      )
    )
    (call $phi)
  )
  (func $useSetGlobal (result i32)
    (set_global $Int
      (i32.const 10)
    )
    (set_global $Int
      (i32.const 20)
    )
    (set_global $Int
      (i32.const 30)
    )
    (get_global $Int)
  )
  (func $usesSetGlobal2 (result i32)
    (set_global $Int
      (i32.const 40)
    )
    (i32.const 50)
  )
  (func $breakThroughMany (param $0 i32)
    (block $label$break$L1
      (if
        (get_local $0)
        (loop $while-in$2
          (br_if $label$break$L1
            (i32.eqz
              (get_local $0)
            )
          )
          (call $zeroInit
            (i32.const 0)
          )
          (br $while-in$2)
        )
      )
    )
  )
  (func $ifChainEmpty (param $0 i32) (result i32)
    (if
      (i32.eq
        (get_local $0)
        (i32.const 4)
      )
      (return
        (i32.const 0)
      )
    )
    (i32.const 0)
  )
  (func $heap8NoShift (param $0 i32) (result i32)
    (i32.load8_s
      (get_local $0)
    )
  )
  (func $conditionalTypeFun
    (drop
      (if
        (i32.const 1)
        (i32.trunc_s/f64
          (call_import $abort
            (f64.convert_s/i32
              (i32.const 5)
            )
          )
        )
        (i32.const 2)
      )
    )
    (drop
      (if
        (i32.const 3)
        (call_import $abort
          (f64.convert_s/i32
            (i32.const 7)
          )
        )
        (f64.const 4.5)
      )
    )
  )
)
