(module
 (type $none_=>_i32_i64 (func (result i32 i64)))
 (type $none_=>_none (func))
 (type $none_=>_f32_i64_i32 (func (result f32 i64 i32)))
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_i32_i64_f32 (func (result i32 i64 f32)))
 (type $none_=>_i64 (func (result i64)))
 (type $none_=>_f32 (func (result f32)))
 (import "env" "pair" (func $pair (result i32 i64)))
 (func $triple (; 1 ;) (result i32 i64 f32)
  (tuple.make
   (i32.const 42)
   (i64.const 7)
   (f32.const 13)
  )
 )
 (func $get-first (; 2 ;) (result i32)
  (tuple.extract 0
   (call $triple)
  )
 )
 (func $get-second (; 3 ;) (result i64)
  (tuple.extract 1
   (call $triple)
  )
 )
 (func $get-third (; 4 ;) (result f32)
  (tuple.extract 2
   (call $triple)
  )
 )
 (func $reverse (; 5 ;) (result f32 i64 i32)
  (local $x (i32 i64 f32))
  (local.set $x
   (call $triple)
  )
  (tuple.make
   (tuple.extract 2
    (local.get $x)
   )
   (tuple.extract 1
    (local.get $x)
   )
   (tuple.extract 0
    (local.get $x)
   )
  )
 )
 (func $drop-call (; 6 ;)
  (drop
   (call $pair)
  )
 )
 (func $drop-tuple-make (; 7 ;)
  (drop
   (tuple.make
    (i32.const 42)
    (i64.const 42)
   )
  )
 )
 (func $drop-block (; 8 ;)
  (drop
   (block $block (result i32 i64)
    (tuple.make
     (i32.const 42)
     (i64.const 42)
    )
   )
  )
 )
 (func $mv-return (; 9 ;) (result i32 i64)
  (return
   (tuple.make
    (i32.const 42)
    (i64.const 42)
   )
  )
 )
 (func $mv-return-in-block (; 10 ;) (result i32 i64)
  (block $block (result i32 i64)
   (return
    (tuple.make
     (i32.const 42)
     (i64.const 42)
    )
   )
  )
 )
 (func $mv-block-break (; 11 ;) (result i32 i64)
  (block $l (result i32 i64)
   (br $l
    (tuple.make
     (i32.const 42)
     (i64.const 42)
    )
   )
  )
 )
 (func $mv-block-br-if (; 12 ;) (result i32 i64)
  (block $l (result i32 i64)
   (br_if $l
    (tuple.make
     (i32.const 42)
     (i64.const 42)
    )
    (i32.const 1)
   )
  )
 )
 (func $mv-if (; 13 ;) (result i32 i64)
  (if (result i32 i64)
   (i32.const 1)
   (tuple.make
    (i32.const 42)
    (i64.const 42)
   )
   (tuple.make
    (i32.const 42)
    (i64.const 42)
   )
  )
 )
 (func $mv-loop (; 14 ;) (result i32 i64)
  (loop $loop-in (result i32 i64)
   (tuple.make
    (i32.const 42)
    (i64.const 42)
   )
  )
 )
 (func $mv-switch (; 15 ;) (result i32 i64)
  (block $a (result i32 i64)
   (block $b (result i32 i64)
    (br_table $a $b
     (tuple.make
      (i32.const 42)
      (i64.const 42)
     )
     (i32.const 0)
    )
   )
  )
 )
)
