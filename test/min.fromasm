(module
 (import "env" "memory" (memory $memory 256 256))
 (data (get_global $memoryBase) "min.asm.js")
 (import "env" "memoryBase" (global $memoryBase i32))
 (global $tempRet0 (mut i32) (i32.const 0))
 (export "floats" (func $legalstub$floats))
 (export "neg" (func $legalstub$neg))
 (export "bitcasts" (func $legalstub$bitcasts))
 (export "ctzzzz" (func $ctzzzz))
 (export "getTempRet0" (func $getTempRet0))
 (export "setTempRet0" (func $setTempRet0))
 (func $ctzzzz (; 0 ;) (; has Stack IR ;) (result i32)
  (i32.const 2)
 )
 (func $getTempRet0 (; 1 ;) (; has Stack IR ;) (result i32)
  (get_global $tempRet0)
 )
 (func $setTempRet0 (; 2 ;) (; has Stack IR ;) (param $0 i32)
  (set_global $tempRet0
   (get_local $0)
  )
 )
 (func $legalstub$floats (; 3 ;) (; has Stack IR ;) (param $0 f64) (result f64)
  (f64.promote/f32
   (f32.add
    (f32.const 0)
    (f32.demote/f64
     (get_local $0)
    )
   )
  )
 )
 (func $legalstub$neg (; 4 ;) (; has Stack IR ;) (param $0 i32) (param $1 i32) (result f64)
  (i32.store
   (get_local $0)
   (get_local $1)
  )
  (f64.promote/f32
   (f32.neg
    (f32.load
     (get_local $0)
    )
   )
  )
 )
 (func $legalstub$bitcasts (; 5 ;) (; has Stack IR ;) (param $0 i32) (param $1 f64)
  (nop)
 )
)
