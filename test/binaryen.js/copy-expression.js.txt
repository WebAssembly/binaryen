// beginning a Binaryen API trace
#include <math.h>
#include <map>
#include "binaryen-c.h"
int main() {
  std::map<size_t, BinaryenType> types;
  std::map<size_t, BinaryenExpressionRef> expressions;
  std::map<size_t, BinaryenFunctionRef> functions;
  std::map<size_t, BinaryenGlobalRef> globals;
  std::map<size_t, BinaryenEventRef> events;
  std::map<size_t, BinaryenExportRef> exports;
  std::map<size_t, RelooperBlockRef> relooperBlocks;
  std::map<size_t, ExpressionRunnerRef> expressionRunners;
  BinaryenModuleRef the_module = NULL;
  RelooperRef the_relooper = NULL;
  the_module = BinaryenModuleCreate();
  expressions[size_t(NULL)] = BinaryenExpressionRef(NULL);
  expressions[1] = BinaryenLocalGet(the_module, 0, BinaryenTypeInt32());
  expressions[2] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[3] = BinaryenConst(the_module, BinaryenLiteralInt32(2));
  expressions[4] = BinaryenIf(the_module, expressions[1], expressions[2], expressions[3]);
  {
    BinaryenExpressionRef children[] = { expressions[4] };
    expressions[5] = BinaryenBlock(the_module, NULL, children, 1, BinaryenTypeInt32());
  }
  expressions[6] = BinaryenExpressionCopy(expressions[5], theModule);
  BinaryenBlockGetChild(expressions[5], 0);
  BinaryenBlockGetChild(expressions[6], 0);
  BinaryenIfGetCondition(expressions[4]);
  BinaryenIfGetCondition(expressions[0]); // this is bad
  BinaryenIfGetIfTrue(expressions[4]);
  BinaryenIfGetIfTrue(expressions[0]); // this is bad
  BinaryenIfGetIfFalse(expressions[4]);
  BinaryenIfGetIfFalse(expressions[0]); // this is bad
  return 0;
}
// ending a Binaryen API trace
