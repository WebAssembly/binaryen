// beginning a Binaryen API trace
#include <math.h>
#include <map>
#include "binaryen-c.h"
int main() {
  std::map<size_t, BinaryenExpressionRef> expressions;
  std::map<size_t, BinaryenFunctionRef> functions;
  std::map<size_t, BinaryenGlobalRef> globals;
  std::map<size_t, BinaryenEventRef> events;
  std::map<size_t, BinaryenExportRef> exports;
  std::map<size_t, RelooperBlockRef> relooperBlocks;
  BinaryenModuleRef the_module = NULL;
  RelooperRef the_relooper = NULL;
  ExpressionRunnerRef the_runner = NULL;
  the_module = BinaryenModuleCreate();
  expressions[size_t(NULL)] = BinaryenExpressionRef(NULL);
  expressions[1] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  globals[0] = BinaryenAddGlobal(the_module, "aGlobal", 2, 1, expressions[1]);
  the_runner = ExpressionRunnerCreate(the_module, 0, 50);
  expressions[2] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[3] = BinaryenConst(the_module, BinaryenLiteralInt32(2));
  expressions[4] = BinaryenBinary(the_module, 0, expressions[2], expressions[3]);
  expressions[5] = ExpressionRunnerRunAndDispose(the_runner, expressions[4]);
  BinaryenExpressionGetId(expressions[5]);
  BinaryenExpressionGetType(expressions[5]);
  BinaryenConstGetValueI32(expressions[5]);
  the_runner = ExpressionRunnerCreate(the_module, 0, 50);
  expressions[6] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[7] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  expressions[8] = BinaryenConst(the_module, BinaryenLiteralInt32(0));
  expressions[9] = BinaryenConst(the_module, BinaryenLiteralInt32(3));
  expressions[10] = BinaryenIf(the_module, expressions[7], expressions[8], expressions[9]);
  expressions[11] = BinaryenBinary(the_module, 0, expressions[6], expressions[10]);
  expressions[12] = ExpressionRunnerRunAndDispose(the_runner, expressions[11]);
  BinaryenExpressionGetId(expressions[12]);
  BinaryenExpressionGetType(expressions[12]);
  BinaryenConstGetValueI32(expressions[12]);
  the_runner = ExpressionRunnerCreate(the_module, 0, 50);
  expressions[13] = BinaryenLocalGet(the_module, 0, 2);
  expressions[14] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[15] = BinaryenBinary(the_module, 0, expressions[13], expressions[14]);
  ExpressionRunnerRunAndDispose(the_runner, expressions[15]);
  the_runner = ExpressionRunnerCreate(the_module, 0, 50);
  expressions[16] = BinaryenUnreachable(the_module);
  ExpressionRunnerRunAndDispose(the_runner, expressions[16]);
  the_runner = ExpressionRunnerCreate(the_module, 0, 50);
  expressions[17] = BinaryenConst(the_module, BinaryenLiteralInt32(4));
  expressions[18] = BinaryenLocalTee(the_module, 0, expressions[17], 2);
  expressions[19] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[20] = BinaryenBinary(the_module, 0, expressions[18], expressions[19]);
  expressions[21] = ExpressionRunnerRunAndDispose(the_runner, expressions[20]);
  BinaryenExpressionGetId(expressions[21]);
  BinaryenExpressionGetType(expressions[21]);
  BinaryenConstGetValueI32(expressions[21]);
  the_runner = ExpressionRunnerCreate(the_module, 1, 50);
  expressions[22] = BinaryenConst(the_module, BinaryenLiteralInt32(4));
  expressions[23] = BinaryenLocalTee(the_module, 0, expressions[22], 2);
  expressions[24] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[25] = BinaryenBinary(the_module, 0, expressions[23], expressions[24]);
  ExpressionRunnerRunAndDispose(the_runner, expressions[25]);
  the_runner = ExpressionRunnerCreate(the_module, 0, 50);
  expressions[26] = BinaryenConst(the_module, BinaryenLiteralInt32(2));
  expressions[27] = BinaryenLocalSet(the_module, 0, expressions[26]);
  expressions[28] = BinaryenLocalGet(the_module, 0, 2);
  {
    BinaryenExpressionRef children[] = { expressions[27], expressions[28] };
    expressions[29] = BinaryenBlock(the_module, NULL, children, 2, 2);
  }
  expressions[30] = BinaryenConst(the_module, BinaryenLiteralInt32(4));
  expressions[31] = BinaryenGlobalSet(the_module, "aGlobal", expressions[30]);
  expressions[32] = BinaryenGlobalGet(the_module, "aGlobal", 2);
  {
    BinaryenExpressionRef children[] = { expressions[31], expressions[32] };
    expressions[33] = BinaryenBlock(the_module, NULL, children, 2, 2);
  }
  expressions[34] = BinaryenBinary(the_module, 0, expressions[29], expressions[33]);
  expressions[35] = ExpressionRunnerRunAndDispose(the_runner, expressions[34]);
  BinaryenExpressionGetId(expressions[35]);
  BinaryenExpressionGetType(expressions[35]);
  BinaryenConstGetValueI32(expressions[35]);
  the_runner = ExpressionRunnerCreate(the_module, 1, 50);
  expressions[36] = BinaryenConst(the_module, BinaryenLiteralInt32(3));
  ExpressionRunnerSetLocalValue(the_runner, 0, expressions[36]);
  expressions[37] = BinaryenConst(the_module, BinaryenLiteralInt32(4));
  ExpressionRunnerSetGlobalValue(the_runner, "aGlobal", expressions[37]);
  expressions[38] = BinaryenLocalGet(the_module, 0, 2);
  expressions[39] = BinaryenGlobalGet(the_module, "aGlobal", 2);
  expressions[40] = BinaryenBinary(the_module, 0, expressions[38], expressions[39]);
  expressions[41] = ExpressionRunnerRunAndDispose(the_runner, expressions[40]);
  BinaryenExpressionGetId(expressions[41]);
  BinaryenExpressionGetType(expressions[41]);
  BinaryenConstGetValueI32(expressions[41]);
  the_runner = ExpressionRunnerCreate(the_module, 0, 50);
  {
    BinaryenType t0[] = {2, 2};
    BinaryenTypeCreate(t0, 2); // 11
  }
  expressions[42] = BinaryenLocalGet(the_module, 0, 2);
  expressions[43] = BinaryenLocalGet(the_module, 1, 2);
  expressions[44] = BinaryenBinary(the_module, 0, expressions[42], expressions[43]);
  {
    BinaryenExpressionRef children[] = { expressions[44] };
    expressions[45] = BinaryenBlock(the_module, NULL, children, 1, 2);
  }
  {
    BinaryenType varTypes[] = { 0 };
    functions[0] = BinaryenAddFunction(the_module, "add", 11, 2, varTypes, 0, expressions[45]);
  }
  expressions[46] = BinaryenConst(the_module, BinaryenLiteralInt32(1));
  expressions[47] = BinaryenConst(the_module, BinaryenLiteralInt32(3));
  expressions[48] = BinaryenConst(the_module, BinaryenLiteralInt32(4));
  {
    BinaryenExpressionRef operands[] = { expressions[47], expressions[48] };
    expressions[49] = BinaryenCall(the_module, "add", operands, 2, 2);
  }
  expressions[50] = BinaryenBinary(the_module, 0, expressions[46], expressions[49]);
  expressions[51] = ExpressionRunnerRunAndDispose(the_runner, expressions[50]);
  BinaryenExpressionGetId(expressions[51]);
  BinaryenExpressionGetType(expressions[51]);
  BinaryenConstGetValueI32(expressions[51]);
  return 0;
}
// ending a Binaryen API trace
