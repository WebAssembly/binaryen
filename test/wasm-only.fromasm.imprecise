(module
 (type $FUNCSIG$vi (func (param i32)))
 (type $legaltype$illegalImport (func (param f64 i32 i32 i32)))
 (type $FUNCSIG$i (func (result i32)))
 (type $legaltype$_fabsf (func (param f64) (result f64)))
 (import "env" "memory" (memory $memory 256 256))
 (import "env" "table" (table $table 3 3 funcref))
 (elem (global.get $__table_base) $legalfunc$illegalImport $legalfunc$_fabsf $legalfunc$do_i64)
 (import "env" "__table_base" (global $__table_base i32))
 (import "env" "setTempRet0" (func $setTempRet0 (param i32)))
 (import "env" "illegalImport" (func $legalimport$illegalImport (param f64 i32 i32 i32)))
 (import "env" "getTempRet0" (func $getTempRet0 (result i32)))
 (import "env" "illegalImportResult" (func $legalimport$illegalImportResult (result i32)))
 (import "env" "_fabsf" (func $legalimport$_fabsf (param f64) (result f64)))
 (import "env" "do_i64" (func $legalimport$do_i64 (result i32)))
 (export "test64" (func $test64))
 (export "illegalParam" (func $legalstub$illegalParam))
 (export "illegalResult" (func $legalstub$illegalResult))
 (export "keepAlive" (func $keepAlive))
 (func $stores (; 6 ;) (; has Stack IR ;)
  (local $0 i32)
  (local $1 f64)
  (local $2 f32)
  (i32.store8
   (i32.const 100)
   (local.get $0)
  )
  (i32.store8
   (i32.const 101)
   (local.get $0)
  )
  (i32.store16
   (i32.const 102)
   (local.get $0)
  )
  (i32.store16
   (i32.const 103)
   (local.get $0)
  )
  (i32.store16 align=1
   (i32.const 104)
   (local.get $0)
  )
  (i32.store16
   (i32.const 105)
   (local.get $0)
  )
  (i32.store
   (i32.const 106)
   (local.get $0)
  )
  (i32.store
   (i32.const 107)
   (local.get $0)
  )
  (i32.store align=1
   (i32.const 108)
   (local.get $0)
  )
  (i32.store align=2
   (i32.const 109)
   (local.get $0)
  )
  (i32.store
   (i32.const 110)
   (local.get $0)
  )
  (f32.store
   (i32.const 111)
   (local.get $2)
  )
  (f32.store
   (i32.const 112)
   (local.get $2)
  )
  (f32.store align=1
   (i32.const 113)
   (local.get $2)
  )
  (f32.store align=2
   (i32.const 114)
   (local.get $2)
  )
  (f32.store
   (i32.const 115)
   (local.get $2)
  )
  (f64.store
   (i32.const 116)
   (local.get $1)
  )
  (f64.store
   (i32.const 117)
   (local.get $1)
  )
  (f64.store align=1
   (i32.const 118)
   (local.get $1)
  )
  (f64.store align=2
   (i32.const 119)
   (local.get $1)
  )
  (f64.store align=4
   (i32.const 120)
   (local.get $1)
  )
  (f64.store
   (i32.const 121)
   (local.get $1)
  )
 )
 (func $test64 (; 7 ;) (; has Stack IR ;)
  (local $0 i64)
  (local $1 i32)
  (i64.store
   (i32.const 120)
   (local.tee $0
    (i64.load
     (i32.const 120)
    )
   )
  )
  (i64.store
   (i32.const 120)
   (local.get $0)
  )
  (i64.store align=2
   (i32.const 120)
   (local.get $0)
  )
  (i64.store align=4
   (i32.const 120)
   (local.get $0)
  )
  (i64.store
   (i32.const 120)
   (local.get $0)
  )
  (local.set $1
   (i32.wrap_i64
    (local.get $0)
   )
  )
 )
 (func $imports (; 8 ;) (; has Stack IR ;) (result i64)
  (call $legalfunc$illegalImport
   (f64.const -3.13159)
   (i64.const 94489280523)
   (i32.const -33)
  )
  (i64.or
   (i64.extend_i32_u
    (call $legalimport$illegalImportResult)
   )
   (i64.shl
    (i64.extend_i32_u
     (call $getTempRet0)
    )
    (i64.const 32)
   )
  )
 )
 (func $arg (; 9 ;) (; has Stack IR ;) (param $0 i64)
  (i64.store
   (i32.const 100)
   (local.get $0)
  )
  (call $arg
   (local.get $0)
  )
 )
 (func $illegalParam (; 10 ;) (; has Stack IR ;) (param $0 i32) (param $1 i64) (param $2 f64)
  (i32.store
   (i32.const 50)
   (local.get $0)
  )
  (i64.store
   (i32.const 100)
   (local.get $1)
  )
  (f64.store
   (i32.const 200)
   (local.get $2)
  )
  (call $illegalParam
   (i32.const 0)
   (local.get $1)
   (f64.const 12.34)
  )
 )
 (func $call1 (; 11 ;) (; has Stack IR ;) (param $0 i64) (result i64)
  (call $call1
   (local.get $0)
  )
 )
 (func $call2 (; 12 ;) (; has Stack IR ;) (param $0 i64) (result i64)
  (drop
   (call $call2
    (call $call2
     (local.get $0)
    )
   )
  )
  (i64.const 245127260211081)
 )
 (func $ifValue32 (; 13 ;) (; has Stack IR ;) (param $0 i32) (param $1 i32) (result i32)
  (call $ifValue32
   (local.get $0)
   (local.get $1)
  )
 )
 (func $unreachable_leftovers (; 14 ;) (; has Stack IR ;)
  (i32.store
   (i32.const 0)
   (i32.const -2)
  )
 )
 (func $_memchr (; 15 ;) (; has Stack IR ;) (result i32)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (block $label$break$L8
   (block $__rjti$2
    (br_if $__rjti$2
     (local.get $0)
    )
    (local.set $0
     (i32.const 0)
    )
    (br $label$break$L8)
   )
   (local.set $0
    (local.get $2)
   )
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (block $__rjto$0
      (block $__rjti$0
       (br_if $__rjti$0
        (i32.le_u
         (local.get $0)
         (i32.const 3)
        )
       )
       (loop $while-in3
        (if
         (i32.eqz
          (i32.and
           (i32.xor
            (i32.and
             (local.tee $2
              (i32.load
               (local.get $1)
              )
             )
             (i32.const -2139062144)
            )
            (i32.const -2139062144)
           )
           (i32.add
            (local.get $2)
            (i32.const -16843009)
           )
          )
         )
         (block
          (local.set $1
           (i32.add
            (local.get $1)
            (i32.const 4)
           )
          )
          (br_if $while-in3
           (i32.gt_u
            (local.tee $0
             (i32.add
              (local.get $0)
              (i32.const -4)
             )
            )
            (i32.const 3)
           )
          )
          (br $__rjti$0)
         )
        )
       )
       (br $__rjto$0)
      )
      (if
       (i32.eqz
        (local.get $0)
       )
       (block
        (local.set $0
         (i32.const 0)
        )
        (br $label$break$L8)
       )
      )
     )
     (local.set $0
      (loop $while-in5 (result i32)
       (br_if $label$break$L8
        (i32.eqz
         (i32.load8_u
          (local.get $1)
         )
        )
       )
       (local.set $1
        (i32.add
         (local.get $1)
         (i32.const 1)
        )
       )
       (br_if $while-in5
        (local.tee $0
         (i32.add
          (local.get $0)
          (i32.const -1)
         )
        )
       )
       (i32.const 0)
      )
     )
    )
   )
  )
  (select
   (local.get $1)
   (i32.const 0)
   (local.get $0)
  )
 )
 (func $keepAlive (; 16 ;) (; has Stack IR ;)
  (call $stores)
  (call $stores)
  (drop
   (call $imports)
  )
  (drop
   (call $imports)
  )
  (call $arg
   (i64.const 0)
  )
  (call $arg
   (i64.const 0)
  )
  (drop
   (call $call1
    (i64.const 0)
   )
  )
  (drop
   (call $call1
    (i64.const 0)
   )
  )
  (drop
   (call $call2
    (i64.const 0)
   )
  )
  (drop
   (call $call2
    (i64.const 0)
   )
  )
  (drop
   (call $call2
    (i64.const 0)
   )
  )
  (drop
   (call $call2
    (i64.const 0)
   )
  )
  (drop
   (call $ifValue32
    (i32.const 0)
    (i32.const 0)
   )
  )
  (drop
   (call $ifValue32
    (i32.const 0)
    (i32.const 0)
   )
  )
  (call $unreachable_leftovers)
  (call $unreachable_leftovers)
  (drop
   (call $_memchr)
  )
 )
 (func $legalstub$illegalParam (; 17 ;) (; has Stack IR ;) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 f64)
  (call $illegalParam
   (local.get $0)
   (i64.or
    (i64.extend_i32_u
     (local.get $1)
    )
    (i64.shl
     (i64.extend_i32_u
      (local.get $2)
     )
     (i64.const 32)
    )
   )
   (local.get $3)
  )
 )
 (func $legalstub$illegalResult (; 18 ;) (; has Stack IR ;) (result i32)
  (call $setTempRet0
   (i32.const 2)
  )
  (i32.const 1)
 )
 (func $legalfunc$illegalImport (; 19 ;) (; has Stack IR ;) (param $0 f64) (param $1 i64) (param $2 i32)
  (call $legalimport$illegalImport
   (local.get $0)
   (i32.wrap_i64
    (local.get $1)
   )
   (i32.wrap_i64
    (i64.shr_u
     (local.get $1)
     (i64.const 32)
    )
   )
   (local.get $2)
  )
 )
 (func $legalfunc$_fabsf (; 20 ;) (; has Stack IR ;) (param $0 f32) (result f32)
  (f32.demote_f64
   (call $legalimport$_fabsf
    (f64.promote_f32
     (local.get $0)
    )
   )
  )
 )
 (func $legalfunc$do_i64 (; 21 ;) (; has Stack IR ;) (result i64)
  (i64.or
   (i64.extend_i32_u
    (call $legalimport$do_i64)
   )
   (i64.shl
    (i64.extend_i32_u
     (call $getTempRet0)
    )
    (i64.const 32)
   )
  )
 )
)
