(module
 (type $none_=>_none (func))
 (type $none_=>_i32 (func (result i32)))
 (memory $0 1)
 (func $a (; 0 ;)
  (local $y i32)
  (local.set $y
   (i32.load8_u
    (i32.const 1024)
   )
  )
  (drop
   (i32.and
    (local.get $y)
    (i32.const 255)
   )
  )
 )
 (func $b (; 1 ;)
  (local $y i32)
  (local.set $y
   (i32.load16_u
    (i32.const 1024)
   )
  )
  (drop
   (i32.and
    (local.get $y)
    (i32.const 65535)
   )
  )
 )
 (func $c (; 2 ;)
  (local $y i32)
  (local.set $y
   (i32.load8_u
    (i32.const 1024)
   )
  )
  (drop
   (i32.and
    (local.get $y)
    (i32.const 255)
   )
  )
 )
 (func $d (; 3 ;)
  (local $y i32)
  (local.set $y
   (i32.load16_u
    (i32.const 1024)
   )
  )
  (drop
   (i32.and
    (local.get $y)
    (i32.const 65535)
   )
  )
 )
 (func $one-of-each (; 4 ;)
  (local $y i32)
  (local.set $y
   (i32.load8_s
    (i32.const 1024)
   )
  )
  (drop
   (i32.and
    (local.get $y)
    (i32.const 255)
   )
  )
  (drop
   (i32.shr_s
    (i32.shl
     (local.get $y)
     (i32.const 24)
    )
    (i32.const 24)
   )
  )
 )
 (func $more-of-one (; 5 ;)
  (local $y i32)
  (local.set $y
   (i32.load8_s
    (i32.const 1024)
   )
  )
  (drop
   (i32.and
    (local.get $y)
    (i32.const 255)
   )
  )
  (drop
   (i32.and
    (local.get $y)
    (i32.const 255)
   )
  )
  (drop
   (i32.shr_s
    (i32.shl
     (local.get $y)
     (i32.const 24)
    )
    (i32.const 24)
   )
  )
 )
 (func $many-more-of-one (; 6 ;)
  (local $y i32)
  (local.set $y
   (i32.load8_u
    (i32.const 1024)
   )
  )
  (drop
   (i32.and
    (local.get $y)
    (i32.const 255)
   )
  )
  (drop
   (i32.and
    (local.get $y)
    (i32.const 255)
   )
  )
  (drop
   (i32.and
    (local.get $y)
    (i32.const 255)
   )
  )
  (drop
   (i32.shr_s
    (i32.shl
     (local.get $y)
     (i32.const 24)
    )
    (i32.const 24)
   )
  )
 )
 (func $a-sign (; 7 ;)
  (local $y i32)
  (local.set $y
   (i32.load8_s
    (i32.const 1024)
   )
  )
  (drop
   (i32.shr_s
    (i32.shl
     (local.get $y)
     (i32.const 24)
    )
    (i32.const 24)
   )
  )
 )
 (func $multivar (; 8 ;)
  (local $x i32)
  (local $y i32)
  (local.set $x
   (i32.load8_u
    (i32.const 1024)
   )
  )
  (drop
   (i32.and
    (local.get $x)
    (i32.const 255)
   )
  )
  (local.set $y
   (i32.load8_s
    (i32.const 1024)
   )
  )
  (drop
   (i32.shr_s
    (i32.shl
     (local.get $y)
     (i32.const 24)
    )
    (i32.const 24)
   )
  )
 )
 (func $corners (; 9 ;)
  (local $y i32)
  (drop
   (i32.load8_s
    (i32.const 1024)
   )
  )
  (drop
   (i32.load8_u
    (i32.const 1024)
   )
  )
  (local.set $y
   (i32.const 1024)
  )
 )
 (func $wrong-size (; 10 ;)
  (local $y i32)
  (local.set $y
   (i32.load8_s
    (i32.const 1024)
   )
  )
  (drop
   (i32.and
    (local.get $y)
    (i32.const 65535)
   )
  )
 )
 (func $wrong-size_s (; 11 ;)
  (local $y i32)
  (local.set $y
   (i32.load8_u
    (i32.const 1024)
   )
  )
  (drop
   (i32.shr_s
    (i32.shl
     (local.get $y)
     (i32.const 16)
    )
    (i32.const 16)
   )
  )
 )
 (func $non-sign-or-unsigned-use (; 12 ;)
  (local $y i32)
  (local.set $y
   (i32.load8_s
    (i32.const 1024)
   )
  )
  (drop
   (i32.and
    (local.get $y)
    (i32.const 255)
   )
  )
  (drop
   (local.get $y)
  )
 )
 (func $toplevel-load (; 13 ;) (result i32)
  (i32.load8_s
   (i32.const 1024)
  )
 )
 (func $tees (; 14 ;)
  (local $y i32)
  (drop
   (local.tee $y
    (i32.load8_s
     (i32.const 1024)
    )
   )
  )
  (drop
   (i32.and
    (local.get $y)
    (i32.const 255)
   )
  )
 )
)
