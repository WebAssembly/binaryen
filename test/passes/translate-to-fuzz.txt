(module
 (type $FUNCSIG$i (func (result i32)))
 (type $FUNCSIG$v (func))
 (type $FUNCSIG$ffff (func (param f32 f32 f32) (result f32)))
 (type $FUNCSIG$f (func (result f32)))
 (type $FUNCSIG$jif (func (param i32 f32) (result i64)))
 (global $global$0 (mut f32) (f32.const 536870912))
 (global $global$1 (mut f32) (f32.const 2147483648))
 (global $global$2 (mut f64) (f64.const -1048576))
 (global $global$3 (mut f64) (f64.const 23643))
 (global $hangLimit (mut i32) (i32.const 10))
 (table 2 2 anyfunc)
 (elem (i32.const 0) $func_6 $func_6)
 (memory $0 (shared 1 1))
 (data (i32.const 0) "n\00\05E\00\00\00\00")
 (export "func_0" (func $func_0))
 (export "func_1" (func $func_1))
 (export "func_1_invoker" (func $func_1_invoker))
 (export "func_3_invoker" (func $func_3_invoker))
 (export "func_5" (func $func_5))
 (export "func_6" (func $func_6))
 (export "func_6_invoker" (func $func_6_invoker))
 (export "func_8" (func $func_8))
 (export "func_8_invoker" (func $func_8_invoker))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $func_0 (; 0 ;) (type $FUNCSIG$i) (result i32)
  (local $0 i32)
  (local $1 f64)
  (local $2 i64)
  (local $3 i64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (get_local $0)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result i32)
   (set_local $1
    (if (result f64)
     (i32.const -2147483648)
     (call $deNan64
      (f64.add
       (call $deNan64
        (f64.promote/f32
         (f32.const 4.212240583647452e-17)
        )
       )
       (block $label$14 (result f64)
        (block $label$15
         (drop
          (if (result f64)
           (i32.eqz
            (i32.const -32768)
           )
           (f64.load offset=22 align=4
            (i32.and
             (i32.popcnt
              (i32.const -65536)
             )
             (i32.const 15)
            )
           )
           (block $label$16 (result f64)
            (set_global $global$3
             (get_global $global$3)
            )
            (br $label$15)
           )
          )
         )
         (nop)
        )
        (return
         (i32.const 28)
        )
       )
      )
     )
     (f64.const 10)
    )
   )
   (return
    (i32.const 2151)
   )
  )
 )
 (func $func_1 (; 1 ;) (type $FUNCSIG$v)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return)
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (nop)
   (loop $label$1
    (block
     (if
      (i32.eqz
       (get_global $hangLimit)
      )
      (return)
     )
     (set_global $hangLimit
      (i32.sub
       (get_global $hangLimit)
       (i32.const 1)
      )
     )
    )
    (block
     (block $label$2
      (nop)
      (nop)
     )
     (br_if $label$1
      (i32.eqz
       (i32.const 1079071296)
      )
     )
     (nop)
    )
   )
  )
 )
 (func $func_1_invoker (; 2 ;) (type $FUNCSIG$v)
  (call $func_1)
  (call $func_1)
  (call $func_1)
  (call $func_1)
  (call $func_1)
  (call $func_1)
 )
 (func $func_3 (; 3 ;) (result i32)
  (local $0 i32)
  (local $1 f64)
  (local $2 f64)
  (local $3 i32)
  (local $4 f32)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (i32.const -134217728)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (unreachable)
 )
 (func $func_3_invoker (; 4 ;) (type $FUNCSIG$v)
  (drop
   (call $func_3)
  )
  (drop
   (call $func_3)
  )
  (drop
   (call $func_3)
  )
  (drop
   (call $func_3)
  )
 )
 (func $func_5 (; 5 ;) (type $FUNCSIG$ffff) (param $0 f32) (param $1 f32) (param $2 f32) (result f32)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (f32.const -1125899906842624)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (nop)
   (return
    (get_local $2)
   )
  )
 )
 (func $func_6 (; 6 ;) (type $FUNCSIG$f) (result f32)
  (local $0 f64)
  (local $1 f64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (f32.const 8589934592)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (call $deNan32
   (f32.neg
    (loop $label$0 (result f32)
     (block
      (if
       (i32.eqz
        (get_global $hangLimit)
       )
       (return
        (f32.const 3402823466385288598117041e14)
       )
      )
      (set_global $hangLimit
       (i32.sub
        (get_global $hangLimit)
        (i32.const 1)
       )
      )
     )
     (f32.const 1)
    )
   )
  )
 )
 (func $func_6_invoker (; 7 ;) (type $FUNCSIG$v)
  (drop
   (call $func_6)
  )
 )
 (func $func_8 (; 8 ;) (type $FUNCSIG$jif) (param $0 i32) (param $1 f32) (result i64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (i64.const 255)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result i64)
   (nop)
   (select
    (i64.const -87)
    (block $label$1 (result i64)
     (f32.store offset=2 align=2
      (i32.and
       (i32.const -1073741824)
       (i32.const 15)
      )
      (block $label$3 (result f32)
       (get_local $1)
      )
     )
     (i64.const 106)
    )
    (call $func_3)
   )
  )
 )
 (func $func_8_invoker (; 9 ;) (type $FUNCSIG$v)
  (drop
   (call $func_8
    (i32.const -123)
    (f32.const 48)
   )
  )
 )
 (func $hangLimitInitializer (; 10 ;)
  (set_global $hangLimit
   (i32.const 10)
  )
 )
 (func $deNan32 (; 11 ;) (param $0 f32) (result f32)
  (if (result f32)
   (f32.eq
    (get_local $0)
    (get_local $0)
   )
   (get_local $0)
   (f32.const 0)
  )
 )
 (func $deNan64 (; 12 ;) (param $0 f64) (result f64)
  (if (result f64)
   (f64.eq
    (get_local $0)
    (get_local $0)
   )
   (get_local $0)
   (f64.const 0)
  )
 )
)
