(module
 (global $hangLimit (mut i32) (i32.const 25))
 (memory $0 1 1)
 (export "func_0" (func $func_0))
 (export "func_1" (func $func_1))
 (export "func_2" (func $func_2))
 (export "func_3" (func $func_3))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $func_0 (param $0 i32) (result i32)
  (local $1 f32)
  (local $2 f64)
  (local $3 i64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (i32.const -9)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result i32)
   (return
    (i32.const 65421)
   )
  )
 )
 (func $func_1 (result i32)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (i32.const 694779182)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result i32)
   (nop)
   (nop)
   (block $label$1
    (drop
     (f64.const 241)
    )
   )
   (nop)
   (return
    (i32.const -1)
   )
  )
 )
 (func $func_2 (result f32)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (f32.const -28)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (f32.const 3458541813760)
 )
 (func $func_3 (param $0 f64) (param $1 f64) (result f32)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (f32.const -1)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result f32)
   (loop $label$1 (result f32)
    (block
     (if
      (i32.eqz
       (get_global $hangLimit)
      )
      (return
       (f32.const 3917)
      )
     )
     (set_global $hangLimit
      (i32.sub
       (get_global $hangLimit)
       (i32.const 1)
      )
     )
    )
    (block $label$2 (result f32)
     (loop $label$3 (result f32)
      (block
       (if
        (i32.eqz
         (get_global $hangLimit)
        )
        (return
         (f32.const 223)
        )
       )
       (set_global $hangLimit
        (i32.sub
         (get_global $hangLimit)
         (i32.const 1)
        )
       )
      )
      (block $label$4 (result f32)
       (if
        (block $label$5 (result i32)
         (set_local $1
          (call $deNaN64
           (f64.sub
            (f64.const -nan:0xfffffffffff8a)
            (block $label$7 (result f64)
             (f64.const 95)
            )
           )
          )
         )
         (if
          (i32.eqz
           (block $label$8 (result i32)
            (nop)
            (i64.store8 offset=4
             (i32.and
              (i32.const 24275825)
              (i32.const 255)
             )
             (i64.const 8370282071179154490)
            )
            (i32.store16 offset=4 align=1
             (i32.const 84)
             (i32.const 64)
            )
            (block $label$9 (result i32)
             (set_local $1
              (call $deNaN64
               (f64.convert_s/i64
                (i64.const 65487)
               )
              )
             )
             (block $label$10 (result i32)
              (i32.const 1634164514)
             )
            )
           )
          )
          (block $label$11
           (set_local $1
            (f64.const 89)
           )
          )
          (block $label$12
           (nop)
          )
         )
         (nop)
         (loop $label$13
          (block
           (if
            (i32.eqz
             (get_global $hangLimit)
            )
            (return
             (f32.const 9223372036854775808)
            )
           )
           (set_global $hangLimit
            (i32.sub
             (get_global $hangLimit)
             (i32.const 1)
            )
           )
          )
          (block $label$14
           (f32.store offset=3
            (i32.and
             (i32.const 1325485390)
             (i32.const 255)
            )
            (br_if $label$2
             (f32.const -nan:0x7fff8e)
             (i32.const 179)
            )
           )
           (if
            (i32.eqz
             (i32.const 1280077408)
            )
            (nop)
            (nop)
           )
           (f32.store offset=4 align=1
            (i32.and
             (i32.const -113)
             (i32.const 255)
            )
            (f32.const -nan:0x7fffe3)
           )
           (nop)
           (loop $label$15
            (block
             (if
              (i32.eqz
               (get_global $hangLimit)
              )
              (return
               (f32.const -47)
              )
             )
             (set_global $hangLimit
              (i32.sub
               (get_global $hangLimit)
               (i32.const 1)
              )
             )
            )
            (nop)
           )
           (if
            (i32.eqz
             (i32.const 65533)
            )
            (nop)
            (nop)
           )
          )
         )
         (loop $label$16 (result i32)
          (block
           (if
            (i32.eqz
             (get_global $hangLimit)
            )
            (return
             (f32.const 253)
            )
           )
           (set_global $hangLimit
            (i32.sub
             (get_global $hangLimit)
             (i32.const 1)
            )
           )
          )
          (call $func_1)
         )
        )
        (nop)
        (block $label$17
         (nop)
         (i32.store8 offset=22
          (i32.const 2037019510)
          (call $func_1)
         )
         (drop
          (f64.load offset=22 align=2
           (i32.and
            (i32.const 65445)
            (i32.const 255)
           )
          )
         )
         (nop)
        )
       )
       (f32.const 1)
      )
     )
    )
   )
  )
 )
 (func $hangLimitInitializer
  (set_global $hangLimit
   (i32.const 25)
  )
 )
 (func $deNaN32 (param $0 f32) (result f32)
  (if (result f32)
   (f32.eq
    (get_local $0)
    (get_local $0)
   )
   (get_local $0)
   (f32.const 0)
  )
 )
 (func $deNaN64 (param $0 f64) (result f64)
  (if (result f64)
   (f64.eq
    (get_local $0)
    (get_local $0)
   )
   (get_local $0)
   (f64.const 0)
  )
 )
)
