(module
 (type $FUNCSIG$vi (func (param i32)))
 (type $FUNCSIG$vj (func (param i64)))
 (type $FUNCSIG$vf (func (param f32)))
 (type $FUNCSIG$vd (func (param f64)))
 (type $FUNCSIG$d (func (result f64)))
 (type $FUNCSIG$if (func (param f32) (result i32)))
 (type $FUNCSIG$v (func))
 (import "fuzzing-support" "log-i32" (func $log-i32 (param i32)))
 (import "fuzzing-support" "log-i64" (func $log-i64 (param i64)))
 (import "fuzzing-support" "log-f32" (func $log-f32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $log-f64 (param f64)))
 (memory $0 (shared 1 1))
 (data (i32.const 0) "\\*C\e6\14\ae\e2\f9")
 (table $0 4 4 funcref)
 (elem (i32.const 0) $func_10 $func_10 $func_10 $func_10)
 (global $global$0 (mut f32) (f32.const 14893))
 (global $global$1 (mut f64) (f64.const 269311755))
 (global $hangLimit (mut i32) (i32.const 10))
 (export "func_5" (func $func_5))
 (export "func_6" (func $func_6))
 (export "func_12_invoker" (func $func_12_invoker))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $func_4 (; 4 ;) (result v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (v128.const i32x4 0x00000000 0x40982c00 0x00000000 0x40f00000)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (v128.const i32x4 0xffe00000 0x41efffff 0x00000000 0x42700000)
 )
 (func $func_5 (; 5 ;) (type $FUNCSIG$d) (result f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f64.const 137438953472)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (drop
   (block
    (block $label$0
     (loop $label$1
      (block
       (if
        (i32.eqz
         (global.get $hangLimit)
        )
        (return
         (f64.const 3402823466385288598117041e14)
        )
       )
       (global.set $hangLimit
        (i32.sub
         (global.get $hangLimit)
         (i32.const 1)
        )
       )
      )
      (block
       (nop)
       (br_if $label$1
        (i32.eqz
         (loop $label$2 (result i32)
          (block
           (if
            (i32.eqz
             (global.get $hangLimit)
            )
            (return
             (f64.const -nan:0xfffffffffffaf)
            )
           )
           (global.set $hangLimit
            (i32.sub
             (global.get $hangLimit)
             (i32.const 1)
            )
           )
          )
          (block (result i32)
           (nop)
           (br_if $label$2
            (i32.const 31579)
           )
           (if (result i32)
            (if
             (i32.const -67)
             (block $label$3
              (nop)
              (br $label$2)
             )
             (if
              (i32.const 387849744)
              (block $label$4
               (drop
                (if (result i32)
                 (i32.const -16777216)
                 (i32.const 170)
                 (i32.const -67108864)
                )
               )
               (br $label$1)
              )
              (block $label$5
               (block $label$6
                (call $log-i64
                 (i64.const 152243732)
                )
                (call $log-i64
                 (i64.const 8589934592)
                )
               )
               (br $label$1)
              )
             )
            )
            (block $label$7 (result i32)
             (call $log-i32
              (br_if $label$7
               (loop $label$8 (result i32)
                (block
                 (if
                  (i32.eqz
                   (global.get $hangLimit)
                  )
                  (return
                   (f64.const 536870912)
                  )
                 )
                 (global.set $hangLimit
                  (i32.sub
                   (global.get $hangLimit)
                   (i32.const 1)
                  )
                 )
                )
                (block (result i32)
                 (nop)
                 (br_if $label$8
                  (i32.const 1398757719)
                 )
                 (i32.const 79)
                )
               )
               (i32.eqz
                (i32.const 268435456)
               )
              )
             )
             (i32.const 2147483647)
            )
            (block $label$9
             (call $log-i64
              (i64.const 1029969750753150239)
             )
             (br $label$2)
            )
           )
          )
         )
        )
       )
       (call $log-i64
        (i64.const 425132800)
       )
      )
     )
     (f64.mul
      (loop $label$15
       (block
        (if
         (i32.eqz
          (global.get $hangLimit)
         )
         (return
          (f64.const 526)
         )
        )
        (global.set $hangLimit
         (i32.sub
          (global.get $hangLimit)
          (i32.const 1)
         )
        )
       )
       (block
        (block $label$16
         (nop)
         (nop)
        )
        (br_if $label$15
         (i32.eqz
          (i32.const 65522)
         )
        )
        (unreachable)
       )
      )
      (select
       (drop
        (unreachable)
       )
       (br_table $label$0 $label$0 $label$0 $label$0 $label$0 $label$0 $label$0 $label$0 $label$0 $label$0
        (if (result i32)
         (i32.eqz
          (block $label$17
           (call $log-f64
            (f64.const 3.5931235391775984e-289)
           )
           (return
            (f64.const -8192)
           )
          )
         )
         (i32.const 15152)
         (i32.const 137383170)
        )
       )
       (i32.const -8388608)
      )
     )
    )
    (i64.or
     (return
      (f64.const -524288)
     )
     (return
      (f64.const 1.1754943508222875e-38)
     )
    )
   )
  )
 )
 (func $func_6 (; 6 ;) (type $FUNCSIG$if) (param $0 f32) (result i32)
  (local $1 i32)
  (local $2 v128)
  (local $3 f32)
  (local $4 i64)
  (local $5 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i32.const 1)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (call $log-f64
    (f64.const 3.1214769835758936e-162)
   )
   (return
    (i32.const 1128810829)
   )
  )
 )
 (func $func_7 (; 7 ;)
  (local $0 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (nop)
 )
 (func $func_8 (; 8 ;) (param $0 f64) (result f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $0)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (nop)
   (return
    (f64.const -16777216)
   )
  )
 )
 (func $func_9 (; 9 ;) (param $0 i32) (param $1 f32) (param $2 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (loop $label$1
    (block
     (if
      (i32.eqz
       (global.get $hangLimit)
      )
      (return)
     )
     (global.set $hangLimit
      (i32.sub
       (global.get $hangLimit)
       (i32.const 1)
      )
     )
    )
    (block
     (block $label$9
      (nop)
      (br_if $label$9
       (i32.eqz
        (atomic.notify offset=3
         (i32.and
          (i32.const -32767)
          (i32.const 15)
         )
         (local.get $0)
        )
       )
      )
     )
     (br_if $label$1
      (i32.const 50529027)
     )
     (call $log-f64
      (loop $label$2
       (block
        (if
         (i32.eqz
          (global.get $hangLimit)
         )
         (return)
        )
        (global.set $hangLimit
         (i32.sub
          (global.get $hangLimit)
          (i32.const 1)
         )
        )
       )
       (block $label$3
        (call $log-i32
         (i32.const -255)
        )
        (br $label$0)
       )
      )
     )
    )
   )
   (nop)
  )
 )
 (func $func_10 (; 10 ;) (result f64)
  (local $0 v128)
  (local $1 f32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f64.const 105)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (f64.const -nan:0xfffffffffffa3)
 )
 (func $func_11 (; 11 ;) (result f32)
  (local $0 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f32.const 3853)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result f32)
   (nop)
   (f32.const -nan:0x7fffb5)
  )
 )
 (func $func_12 (; 12 ;) (param $0 i32) (result f32)
  (local $1 i64)
  (local $2 i32)
  (local $3 f32)
  (local $4 f32)
  (local $5 f32)
  (local $6 v128)
  (local $7 i32)
  (local $8 v128)
  (local $9 v128)
  (local $10 f32)
  (local $11 i64)
  (local $12 f32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f32.const 6.260212714739174e-33)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (local.get $4)
 )
 (func $func_12_invoker (; 13 ;) (type $FUNCSIG$v)
  (drop
   (call $func_12
    (i32.const 2048)
   )
  )
  (drop
   (call $func_12
    (i32.const -21)
   )
  )
  (drop
   (call $func_12
    (i32.const -2)
   )
  )
 )
 (func $func_14 (; 14 ;) (result f64)
  (local $0 i32)
  (local $1 i64)
  (local $2 i32)
  (local $3 f64)
  (local $4 i64)
  (local $5 i64)
  (local $6 i64)
  (local $7 i32)
  (local $8 i64)
  (local $9 i64)
  (local $10 f64)
  (local $11 v128)
  (local $12 i32)
  (local $13 f32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $10)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (i64.eqz
   (return
    (local.get $10)
   )
  )
 )
 (func $hangLimitInitializer (; 15 ;)
  (global.set $hangLimit
   (i32.const 10)
  )
 )
)
