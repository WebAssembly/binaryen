(module
 (type $FUNCSIG$i (func (result i32)))
 (type $FUNCSIG$ddfj (func (param f64 f32 i64) (result f64)))
 (type $FUNCSIG$j (func (result i64)))
 (type $FUNCSIG$v (func))
 (type $FUNCSIG$ji (func (param i32) (result i64)))
 (global $hangLimit (mut i32) (i32.const 100))
 (table 3 3 anyfunc)
 (elem (i32.const 0) $func_3 $func_5 $func_5)
 (memory $0 1 1)
 (export "func_0" (func $func_0))
 (export "func_2" (func $func_2))
 (export "func_5" (func $func_5))
 (export "func_6" (func $func_6))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $func_0 (type $FUNCSIG$i) (result i32)
  (local $0 f32)
  (local $1 i64)
  (local $2 f32)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (i32.const -4096)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (loop $label$0
   (block
    (if
     (i32.eqz
      (get_global $hangLimit)
     )
     (return
      (i32.const 53)
     )
    )
    (set_global $hangLimit
     (i32.sub
      (get_global $hangLimit)
      (i32.const 1)
     )
    )
   )
   (i64.trunc_u/f64
    (drop
     (drop
      (unreachable)
     )
    )
   )
  )
 )
 (func $func_1 (result f32)
  (local $0 i64)
  (local $1 f64)
  (local $2 i32)
  (local $3 i32)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (f32.const -1)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result f32)
   (br_if $label$0
    (br_if $label$0
     (f32.load offset=22 align=1
      (i32.and
       (block $label$3 (result i32)
        (tee_local $2
         (select
          (if (result i32)
           (i32.eqz
            (if (result i32)
             (i32.eqz
              (loop $label$6 (result i32)
               (block
                (if
                 (i32.eqz
                  (get_global $hangLimit)
                 )
                 (return
                  (f32.const 4294967296)
                 )
                )
                (set_global $hangLimit
                 (i32.sub
                  (get_global $hangLimit)
                  (i32.const 1)
                 )
                )
               )
               (i32.const 1073741824)
              )
             )
             (block $label$7 (result i32)
              (return
               (f32.const 1816)
              )
             )
             (block $label$8 (result i32)
              (if (result i32)
               (i32.eqz
                (i32.const -1073741824)
               )
               (i32.clz
                (block $label$9 (result i32)
                 (return
                  (f32.const 8)
                 )
                )
               )
               (i32.div_u
                (get_local $2)
                (get_local $3)
               )
              )
             )
            )
           )
           (block $label$10 (result i32)
            (loop $label$11 (result i32)
             (block
              (if
               (i32.eqz
                (get_global $hangLimit)
               )
               (return
                (f32.const -9223372036854775808)
               )
              )
              (set_global $hangLimit
               (i32.sub
                (get_global $hangLimit)
                (i32.const 1)
               )
              )
             )
             (block $label$12 (result i32)
              (br $label$11)
             )
            )
           )
           (i32.load offset=4 align=1
            (i32.and
             (loop $label$13 (result i32)
              (block
               (if
                (i32.eqz
                 (get_global $hangLimit)
                )
                (return
                 (f32.const 1073741824)
                )
               )
               (set_global $hangLimit
                (i32.sub
                 (get_global $hangLimit)
                 (i32.const 1)
                )
               )
              )
              (f32.lt
               (f32.const 512)
               (block $label$14 (result f32)
                (br $label$13)
               )
              )
             )
             (i32.const 31)
            )
           )
          )
          (i32.xor
           (tee_local $2
            (f64.lt
             (get_local $1)
             (call $deNan64
              (f64.promote/f32
               (f32.const 47)
              )
             )
            )
           )
           (if (result i32)
            (select
             (i32.const 32625)
             (i32.const -1)
             (get_local $2)
            )
            (block $label$15 (result i32)
             (i32.load16_u offset=4
              (i32.load16_u offset=3 align=1
               (get_local $3)
              )
             )
            )
            (block $label$16 (result i32)
             (return
              (f32.const 18446744073709551615)
             )
            )
           )
          )
          (i32.load8_u offset=3
           (i32.and
            (if (result i32)
             (get_local $2)
             (block $label$4 (result i32)
              (return
               (f32.const -2097152)
              )
             )
             (block $label$5 (result i32)
              (return
               (f32.const 8192)
              )
             )
            )
            (i32.const 31)
           )
          )
         )
        )
       )
       (i32.const 31)
      )
     )
     (i32.wrap/i64
      (i64.const -83)
     )
    )
    (i32.load8_u offset=22
     (i32.and
      (i32.rotr
       (loop $label$1 (result i32)
        (block
         (if
          (i32.eqz
           (get_global $hangLimit)
          )
          (return
           (f32.const 3402823466385288598117041e14)
          )
         )
         (set_global $hangLimit
          (i32.sub
           (get_global $hangLimit)
           (i32.const 1)
          )
         )
        )
        (block $label$2 (result i32)
         (return
          (f32.const 1)
         )
        )
       )
       (i32.const 605820702)
      )
      (i32.const 31)
     )
    )
   )
  )
 )
 (func $func_2 (type $FUNCSIG$ddfj) (param $0 f64) (param $1 f32) (param $2 i64) (result f64)
  (local $3 f64)
  (local $4 i64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (get_local $3)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (get_local $3)
 )
 (func $func_3 (type $FUNCSIG$v)
  (local $0 f32)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return)
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (block $label$1
    (i32.reinterpret/f32
     (return)
    )
   )
  )
 )
 (func $func_4 (result i64)
  (local $0 i64)
  (local $1 f32)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (get_local $0)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (i64.shr_s
   (get_local $0)
   (block $label$0 (result i64)
    (return
     (get_local $0)
    )
   )
  )
 )
 (func $func_5 (type $FUNCSIG$j) (result i64)
  (local $0 i32)
  (local $1 i64)
  (local $2 i64)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (i64.const -2147483648)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result i64)
   (return
    (i64.const -562949953421312)
   )
  )
 )
 (func $func_6 (type $FUNCSIG$ji) (param $0 i32) (result i64)
  (local $1 f64)
  (local $2 f64)
  (local $3 i32)
  (block
   (if
    (i32.eqz
     (get_global $hangLimit)
    )
    (return
     (i64.const 106)
    )
   )
   (set_global $hangLimit
    (i32.sub
     (get_global $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result i64)
   (i32.store offset=4 align=2
    (i32.and
     (select
      (if (result i32)
       (i32.eqz
        (loop $label$3 (result i32)
         (block
          (if
           (i32.eqz
            (get_global $hangLimit)
           )
           (return
            (i64.const 227)
           )
          )
          (set_global $hangLimit
           (i32.sub
            (get_global $hangLimit)
            (i32.const 1)
           )
          )
         )
         (block $label$4 (result i32)
          (tee_local $3
           (if (result i32)
            (i32.eqz
             (get_local $0)
            )
            (block $label$5 (result i32)
             (br $label$3)
            )
            (block $label$6 (result i32)
             (br $label$3)
            )
           )
          )
         )
        )
       )
       (block $label$7 (result i32)
        (call $func_0)
       )
       (block $label$8 (result i32)
        (f64.store offset=4
         (i32.and
          (tee_local $3
           (f64.eq
            (if (result f64)
             (get_local $0)
             (loop $label$9 (result f64)
              (block
               (if
                (i32.eqz
                 (get_global $hangLimit)
                )
                (return
                 (i64.const -8)
                )
               )
               (set_global $hangLimit
                (i32.sub
                 (get_global $hangLimit)
                 (i32.const 1)
                )
               )
              )
              (block $label$10 (result f64)
               (br $label$9)
              )
             )
             (block $label$11 (result f64)
              (call $func_2
               (f64.load offset=3 align=1
                (i32.and
                 (loop $label$12 (result i32)
                  (block
                   (if
                    (i32.eqz
                     (get_global $hangLimit)
                    )
                    (return
                     (i64.const 6425)
                    )
                   )
                   (set_global $hangLimit
                    (i32.sub
                     (get_global $hangLimit)
                     (i32.const 1)
                    )
                   )
                  )
                  (get_local $3)
                 )
                 (i32.const 31)
                )
               )
               (loop $label$13 (result f32)
                (block
                 (if
                  (i32.eqz
                   (get_global $hangLimit)
                  )
                  (return
                   (i64.const 26)
                  )
                 )
                 (set_global $hangLimit
                  (i32.sub
                   (get_global $hangLimit)
                   (i32.const 1)
                  )
                 )
                )
                (f32.const 1.0365662579528108e-37)
               )
               (i64.load8_s offset=3
                (i32.and
                 (select
                  (i32.const -2)
                  (i32.const -128)
                  (get_local $3)
                 )
                 (i32.const 31)
                )
               )
              )
             )
            )
            (loop $label$14 (result f64)
             (block
              (if
               (i32.eqz
                (get_global $hangLimit)
               )
               (return
                (i64.const 262144)
               )
              )
              (set_global $hangLimit
               (i32.sub
                (get_global $hangLimit)
                (i32.const 1)
               )
              )
             )
             (block $label$15 (result f64)
              (return
               (i64.const 4294967269)
              )
             )
            )
           )
          )
          (i32.const 31)
         )
         (call $deNan64
          (f64.copysign
           (call $deNan64
            (f64.reinterpret/i64
             (i64.ctz
              (i64.trunc_u/f32
               (f32.load offset=4
                (i32.and
                 (get_local $0)
                 (i32.const 31)
                )
               )
              )
             )
            )
           )
           (f64.load offset=3 align=2
            (i32.and
             (loop $label$16 (result i32)
              (block
               (if
                (i32.eqz
                 (get_global $hangLimit)
                )
                (return
                 (i64.const 1011068128099120680)
                )
               )
               (set_global $hangLimit
                (i32.sub
                 (get_global $hangLimit)
                 (i32.const 1)
                )
               )
              )
              (block $label$17 (result i32)
               (select
                (br_if $label$17
                 (get_local $3)
                 (i32.clz
                  (i64.le_u
                   (i64.const -1)
                   (i64.const 190)
                  )
                 )
                )
                (br_if $label$8
                 (if (result i32)
                  (i32.const 975184941)
                  (get_local $3)
                  (i32.const 8192)
                 )
                 (i32.trunc_s/f32
                  (f32.const 1)
                 )
                )
                (i32.trunc_s/f32
                 (f32.const -1)
                )
               )
              )
             )
             (i32.const 31)
            )
           )
          )
         )
        )
        (block $label$18
         (set_local $2
          (tee_local $1
           (call $deNan64
            (select
             (loop $label$20 (result f64)
              (block
               (if
                (i32.eqz
                 (get_global $hangLimit)
                )
                (return
                 (i64.const 1177723566525259122)
                )
               )
               (set_global $hangLimit
                (i32.sub
                 (get_global $hangLimit)
                 (i32.const 1)
                )
               )
              )
              (f64.const -nan:0xfffffffffff85)
             )
             (call $func_2
              (f64.const 1024)
              (if (result f32)
               (i32.eqz
                (select
                 (i32.const -536870912)
                 (i32.const 264)
                 (i32.load16_s offset=22 align=1
                  (i32.and
                   (get_local $3)
                   (i32.const 31)
                  )
                 )
                )
               )
               (block $label$21 (result f32)
                (br $label$18)
               )
               (block $label$22 (result f32)
                (br $label$18)
               )
              )
              (call $func_4)
             )
             (i32.shr_u
              (tee_local $3
               (get_local $0)
              )
              (i64.ge_u
               (select
                (call $func_4)
                (if (result i64)
                 (get_local $3)
                 (i64.const 5425231479272327498)
                 (i64.const 29)
                )
                (call $func_0)
               )
               (br_if $label$0
                (call_indirect $FUNCSIG$j
                 (i32.const 1)
                )
                (i32.eqz
                 (block $label$19 (result i32)
                  (return
                   (i64.const -9223372036854775808)
                  )
                 )
                )
               )
              )
             )
            )
           )
          )
         )
        )
        (return
         (i64.const 16777216)
        )
       )
      )
      (get_local $3)
      (block $label$1 (result i32)
       (i32.trunc_u/f32
        (block $label$2 (result f32)
         (return
          (i64.const 263950)
         )
        )
       )
      )
     )
     (i32.const 31)
    )
    (i32.load16_u offset=22 align=1
     (i32.and
      (select
       (i32.const -128)
       (loop $label$32 (result i32)
        (block
         (if
          (i32.eqz
           (get_global $hangLimit)
          )
          (return
           (i64.const 4096)
          )
         )
         (set_global $hangLimit
          (i32.sub
           (get_global $hangLimit)
           (i32.const 1)
          )
         )
        )
        (if (result i32)
         (loop $label$33 (result i32)
          (block
           (if
            (i32.eqz
             (get_global $hangLimit)
            )
            (return
             (i64.const 24)
            )
           )
           (set_global $hangLimit
            (i32.sub
             (get_global $hangLimit)
             (i32.const 1)
            )
           )
          )
          (block $label$34 (result i32)
           (i32.load8_u offset=4
            (i32.and
             (get_local $3)
             (i32.const 31)
            )
           )
          )
         )
         (i32.mul
          (i32.reinterpret/f32
           (call $deNan32
            (f32.copysign
             (f32.const 0)
             (f32.const -2147483648)
            )
           )
          )
          (block $label$35 (result i32)
           (i32.trunc_u/f64
            (f64.const 88)
           )
          )
         )
         (block $label$36 (result i32)
          (br $label$32)
         )
        )
       )
       (select
        (tee_local $0
         (i32.load8_s offset=22
          (i32.and
           (tee_local $3
            (if (result i32)
             (i32.const 30581)
             (i32.const 65536)
             (select
              (tee_local $3
               (i32.const 1)
              )
              (block $label$28 (result i32)
               (get_local $3)
              )
              (i32.const 127)
             )
            )
           )
           (i32.const 31)
          )
         )
        )
        (loop $label$29 (result i32)
         (block
          (if
           (i32.eqz
            (get_global $hangLimit)
           )
           (return
            (i64.const 137438953472)
           )
          )
          (set_global $hangLimit
           (i32.sub
            (get_global $hangLimit)
            (i32.const 1)
           )
          )
         )
         (block $label$30 (result i32)
          (block $label$31 (result i32)
           (f32.eq
            (f32.const 1048576)
            (f32.const -nan:0x7fffe5)
           )
          )
         )
        )
        (block $label$23 (result i32)
         (if (result i32)
          (i32.eqz
           (block $label$24 (result i32)
            (return
             (i64.const -128)
            )
           )
          )
          (block $label$25 (result i32)
           (return
            (i64.const 55)
           )
          )
          (br_if $label$23
           (br_if $label$23
            (block $label$27 (result i32)
             (select
              (get_local $3)
              (i32.const 134217728)
              (get_local $3)
             )
            )
            (i32.eqz
             (i32.lt_s
              (i64.ne
               (i64.const -1)
               (i64.load16_u offset=22 align=1
                (i32.and
                 (block $label$26 (result i32)
                  (return
                   (i64.const -40)
                  )
                 )
                 (i32.const 31)
                )
               )
              )
              (get_local $0)
             )
            )
           )
           (tee_local $3
            (i32.trunc_s/f64
             (get_local $1)
            )
           )
          )
         )
        )
       )
      )
      (i32.const 31)
     )
    )
   )
   (if
    (i32.trunc_u/f32
     (f32.const 1.5356363518406743e-37)
    )
    (block $label$48
     (br_if $label$48
      (i32.eqz
       (select
        (get_local $3)
        (get_local $3)
        (get_local $3)
       )
      )
     )
    )
    (nop)
   )
   (i64.const -1)
  )
 )
 (func $hangLimitInitializer
  (set_global $hangLimit
   (i32.const 100)
  )
 )
 (func $deNan32 (param $0 f32) (result f32)
  (if (result f32)
   (f32.eq
    (get_local $0)
    (get_local $0)
   )
   (get_local $0)
   (f32.const 0)
  )
 )
 (func $deNan64 (param $0 f64) (result f64)
  (if (result f64)
   (f64.eq
    (get_local $0)
    (get_local $0)
   )
   (get_local $0)
   (f64.const 0)
  )
 )
)
