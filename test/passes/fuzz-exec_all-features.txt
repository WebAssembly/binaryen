[fuzz-exec] calling a
[fuzz-exec] note result: a => -69
[fuzz-exec] calling b
[fuzz-exec] note result: b => -31768
[fuzz-exec] calling c
[fuzz-exec] note result: c => -69
[fuzz-exec] calling d
[fuzz-exec] note result: d => -31768
[fuzz-exec] calling e
[fuzz-exec] note result: e => -2146649112
(module
 (type $0 (func (result i64)))
 (type $1 (func (result i32)))
 (export "a" (func $a))
 (export "b" (func $b))
 (export "c" (func $c))
 (export "d" (func $d))
 (export "e" (func $e))
 (func $a (type $1) (result i32)
  (i32.extend8_s
   (i32.const 187)
  )
 )
 (func $b (type $1) (result i32)
  (i32.extend16_s
   (i32.const 33768)
  )
 )
 (func $c (type $0) (result i64)
  (i64.extend8_s
   (i64.const 187)
  )
 )
 (func $d (type $0) (result i64)
  (i64.extend16_s
   (i64.const 33768)
  )
 )
 (func $e (type $0) (result i64)
  (i64.extend32_s
   (i64.const 2148318184)
  )
 )
)
[fuzz-exec] calling a
[fuzz-exec] note result: a => -69
[fuzz-exec] calling b
[fuzz-exec] note result: b => -31768
[fuzz-exec] calling c
[fuzz-exec] note result: c => -69
[fuzz-exec] calling d
[fuzz-exec] note result: d => -31768
[fuzz-exec] calling e
[fuzz-exec] note result: e => -2146649112
[fuzz-exec] comparing a
[fuzz-exec] comparing b
[fuzz-exec] comparing c
[fuzz-exec] comparing d
[fuzz-exec] comparing e
[fuzz-exec] calling unaligned_load
[trap unaligned atomic operation]
[fuzz-exec] calling unaligned_load_offset
[trap unaligned atomic operation]
[fuzz-exec] calling aligned_for_size
[fuzz-exec] note result: aligned_for_size => 0
[fuzz-exec] calling unaligned_notify
[trap unaligned atomic operation]
[fuzz-exec] calling wrap_cmpxchg
[LoggingExternalInterface logging 42]
[fuzz-exec] calling oob_notify
[trap final > memory: 18446744073709551512 > 65514]
(module
 (type $0 (func (result i32)))
 (type $1 (func (param i32)))
 (type $2 (func (param i32 i32)))
 (type $3 (func))
 (import "fuzzing-support" "log-i32" (func $fimport$0 (type $1) (param i32)))
 (memory $0 1 1 shared)
 (export "unaligned_load" (func $unaligned_load))
 (export "unaligned_load_offset" (func $unaligned_load_offset))
 (export "aligned_for_size" (func $aligned_for_size))
 (export "unaligned_notify" (func $unaligned_notify))
 (export "wrap_cmpxchg" (func $wrap_cmpxchg))
 (export "oob_notify" (func $oob_notify))
 (func $unaligned_load (type $0) (result i32)
  (i32.atomic.load
   (i32.const 1)
  )
 )
 (func $unaligned_load_offset (type $0) (result i32)
  (i32.atomic.load offset=1
   (i32.const 0)
  )
 )
 (func $aligned_for_size (type $0) (result i32)
  (i32.atomic.load16_u offset=2
   (i32.const 0)
  )
 )
 (func $unaligned_notify (type $0) (result i32)
  (memory.atomic.notify
   (i32.const 1)
   (i32.const 1)
  )
 )
 (func $wrap_cmpxchg (type $2) (param $0 i32) (param $1 i32)
  (drop
   (i32.atomic.rmw8.cmpxchg_u
    (i32.const 0)
    (i32.const 256)
    (i32.const 42)
   )
  )
  (call $fimport$0
   (i32.load
    (i32.const 0)
   )
  )
 )
 (func $oob_notify (type $3)
  (drop
   (memory.atomic.notify offset=22
    (i32.const -104)
    (i32.const -72)
   )
  )
 )
)
[fuzz-exec] calling unaligned_load
[trap unaligned atomic operation]
[fuzz-exec] calling unaligned_load_offset
[trap unaligned atomic operation]
[fuzz-exec] calling aligned_for_size
[fuzz-exec] note result: aligned_for_size => 0
[fuzz-exec] calling unaligned_notify
[trap unaligned atomic operation]
[fuzz-exec] calling wrap_cmpxchg
[LoggingExternalInterface logging 42]
[fuzz-exec] calling oob_notify
[trap final > memory: 18446744073709551512 > 65514]
[fuzz-exec] comparing aligned_for_size
[fuzz-exec] comparing oob_notify
[fuzz-exec] comparing unaligned_load
[fuzz-exec] comparing unaligned_load_offset
[fuzz-exec] comparing unaligned_notify
[fuzz-exec] comparing wrap_cmpxchg
[fuzz-exec] calling unsigned_2_bytes
[fuzz-exec] note result: unsigned_2_bytes => 65535
(module
 (type $0 (func (result i32)))
 (memory $0 1 1 shared)
 (data $0 (i32.const 0) "\ff\ff")
 (export "unsigned_2_bytes" (func $unsigned_2_bytes))
 (func $unsigned_2_bytes (type $0) (result i32)
  (i32.atomic.rmw16.xor_u
   (i32.const 0)
   (i32.const 0)
  )
 )
)
[fuzz-exec] calling unsigned_2_bytes
[fuzz-exec] note result: unsigned_2_bytes => 65535
[fuzz-exec] comparing unsigned_2_bytes
[fuzz-exec] calling rmw-reads-modifies-and-writes
[LoggingExternalInterface logging 0]
(module
 (type $0 (func (param i32)))
 (type $1 (func))
 (import "fuzzing-support" "log-i32" (func $fimport$0 (type $0) (param i32)))
 (memory $0 1 1 shared)
 (export "rmw-reads-modifies-and-writes" (func $rmw-reads-modifies-and-writes))
 (func $rmw-reads-modifies-and-writes (type $1)
  (drop
   (i64.atomic.rmw16.and_u offset=4
    (i32.const 0)
    (i64.const 65535)
   )
  )
  (call $fimport$0
   (i32.load8_u
    (i32.const 5)
   )
  )
 )
)
[fuzz-exec] calling rmw-reads-modifies-and-writes
[LoggingExternalInterface logging 0]
[fuzz-exec] comparing rmw-reads-modifies-and-writes
[fuzz-exec] calling rmw-reads-modifies-and-writes-asymmetrical
[LoggingExternalInterface logging 214]
(module
 (type $0 (func (param i32)))
 (type $1 (func))
 (import "fuzzing-support" "log-i32" (func $fimport$0 (type $0) (param i32)))
 (memory $0 1 1 shared)
 (export "rmw-reads-modifies-and-writes-asymmetrical" (func $rmw-reads-modifies-and-writes-asymmetrical))
 (func $rmw-reads-modifies-and-writes-asymmetrical (type $1)
  (drop
   (i32.atomic.rmw8.sub_u
    (i32.const 3)
    (i32.const 42)
   )
  )
  (call $fimport$0
   (i32.load8_u
    (i32.const 3)
   )
  )
 )
)
[fuzz-exec] calling rmw-reads-modifies-and-writes-asymmetrical
[LoggingExternalInterface logging 214]
[fuzz-exec] comparing rmw-reads-modifies-and-writes-asymmetrical
[fuzz-exec] calling func
[fuzz-exec] note result: func => function
(module
 (type $0 (func (result funcref)))
 (elem declare func $func)
 (export "func" (func $func))
 (func $func (type $0) (result funcref)
  (ref.func $func)
 )
)
[fuzz-exec] calling func
[fuzz-exec] note result: func => function
[fuzz-exec] comparing func
