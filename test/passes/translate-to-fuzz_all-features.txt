(module
 (type $none_=>_funcref_anyref_f32_exnref (func (result funcref anyref f32 exnref)))
 (type $none_=>_none (func))
 (type $f32_=>_none (func (param f32)))
 (type $i32_=>_none (func (param i32)))
 (type $i64_=>_none (func (param i64)))
 (type $f64_=>_none (func (param f64)))
 (type $v128_=>_none (func (param v128)))
 (type $exnref_=>_none (func (param exnref)))
 (type $none_=>_i32 (func (result i32)))
 (type $f32_i32_anyref_=>_i64 (func (param f32 i32 anyref) (result i64)))
 (import "fuzzing-support" "log-i32" (func $log-i32 (param i32)))
 (import "fuzzing-support" "log-i64" (func $log-i64 (param i64)))
 (import "fuzzing-support" "log-f32" (func $log-f32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $log-f64 (param f64)))
 (import "fuzzing-support" "log-v128" (func $log-v128 (param v128)))
 (import "fuzzing-support" "log-exnref" (func $log-exnref (param exnref)))
 (memory $0 (shared 1 1))
 (data (i32.const 0) "N\0fN\f5\f9\b1\ff\fa\eb\e5\fe\a7\ec\fb\fc\f4\a6\e4\ea\f0\ae\e3")
 (table $0 0 0 funcref)
 (global $global$5 (mut eqref) (ref.null eq))
 (global $global$4 (mut externref) (ref.null extern))
 (global $global$3 (mut exnref) (ref.null exn))
 (global $global$2 (mut funcref) (ref.null func))
 (global $global$1 (mut (v128 funcref i64 anyref eqref exnref)) (tuple.make
  (v128.const i32x4 0x0c0d0c62 0x48060d0d 0x000000ff 0x00000000)
  (ref.null func)
  (i64.const -2199023255552)
  (ref.null any)
  (ref.null eq)
  (ref.null exn)
 ))
 (global $hangLimit (mut i32) (i32.const 10))
 (export "hashMemory" (func $hashMemory))
 (export "memory" (memory $0))
 (export "func_7" (func $func_7))
 (export "func_8_invoker" (func $func_8_invoker))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $hashMemory (result i32)
  (local $0 i32)
  (local.set $0
   (i32.const 5381)
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=1
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=2
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=3
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=4
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=5
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=6
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=7
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=8
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=9
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=10
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=11
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=12
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=13
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=14
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=15
     (i32.const 0)
    )
   )
  )
  (local.get $0)
 )
 (func $func_7 (param $0 f32)
  (local $1 (anyref externref))
  (local $2 i32)
  (local $3 i64)
  (local $4 funcref)
  (local $5 v128)
  (local $6 (funcref anyref f32 i32 exnref))
  (local $7 i32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (call $log-f64
    (if (result f64)
     (i32.eqz
      (i32.const 32768)
     )
     (block $label$1
      (br_if $label$0
       (i32.eqz
        (ref.eq
         (ref.null eq)
         (loop $label$21
          (block
           (if
            (i32.eqz
             (global.get $hangLimit)
            )
            (return)
           )
           (global.set $hangLimit
            (i32.sub
             (global.get $hangLimit)
             (i32.const 1)
            )
           )
          )
          (block $label$22
           (nop)
           (br $label$21)
          )
         )
        )
       )
      )
      (if
       (i32.eqz
        (i32.const -33554432)
       )
       (block $label$2
        (br_if $label$2
         (i32.eqz
          (local.get $2)
         )
        )
        (call $log-i32
         (call $hashMemory)
        )
       )
       (drop
        (ref.null extern)
       )
      )
      (br $label$0)
     )
     (loop $label$4 (result f64)
      (block
       (if
        (i32.eqz
         (global.get $hangLimit)
        )
        (return)
       )
       (global.set $hangLimit
        (i32.sub
         (global.get $hangLimit)
         (i32.const 1)
        )
       )
      )
      (f64.const 82)
     )
    )
   )
   (call $log-v128
    (loop $label$50 (result v128)
     (block
      (if
       (i32.eqz
        (global.get $hangLimit)
       )
       (return)
      )
      (global.set $hangLimit
       (i32.sub
        (global.get $hangLimit)
        (i32.const 1)
       )
      )
     )
     (block $label$51 (result v128)
      (loop $label$52
       (block
        (if
         (i32.eqz
          (global.get $hangLimit)
         )
         (return)
        )
        (global.set $hangLimit
         (i32.sub
          (global.get $hangLimit)
          (i32.const 1)
         )
        )
       )
       (block $label$53
        (call $log-i32
         (call $hashMemory)
        )
       )
      )
      (local.get $5)
     )
    )
   )
  )
 )
 (func $func_8 (param $0 f32) (param $1 i32) (param $2 anyref) (result i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i64.const -2147483647)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (i64.const 6438275382591167256)
 )
 (func $func_8_invoker
  (drop
   (call $func_8
    (f32.const -nan:0x7fffcb)
    (i32.const -51)
    (ref.null any)
   )
  )
 )
 (func $func_10 (result funcref anyref f32 exnref)
  (local $0 f64)
  (local $1 v128)
  (local $2 (i32 eqref anyref exnref))
  (local $3 eqref)
  (local $4 externref)
  (local $5 anyref)
  (local $6 f64)
  (local $7 funcref)
  (local $8 (i64 externref v128 f64 f32 exnref))
  (local $9 anyref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (tuple.make
      (ref.null func)
      (ref.null any)
      (f32.const -nan:0x7ffffc)
      (ref.null exn)
     )
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block (result funcref anyref f32 exnref)
   (block $label$1
    (call $log-i32
     (call $hashMemory)
    )
    (call $log-v128
     (local.get $1)
    )
   )
   (nop)
   (tuple.make
    (ref.func $func_10)
    (ref.null any)
    (f32.const 7710)
    (ref.null exn)
   )
  )
 )
 (func $hangLimitInitializer
  (global.set $hangLimit
   (i32.const 10)
  )
 )
)
