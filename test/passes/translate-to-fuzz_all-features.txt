(module
 (type $none_=>_none (func))
<<<<<<< HEAD
 (type $none_=>_f64_f32 (func (result f64 f32)))
=======
 (type $funcref_f64_=>_i32 (func (param funcref f64) (result i32)))
 (type $anyref_f32_funcref_=>_f32 (func (param anyref f32 funcref) (result f32)))
 (type $none_=>_v128_f32 (func (result v128 f32)))
>>>>>>> origin/tfr
 (type $i32_=>_none (func (param i32)))
 (type $i64_=>_none (func (param i64)))
 (type $f32_=>_none (func (param f32)))
 (type $f64_=>_none (func (param f64)))
 (type $v128_=>_none (func (param v128)))
 (type $exnref_=>_none (func (param exnref)))
 (type $none_=>_i32 (func (result i32)))
<<<<<<< HEAD
 (type $none_=>_i32_i32 (func (result i32 i32)))
 (type $eqref_=>_i32_i32 (func (param eqref) (result i32 i32)))
 (type $none_=>_i32_v128_i64_i64 (func (result i32 v128 i64 i64)))
 (type $i64_externref_eqref_i32_=>_i32_v128_i64_i64 (func (param i64 externref eqref i32) (result i32 v128 i64 i64)))
 (type $none_=>_i64 (func (result i64)))
 (type $none_=>_i64_f32 (func (result i64 f32)))
 (type $i32_funcref_anyref_i64_=>_f32 (func (param i32 funcref anyref i64) (result f32)))
 (type $i64_=>_f32 (func (param i64) (result f32)))
 (type $i31ref_externref_f32_f64_=>_f64 (func (param i31ref externref f32 f64) (result f64)))
 (type $f64_anyref_anyref_=>_f64_f32 (func (param f64 anyref anyref) (result f64 f32)))
 (type $none_=>_v128 (func (result v128)))
 (type $i31ref_v128_=>_exnref (func (param i31ref v128) (result exnref)))
 (type $eqref_i32_=>_anyref (func (param eqref i32) (result anyref)))
 (type $none_=>_i31ref (func (result i31ref)))
=======
 (type $none_=>_i32_f32_v128 (func (result i32 f32 v128)))
 (type $exnref_=>_i32_f32_v128 (func (param exnref) (result i32 f32 v128)))
 (type $anyref_anyref_externref_eqref_v128_=>_i64 (func (param anyref anyref externref eqref v128) (result i64)))
 (type $none_=>_funcref (func (result funcref)))
 (type $none_=>_exnref (func (result exnref)))
 (type $i31ref_v128_=>_exnref (func (param i31ref v128) (result exnref)))
 (type $externref_i64_funcref_exnref_=>_anyref (func (param externref i64 funcref exnref) (result anyref)))
 (type $exnref_exnref_eqref_anyref_anyref_exnref_externref_=>_i31ref (func (param exnref exnref eqref anyref anyref exnref externref) (result i31ref)))
>>>>>>> origin/tfr
 (import "fuzzing-support" "log-i32" (func $log-i32 (param i32)))
 (import "fuzzing-support" "log-i64" (func $log-i64 (param i64)))
 (import "fuzzing-support" "log-f32" (func $log-f32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $log-f64 (param f64)))
 (import "fuzzing-support" "log-v128" (func $log-v128 (param v128)))
 (import "fuzzing-support" "log-exnref" (func $log-exnref (param exnref)))
 (memory $0 (shared 16 17))
 (data (i32.const 0) "N\0fN\f5\f9\b1\ff\fa\eb\e5\fe\a7\ec\fb\fc\f4\a6\e4\ea\f0\ae\e3")
<<<<<<< HEAD
 (table $0 2 2 funcref)
 (elem (i32.const 0) $func_1 $func_10)
=======
 (table $0 3 funcref)
 (elem (i32.const 0) $func_2 $func_2 $func_4)
>>>>>>> origin/tfr
 (global $global$ (mut eqref) (ref.null eq))
 (global $global$_0 (mut i32) (i32.const 470177031))
 (global $global$_1 (mut f64) (f64.const 2147483647))
 (global $global$_2 (mut (f32 i64)) (tuple.make
  (f32.const -2147483648)
  (i64.const -32)
 ))
 (global $global$_3 (mut f32) (f32.const -32769))
 (global $hangLimit (mut i32) (i32.const 10))
 (export "hashMemory" (func $hashMemory))
 (export "memory" (memory $0))
 (export "func" (func $func))
 (export "func_0" (func $func_0))
 (export "func_0_invoker" (func $func_0_invoker))
 (export "func_1" (func $func_1))
 (export "func_1_invoker" (func $func_1_invoker))
 (export "func_2" (func $func_2))
 (export "func_2_invoker" (func $func_2_invoker))
<<<<<<< HEAD
 (export "func_4" (func $func_4))
=======
 (export "func_3" (func $func_3))
>>>>>>> origin/tfr
 (export "func_4_invoker" (func $func_4_invoker))
 (export "func_5_invoker" (func $func_5_invoker))
 (export "func_6_invoker" (func $func_6_invoker))
<<<<<<< HEAD
 (export "func_8" (func $func_8))
 (export "func_9_invoker" (func $func_9_invoker))
 (export "func_10" (func $func_10))
 (export "func_10_invoker" (func $func_10_invoker))
=======
 (export "func_7_invoker" (func $func_7_invoker))
 (export "func_8_invoker" (func $func_8_invoker))
 (export "func_9" (func $func_9))
>>>>>>> origin/tfr
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $hashMemory (result i32)
  (local $0 i32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i32.const 69)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block (result i32)
   (local.set $0
    (i32.const 5381)
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=1
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=2
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=3
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=4
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=5
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=6
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=7
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=8
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=9
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=10
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=11
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=12
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=13
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=14
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=15
      (i32.const 0)
     )
    )
   )
   (local.get $0)
  )
 )
 (func $func (param $0 i31ref) (param $1 v128) (result exnref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null exn)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (ref.null exn)
 )
<<<<<<< HEAD
 (func $func_0 (result v128)
=======
 (func $func_invoker
  (drop
   (call $func
    (i31.new
     (i32.const 1633240409)
    )
    (v128.const i32x4 0xcf800000 0x4c816020 0x3e1a1a1a 0x00000000)
   )
  )
 )
 (func $func_0 (param $0 anyref) (param $1 anyref) (param $2 externref) (param $3 eqref) (param $4 v128) (result i64)
  (local $5 eqref)
  (local $6 (i32 f64 f32 i64))
  (local $7 (f32 i32 i32))
  (local $8 v128)
>>>>>>> origin/tfr
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
<<<<<<< HEAD
     (v128.const i32x4 0x00000000 0x41e00000 0xffe1ba5e 0x41efffff)
=======
     (i64.const 88)
>>>>>>> origin/tfr
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result v128)
   (nop)
<<<<<<< HEAD
   (i64x2.splat
    (i64.const -10)
   )
  )
 )
 (func $func_0_invoker
  (drop
   (call $func_0)
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_1 (param $0 i31ref) (param $1 externref) (param $2 f32) (param $3 f64) (result f64)
  (local $4 externref)
  (local $5 v128)
  (local $6 (i64 f64))
  (local $7 i64)
  (local $8 (i32 i64))
  (local $9 i32)
  (local $10 (f64 f64))
  (local $11 eqref)
=======
   (br_if $label$0
    (tuple.extract 1
     (tuple.make
      (f64.const -255)
      (i64.const -127)
     )
    )
    (i32.const -24)
   )
  )
 )
 (func $func_1 (param $0 funcref) (param $1 f64) (result i32)
  (local $2 anyref)
  (local $3 i64)
  (local $4 i32)
>>>>>>> origin/tfr
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
<<<<<<< HEAD
     (f64.const 0.951)
=======
     (local.get $4)
>>>>>>> origin/tfr
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
<<<<<<< HEAD
  (block $label$0
   (block $label$1
    (if
     (i32.eqz
      (i32.and
       (tuple.extract 0
        (tuple.make
         (i32.const 470091521)
         (v128.const i32x4 0x80000504 0x0802003d 0x060c0e0d 0x00006f6f)
         (f64.const -nan:0xfffffffffffab)
        )
       )
       (i32.atomic.load8_u offset=4
        (i32.and
         (ref.is_null
          (ref.null exn)
         )
         (i32.const 15)
        )
       )
      )
     )
     (block $label$2
      (call $log-i32
       (local.get $9)
      )
      (call $log-i32
       (call $hashMemory)
      )
     )
     (block $label$3
      (br_if $label$1
       (if
        (i32.eqz
         (global.get $global$_0)
        )
        (block $label$4
         (loop $label$5
          (block
           (if
            (i32.eqz
             (global.get $hangLimit)
            )
            (return
             (f64.const -1797693134862315708145274e284)
            )
           )
           (global.set $hangLimit
            (i32.sub
             (global.get $hangLimit)
             (i32.const 1)
            )
           )
          )
          (block
           (block $label$6
            (f64.store offset=22 align=4
             (i32.and
              (local.get $9)
              (i32.const 15)
             )
             (f64.add
              (global.get $global$_1)
              (local.get $3)
             )
            )
            (call $log-i32
             (call $hashMemory)
            )
           )
           (br_if $label$5
            (i32.eqz
             (i32.const 353918224)
            )
           )
           (br_if $label$5
            (i32.eqz
             (global.get $global$_0)
            )
           )
          )
         )
         (br $label$1)
        )
        (block $label$7
         (block $label$8
          (nop)
          (loop $label$9
           (block
            (if
             (i32.eqz
              (global.get $hangLimit)
             )
             (return
              (local.get $3)
             )
            )
            (global.set $hangLimit
             (i32.sub
              (global.get $hangLimit)
              (i32.const 1)
             )
            )
           )
           (block $label$10
            (global.set $global$_3
             (local.tee $2
              (global.get $global$_3)
             )
            )
            (call $log-i32
             (call $hashMemory)
            )
           )
          )
         )
         (br $label$1)
        )
       )
      )
      (loop $label$11
       (block
        (if
         (i32.eqz
          (global.get $hangLimit)
         )
         (return
          (local.get $3)
         )
        )
        (global.set $hangLimit
         (i32.sub
          (global.get $hangLimit)
          (i32.const 1)
         )
        )
       )
       (block $label$12
        (nop)
        (call $log-i64
         (tuple.extract 0
          (if (result i64 f32)
           (call $hashMemory)
           (tuple.make
            (i64.const 0)
            (f32.const 4294967296)
           )
           (tuple.make
            (i64.const 127)
            (f32.const 3178)
           )
          )
         )
        )
       )
      )
     )
    )
    (call $log-i32
     (call $hashMemory)
    )
   )
   (call $log-i32
    (call $hashMemory)
   )
   (return
    (f64.const 4611686018427387904)
   )
  )
=======
  (global.get $global$_0)
>>>>>>> origin/tfr
 )
 (func $func_1_invoker
  (drop
   (call $func_1
<<<<<<< HEAD
    (i31.new
     (i32.const -1)
    )
    (ref.null extern)
    (f32.const -77)
    (f64.const 34.55698517070641)
   )
  )
  (drop
   (call $func_1
    (i31.new
     (i32.const 32768)
    )
    (ref.null extern)
    (f32.const 576460752303423488)
    (f64.const 281474976710655.88)
   )
  )
 )
 (func $func_2 (param $0 i64) (param $1 externref) (param $2 eqref) (param $3 i32) (result i32 v128 i64 i64)
  (local $4 f64)
  (local $5 (i64 f32))
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (tuple.make
      (i32.const -54)
      (v128.const i32x4 0x7fffffff 0x00000006 0x80000001 0x00004000)
      (i64.const 65535)
      (i64.const 4991191546067174469)
     )
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (tuple.make
   (i32.const 18)
   (v128.const i32x4 0x21205855 0x8000007f 0x00005c50 0x00cf2e36)
   (i64.const 2147483648)
   (i64.const 62)
  )
 )
 (func $func_2_invoker
  (drop
   (call $func_2
    (i64.const -288230376151711744)
    (ref.null extern)
    (ref.null eq)
    (i32.const -128)
=======
    (ref.null func)
    (f64.const 230)
>>>>>>> origin/tfr
   )
  )
  (drop
<<<<<<< HEAD
   (call $func_2
    (i64.const -72)
    (ref.null extern)
    (ref.null eq)
    (i32.const 1263159347)
   )
  )
  (drop
   (call $func_2
    (i64.const -55)
    (ref.null extern)
    (ref.null eq)
    (i32.const 1700610397)
=======
   (call $func_1
    (ref.null func)
    (f64.const -nan:0xfffffffffffcb)
>>>>>>> origin/tfr
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_2
    (i64.const 22)
    (ref.null extern)
    (ref.null eq)
    (i32.const 2147483647)
   )
  )
 )
<<<<<<< HEAD
 (func $func_3 (result i31ref)
  (local $0 (f32 f32))
  (local $1 f64)
  (local $2 f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i31.new
      (i32.const 1073741823)
     )
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (i31.new
   (i32.const 1026914353)
  )
 )
 (func $func_4 (param $0 eqref) (param $1 i32) (result anyref)
  (local $2 funcref)
  (local $3 i64)
  (local $4 f64)
  (local $5 funcref)
  (local $6 v128)
  (local $7 anyref)
  (local $8 f32)
  (local $9 externref)
  (local $10 f32)
=======
 (func $func_2 (param $0 exnref) (result i32 f32 v128)
  (local $1 (f64 f32))
  (local $2 i32)
  (local $3 i32)
  (local $4 eqref)
  (local $5 i32)
  (local $6 (f32 i64))
  (local $7 (v128 f64))
  (local $8 (v128 i64))
  (local $9 eqref)
  (local $10 i64)
  (local $11 anyref)
  (local $12 f64)
>>>>>>> origin/tfr
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
<<<<<<< HEAD
     (local.get $7)
=======
     (tuple.make
      (i32.const -262144)
      (f32.const -nan:0x7ffff7)
      (v128.const i32x4 0x4e5489ae 0x323f3873 0x3528347c 0x42c00000)
     )
>>>>>>> origin/tfr
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
<<<<<<< HEAD
  (block $label$0 (result anyref)
   (loop $label$1
    (block
     (if
      (i32.eqz
       (global.get $hangLimit)
      )
      (return
       (local.get $7)
      )
     )
     (global.set $hangLimit
      (i32.sub
       (global.get $hangLimit)
       (i32.const 1)
      )
     )
    )
    (block $label$2
     (block $label$3
      (f32.store offset=4
       (i32.and
        (loop $label$4
         (block
          (if
           (i32.eqz
            (global.get $hangLimit)
           )
           (return
            (ref.null any)
           )
          )
          (global.set $hangLimit
           (i32.sub
            (global.get $hangLimit)
            (i32.const 1)
           )
          )
         )
         (block $label$5
          (call $log-i32
           (call $hashMemory)
          )
          (br $label$3)
         )
        )
        (i32.const 15)
       )
       (local.get $10)
      )
      (block $label$6
       (if
        (block $label$7 (result i32)
         (if
          (local.get $1)
          (block $label$8
           (atomic.fence)
           (call $log-i64
            (i64.load16_u
             (local.get $1)
            )
           )
          )
          (block $label$9
           (block $label$10
            (call $log-f32
             (if (result f32)
              (i32x4.any_true
               (v128.const i32x4 0x00000000 0x40568000 0x00000000 0x43a00000)
              )
              (f32.load offset=2 align=1
               (i32.and
                (i32.load offset=4
                 (i32.and
                  (i32.const -512)
                  (i32.const 15)
                 )
                )
                (i32.const 15)
               )
              )
              (block $label$11
               (call $log-i32
                (call $hashMemory)
               )
               (br $label$10)
              )
             )
            )
            (block $label$12
             (if
              (i32.eqz
               (global.get $global$_0)
              )
              (block $label$13
               (if
                (i32.const 255)
                (block $label$14
                 (atomic.fence)
                )
                (call $log-i32
                 (i32.const -17)
                )
               )
               (i32.store16 offset=2 align=1
                (i32.and
                 (if (result i32)
                  (local.get $1)
                  (i32.load16_s offset=22
                   (i32.and
                    (local.get $1)
                    (i32.const 15)
                   )
                  )
                  (i32.const -67)
                 )
                 (i32.const 15)
                )
                (local.tee $1
                 (local.get $1)
                )
               )
              )
              (local.set $6
               (if (result v128)
                (br_if $label$7
                 (local.get $1)
                 (i32.eqz
                  (i32.const 5970)
                 )
                )
                (v128.const i32x4 0x095a7a79 0x191400ff 0x0001081a 0x0c1dffff)
                (v128.const i32x4 0x00000080 0x00000000 0x02000000 0x00000000)
               )
              )
             )
             (local.set $8
              (f32.add
               (f32.sqrt
                (local.get $8)
               )
               (local.get $10)
              )
             )
            )
           )
           (drop
            (block $label$15 (result f64)
             (br_if $label$2
              (i32.rem_s
               (i8x16.extract_lane_u 3
                (if (result v128)
                 (i32.const -127)
                 (local.get $6)
                 (tuple.extract 3
                  (tuple.make
                   (i64.const 262144)
                   (f32.const 3402823466385288598117041e14)
                   (f64.const 0)
                   (v128.const i32x4 0x01003f3f 0x00537fff 0xff8c7fff 0x2000ffff)
                  )
                 )
                )
               )
               (loop $label$16 (result i32)
                (block
                 (if
                  (i32.eqz
                   (global.get $hangLimit)
                  )
                  (return
                   (local.get $7)
                  )
                 )
                 (global.set $hangLimit
                  (i32.sub
                   (global.get $hangLimit)
                   (i32.const 1)
                  )
                 )
                )
                (block (result i32)
                 (local.set $6
                  (local.get $6)
                 )
                 (br_if $label$16
                  (i32.atomic.load8_u offset=3
                   (i32.and
                    (i32.const -2147483647)
                    (i32.const 15)
                   )
                  )
                 )
                 (i32.const -256)
                )
               )
              )
             )
             (local.get $4)
            )
           )
          )
         )
         (br $label$2)
        )
        (call $log-i32
         (call $hashMemory)
        )
        (i32.atomic.store8 offset=2
         (i32.and
          (i32.const 32769)
          (i32.const 15)
         )
         (local.get $1)
        )
       )
       (call $log-f64
        (f64.reinterpret_i64
         (i64.extend_i32_u
          (i32.const 129)
         )
        )
       )
      )
      (local.set $0
       (local.tee $0
        (if (result eqref)
         (local.tee $1
          (local.tee $1
           (local.tee $1
            (block $label$24 (result i32)
             (global.get $global$_0)
            )
           )
          )
         )
         (block $label$25 (result eqref)
          (call $log-i32
           (i32.load16_s offset=1
            (i32.and
             (global.get $global$_0)
             (i32.const 15)
            )
           )
          )
          (select (result eqref)
           (i31.new
            (i32.const 13857)
           )
           (local.get $0)
           (call $hashMemory)
          )
         )
         (global.get $global$)
        )
       )
      )
=======
  (block $label$0
   (local.set $11
    (loop $label$1 (result anyref)
     (block
      (if
       (i32.eqz
        (global.get $hangLimit)
       )
       (return
        (tuple.make
         (i32.const -8192)
         (f32.const -nan:0x7ffff3)
         (v128.const i32x4 0xcf800000 0x47ffff80 0xce000000 0xbf5ae148)
        )
       )
      )
      (global.set $hangLimit
       (i32.sub
        (global.get $hangLimit)
        (i32.const 1)
       )
      )
     )
     (block $label$2 (result anyref)
      (atomic.fence)
      (local.get $11)
>>>>>>> origin/tfr
     )
     (block $label$26
      (call $log-i32
       (call $hashMemory)
      )
      (drop
       (ref.null any)
      )
     )
    )
   )
<<<<<<< HEAD
   (local.get $7)
  )
 )
 (func $func_4_invoker
  (drop
   (call $func_4
    (ref.null eq)
    (i32.const 693981495)
   )
  )
  (call $log-i32
   (call $hashMemory)
=======
   (return
    (tuple.make
     (i32.const -32769)
     (f32.const -nan:0x7ffff3)
     (v128.const i32x4 0x4a4a3428 0x80000000 0x5c081419 0xfffffff8)
    )
   )
  )
 )
 (func $func_2_invoker
  (drop
   (call $func_2
    (ref.null exn)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_2
    (ref.null exn)
   )
  )
  (drop
   (call $func_2
    (ref.null exn)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_2
    (ref.null exn)
   )
>>>>>>> origin/tfr
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
<<<<<<< HEAD
 (func $func_5
  (local $0 funcref)
=======
 (func $func_3 (param $0 anyref) (param $1 f32) (param $2 funcref) (result f32)
  (local $3 funcref)
  (local $4 funcref)
  (local $5 exnref)
  (local $6 (i64 i64))
>>>>>>> origin/tfr
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
<<<<<<< HEAD
    (return)
=======
    (return
     (local.get $1)
    )
>>>>>>> origin/tfr
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
<<<<<<< HEAD
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_5_invoker
  (call $func_5)
 )
 (func $func_6 (param $0 f64) (param $1 anyref) (param $2 anyref) (result f64 f32)
  (local $3 eqref)
  (local $4 anyref)
=======
  (block $label$0
   (call $log-i64
    (i64.atomic.load16_u offset=4
     (loop $label$1 (result i32)
      (block
       (if
        (i32.eqz
         (global.get $hangLimit)
        )
        (return
         (f32.const -9223372036854775808)
        )
       )
       (global.set $hangLimit
        (i32.sub
         (global.get $hangLimit)
         (i32.const 1)
        )
       )
      )
      (block (result i32)
       (block $label$2
        (nop)
       )
       (br_if $label$1
        (i32.eqz
         (call $func_1
          (block $label$8
           (nop)
           (return
            (local.get $1)
           )
          )
          (f64.const -86)
         )
        )
       )
       (call $func_1
        (ref.func $func_3)
        (f64.const -86)
       )
      )
     )
    )
   )
   (block $label$11
    (nop)
    (return
     (local.get $1)
    )
   )
  )
 )
 (func $func_4
>>>>>>> origin/tfr
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
<<<<<<< HEAD
    (return
     (tuple.make
      (f64.const 8796093022207.866)
      (f32.const -281474976710656)
     )
    )
=======
    (return)
>>>>>>> origin/tfr
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
<<<<<<< HEAD
  (if (result f64 f32)
   (f32.eq
    (f32.load offset=2 align=2
     (ref.eq
      (i31.new
       (i32.const 1027)
      )
      (local.get $3)
     )
    )
    (global.get $global$_3)
   )
   (block $label$0
    (nop)
    (return
     (tuple.make
      (f64.const 5970)
      (f32.const 62863778454175744)
     )
    )
   )
   (block $label$1 (result f64 f32)
    (local.set $1
     (local.tee $2
      (local.get $2)
     )
    )
    (tuple.make
     (f64.const 0.827)
     (f32.const -1152921504606846976)
    )
   )
  )
 )
 (func $func_6_invoker
  (drop
   (call $func_6
    (f64.const -72)
    (ref.null any)
    (ref.null any)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_6
    (f64.const -18446744073709551615)
    (ref.null any)
    (ref.null any)
   )
  )
 )
 (func $func_7 (param $0 eqref) (result i32 i32)
  (local $1 f32)
  (local $2 eqref)
  (local $3 f32)
  (local $4 eqref)
  (local $5 i32)
=======
  (block $label$0
   (nop)
   (atomic.fence)
  )
 )
 (func $func_4_invoker
  (call $func_4)
  (call $log-i32
   (call $hashMemory)
  )
  (call $func_4)
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_5 (param $0 externref) (param $1 i64) (param $2 funcref) (param $3 exnref) (result anyref)
  (local $4 eqref)
  (local $5 v128)
  (local $6 eqref)
  (local $7 eqref)
  (local $8 i32)
  (local $9 (f32 i64))
  (local $10 anyref)
  (local $11 i64)
  (local $12 funcref)
>>>>>>> origin/tfr
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
<<<<<<< HEAD
     (tuple.make
      (i32.const -128)
      (i32.const -2047)
     )
=======
     (local.get $10)
>>>>>>> origin/tfr
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
<<<<<<< HEAD
  (tuple.make
   (i32.const 1920010597)
   (i32.const 75444786)
  )
 )
 (func $func_8 (result i64)
=======
  (block $label$0
   (call $log-f64
    (f64.const 624174625)
   )
   (i32.store8 offset=4
    (select
     (i32.const 100927600)
     (if (result i32)
      (i32.eqz
       (local.get $8)
      )
      (block $label$9 (result i32)
       (nop)
       (block $label$10 (result i32)
        (local.tee $8
         (local.get $8)
        )
       )
      )
      (i32.atomic.rmw8.cmpxchg_u offset=22
       (i32.and
        (tuple.extract 1
         (tuple.make
          (v128.const i32x4 0x49424347 0xffffffb1 0x00400000 0x1b10111c)
          (i32.const 3)
          (v128.const i32x4 0xbc0000ff 0xff1b7f1e 0x00ffbe00 0xff2e111f)
          (f32.const 2004552704)
          (v128.const i32x4 0x0000ffc7 0xffa9322a 0x0081fc01 0x04040505)
         )
        )
        (i32.const 15)
       )
       (local.get $8)
       (local.get $8)
      )
     )
     (local.get $8)
    )
    (local.get $8)
   )
   (return
    (ref.null any)
   )
  )
 )
 (func $func_5_invoker
  (drop
   (call $func_5
    (ref.null extern)
    (i64.const 65536)
    (ref.null func)
    (ref.null exn)
   )
  )
 )
 (func $func_6 (result exnref)
  (local $0 funcref)
  (local $1 externref)
  (local $2 (i64 i64))
>>>>>>> origin/tfr
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
<<<<<<< HEAD
     (i64.const 2147483647)
=======
     (ref.null exn)
>>>>>>> origin/tfr
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
<<<<<<< HEAD
  (return
   (i64.const -29)
  )
 )
 (func $func_9 (param $0 i64) (result f32)
  (local $1 i64)
  (local $2 exnref)
=======
  (ref.null exn)
 )
 (func $func_6_invoker
  (drop
   (call $func_6)
  )
 )
 (func $func_7 (result v128 f32)
  (local $0 anyref)
  (local $1 i64)
  (local $2 f64)
>>>>>>> origin/tfr
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
<<<<<<< HEAD
     (f32.const -9223372036854775808)
=======
     (tuple.make
      (v128.const i32x4 0x17090116 0x00000040 0xffff8000 0x00040000)
      (f32.const 9223372036854775808)
     )
>>>>>>> origin/tfr
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
<<<<<<< HEAD
  (block $label$0 (result f32)
   (call $log-i32
    (call $hashMemory)
   )
   (f32.convert_i64_s
    (i64.const -2097153)
   )
  )
 )
 (func $func_9_invoker
  (drop
   (call $func_9
    (i64.const 128)
   )
  )
 )
 (func $func_10 (param $0 i32) (param $1 funcref) (param $2 anyref) (param $3 i64) (result f32)
  (local $4 v128)
  (local $5 v128)
=======
  (tuple.make
   (v128.const i32x4 0xffffd396 0xc24fffff 0xff800000 0xc1dfffff)
   (f32.const 64)
  )
 )
 (func $func_7_invoker
  (drop
   (call $func_7)
  )
 )
 (func $func_8 (result funcref)
  (local $0 eqref)
>>>>>>> origin/tfr
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
<<<<<<< HEAD
     (f32.const 251)
=======
     (ref.null func)
>>>>>>> origin/tfr
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
<<<<<<< HEAD
  (block $label$0
   (drop
    (if (result i32)
     (i32.const 1195918659)
     (block $label$1 (result i32)
      (atomic.fence)
      (i64.ge_s
       (select
        (local.tee $3
         (local.get $3)
        )
        (i64.const -86)
        (tuple.extract 1
         (tuple.make
          (i64.const 0)
          (i32.const 511)
         )
        )
       )
       (i64.const 2573)
      )
     )
     (block $label$2 (result i32)
      (i32.load16_s offset=4
       (local.tee $0
        (local.tee $0
         (local.tee $0
          (ref.is_null
           (ref.null extern)
          )
         )
        )
       )
      )
     )
    )
   )
   (return
    (f32.const -67108864)
   )
  )
 )
 (func $func_10_invoker
  (drop
   (call $func_10
    (i32.const 6)
    (ref.null func)
    (ref.null any)
    (i64.const -1)
   )
  )
  (drop
   (call $func_10
    (i32.const 32767)
    (ref.null func)
    (ref.null any)
    (i64.const 7064463419371569412)
   )
  )
  (call $log-i32
   (call $hashMemory)
=======
  (block $label$0 (result (ref null (func (param funcref f64) (result i32))))
   (if
    (i32.eqz
     (global.get $global$_0)
    )
    (block $label$1
     (nop)
     (call $log-f32
      (f32.const 0)
     )
    )
    (call $func_4)
   )
   (ref.func $func_1)
  )
 )
 (func $func_8_invoker
  (drop
   (call $func_8)
  )
 )
 (func $func_9 (param $0 exnref) (param $1 exnref) (param $2 eqref) (param $3 anyref) (param $4 anyref) (param $5 exnref) (param $6 externref) (result i31ref)
  (local $7 i32)
  (local $8 (f32 i64))
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i31.new
      (i32.const -87)
     )
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (i31.new
   (i32.const 65535)
>>>>>>> origin/tfr
  )
 )
 (func $hangLimitInitializer
  (global.set $hangLimit
   (i32.const 10)
  )
 )
)
