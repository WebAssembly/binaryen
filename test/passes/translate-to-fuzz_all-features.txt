(module
 (type $none_=>_none (func))
 (type $funcref_f64_=>_i32 (func (param funcref f64) (result i32)))
 (type $none_=>_v128_f32 (func (result v128 f32)))
 (type $i32_=>_none (func (param i32)))
 (type $i64_=>_none (func (param i64)))
 (type $f32_=>_none (func (param f32)))
 (type $f64_=>_none (func (param f64)))
 (type $v128_=>_none (func (param v128)))
 (type $exnref_=>_none (func (param exnref)))
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_i32_f32_v128 (func (result i32 f32 v128)))
 (type $exnref_=>_i32_f32_v128 (func (param exnref) (result i32 f32 v128)))
 (type $anyref_anyref_externref_eqref_v128_=>_i64 (func (param anyref anyref externref eqref v128) (result i64)))
 (type $anyref_f32_funcref_=>_f32 (func (param anyref f32 funcref) (result f32)))
 (type $none_=>_funcref (func (result funcref)))
 (type $none_=>_exnref (func (result exnref)))
 (type $i31ref_v128_=>_exnref (func (param i31ref v128) (result exnref)))
 (type $externref_i64_funcref_exnref_=>_anyref (func (param externref i64 funcref exnref) (result anyref)))
 (type $exnref_exnref_eqref_anyref_anyref_exnref_externref_=>_i31ref (func (param exnref exnref eqref anyref anyref exnref externref) (result i31ref)))
 (import "fuzzing-support" "log-i32" (func $log-i32 (param i32)))
 (import "fuzzing-support" "log-i64" (func $log-i64 (param i64)))
 (import "fuzzing-support" "log-f32" (func $log-f32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $log-f64 (param f64)))
 (import "fuzzing-support" "log-v128" (func $log-v128 (param v128)))
 (import "fuzzing-support" "log-exnref" (func $log-exnref (param exnref)))
 (memory $0 (shared 16 17))
 (data (i32.const 0) "N\0fN\f5\f9\b1\ff\fa\eb\e5\fe\a7\ec\fb\fc\f4\a6\e4\ea\f0\ae\e3")
 (table $0 3 funcref)
 (elem (i32.const 0) $func_2 $func_2 $func_4)
 (global $global$ (mut eqref) (ref.null eq))
 (global $global$_0 (mut i32) (i32.const 470177031))
 (global $global$_1 (mut f64) (f64.const 2147483647))
 (global $global$_2 (mut (f32 i64)) (tuple.make
  (f32.const -2147483648)
  (i64.const -32)
 ))
 (global $global$_3 (mut f32) (f32.const -32769))
 (global $hangLimit (mut i32) (i32.const 10))
 (export "hashMemory" (func $hashMemory))
 (export "memory" (memory $0))
 (export "func" (func $func))
 (export "func_invoker" (func $func_invoker))
 (export "func_1_invoker" (func $func_1_invoker))
 (export "func_2" (func $func_2))
 (export "func_2_invoker" (func $func_2_invoker))
 (export "func_3" (func $func_3))
 (export "func_4_invoker" (func $func_4_invoker))
 (export "func_5" (func $func_5))
 (export "func_5_invoker" (func $func_5_invoker))
 (export "func_6_invoker" (func $func_6_invoker))
 (export "func_7_invoker" (func $func_7_invoker))
 (export "func_8_invoker" (func $func_8_invoker))
 (export "func_9" (func $func_9))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $hashMemory (result i32)
  (local $0 i32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i32.const 69)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block (result i32)
   (local.set $0
    (i32.const 5381)
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=1
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=2
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=3
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=4
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=5
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=6
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=7
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=8
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=9
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=10
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=11
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=12
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=13
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=14
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=15
      (i32.const 0)
     )
    )
   )
   (local.get $0)
  )
 )
 (func $func (param $0 i31ref) (param $1 v128) (result exnref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null exn)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (ref.null exn)
 )
 (func $func_invoker
  (drop
   (call $func
    (i31.new
     (i32.const 1633240409)
    )
    (v128.const i32x4 0xcf800000 0x4c816020 0x3e1a1a1a 0x00000000)
   )
  )
 )
 (func $func_0 (param $0 anyref) (param $1 anyref) (param $2 externref) (param $3 eqref) (param $4 v128) (result i64)
  (local $5 eqref)
  (local $6 (i32 f64 f32 i64))
  (local $7 (f32 i32 i32))
  (local $8 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i64.const 88)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result i64)
   (nop)
   (br_if $label$0
    (tuple.extract 1
     (tuple.make
      (f64.const -255)
      (i64.const -127)
     )
    )
    (i32.const -24)
   )
  )
 )
 (func $func_1 (param $0 funcref) (param $1 f64) (result i32)
  (local $2 anyref)
  (local $3 i64)
  (local $4 i32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $4)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (global.get $global$_0)
 )
 (func $func_1_invoker
  (drop
   (call $func_1
    (ref.null func)
    (f64.const 230)
   )
  )
  (drop
   (call $func_1
    (ref.null func)
    (f64.const -nan:0xfffffffffffcb)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_2 (param $0 exnref) (result i32 f32 v128)
  (local $1 (f64 f32))
  (local $2 i32)
  (local $3 i32)
  (local $4 eqref)
  (local $5 i32)
  (local $6 (f32 i64))
  (local $7 (v128 f64))
  (local $8 (v128 i64))
  (local $9 eqref)
  (local $10 i64)
  (local $11 anyref)
  (local $12 f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (tuple.make
      (i32.const -262144)
      (f32.const -nan:0x7ffff7)
      (v128.const i32x4 0x4e5489ae 0x323f3873 0x3528347c 0x42c00000)
     )
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (local.set $11
    (loop $label$1 (result anyref)
     (block
      (if
       (i32.eqz
        (global.get $hangLimit)
       )
       (return
        (tuple.make
         (i32.const -8192)
         (f32.const -nan:0x7ffff3)
         (v128.const i32x4 0xcf800000 0x47ffff80 0xce000000 0xbf5ae148)
        )
       )
      )
      (global.set $hangLimit
       (i32.sub
        (global.get $hangLimit)
        (i32.const 1)
       )
      )
     )
     (block $label$2 (result anyref)
      (atomic.fence)
      (local.get $11)
     )
    )
   )
   (return
    (tuple.make
     (i32.const -32769)
     (f32.const -nan:0x7ffff3)
     (v128.const i32x4 0x4a4a3428 0x80000000 0x5c081419 0xfffffff8)
    )
   )
  )
 )
 (func $func_2_invoker
  (drop
   (call $func_2
    (ref.null exn)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_2
    (ref.null exn)
   )
  )
  (drop
   (call $func_2
    (ref.null exn)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_2
    (ref.null exn)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_3 (param $0 anyref) (param $1 f32) (param $2 funcref) (result f32)
  (local $3 funcref)
  (local $4 funcref)
  (local $5 exnref)
  (local $6 (i64 i64))
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $1)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (call $log-i64
    (i64.atomic.load16_u offset=4
     (loop $label$1 (result i32)
      (block
       (if
        (i32.eqz
         (global.get $hangLimit)
        )
        (return
         (f32.const -9223372036854775808)
        )
       )
       (global.set $hangLimit
        (i32.sub
         (global.get $hangLimit)
         (i32.const 1)
        )
       )
      )
      (block (result i32)
       (block $label$2
        (nop)
       )
       (br_if $label$1
        (i32.eqz
         (call $func_1
          (block $label$8
           (nop)
           (return
            (local.get $1)
           )
          )
          (f64.const -86)
         )
        )
       )
       (call $func_1
        (ref.func $func_3)
        (f64.const -86)
       )
      )
     )
    )
   )
   (block $label$11
    (nop)
    (return
     (local.get $1)
    )
   )
  )
 )
 (func $func_4
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (nop)
   (atomic.fence)
  )
 )
 (func $func_4_invoker
  (call $func_4)
  (call $log-i32
   (call $hashMemory)
  )
  (call $func_4)
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_5 (param $0 externref) (param $1 i64) (param $2 funcref) (param $3 exnref) (result anyref)
  (local $4 eqref)
  (local $5 v128)
  (local $6 eqref)
  (local $7 eqref)
  (local $8 i32)
  (local $9 (f32 i64))
  (local $10 anyref)
  (local $11 i64)
  (local $12 funcref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $10)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (call $log-f64
    (f64.const 624174625)
   )
   (i32.store8 offset=4
    (select
     (i32.const 100927600)
     (if (result i32)
      (i32.eqz
       (local.get $8)
      )
      (block $label$9 (result i32)
       (nop)
       (block $label$10 (result i32)
        (local.tee $8
         (local.get $8)
        )
       )
      )
      (i32.atomic.rmw8.cmpxchg_u offset=22
       (i32.and
        (tuple.extract 1
         (tuple.make
          (v128.const i32x4 0x49424347 0xffffffb1 0x00400000 0x1b10111c)
          (i32.const 3)
          (v128.const i32x4 0xbc0000ff 0xff1b7f1e 0x00ffbe00 0xff2e111f)
          (f32.const 2004552704)
          (v128.const i32x4 0x0000ffc7 0xffa9322a 0x0081fc01 0x04040505)
         )
        )
        (i32.const 15)
       )
       (local.get $8)
       (local.get $8)
      )
     )
     (local.get $8)
    )
    (local.get $8)
   )
   (return
    (ref.null any)
   )
  )
 )
 (func $func_5_invoker
  (drop
   (call $func_5
    (ref.null extern)
    (i64.const 65536)
    (ref.null func)
    (ref.null exn)
   )
  )
 )
 (func $func_6 (result exnref)
  (local $0 funcref)
  (local $1 externref)
  (local $2 (i64 i64))
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null exn)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (ref.null exn)
 )
 (func $func_6_invoker
  (drop
   (call $func_6)
  )
 )
 (func $func_7 (result v128 f32)
  (local $0 anyref)
  (local $1 i64)
  (local $2 f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (tuple.make
      (v128.const i32x4 0x17090116 0x00000040 0xffff8000 0x00040000)
      (f32.const 9223372036854775808)
     )
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (tuple.make
   (v128.const i32x4 0xffffd396 0xc24fffff 0xff800000 0xc1dfffff)
   (f32.const 64)
  )
 )
 (func $func_7_invoker
  (drop
   (call $func_7)
  )
 )
 (func $func_8 (result funcref)
  (local $0 eqref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null func)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result (ref null (func (param funcref f64) (result i32))))
   (if
    (i32.eqz
     (global.get $global$_0)
    )
    (block $label$1
     (nop)
     (call $log-f32
      (f32.const 0)
     )
    )
    (call $func_4)
   )
   (ref.func $func_1)
  )
 )
 (func $func_8_invoker
  (drop
   (call $func_8)
  )
 )
 (func $func_9 (param $0 exnref) (param $1 exnref) (param $2 eqref) (param $3 anyref) (param $4 anyref) (param $5 exnref) (param $6 externref) (result i31ref)
  (local $7 i32)
  (local $8 (f32 i64))
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i31.new
      (i32.const -87)
     )
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (i31.new
   (i32.const 65535)
  )
 )
 (func $hangLimitInitializer
  (global.set $hangLimit
   (i32.const 10)
  )
 )
)
