(module
 (type $none_=>_none (func))
 (type $none_=>_f32_f32_f64_f64 (func (result f32 f32 f64 f64)))
 (type $none_=>_externref_i32_eqref_anyref_i32 (func (result externref i32 eqref anyref i32)))
 (type $none_=>_funcref_f64_f32_externref_eqref_i31ref (func (result funcref f64 f32 externref eqref i31ref)))
 (type $none_=>_exnref (func (result exnref)))
 (type $i32_=>_none (func (param i32)))
 (type $i64_=>_none (func (param i64)))
 (type $f32_=>_none (func (param f32)))
 (type $f64_=>_none (func (param f64)))
 (type $v128_=>_none (func (param v128)))
 (type $funcref_=>_none (func (param funcref)))
 (type $exnref_=>_none (func (param exnref)))
 (type $anyref_=>_none (func (param anyref)))
 (type $none_=>_i32 (func (result i32)))
 (type $f32_=>_i32 (func (param f32) (result i32)))
 (type $anyref_anyref_externref_eqref_v128_=>_i64 (func (param anyref anyref externref eqref v128) (result i64)))
 (type $exnref_eqref_f64_=>_v128 (func (param exnref eqref f64) (result v128)))
 (type $externref_funcref_funcref_=>_externref_i32_eqref_anyref_i32 (func (param externref funcref funcref) (result externref i32 eqref anyref i32)))
 (type $i31ref_v128_=>_exnref (func (param i31ref v128) (result exnref)))
 (type $i31ref_externref_v128_f32_f32_=>_eqref (func (param i31ref externref v128 f32 f32) (result eqref)))
 (type $i31ref_anyref_i64_f32_=>_eqref (func (param i31ref anyref i64 f32) (result eqref)))
 (import "fuzzing-support" "log-i32" (func $log-i32 (param i32)))
 (import "fuzzing-support" "log-i64" (func $log-i64 (param i64)))
 (import "fuzzing-support" "log-f32" (func $log-f32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $log-f64 (param f64)))
 (import "fuzzing-support" "log-v128" (func $log-v128 (param v128)))
 (import "fuzzing-support" "log-exnref" (func $log-exnref (param exnref)))
 (memory $0 (shared 16 17))
 (data (i32.const 0) "N\0fN\f5\f9\b1\ff\fa\eb\e5\fe\a7\ec\fb\fc\f4\a6\e4\ea\f0\ae\e3")
 (table $0 7 7 funcref)
 (elem (i32.const 0) $func_1 $func_1 $func_1 $func_2 $func_2 $func_2 $func_10)
 (global $global$ (mut eqref) (ref.null eq))
 (global $global$_0 (mut i32) (i32.const 470177031))
 (global $global$_1 (mut f64) (f64.const 2147483647))
 (global $global$_2 (mut (eqref f32 eqref funcref funcref i64)) (tuple.make
  (ref.null eq)
  (f32.const -2147483648)
  (ref.null eq)
  (ref.null func)
  (ref.null func)
  (i64.const -32)
 ))
 (global $global$_3 (mut f32) (f32.const -32769))
 (global $hangLimit (mut i32) (i32.const 10))
 (export "hashMemory" (func $hashMemory))
 (export "memory" (memory $0))
 (export "func" (func $func))
 (export "func_invoker" (func $func_invoker))
 (export "func_1_invoker" (func $func_1_invoker))
 (export "func_3" (func $func_3))
 (export "func_7" (func $func_7))
 (export "func_7_invoker" (func $func_7_invoker))
 (export "func_8_invoker" (func $func_8_invoker))
 (export "func_9" (func $func_9))
 (export "func_10_invoker" (func $func_10_invoker))
 (export "func_11" (func $func_11))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $hashMemory (result i32)
  (local $0 i32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i32.const 69)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block (result i32)
   (local.set $0
    (i32.const 5381)
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=1
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=2
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=3
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=4
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=5
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=6
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=7
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=8
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=9
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=10
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=11
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=12
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=13
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=14
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=15
      (i32.const 0)
     )
    )
   )
   (local.get $0)
  )
 )
 (func $func (param $0 i31ref) (param $1 v128) (result exnref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null exn)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (ref.null exn)
 )
 (func $func_invoker
  (drop
   (call $func
    (i31.new
     (i32.const 1633240409)
    )
    (v128.const i32x4 0xcf800000 0x4c816020 0x3e1a1a1a 0x00000000)
   )
  )
 )
 (func $func_0 (param $0 anyref) (param $1 anyref) (param $2 externref) (param $3 eqref) (param $4 v128) (result i64)
  (local $5 eqref)
  (local $6 (funcref externref i32 f64 f32 i64))
  (local $7 (f32 funcref eqref i32 i31ref i32))
  (local $8 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i64.const 2147483647)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result i64)
   (nop)
   (br_if $label$0
    (tuple.extract 1
     (tuple.make
      (f64.const -255)
      (i64.const -127)
      (ref.null func)
     )
    )
    (i32.const -24)
   )
  )
 )
 (func $func_1 (param $0 i31ref) (param $1 externref) (param $2 v128) (param $3 f32) (param $4 f32) (result eqref)
  (local $5 v128)
  (local $6 (exnref externref i64 i32 f64 funcref))
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null eq)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (ref.null eq)
 )
 (func $func_1_invoker
  (drop
   (call $func_1
    (i31.new
     (i32.const 16777216)
    )
    (ref.null extern)
    (v128.const i32x4 0x5d455846 0xcf800000 0x42aa0000 0x46b2a800)
    (f32.const -17592186044416)
    (f32.const -4294967296)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_1
    (i31.new
     (i32.const 73)
    )
    (ref.null extern)
    (v128.const i32x4 0xffff8001 0xffffffff 0x184c764c 0x10105676)
    (f32.const -9223372036854775808)
    (f32.const 129)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_1
    (i31.new
     (i32.const -4096)
    )
    (ref.null extern)
    (v128.const i32x4 0x00000000 0x00000020 0x00000001 0xffc00000)
    (f32.const -nan:0x7fffbd)
    (f32.const -255.8040008544922)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_1
    (i31.new
     (i32.const 1936946035)
    )
    (ref.null extern)
    (v128.const i32x4 0xff010001 0x4e07ffff 0x00060002 0xff00001f)
    (f32.const 6918)
    (f32.const 4.921484278772694e-25)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_2 (param $0 funcref)
  (local $1 exnref)
  (local $2 (f64 externref f32 f32 v128 eqref))
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (f32.store offset=3 align=1
    (i32.const -20)
    (f32.const 36)
   )
   (return)
  )
 )
 (func $func_3 (result exnref)
  (local $0 f32)
  (local $1 i64)
  (local $2 i32)
  (local $3 eqref)
  (local $4 i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null exn)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (ref.null exn)
 )
 (func $func_4 (result exnref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null exn)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (data.drop 0)
   (return
    (ref.null exn)
   )
  )
 )
 (func $func_5 (param $0 exnref) (param $1 eqref) (param $2 f64) (result v128)
  (local $3 (v128 i32 anyref))
  (local $4 v128)
  (local $5 i31ref)
  (local $6 funcref)
  (local $7 f64)
  (local $8 f64)
  (local $9 (i64 i31ref funcref exnref f64 externref))
  (local $10 f64)
  (local $11 exnref)
  (local $12 (externref f64 f32 eqref anyref))
  (local $13 (v128 f64 i32 i32))
  (local $14 f32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $4)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (v128.const i32x4 0x80000000 0x4c151047 0x52800000 0x5b000000)
 )
 (func $func_6 (result f32 f32 f64 f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (tuple.make
      (f32.const -8388607)
      (f32.const -9223372036854775808)
      (f64.const 8.62248395826114e-294)
      (f64.const 3402823466385288598117041e14)
     )
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result f32 f32 f64 f64)
   (f32.store offset=4 align=2
    (i32.and
     (ref.is_null
      (ref.null exn)
     )
     (i32.const 15)
    )
    (block $label$1
     (nop)
     (return
      (tuple.make
       (f32.const -9223372036854775808)
       (f32.const -nan:0x7fffbf)
       (f64.const 380367940641150145903286e36)
       (f64.const -nan:0xfffffffffffbb)
      )
     )
    )
   )
   (tuple.make
    (f32.const -nan:0x7fff9c)
    (f32.const 140737488355328)
    (f64.const 1797693134862315708145274e284)
    (f64.const 1.509061805531234e-47)
   )
  )
 )
 (func $func_7 (param $0 i31ref) (param $1 anyref) (param $2 i64) (param $3 f32) (result eqref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null eq)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (global.get $global$)
 )
 (func $func_7_invoker
  (drop
   (call $func_7
    (i31.new
     (i32.const 15426)
    )
    (ref.null any)
    (i64.const -128)
    (f32.const -0.1850000023841858)
   )
  )
  (drop
   (call $func_7
    (i31.new
     (i32.const 33554433)
    )
    (ref.null any)
    (i64.const -32768)
    (f32.const 2147483648)
   )
  )
  (drop
   (call $func_7
    (i31.new
     (i32.const -17)
    )
    (ref.null any)
    (i64.const -27)
    (f32.const -34359738368)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_7
    (i31.new
     (i32.const 32767)
    )
    (ref.null any)
    (i64.const 32769)
    (f32.const 10598)
   )
  )
 )
 (func $func_8 (param $0 anyref)
  (local $1 v128)
  (local $2 f64)
  (local $3 funcref)
  (local $4 (i32 v128 anyref anyref eqref anyref))
  (local $5 (f64 i64 f32))
  (local $6 (eqref eqref eqref f64))
  (local $7 f64)
  (local $8 v128)
  (local $9 externref)
  (local $10 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (local.set $7
   (f64.const 2)
  )
 )
 (func $func_8_invoker
  (call $func_8
   (ref.null any)
  )
  (call $log-i32
   (call $hashMemory)
  )
  (call $func_8
   (ref.null any)
  )
 )
 (func $func_9 (param $0 f32) (result i32)
  (local $1 funcref)
  (local $2 (funcref eqref funcref f64))
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i32.const -67108863)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (if (result i32)
   (i32.const 255)
   (block $label$0 (result i32)
    (call $log-exnref
     (tuple.extract 0
      (block $label$1
       (nop)
       (return
        (i32.const 8388609)
       )
      )
     )
    )
    (ref.is_null
     (ref.null extern)
    )
   )
   (if (result i32)
    (i32.const 255)
    (i32.const 2147483647)
    (block $label$2 (result i32)
     (nop)
     (i32.const 128)
    )
   )
  )
 )
 (func $func_10 (param $0 externref) (param $1 funcref) (param $2 funcref) (result externref i32 eqref anyref i32)
  (local $3 i32)
  (local $4 eqref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (tuple.make
      (ref.null extern)
      (i32.const 513)
      (ref.null eq)
      (ref.null any)
      (i32.const -32767)
     )
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result externref i32 eqref anyref i32)
   (call $log-i32
    (i32.const -4097)
   )
   (if (result externref i32 eqref anyref i32)
    (i32.eqz
     (local.get $3)
    )
    (tuple.make
     (ref.null extern)
     (i32.const -4097)
     (ref.null eq)
     (ref.null any)
     (i32.const -536870913)
    )
    (br_if $label$0
     (tuple.make
      (ref.null extern)
      (i32.const -4097)
      (ref.null eq)
      (ref.null any)
      (i32.const 1048577)
     )
     (block $label$5 (result i32)
      (call $log-i32
       (call $hashMemory)
      )
      (br_if $label$5
       (local.get $3)
       (block $label$6 (result i32)
        (call $log-i32
         (i32.load8_s offset=3
          (i32.and
           (i32.const 520948998)
           (i32.const 15)
          )
         )
        )
        (i32.const 7944)
       )
      )
     )
    )
   )
  )
 )
 (func $func_10_invoker
  (drop
   (call $func_10
    (ref.null extern)
    (ref.null func)
    (ref.null func)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_11 (result funcref f64 f32 externref eqref i31ref)
  (local $0 i64)
  (local $1 i32)
  (local $2 i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (tuple.make
      (ref.null func)
      (f64.const -0.964)
      (f32.const 6.6473162287764e-33)
      (ref.null extern)
      (ref.null eq)
      (i31.new
       (i32.const 0)
      )
     )
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (if
    (i32.eqz
     (i64.le_s
      (i64.const 140737488355328)
      (i64.const 140737488355328)
     )
    )
    (nop)
    (block $label$1
     (nop)
    )
   )
   (return
    (tuple.make
     (ref.func $log-i32)
     (f64.const 1314734410)
     (f32.const 1.0000008344650269)
     (ref.null extern)
     (ref.null eq)
     (i31.new
      (i32.const 235407412)
     )
    )
   )
  )
 )
 (func $hangLimitInitializer
  (global.set $hangLimit
   (i32.const 10)
  )
 )
)
