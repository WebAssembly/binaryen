(module
 (type $FUNCSIG$i (func (result i32)))
 (type $FUNCSIG$vi (func (param i32)))
 (type $FUNCSIG$vj (func (param i64)))
 (type $FUNCSIG$vf (func (param f32)))
 (type $FUNCSIG$vd (func (param f64)))
 (type $FUNCSIG$vV (func (param v128)))
 (type $FUNCSIG$v (func))
 (type $FUNCSIG$V (func (result v128)))
 (type $FUNCSIG$fiff (func (param i32 f32 f32) (result f32)))
 (type $FUNCSIG$ddfff (func (param f64 f32 f32 f32) (result f64)))
 (type $FUNCSIG$fiV (func (param i32 v128) (result f32)))
 (import "fuzzing-support" "log-i32" (func $log-i32 (param i32)))
 (import "fuzzing-support" "log-i64" (func $log-i64 (param i64)))
 (import "fuzzing-support" "log-f32" (func $log-f32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $log-f64 (param f64)))
 (import "fuzzing-support" "log-v128" (func $log-v128 (param v128)))
 (memory $0 (shared 1 1))
 (data (i32.const 0) "N\0fN\f5\f9\b1\ff\fa\eb\e5\fe\a7\ec\fb\fc\f4\a6\e4\ea\f0\ae\e3")
 (table $0 4 4 funcref)
 (elem (i32.const 0) $func_6 $func_6 $func_17 $func_17)
 (global $global$0 (mut i32) (i32.const 975663930))
 (global $global$1 (mut i32) (i32.const 2066300474))
 (global $global$2 (mut i64) (i64.const 20510))
 (global $global$3 (mut f32) (f32.const -2147483648))
 (global $global$4 (mut v128) (v128.const i32x4 0x7f002833 0x580000fe 0x59750500 0x01ff002f))
 (global $hangLimit (mut i32) (i32.const 10))
 (event $event$0 (attr 0) (param f64 f32))
 (export "hashMemory" (func $hashMemory))
 (export "memory" (memory $0))
 (export "func_7_invoker" (func $func_7_invoker))
 (export "func_9_invoker" (func $func_9_invoker))
 (export "func_11" (func $func_11))
 (export "func_12" (func $func_12))
 (export "func_14" (func $func_14))
 (export "func_15" (func $func_15))
 (export "func_15_invoker" (func $func_15_invoker))
 (export "func_17" (func $func_17))
 (export "func_17_invoker" (func $func_17_invoker))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $hashMemory (; 5 ;) (type $FUNCSIG$i) (result i32)
  (local $0 i32)
  (local.set $0
   (i32.const 5381)
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=1
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=2
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=3
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=4
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=5
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=6
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=7
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=8
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=9
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=10
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=11
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=12
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=13
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=14
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=15
     (i32.const 0)
    )
   )
  )
  (local.get $0)
 )
 (func $func_6 (; 6 ;) (param $0 i64) (param $1 v128) (param $2 i64) (result f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f64.const 4.615318461355401e-04)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (if
    (if
     (i32.eqz
      (i32.atomic.load8_u offset=4
       (i32.and
        (i32.const 6401)
        (i32.const 15)
       )
      )
     )
     (block $label$1
      (block $label$2
       (nop)
       (nop)
      )
      (return
       (f64.const -4294967295)
      )
     )
     (block $label$3
      (nop)
      (return
       (f64.const 16970)
      )
     )
    )
    (block $label$4
     (br_if $label$4
      (i32.eqz
       (i32.const 26420)
      )
     )
     (nop)
    )
    (block $label$5
     (nop)
     (nop)
    )
   )
   (return
    (f64.const -1.1754943508222875e-38)
   )
  )
 )
 (func $func_7 (; 7 ;) (param $0 i32) (result v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (v128.const i32x4 0x06800018 0x000017ff 0xde018aa0 0x71680e30)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (v128.const i32x4 0x43770000 0x5e0d1b1b 0xffffffbb 0xffffffe5)
 )
 (func $func_7_invoker (; 8 ;) (type $FUNCSIG$v)
  (drop
   (call $func_7
    (i32.const 0)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_7
    (i32.const 0)
   )
  )
  (drop
   (call $func_7
    (i32.const -33554432)
   )
  )
 )
 (func $func_9 (; 9 ;) (param $0 v128) (param $1 f32) (param $2 f32) (result i64)
  (local $3 i64)
  (local $4 v128)
  (local $5 i64)
  (local $6 i32)
  (local $7 i32)
  (local $8 i64)
  (local $9 f32)
  (local $10 i64)
  (local $11 f64)
  (local $12 i32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $10)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (call $log-i32
    (call $hashMemory)
   )
   (return
    (i64.const -16777216)
   )
  )
 )
 (func $func_9_invoker (; 10 ;) (type $FUNCSIG$v)
  (drop
   (call $func_9
    (v128.const i32x4 0xffb61517 0xffff8000 0xf000160f 0x0100007f)
    (f32.const -4294967296)
    (f32.const 358374752)
   )
  )
  (drop
   (call $func_9
    (v128.const i32x4 0x00000000 0xc0d00000 0x00000000 0x401c0000)
    (f32.const 5681)
    (f32.const 268435456)
   )
  )
  (drop
   (call $func_9
    (v128.const i32x4 0x00040000 0x00000000 0x00006869 0x00000000)
    (f32.const -3402823466385288598117041e14)
    (f32.const 2147483648)
   )
  )
  (drop
   (call $func_9
    (v128.const i32x4 0x00307f00 0x00bd6300 0x7809001d 0x01803c00)
    (f32.const 25703)
    (f32.const -4503599627370496)
   )
  )
 )
 (func $func_11 (; 11 ;) (type $FUNCSIG$V) (result v128)
  (local $0 i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (v128.const i32x4 0x00002342 0x01e864ff 0xe203e043 0xe2fe3408)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (v128.const i32x4 0x00000b05 0x80000001 0x0000007f 0x00000b0b)
 )
 (func $func_12 (; 12 ;) (type $FUNCSIG$fiff) (param $0 i32) (param $1 f32) (param $2 f32) (result f32)
  (local $3 f32)
  (local $4 i64)
  (local $5 i64)
  (local $6 v128)
  (local $7 i32)
  (local $8 f32)
  (local $9 f32)
  (local $10 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $9)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result f32)
   (nop)
   (loop $label$25 (result f32)
    (block
     (if
      (i32.eqz
       (global.get $hangLimit)
      )
      (return
       (local.get $9)
      )
     )
     (global.set $hangLimit
      (i32.sub
       (global.get $hangLimit)
       (i32.const 1)
      )
     )
    )
    (local.tee $8
     (block $label$26 (result f32)
      (local.tee $1
       (f32.const 1.1446596105595402e-28)
      )
     )
    )
   )
  )
 )
 (func $func_13 (; 13 ;) (result i64)
  (local $0 i32)
  (local $1 v128)
  (local $2 i64)
  (local $3 v128)
  (local $4 f64)
  (local $5 f32)
  (local $6 i64)
  (local $7 i64)
  (local $8 f64)
  (local $9 i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i64.const -2)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (local.set $0
    (block $label$1 (result i32)
     (local.set $0
      (loop $label$2 (result i32)
       (block
        (if
         (i32.eqz
          (global.get $hangLimit)
         )
         (return
          (local.get $6)
         )
        )
        (global.set $hangLimit
         (i32.sub
          (global.get $hangLimit)
          (i32.const 1)
         )
        )
       )
       (block (result i32)
        (block $label$3
         (local.set $5
          (loop $label$4 (result f32)
           (block
            (if
             (i32.eqz
              (global.get $hangLimit)
             )
             (return
              (local.get $6)
             )
            )
            (global.set $hangLimit
             (i32.sub
              (global.get $hangLimit)
              (i32.const 1)
             )
            )
           )
           (local.get $5)
          )
         )
         (br_if $label$2
          (i32.eqz
           (local.tee $0
            (local.tee $0
             (local.tee $0
              (loop $label$8 (result i32)
               (block
                (if
                 (i32.eqz
                  (global.get $hangLimit)
                 )
                 (return
                  (i64.const -49)
                 )
                )
                (global.set $hangLimit
                 (i32.sub
                  (global.get $hangLimit)
                  (i32.const 1)
                 )
                )
               )
               (block $label$9 (result i32)
                (local.set $0
                 (if (result i32)
                  (i32.eqz
                   (br_if $label$1
                    (local.get $0)
                    (i32.const 336817427)
                   )
                  )
                  (block $label$10
                   (call $log-f32
                    (local.get $5)
                   )
                   (br $label$8)
                  )
                  (local.tee $0
                   (i32.const -2147483648)
                  )
                 )
                )
                (i32.const 32767)
               )
              )
             )
            )
           )
          )
         )
        )
        (br_if $label$2
         (local.tee $0
          (local.tee $0
           (local.tee $0
            (local.tee $0
             (i32.atomic.load offset=4
              (i32.and
               (local.get $0)
               (i32.const 15)
              )
             )
            )
           )
          )
         )
        )
        (local.tee $0
         (local.tee $0
          (local.tee $0
           (local.tee $0
            (local.tee $0
             (local.tee $0
              (local.tee $0
               (local.tee $0
                (i32.atomic.load offset=4
                 (i32.and
                  (i32.and
                   (local.get $0)
                   (i32.const 15)
                  )
                  (i32.const 15)
                 )
                )
               )
              )
             )
            )
           )
          )
         )
        )
       )
      )
     )
     (return
      (local.get $6)
     )
    )
   )
   (return
    (local.get $9)
   )
  )
 )
 (func $func_14 (; 14 ;) (type $FUNCSIG$ddfff) (param $0 f64) (param $1 f32) (param $2 f32) (param $3 f32) (result f64)
  (local $4 i64)
  (local $5 i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $0)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result f64)
   (nop)
   (local.get $0)
  )
 )
 (func $func_15 (; 15 ;) (type $FUNCSIG$fiV) (param $0 i32) (param $1 v128) (result f32)
  (local $2 v128)
  (local $3 f32)
  (local $4 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $3)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (nop)
   (return
    (f32.const 1414878976)
   )
  )
 )
 (func $func_15_invoker (; 16 ;) (type $FUNCSIG$v)
  (drop
   (call $func_15
    (i32.const -66)
    (v128.const i32x4 0x1f1f151f 0x261e021e 0x00000000 0xc0300000)
   )
  )
 )
 (func $func_17 (; 17 ;) (type $FUNCSIG$i) (result i32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i32.const 1349680251)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (loop $label$1
    (block
     (if
      (i32.eqz
       (global.get $hangLimit)
      )
      (return
       (i32.const 268435456)
      )
     )
     (global.set $hangLimit
      (i32.sub
       (global.get $hangLimit)
       (i32.const 1)
      )
     )
    )
    (block
     (br_if $label$1
      (i32.eqz
       (i32.const 2097152)
      )
     )
     (nop)
     (if
      (i32.eqz
       (i32.eqz
        (i32.const 67372064)
       )
      )
      (block $label$2
       (nop)
       (br_if $label$1
        (i32.eqz
         (i32.const 2097152)
        )
       )
      )
      (if
       (i32.eqz
        (i32.const 925712176)
       )
       (block $label$3
        (loop $label$4
         (block
          (if
           (i32.eqz
            (global.get $hangLimit)
           )
           (return
            (i32.const -67108864)
           )
          )
          (global.set $hangLimit
           (i32.sub
            (global.get $hangLimit)
            (i32.const 1)
           )
          )
         )
         (block
          (nop)
          (br_if $label$4
           (i32.eqz
            (i32.const -17)
           )
          )
          (br_if $label$1
           (i32.eqz
            (i32.const 2097152)
           )
          )
         )
        )
       )
       (br_if $label$1
        (i32.eqz
         (i32.const 2097152)
        )
       )
      )
     )
    )
   )
   (return
    (i32.const 110)
   )
  )
 )
 (func $func_17_invoker (; 18 ;) (type $FUNCSIG$v)
  (drop
   (call $func_17)
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_19 (; 19 ;) (param $0 f32) (result f64)
  (local $1 v128)
  (local $2 i64)
  (local $3 i64)
  (local $4 f64)
  (local $5 f32)
  (local $6 v128)
  (local $7 i32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $4)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result f64)
   (if (result f64)
    (i32.eqz
     (i32x4.extract_lane 1
      (block $label$1 (result v128)
       (call $log-i64
        (i64.const 2)
       )
       (local.tee $6
        (local.tee $1
         (v128.const i32x4 0x00000000 0x40b13f00 0x00000000 0x42c00000)
        )
       )
      )
     )
    )
    (block $label$2 (result f64)
     (block $label$3
      (call $log-v128
       (loop $label$4 (result v128)
        (block
         (if
          (i32.eqz
           (global.get $hangLimit)
          )
          (return
           (f64.const -17592186044416)
          )
         )
         (global.set $hangLimit
          (i32.sub
           (global.get $hangLimit)
           (i32.const 1)
          )
         )
        )
        (block (result v128)
         (call $log-i32
          (call $hashMemory)
         )
         (br_if $label$4
          (local.tee $7
           (block $label$5 (result i32)
            (call $log-f32
             (local.tee $5
              (loop $label$6 (result f32)
               (block
                (if
                 (i32.eqz
                  (global.get $hangLimit)
                 )
                 (return
                  (local.get $4)
                 )
                )
                (global.set $hangLimit
                 (i32.sub
                  (global.get $hangLimit)
                  (i32.const 1)
                 )
                )
               )
               (local.tee $0
                (local.tee $5
                 (local.get $5)
                )
               )
              )
             )
            )
            (i32.const -128)
           )
          )
         )
         (local.get $1)
        )
       )
      )
      (nop)
     )
     (f64.const -131072)
    )
    (block $label$7 (result f64)
     (local.get $4)
    )
   )
  )
 )
 (func $hangLimitInitializer (; 20 ;)
  (global.set $hangLimit
   (i32.const 10)
  )
 )
)
