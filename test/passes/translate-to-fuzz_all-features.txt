(module
 (type $FUNCSIG$i (func (result i32)))
 (type $FUNCSIG$vifidi (func (param i32 f32 i32 f64 i32)))
 (type $FUNCSIG$vi (func (param i32)))
 (type $FUNCSIG$vj (func (param i64)))
 (type $FUNCSIG$vf (func (param f32)))
 (type $FUNCSIG$vd (func (param f64)))
 (import "fuzzing-support" "log-i32" (func $log-i32 (param i32)))
 (import "fuzzing-support" "log-i64" (func $log-i64 (param i64)))
 (import "fuzzing-support" "log-f32" (func $log-f32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $log-f64 (param f64)))
 (memory $0 (shared 1 1))
 (data (i32.const 0) "N\0fN\f5\f9\b1\ff\fa\eb\e5\fe\a7\ec\fb\fc\f4\a6\e4\ea\f0\ae\e3")
 (table $0 3 3 funcref)
 (elem (i32.const 0) $func_5 $func_5 $func_5)
 (global $global$0 (mut i32) (i32.const 975663930))
 (global $global$1 (mut i32) (i32.const 2066300474))
 (global $global$2 (mut i64) (i64.const 20510))
 (global $global$3 (mut f32) (f32.const -2147483648))
 (global $hangLimit (mut i32) (i32.const 10))
 (event $event$0 (attr 0) (param i32 f32 i32 f64 i32))
 (export "hashMemory" (func $hashMemory))
 (export "memory" (memory $0))
 (export "func_5" (func $func_5))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $hashMemory (; 4 ;) (type $FUNCSIG$i) (result i32)
  (local $0 i32)
  (local.set $0
   (i32.const 5381)
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=1
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=2
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=3
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=4
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=5
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=6
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=7
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=8
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=9
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=10
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=11
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=12
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=13
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=14
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=15
     (i32.const 0)
    )
   )
  )
  (local.get $0)
 )
 (func $func_5 (; 5 ;) (type $FUNCSIG$vj) (param $0 i64)
  (local $1 f64)
  (local $2 i32)
  (local $3 i64)
  (local $4 v128)
  (local $5 f32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (br_if $label$0
    (i32.const 1376786182)
   )
   (local.set $4
    (v128.const i32x4 0x0e0a0e0d 0x0709060c 0x764b6f6f 0x00040000)
   )
   (local.set $4
    (if (result v128)
     (i32.eqz
      (if (result i32)
       (if (result i32)
        (i32.eqz
         (if (result i32)
          (i32.eqz
           (if
            (i32.const 1329942351)
            (local.tee $2
             (local.tee $2
              (loop $label$38
               (block
                (if
                 (i32.eqz
                  (global.get $hangLimit)
                 )
                 (return)
                )
                (global.set $hangLimit
                 (i32.sub
                  (global.get $hangLimit)
                  (i32.const 1)
                 )
                )
               )
               (if
                (i32.eqz
                 (local.get $2)
                )
                (block $label$39
                 (nop)
                 (br $label$0)
                )
                (block $label$40
                 (local.set $4
                  (v128.const i32x4 0x05050505 0x46190000 0xc6800000 0x4a031a19)
                 )
                 (br $label$0)
                )
               )
              )
             )
            )
            (block $label$41
             (nop)
             (br $label$0)
            )
           )
          )
          (local.get $2)
          (local.get $2)
         )
        )
        (block $label$47
         (local.set $2
          (local.get $2)
         )
         (br $label$0)
        )
        (block $label$48 (result i32)
         (loop $label$49
          (block
           (if
            (i32.eqz
             (global.get $hangLimit)
            )
            (return)
           )
           (global.set $hangLimit
            (i32.sub
             (global.get $hangLimit)
             (i32.const 1)
            )
           )
          )
          (block
           (local.set $5
            (f32.const 9.625223197211503e-38)
           )
           (br_if $label$49
            (if (result i32)
             (block $label$57
              (local.set $5
               (local.tee $5
                (block $label$58 (result f32)
                 (local.set $4
                  (local.get $4)
                 )
                 (local.get $5)
                )
               )
              )
              (br $label$0)
             )
             (if (result i32)
              (i32.const 1376786182)
              (block $label$60
               (if
                (block $label$61 (result i32)
                 (i32.const 925442358)
                )
                (block $label$62
                 (br_if $label$62
                  (i32.const 256)
                 )
                )
                (block $label$63
                 (if
                  (local.get $2)
                  (local.set $1
                   (local.get $1)
                  )
                  (block $label$67
                   (if
                    (i32.eqz
                     (i32.const 0)
                    )
                    (block $label$68
                     (local.set $1
                      (local.get $1)
                     )
                     (block $label$69
                      (nop)
                      (local.set $4
                       (local.get $4)
                      )
                     )
                    )
                    (if
                     (i32.eqz
                      (br_if $label$48
                       (i32.const 32768)
                       (local.get $2)
                      )
                     )
                     (local.set $4
                      (v128.const i32x4 0xffffff81 0xffffffeb 0x80000000 0x74273131)
                     )
                     (local.set $2
                      (local.get $2)
                     )
                    )
                   )
                   (local.set $0
                    (i64.const -2097152)
                   )
                  )
                 )
                 (local.set $1
                  (local.get $1)
                 )
                )
               )
               (br $label$0)
              )
              (block $label$70 (result i32)
               (loop $label$71 (result i32)
                (block
                 (if
                  (i32.eqz
                   (global.get $hangLimit)
                  )
                  (return)
                 )
                 (global.set $hangLimit
                  (i32.sub
                   (global.get $hangLimit)
                   (i32.const 1)
                  )
                 )
                )
                (block (result i32)
                 (loop $label$72
                  (block
                   (if
                    (i32.eqz
                     (global.get $hangLimit)
                    )
                    (return)
                   )
                   (global.set $hangLimit
                    (i32.sub
                     (global.get $hangLimit)
                     (i32.const 1)
                    )
                   )
                  )
                  (local.set $4
                   (local.tee $4
                    (local.get $4)
                   )
                  )
                 )
                 (br_if $label$71
                  (i32.eqz
                   (loop $label$73
                    (block
                     (if
                      (i32.eqz
                       (global.get $hangLimit)
                      )
                      (return)
                     )
                     (global.set $hangLimit
                      (i32.sub
                       (global.get $hangLimit)
                       (i32.const 1)
                      )
                     )
                    )
                    (block $label$74
                     (local.set $4
                      (v128.const i32x4 0xf8f8ff00 0x000000a5 0x0000000e 0xffff00ff)
                     )
                     (br $label$73)
                    )
                   )
                  )
                 )
                 (i32.const -131072)
                )
               )
              )
             )
             (if (result i32)
              (local.get $2)
              (block $label$75
               (call $log-i32
                (local.tee $2
                 (i32.const 5)
                )
               )
               (br $label$49)
              )
              (block $label$76 (result i32)
               (nop)
               (local.tee $2
                (i32.const 1276448839)
               )
              )
             )
            )
           )
           (local.set $2
            (local.get $2)
           )
          )
         )
         (loop $label$90
          (block
           (if
            (i32.eqz
             (global.get $hangLimit)
            )
            (return)
           )
           (global.set $hangLimit
            (i32.sub
             (global.get $hangLimit)
             (i32.const 1)
            )
           )
          )
          (block
           (local.set $1
            (local.get $1)
           )
           (br_if $label$90
            (i32.eqz
             (local.tee $2
              (i32.const -93)
             )
            )
           )
           (nop)
          )
         )
         (local.get $2)
        )
       )
       (block $label$91 (result i32)
        (local.set $5
         (block $label$92 (result f32)
          (local.set $1
           (loop $label$19 (result f64)
            (block
             (if
              (i32.eqz
               (global.get $hangLimit)
              )
              (return)
             )
             (global.set $hangLimit
              (i32.sub
               (global.get $hangLimit)
               (i32.const 1)
              )
             )
            )
            (block (result f64)
             (nop)
             (br_if $label$19
              (i32.eqz
               (i32.const -129)
              )
             )
             (local.tee $1
              (f64.const -nan:0xffffffffffff0)
             )
            )
           )
          )
          (local.get $5)
         )
        )
        (local.get $2)
       )
       (block $label$95 (result i32)
        (local.get $2)
       )
      )
     )
     (local.get $4)
     (block $label$96 (result v128)
      (v128.const i32x4 0x80800000 0xdf800000 0xcf000000 0x4f800000)
     )
    )
   )
  )
 )
 (func $hangLimitInitializer (; 6 ;)
  (global.set $hangLimit
   (i32.const 10)
  )
 )
)
