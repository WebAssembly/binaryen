(module
 (type $none_=>_none (func))
 (type $i32_=>_none (func (param i32)))
 (type $none_=>_funcref_exnref_i32_externref (func (result funcref exnref i32 externref)))
 (type $i32_funcref_f64_v128_i32_=>_none (func (param i32 funcref f64 v128 i32)))
 (type $i64_=>_none (func (param i64)))
 (type $f32_=>_none (func (param f32)))
 (type $f64_=>_none (func (param f64)))
 (type $v128_=>_none (func (param v128)))
 (type $exnref_=>_none (func (param exnref)))
 (type $none_=>_i32 (func (result i32)))
 (type $i32_v128_f64_i32_=>_i32 (func (param i32 v128 f64 i32) (result i32)))
 (type $none_=>_i64 (func (result i64)))
 (type $none_=>_f32 (func (result f32)))
 (type $i64_f32_=>_f64 (func (param i64 f32) (result f64)))
 (type $none_=>_v128 (func (result v128)))
 (type $none_=>_funcref (func (result funcref)))
 (import "fuzzing-support" "log-i32" (func $log-i32 (param i32)))
 (import "fuzzing-support" "log-i64" (func $log-i64 (param i64)))
 (import "fuzzing-support" "log-f32" (func $log-f32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $log-f64 (param f64)))
 (import "fuzzing-support" "log-v128" (func $log-v128 (param v128)))
 (import "fuzzing-support" "log-exnref" (func $log-exnref (param exnref)))
 (memory $0 (shared 1 1))
 (data (i32.const 0) "N\0fN\f5\f9\b1\ff\fa\eb\e5\fe\a7\ec\fb\fc\f4\a6\e4\ea\f0\ae\e3")
 (table $0 5 5 funcref)
 (elem (i32.const 0) $func_9 $func_10 $func_12 $func_12 $func_14)
 (global $global$5 (mut exnref) (ref.null exn))
 (global $global$4 (mut f64) (f64.const 13))
 (global $global$3 (mut f32) (f32.const 16448))
 (global $global$2 (mut (v128 i32 i32 f64 exnref exnref)) (tuple.make
  (v128.const i32x4 0x4d5affff 0x055b007b 0xff830011 0xffee0040)
  (i32.const -32767)
  (i32.const 44)
  (f64.const 1797693134862315708145274e284)
  (ref.null exn)
  (ref.null exn)
 ))
 (global $global$1 (mut exnref) (ref.null exn))
 (global $hangLimit (mut i32) (i32.const 10))
 (event $event$0 (attr 0) (param i32))
 (export "hashMemory" (func $hashMemory))
 (export "memory" (memory $0))
 (export "func_7_invoker" (func $func_7_invoker))
 (export "func_9" (func $func_9))
 (export "func_10_invoker" (func $func_10_invoker))
 (export "func_12" (func $func_12))
 (export "func_12_invoker" (func $func_12_invoker))
 (export "func_16_invoker" (func $func_16_invoker))
 (export "func_19" (func $func_19))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $hashMemory (result i32)
  (local $0 i32)
  (local.set $0
   (i32.const 5381)
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=1
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=2
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=3
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=4
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=5
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=6
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=7
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=8
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=9
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=10
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=11
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=12
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=13
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=14
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=15
     (i32.const 0)
    )
   )
  )
  (local.get $0)
 )
 (func $func_7 (param $0 i32) (param $1 v128) (param $2 f64) (param $3 i32) (result i32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i32.const 4883)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (local.tee $3
   (local.tee $0
    (local.get $3)
   )
  )
 )
 (func $func_7_invoker
  (drop
   (call $func_7
    (i32.const -119)
    (v128.const i32x4 0x00000000 0x40410000 0x00000000 0x3ff00000)
    (f64.const 3.433897990215153e-220)
    (i32.const 255)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_9 (result funcref)
  (local $0 i64)
  (local $1 i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.func $log-f32)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (f64.store offset=22 align=2
    (i32.and
     (i32.const -65535)
     (i32.const 15)
    )
    (f64.const 8589934593)
   )
   (return
    (ref.func $log-exnref)
   )
  )
 )
 (func $func_10 (result funcref exnref i32 externref)
  (local $0 i64)
  (local $1 exnref)
  (local $2 f32)
  (local $3 externref)
  (local $4 externref)
  (local $5 f32)
  (local $6 i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (tuple.make
      (ref.func $func_10)
      (ref.null exn)
      (i32.const 0)
      (ref.null extern)
     )
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (tuple.make
   (ref.func $log-v128)
   (ref.null exn)
   (i32.const 26155)
   (ref.null extern)
  )
 )
 (func $func_10_invoker
  (drop
   (call $func_10)
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_12
  (local $0 exnref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (call $log-i32
   (i32.const 1)
  )
 )
 (func $func_12_invoker
  (call $func_12)
 )
 (func $func_14 (result v128)
  (local $0 i32)
  (local $1 f32)
  (local $2 f32)
  (local $3 externref)
  (local $4 exnref)
  (local $5 f64)
  (local $6 i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (v128.const i32x4 0x5ea21f0a 0x52800ae0 0x002a5300 0xe4010058)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (v128.const i32x4 0x1d00ff00 0x2a255500 0x01fbf800 0x0a000002)
 )
 (func $func_15 (result i64)
  (local $0 f32)
  (local $1 funcref)
  (local $2 f32)
  (local $3 i32)
  (local $4 f32)
  (local $5 v128)
  (local $6 f64)
  (local $7 funcref)
  (local $8 externref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i64.const -2097152)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (nop)
   (return
    (i64.const -61)
   )
  )
 )
 (func $func_16 (param $0 i32) (param $1 funcref) (param $2 f64) (param $3 v128) (param $4 i32)
  (local $5 (i32 f64))
  (local $6 i64)
  (local $7 (i32 i64))
  (local $8 i32)
  (local $9 funcref)
  (local $10 f32)
  (local $11 (i64 v128 f32))
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (nop)
 )
 (func $func_16_invoker
  (call $func_16
   (i32.const -19)
   (ref.func $hashMemory)
   (f64.const -2305843009213693952)
   (v128.const i32x4 0x2b27212f 0x322e2366 0x0000343b 0x00000000)
   (i32.const 24)
  )
  (call $func_16
   (i32.const 2147483646)
   (ref.null func)
   (f64.const 23348)
   (v128.const i32x4 0x0000007c 0x00000000 0x00000000 0xc0000000)
   (i32.const 521672456)
  )
 )
 (func $func_18 (param $0 i64) (param $1 f32) (result f64)
  (local $2 (f64 f64 i32))
  (local $3 i64)
  (local $4 f32)
  (local $5 externref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f64.const -1073741824)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (select
   (f64.const 35184372088832)
   (f64x2.extract_lane 0
    (v128.const i32x4 0x55800000 0x4f800000 0x3def9db2 0x4e6dcc9d)
   )
   (loop $label$0 (result i32)
    (block
     (if
      (i32.eqz
       (global.get $hangLimit)
      )
      (return
       (f64.const 4294967213)
      )
     )
     (global.set $hangLimit
      (i32.sub
       (global.get $hangLimit)
       (i32.const 1)
      )
     )
    )
    (block (result i32)
     (block $label$1
      (call_indirect (type $none_=>_none)
       (i32.const 2)
      )
      (nop)
     )
     (br_if $label$0
      (i32.eqz
       (loop $label$2 (result i32)
        (block
         (if
          (i32.eqz
           (global.get $hangLimit)
          )
          (return
           (f64.const 8589934591.815)
          )
         )
         (global.set $hangLimit
          (i32.sub
           (global.get $hangLimit)
           (i32.const 1)
          )
         )
        )
        (block (result i32)
         (block $label$15
          (memory.copy
           (i32.and
            (i32.const -8192)
            (i32.const 15)
           )
           (i32.and
            (i8x16.extract_lane_s 1
             (v128.const i32x4 0x3329287c 0x00007fff 0x00000002 0x00002966)
            )
            (i32.const 15)
           )
           (i32.atomic.rmw8.add_u offset=1
            (i32.and
             (i32.const -93)
             (i32.const 15)
            )
            (i32.const 26)
           )
          )
          (br_if $label$15
           (i32.eqz
            (i32.const 169416729)
           )
          )
         )
         (br_if $label$2
          (i32.const 1397565735)
         )
         (tuple.extract 1
          (tuple.make
           (f64.const -2.2250738585072014e-308)
           (i32.const -86)
          )
         )
        )
       )
      )
     )
     (if (result i32)
      (if (result i32)
       (i32.const -33)
       (i32.trunc_f32_s
        (f32.load offset=4 align=1
         (i32.const 1347440720)
        )
       )
       (i32.const -83)
      )
      (block $label$12 (result i32)
       (nop)
       (i32.const -5)
      )
      (if (result i32)
       (i32.eqz
        (i32.load offset=3 align=1
         (i32.and
          (block $label$23
           (nop)
           (return
            (f64.const -1)
           )
          )
          (i32.const 15)
         )
        )
       )
       (block $label$13 (result i32)
        (call $log-i32
         (i32.load offset=4 align=1
          (i32.and
           (i32.const 2049)
           (block $label$24
            (global.set $global$4
             (f64.const 3.475623083072852e-234)
            )
            (return
             (f64.const -2147483647.157)
            )
           )
          )
         )
        )
        (block $label$14
         (call $log-i64
          (local.get $0)
         )
         (nop)
        )
        (f32.gt
         (f32.sqrt
          (local.tee $4
           (local.get $1)
          )
         )
         (f32.const 512.2849731445312)
        )
       )
       (i32.const 0)
      )
     )
    )
   )
  )
 )
 (func $func_19 (result f32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f32.const 8589934592)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (f32.load offset=4 align=2
   (i32.and
    (i32.popcnt
     (ref.is_null
      (block $label$0 (result exnref)
       (nop)
       (call $log-f32
        (f32.convert_i64_s
         (i32.atomic.rmw.cmpxchg offset=22
          (i32.and
           (block $label$1
            (atomic.fence)
            (return
             (f32.const -512.8049926757812)
            )
           )
           (i32.const 15)
          )
          (i64.const -28)
          (i64.const -524289)
         )
        )
       )
       (ref.null exn)
      )
     )
    )
    (i32.const 15)
   )
  )
 )
 (func $hangLimitInitializer
  (global.set $hangLimit
   (i32.const 10)
  )
 )
)
