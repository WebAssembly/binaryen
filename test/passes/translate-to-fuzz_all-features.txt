(module
 (type $none_=>_none (func))
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_v128 (func (result v128)))
 (type $i32_=>_none (func (param i32)))
 (type $i64_=>_none (func (param i64)))
 (type $f32_=>_none (func (param f32)))
 (type $f64_=>_none (func (param f64)))
 (type $f64_i32_=>_none (func (param f64 i32)))
 (type $v128_=>_none (func (param v128)))
 (type $v128_f32_=>_none (func (param v128 f32)))
 (type $nullref_=>_none (func (param nullref)))
 (type $exnref_=>_none (func (param exnref)))
 (type $anyref_=>_i32 (func (param anyref) (result i32)))
 (type $none_=>_f32 (func (result f32)))
 (type $exnref_v128_f64_f32_v128_nullref_=>_v128 (func (param exnref v128 f64 f32 v128 nullref) (result v128)))
 (type $none_=>_funcref (func (result funcref)))
 (type $anyref_f32_v128_=>_funcref (func (param anyref f32 v128) (result funcref)))
 (type $f64_v128_=>_anyref (func (param f64 v128) (result anyref)))
 (type $none_=>_exnref (func (result exnref)))
 (type $i64_f32_anyref_exnref_f32_=>_exnref (func (param i64 f32 anyref exnref f32) (result exnref)))
 (type $f64_exnref_=>_exnref (func (param f64 exnref) (result exnref)))
 (import "fuzzing-support" "log-i32" (func $log-i32 (param i32)))
 (import "fuzzing-support" "log-i64" (func $log-i64 (param i64)))
 (import "fuzzing-support" "log-f32" (func $log-f32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $log-f64 (param f64)))
 (import "fuzzing-support" "log-v128" (func $log-v128 (param v128)))
 (import "fuzzing-support" "log-nullref" (func $log-nullref (param nullref)))
 (import "fuzzing-support" "log-exnref" (func $log-exnref (param exnref)))
 (memory $0 1 1)
 (data (i32.const 0) "N\0fN\f5\f9\b1\ff\fa\eb\e5\fe\a7\ec\fb\fc\f4\a6\e4\ea\f0\ae\e3")
 (table $0 2 2 funcref)
 (elem (i32.const 0) $func_12 $func_24)
 (global $global$0 (mut i32) (i32.const 975663930))
 (global $global$1 (mut i32) (i32.const 2066300474))
 (global $global$2 (mut i64) (i64.const 20510))
 (global $global$3 (mut f32) (f32.const -2147483648))
 (global $global$4 (mut v128) (v128.const i32x4 0x7f002833 0x580000fe 0x59750500 0x01ff002f))
 (global $global$5 (mut funcref) (ref.null))
 (global $global$6 (mut anyref) (ref.null))
 (global $global$7 (mut nullref) (ref.null))
 (global $global$8 (mut nullref) (ref.null))
 (global $hangLimit (mut i32) (i32.const 10))
 (event $event$0 (attr 0) (param f64 i32))
 (event $event$1 (attr 0) (param v128 f32))
 (export "hashMemory" (func $hashMemory))
 (export "memory" (memory $0))
 (export "func_10_invoker" (func $func_10_invoker))
 (export "func_12_invoker" (func $func_12_invoker))
 (export "func_14" (func $func_14))
 (export "func_14_invoker" (func $func_14_invoker))
 (export "func_17" (func $func_17))
 (export "func_17_invoker" (func $func_17_invoker))
 (export "func_19" (func $func_19))
 (export "func_19_invoker" (func $func_19_invoker))
 (export "func_21" (func $func_21))
 (export "func_22" (func $func_22))
 (export "func_22_invoker" (func $func_22_invoker))
 (export "func_24" (func $func_24))
 (export "func_25" (func $func_25))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $hashMemory (; 7 ;) (result i32)
  (local $0 i32)
  (local.set $0
   (i32.const 5381)
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=1
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=2
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=3
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=4
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=5
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=6
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=7
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=8
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=9
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=10
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=11
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=12
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=13
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=14
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=15
     (i32.const 0)
    )
   )
  )
  (local.get $0)
 )
 (func $func_8 (; 8 ;) (param $0 exnref) (param $1 v128) (param $2 f64) (param $3 f32) (param $4 v128) (param $5 nullref) (result v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $4)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (if
    (i32.const 4)
    (call $log-v128
     (v128.const i32x4 0x00000000 0xc2f00000 0x00000000 0xc3e00000)
    )
    (block $label$1
     (block $label$2
      (call $log-i32
       (call $hashMemory)
      )
      (call $log-i32
       (call $hashMemory)
      )
     )
     (call $log-i32
      (call $hashMemory)
     )
    )
   )
   (return
    (v128.const i32x4 0xfffe1b09 0xfffe0000 0x5f0b1615 0x463dffe6)
   )
  )
 )
 (func $func_9 (; 9 ;) (result i32)
  (local $0 v128)
  (local $1 v128)
  (local $2 f64)
  (local $3 v128)
  (local $4 f32)
  (local $5 nullref)
  (local $6 v128)
  (local $7 i64)
  (local $8 v128)
  (local $9 f64)
  (local $10 funcref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i32.const 1699026950)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (i32.const 0)
 )
 (func $func_10 (; 10 ;) (param $0 f64) (param $1 v128) (result anyref)
  (local $2 i32)
  (local $3 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result nullref)
   (nop)
   (ref.null)
  )
 )
 (func $func_10_invoker (; 11 ;)
  (drop
   (call $func_10
    (f64.const -nan:0xfffffffffffed)
    (v128.const i32x4 0x55555555 0x55555555 0x45465b4c 0x00000000)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_12 (; 12 ;) (param $0 f64) (param $1 exnref) (result exnref)
  (local $2 anyref)
  (local $3 nullref)
  (local $4 v128)
  (local $5 nullref)
  (local $6 nullref)
  (local $7 anyref)
  (local $8 i64)
  (local $9 v128)
  (local $10 i32)
  (local $11 funcref)
  (local $12 i32)
  (local $13 i64)
  (local $14 anyref)
  (local $15 nullref)
  (local $16 f64)
  (local $17 f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $1)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (ref.null)
 )
 (func $func_12_invoker (; 13 ;)
  (drop
   (call $func_12
    (f64.const 1073741824)
    (ref.null)
   )
  )
 )
 (func $func_14 (; 14 ;) (result v128)
  (local $0 f64)
  (local $1 i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (v128.const i32x4 0xffffffff 0x00000000 0x7e040a06 0x00000000)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (if (result v128)
   (block $label$0 (result i32)
    (local.set $0
     (local.tee $0
      (local.tee $0
       (local.get $0)
      )
     )
    )
    (i32.const 1442978134)
   )
   (block $label$1
    (nop)
    (return
     (v128.const i32x4 0x00000000 0x00000000 0xffffffd6 0xffffffff)
    )
   )
   (block $label$2 (result v128)
    (call $log-i32
     (call $hashMemory)
    )
    (v128.const i32x4 0x020d0008 0xfffe007f 0x0000ffff 0x0a140000)
   )
  )
 )
 (func $func_14_invoker (; 15 ;)
  (drop
   (call $func_14)
  )
 )
 (func $func_16 (; 16 ;) (result funcref)
  (local $0 f64)
  (local $1 exnref)
  (local $2 funcref)
  (local $3 i64)
  (local $4 funcref)
  (local $5 anyref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $4)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (local.set $1
    (ref.null)
   )
   (f32.div
    (if
     (i32.eqz
      (i32.const 13)
     )
     (block $label$1
      (local.set $2
       (local.tee $2
        (ref.null)
       )
      )
      (return
       (local.get $4)
      )
     )
     (loop $label$2
      (block
       (if
        (i32.eqz
         (global.get $hangLimit)
        )
        (return
         (ref.null)
        )
       )
       (global.set $hangLimit
        (i32.sub
         (global.get $hangLimit)
         (i32.const 1)
        )
       )
      )
      (block
       (br_if $label$2
        (i32.eqz
         (i32.const 128)
        )
       )
       (br_if $label$2
        (i32.eqz
         (loop $label$15 (result i32)
          (block
           (if
            (i32.eqz
             (global.get $hangLimit)
            )
            (return
             (ref.func $func_10)
            )
           )
           (global.set $hangLimit
            (i32.sub
             (global.get $hangLimit)
             (i32.const 1)
            )
           )
          )
          (block $label$16 (result i32)
           (local.set $5
            (loop $label$17 (result anyref)
             (block
              (if
               (i32.eqz
                (global.get $hangLimit)
               )
               (return
                (local.get $2)
               )
              )
              (global.set $hangLimit
               (i32.sub
                (global.get $hangLimit)
                (i32.const 1)
               )
              )
             )
             (local.get $5)
            )
           )
           (call $log-i32
            (call $hashMemory)
           )
           (br_if $label$16
            (loop $label$18 (result i32)
             (block
              (if
               (i32.eqz
                (global.get $hangLimit)
               )
               (return
                (ref.null)
               )
              )
              (global.set $hangLimit
               (i32.sub
                (global.get $hangLimit)
                (i32.const 1)
               )
              )
             )
             (i32.const -2147483647)
            )
            (i32.const -65534)
           )
          )
         )
        )
       )
       (select
        (i64.gt_s
         (f64.store offset=22
          (if
           (i32.const -62)
           (block $label$21
            (call $log-f32
             (f32.const 205.2588348388672)
            )
            (unreachable)
           )
           (block $label$22
            (call $log-f64
             (local.get $0)
            )
            (return
             (local.get $4)
            )
           )
          )
          (loop $label$19 (result f64)
           (block
            (if
             (i32.eqz
              (global.get $hangLimit)
             )
             (return
              (ref.func $func_14)
             )
            )
            (global.set $hangLimit
             (i32.sub
              (global.get $hangLimit)
              (i32.const 1)
             )
            )
           )
           (block (result f64)
            (call $log-i32
             (call $hashMemory)
            )
            (br_if $label$19
             (i32.const 94)
            )
            (f64.const 7265)
           )
          )
         )
         (if
          (i32.const 1075659082)
          (block $label$26
           (call $log-i32
            (call $hashMemory)
           )
           (br $label$2)
          )
          (block $label$27
           (block $label$28
            (call $log-i32
             (call $hashMemory)
            )
            (block $label$29
             (local.set $4
              (ref.func $hashMemory)
             )
             (return
              (local.get $4)
             )
            )
           )
          )
         )
        )
        (block $label$30
         (call $log-nullref
          (ref.null)
         )
         (loop $label$31
          (block
           (if
            (i32.eqz
             (global.get $hangLimit)
            )
            (return
             (ref.func $func_10)
            )
           )
           (global.set $hangLimit
            (i32.sub
             (global.get $hangLimit)
             (i32.const 1)
            )
           )
          )
          (block $label$32
           (local.set $5
            (local.get $5)
           )
           (if
            (i32.const 16974080)
            (block $label$33
             (call $log-i32
              (i32.const 32256)
             )
             (br $label$2)
            )
            (br $label$31)
           )
          )
         )
        )
        (i32.const 2629)
       )
      )
     )
    )
    (return
     (ref.null)
    )
   )
  )
 )
 (func $func_17 (; 17 ;) (param $0 anyref) (param $1 f32) (param $2 v128) (result funcref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.func $func_8)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (ref.func $func_14)
 )
 (func $func_17_invoker (; 18 ;)
  (drop
   (call $func_17
    (ref.null)
    (f32.const -3402823466385288598117041e14)
    (v128.const i32x4 0x00000002 0x00000400 0xfffffc00 0x00000008)
   )
  )
  (drop
   (call $func_17
    (ref.null)
    (f32.const -nan:0x7fffb5)
    (v128.const i32x4 0x4e4e0000 0x00548000 0x7b2c3a23 0x10070040)
   )
  )
  (drop
   (call $func_17
    (ref.null)
    (f32.const 68719476736)
    (v128.const i32x4 0x242b6337 0x53800000 0xce000000 0x13180e0e)
   )
  )
  (drop
   (call $func_17
    (ref.null)
    (f32.const 549755813888)
    (v128.const i32x4 0x00008000 0x00000000 0x621c000d 0x18091b1c)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_19 (; 19 ;) (result f32)
  (local $0 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f32.const 84822832)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (f32.const -536870912)
 )
 (func $func_19_invoker (; 20 ;)
  (drop
   (call $func_19)
  )
  (drop
   (call $func_19)
  )
 )
 (func $func_21 (; 21 ;) (param $0 anyref) (result i32)
  (local $1 exnref)
  (local $2 anyref)
  (local $3 funcref)
  (local $4 anyref)
  (local $5 funcref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i32.const -13)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (i32.const 1)
 )
 (func $func_22 (; 22 ;) (result exnref)
  (local $0 i32)
  (local $1 f64)
  (local $2 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (nop)
   (if
    (i32.eqz
     (local.tee $0
      (local.tee $0
       (local.tee $0
        (local.tee $0
         (local.tee $0
          (local.tee $0
           (local.tee $0
            (local.tee $0
             (local.get $0)
            )
           )
          )
         )
        )
       )
      )
     )
    )
    (block $label$1
     (block $label$2
      (return
       (ref.null)
      )
     )
    )
    (block $label$3
     (nop)
     (f32.store offset=22 align=1
      (i32.and
       (if (result i32)
        (i32.eqz
         (local.tee $0
          (loop $label$4 (result i32)
           (block
            (if
             (i32.eqz
              (global.get $hangLimit)
             )
             (return
              (ref.null)
             )
            )
            (global.set $hangLimit
             (i32.sub
              (global.get $hangLimit)
              (i32.const 1)
             )
            )
           )
           (block (result i32)
            (block $label$5
             (nop)
             (nop)
            )
            (br_if $label$4
             (local.get $0)
            )
            (if (result i32)
             (i32.eqz
              (block $label$6
               (if
                (local.tee $0
                 (i32.const 4096)
                )
                (block $label$7
                 (call $log-i32
                  (call $hashMemory)
                 )
                 (local.tee $2
                  (if
                   (i32.eqz
                    (loop $label$8 (result i32)
                     (block
                      (if
                       (i32.eqz
                        (global.get $hangLimit)
                       )
                       (return
                        (ref.null)
                       )
                      )
                      (global.set $hangLimit
                       (i32.sub
                        (global.get $hangLimit)
                        (i32.const 1)
                       )
                      )
                     )
                     (local.get $0)
                    )
                   )
                   (block $label$9
                    (nop)
                    (br $label$4)
                   )
                   (block $label$10
                    (call $log-i32
                     (call $hashMemory)
                    )
                    (br $label$7)
                   )
                  )
                 )
                )
                (call $log-i32
                 (call $hashMemory)
                )
               )
               (return
                (ref.null)
               )
              )
             )
             (block $label$11 (result i32)
              (local.set $1
               (local.get $1)
              )
              (br_if $label$11
               (local.get $0)
               (i32.const 7766)
              )
             )
             (block $label$12
              (br $label$4)
             )
            )
           )
          )
         )
        )
        (i32.const 65521)
        (block $label$28
         (local.set $0
          (local.tee $0
           (local.tee $0
            (local.tee $0
             (local.get $0)
            )
           )
          )
         )
         (return
          (ref.null)
         )
        )
       )
       (i32.const 15)
      )
      (return
       (ref.null)
      )
     )
    )
   )
  )
 )
 (func $func_22_invoker (; 23 ;)
  (drop
   (call $func_22)
  )
 )
 (func $func_24 (; 24 ;) (result v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (v128.const i32x4 0xffffffa7 0x00000000 0x324f4845 0x32464a2c)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (v128.const i32x4 0x007f296b 0x001680e3 0x00000f01 0x00000080)
 )
 (func $func_25 (; 25 ;) (param $0 i64) (param $1 f32) (param $2 anyref) (param $3 exnref) (param $4 f32) (result exnref)
  (local $5 i64)
  (local $6 v128)
  (local $7 nullref)
  (local $8 nullref)
  (local $9 exnref)
  (local $10 f64)
  (local $11 f64)
  (local $12 f32)
  (local $13 nullref)
  (local $14 f32)
  (local $15 funcref)
  (local $16 i64)
  (local $17 exnref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $9)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (if (result exnref)
   (i32.eqz
    (i32.const 1060254247)
   )
   (loop $label$0 (result nullref)
    (block
     (if
      (i32.eqz
       (global.get $hangLimit)
      )
      (return
       (local.get $3)
      )
     )
     (global.set $hangLimit
      (i32.sub
       (global.get $hangLimit)
       (i32.const 1)
      )
     )
    )
    (block $label$1 (result nullref)
     (local.set $6
      (local.tee $6
       (v128.const i32x4 0x7f7f1719 0x11735217 0x0000ffef 0xffffff81)
      )
     )
     (ref.null)
    )
   )
   (if (result exnref)
    (i32.eqz
     (i32.const 1060254247)
    )
    (local.get $9)
    (block $label$2 (result exnref)
     (local.get $17)
    )
   )
  )
 )
 (func $hangLimitInitializer (; 26 ;)
  (global.set $hangLimit
   (i32.const 10)
  )
 )
)
