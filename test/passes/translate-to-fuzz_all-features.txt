(module
 (type $f32_=>_none (func (param f32)))
 (type $none_=>_none (func))
 (type $none_=>_f32_i64_funcref (func (result f32 i64 funcref)))
 (type $i32_=>_none (func (param i32)))
 (type $i32_f64_=>_none (func (param i32 f64)))
 (type $i64_=>_none (func (param i64)))
 (type $f64_=>_none (func (param f64)))
 (type $v128_=>_none (func (param v128)))
 (type $exnref_=>_none (func (param exnref)))
 (type $none_=>_i32 (func (result i32)))
 (type $funcref_anyref_=>_f64 (func (param funcref anyref) (result f64)))
 (type $anyref_eqref_=>_f64 (func (param anyref eqref) (result f64)))
 (type $funcref_f64_=>_v128 (func (param funcref f64) (result v128)))
 (type $none_=>_funcref (func (result funcref)))
 (type $v128_=>_funcref (func (param v128) (result funcref)))
 (type $v128_anyref_f32_=>_funcref (func (param v128 anyref f32) (result funcref)))
 (type $externref_i32_v128_i64_=>_externref (func (param externref i32 v128 i64) (result externref)))
 (type $f32_eqref_=>_anyref (func (param f32 eqref) (result anyref)))
 (type $none_=>_eqref_eqref_eqref_eqref_eqref (func (result eqref eqref eqref eqref eqref)))
 (type $exnref_=>_eqref_eqref_eqref_eqref_eqref (func (param exnref) (result eqref eqref eqref eqref eqref)))
 (import "fuzzing-support" "log-i32" (func $log-i32 (param i32)))
 (import "fuzzing-support" "log-i64" (func $log-i64 (param i64)))
 (import "fuzzing-support" "log-f32" (func $log-f32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $log-f64 (param f64)))
 (import "fuzzing-support" "log-v128" (func $log-v128 (param v128)))
 (import "fuzzing-support" "log-exnref" (func $log-exnref (param exnref)))
 (memory $0 (shared 1 1))
 (data (i32.const 0) "N\0fN\f5\f9\b1\ff\fa\eb\e5\fe\a7\ec\fb\fc\f4\a6\e4\ea\f0\ae\e3")
 (table $0 12 12 funcref)
 (elem (i32.const 0) $func_7 $func_7 $func_8 $func_8 $func_9 $func_9 $func_9 $func_13 $func_13 $func_13 $func_17 $func_19)
 (global $global$5 (mut eqref) (ref.null eq))
 (global $global$4 (mut externref) (ref.null extern))
 (global $global$3 (mut exnref) (ref.null exn))
 (global $global$2 (mut funcref) (ref.null func))
 (global $global$1 (mut (v128 funcref i64 anyref eqref exnref)) (tuple.make
  (v128.const i32x4 0x0c0d0c62 0x48060d0d 0x000000ff 0x00000000)
  (ref.null func)
  (i64.const -2199023255552)
  (ref.null any)
  (ref.null eq)
  (ref.null exn)
 ))
 (global $hangLimit (mut i32) (i32.const 10))
 (export "hashMemory" (func $hashMemory))
 (export "memory" (memory $0))
 (export "func_9" (func $func_9))
 (export "func_10_invoker" (func $func_10_invoker))
 (export "func_12" (func $func_12))
 (export "func_13_invoker" (func $func_13_invoker))
 (export "func_17" (func $func_17))
 (export "func_19" (func $func_19))
 (export "func_19_invoker" (func $func_19_invoker))
 (export "func_21" (func $func_21))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $hashMemory (result i32)
  (local $0 i32)
  (local.set $0
   (i32.const 5381)
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=1
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=2
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=3
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=4
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=5
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=6
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=7
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=8
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=9
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=10
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=11
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=12
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=13
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=14
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=15
     (i32.const 0)
    )
   )
  )
  (local.get $0)
 )
 (func $func_7 (param $0 f32)
  (local $1 (anyref externref))
  (local $2 i32)
  (local $3 i64)
  (local $4 funcref)
  (local $5 v128)
  (local $6 (funcref anyref f32 i32 exnref))
  (local $7 i32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (call $log-f64
    (if (result f64)
     (i32.eqz
      (i32.const 32768)
     )
     (block $label$1 (result f64)
      (br_if $label$0
       (i32.eqz
        (loop $label$2 (result i32)
         (block
          (if
           (i32.eqz
            (global.get $hangLimit)
           )
           (return)
          )
          (global.set $hangLimit
           (i32.sub
            (global.get $hangLimit)
            (i32.const 1)
           )
          )
         )
         (block $label$3 (result i32)
          (nop)
          (local.tee $7
           (local.tee $2
            (local.tee $7
             (local.tee $2
              (local.tee $2
               (local.tee $2
                (local.tee $2
                 (local.tee $2
                  (local.get $7)
                 )
                )
               )
              )
             )
            )
           )
          )
         )
        )
       )
      )
      (call $log-exnref
       (ref.null exn)
      )
      (f64.const 11839)
     )
     (block $label$4 (result f64)
      (nop)
      (f64.nearest
       (f64.const 1.6005841300030413e-215)
      )
     )
    )
   )
   (call $log-exnref
    (ref.null exn)
   )
  )
 )
 (func $func_8 (param $0 funcref) (param $1 anyref) (result f64)
  (local $2 i64)
  (local $3 (f64 i32 anyref i64 exnref))
  (local $4 v128)
  (local $5 (v128 f32 exnref))
  (local $6 f32)
  (local $7 i32)
  (local $8 (funcref eqref))
  (local $9 i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f64.const 4806734720588042541890704e256)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (f64.const 9223372036854775808)
 )
 (func $func_9 (param $0 i32) (param $1 f64)
  (local $2 i32)
  (local $3 funcref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (f32.store offset=3 align=2
    (i32.and
     (local.get $0)
     (i32.const 15)
    )
    (if (result f32)
     (local.tee $2
      (local.tee $2
       (block $label$1
        (call_indirect (type $f32_=>_none)
         (f32.div
          (f32.const 4189)
          (f32.const 1396855168)
         )
         (i32.atomic.rmw8.cmpxchg_u offset=3
          (i32.and
           (call $hashMemory)
           (i32.const 15)
          )
          (local.tee $0
           (local.get $2)
          )
          (loop $label$3 (result i32)
           (block
            (if
             (i32.eqz
              (global.get $hangLimit)
             )
             (return)
            )
            (global.set $hangLimit
             (i32.sub
              (global.get $hangLimit)
              (i32.const 1)
             )
            )
           )
           (loop $label$4 (result i32)
            (block
             (if
              (i32.eqz
               (global.get $hangLimit)
              )
              (return)
             )
             (global.set $hangLimit
              (i32.sub
               (global.get $hangLimit)
               (i32.const 1)
              )
             )
            )
            (block $label$5 (result i32)
             (v128.store offset=22 align=8
              (i32.and
               (i32.load16_u offset=4 align=1
                (i32.and
                 (ref.is_null
                  (ref.null extern)
                 )
                 (i32.const 15)
                )
               )
               (i32.const 15)
              )
              (i16x8.ne
               (i16x8.gt_u
                (select
                 (if (result v128)
                  (i32.eqz
                   (i32.const 2147483647)
                  )
                  (block $label$8 (result v128)
                   (nop)
                   (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)
                  )
                  (block $label$9 (result v128)
                   (if (result v128)
                    (i32.const -96)
                    (v128.const i32x4 0xffffff99 0xffffffff 0x00000000 0x40648000)
                    (v128.const i32x4 0x00005f01 0x0000b03f 0x644b1d80 0x4fb2ff39)
                   )
                  )
                 )
                 (v128.const i32x4 0x00000000 0x40eff640 0x00000000 0xc1300000)
                 (local.tee $0
                  (if (result i32)
                   (local.tee $0
                    (local.get $0)
                   )
                   (block $label$6 (result i32)
                    (local.set $0
                     (local.get $2)
                    )
                    (if (result i32)
                     (if (result i32)
                      (i32.eqz
                       (local.get $2)
                      )
                      (i32.const 127)
                      (i32.const -128)
                     )
                     (i32.const 26)
                     (i32.const -32768)
                    )
                   )
                   (block $label$7
                    (atomic.fence)
                    (br $label$3)
                   )
                  )
                 )
                )
                (tuple.extract 4
                 (tuple.make
                  (ref.null extern)
                  (i32.const 126)
                  (f32.const 2.5923033978570846e-30)
                  (i64.const 6796583934299212805)
                  (v128.const i32x4 0x00000008 0x00000000 0x000000fe 0x00000000)
                 )
                )
               )
               (v128.const i32x4 0x0057ff7f 0x00470000 0x00014359 0x007f3028)
              )
             )
             (atomic.notify offset=3
              (i32.and
               (if (result i32)
                (i32.eqz
                 (f32.ge
                  (f32.sqrt
                   (f32.const -0.1029999852180481)
                  )
                  (f32x4.extract_lane 0
                   (v128.const i32x4 0x080a617e 0xcf000000 0xda800000 0xc20c0000)
                  )
                 )
                )
                (select
                 (local.tee $0
                  (local.tee $2
                   (local.tee $2
                    (local.tee $2
                     (local.get $2)
                    )
                   )
                  )
                 )
                 (local.get $2)
                 (i32.const 0)
                )
                (local.tee $0
                 (br_if $label$5
                  (f64.gt
                   (select
                    (local.get $1)
                    (if (result f64)
                     (i32.eqz
                      (local.get $2)
                     )
                     (local.get $1)
                     (f64.const 2.5823598491911832e-236)
                    )
                    (local.get $0)
                   )
                   (local.get $1)
                  )
                  (i32.const 609887560)
                 )
                )
               )
               (i32.const 15)
              )
              (i64.eq
               (tuple.extract 0
                (tuple.make
                 (i64.const 82)
                 (i32.const 0)
                )
               )
               (i64.const 2147483646)
              )
             )
            )
           )
          )
         )
        )
        (br $label$0)
       )
      )
     )
     (f32.demote_f64
      (block $label$2
       (call_indirect (type $f32_=>_none)
        (f32.div
         (f32.const 4189)
         (f32.const 1396855168)
        )
        (i32.atomic.rmw8.cmpxchg_u offset=3
         (i32.and
          (call $hashMemory)
          (i32.const 15)
         )
         (local.tee $0
          (local.get $2)
         )
         (i32.const -94)
        )
       )
       (br $label$0)
      )
     )
     (f32.const -2147483648)
    )
   )
   (call_indirect (type $f32_=>_none)
    (f32.sqrt
     (f32.const -0.1029999852180481)
    )
    (i32.atomic.rmw8.cmpxchg_u offset=3
     (i32.and
      (call $hashMemory)
      (i32.const 2147483647)
     )
     (local.tee $0
      (local.get $2)
     )
     (i32.const 536870912)
    )
   )
  )
 )
 (func $func_10 (result f32 i64 funcref)
  (local $0 i64)
  (local $1 (exnref exnref exnref exnref f32))
  (local $2 externref)
  (local $3 (v128 funcref))
  (local $4 externref)
  (local $5 (i32 f32))
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (tuple.make
      (f32.const 2047.8480224609375)
      (i64.const -127)
      (ref.null func)
     )
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result f32 i64 funcref)
   (call $log-f64
    (f64.const 1.44)
   )
   (call $log-i32
    (call $hashMemory)
   )
   (tuple.make
    (f32.const 527435904)
    (i64.const 2147483648)
    (ref.null func)
   )
  )
 )
 (func $func_10_invoker
  (drop
   (call $func_10)
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_10)
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_12 (result funcref)
  (local $0 anyref)
  (local $1 eqref)
  (local $2 i64)
  (local $3 (anyref exnref i64 i32 anyref v128))
  (local $4 externref)
  (local $5 anyref)
  (local $6 f32)
  (local $7 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.func $func_10)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (ref.null func)
 )
 (func $func_13 (param $0 exnref) (result eqref eqref eqref eqref eqref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (tuple.make
      (ref.null eq)
      (ref.null eq)
      (ref.null eq)
      (ref.null eq)
      (ref.null eq)
     )
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (return
    (tuple.make
     (ref.null eq)
     (ref.null eq)
     (ref.null eq)
     (ref.null eq)
     (ref.null eq)
    )
   )
  )
 )
 (func $func_13_invoker
  (drop
   (call $func_13
    (ref.null exn)
   )
  )
 )
 (func $func_15 (param $0 anyref) (param $1 eqref) (result f64)
  (local $2 (f64 eqref funcref i32))
  (local $3 v128)
  (local $4 i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f64.const 303201560)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (f64.const 1.8039635330443502e-221)
 )
 (func $func_16 (param $0 funcref) (param $1 f64) (result v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (v128.const i32x4 0x00000000 0x41400000 0x00000000 0x40458000)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (if
    (i32.const 10793)
    (call_indirect (type $f32_=>_none)
     (f32.const 3402823466385288598117041e14)
     (i32.const 0)
    )
    (block $label$1
     (call $log-i32
      (call $hashMemory)
     )
     (call $log-f32
      (loop $label$2 (result f32)
       (block
        (if
         (i32.eqz
          (global.get $hangLimit)
         )
         (return
          (v128.const i32x4 0x41700000 0x5f000000 0x3f800000 0x41a00000)
         )
        )
        (global.set $hangLimit
         (i32.sub
          (global.get $hangLimit)
          (i32.const 1)
         )
        )
       )
       (block (result f32)
        (block $label$3
         (call $log-i32
          (call $hashMemory)
         )
         (call $log-v128
          (loop $label$4 (result v128)
           (block
            (if
             (i32.eqz
              (global.get $hangLimit)
             )
             (return
              (v128.const i32x4 0x152dffff 0x8000ffa4 0x1f484608 0x02193720)
             )
            )
            (global.set $hangLimit
             (i32.sub
              (global.get $hangLimit)
              (i32.const 1)
             )
            )
           )
           (block $label$5 (result v128)
            (call $log-i32
             (i32.const -1)
            )
            (v128.const i32x4 0x00020000 0xff8000b0 0xffb40001 0xffff5657)
           )
          )
         )
        )
        (br_if $label$2
         (if (result i32)
          (i32.eqz
           (f32.ge
            (f32.const 3402823466385288598117041e14)
            (f32.const 3402823466385288598117041e14)
           )
          )
          (i32.const 0)
          (i32.const -65537)
         )
        )
        (f32.const 0.004999999888241291)
       )
      )
     )
    )
   )
   (return
    (v128.const i32x4 0x1b145c08 0xffffffe0 0x00400000 0x00000052)
   )
  )
 )
 (func $func_17 (param $0 v128) (param $1 anyref) (param $2 f32) (result funcref)
  (local $3 i64)
  (local $4 (externref i32))
  (local $5 i32)
  (local $6 f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.func $log-exnref)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (ref.null func)
 )
 (func $func_18 (param $0 externref) (param $1 i32) (param $2 v128) (param $3 i64) (result externref)
  (local $4 funcref)
  (local $5 eqref)
  (local $6 eqref)
  (local $7 (f64 funcref f64 i32))
  (local $8 externref)
  (local $9 i32)
  (local $10 i64)
  (local $11 eqref)
  (local $12 externref)
  (local $13 funcref)
  (local $14 f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $8)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result externref)
   (nop)
   (local.get $0)
  )
 )
 (func $func_19 (param $0 f32) (param $1 eqref) (result anyref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null any)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (ref.null any)
 )
 (func $func_19_invoker
  (drop
   (call $func_19
    (f32.const 58)
    (ref.null eq)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_21 (param $0 v128) (result funcref)
  (local $1 i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.func $hashMemory)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result funcref)
   (drop
    (tuple.make
     (ref.null exn)
     (ref.null eq)
     (i32.const 26)
     (v128.const i32x4 0x1715037b 0x00000027 0x000007ff 0xf8000000)
     (f64.const 9.532824124368358e-130)
    )
   )
   (block $label$1
    (block $label$2
     (local.tee $1
      (i64.shr_s
       (loop $label$3 (result i64)
        (block
         (if
          (i32.eqz
           (global.get $hangLimit)
          )
          (return
           (ref.func $log-f32)
          )
         )
         (global.set $hangLimit
          (i32.sub
           (global.get $hangLimit)
           (i32.const 1)
          )
         )
        )
        (block (result i64)
         (nop)
         (br_if $label$3
          (i32.eqz
           (i32.const -32766)
          )
         )
         (i64.trunc_f32_s
          (f32.min
           (f32.load offset=3
            (i32.and
             (i32.const 454758683)
             (i32.const 15)
            )
           )
           (f32.const 1023.5869750976562)
          )
         )
        )
       )
       (if
        (i32.eqz
         (i32.const 2049)
        )
        (block $label$4
         (nop)
         (br $label$1)
        )
        (block $label$5
         (i64.store16 offset=2
          (i32.and
           (block $label$6 (result i32)
            (call $log-i64
             (i64.const 1949228928397086024)
            )
            (i32.const 2)
           )
           (i32.const 15)
          )
          (local.get $1)
         )
         (br $label$2)
        )
       )
      )
     )
     (nop)
    )
    (block $label$7
     (nop)
    )
   )
   (call $func_21
    (if (result v128)
     (i32.eqz
      (i32.const 760829235)
     )
     (block $label$8
      (return
       (ref.null func)
      )
     )
     (loop $label$9 (result v128)
      (block
       (if
        (i32.eqz
         (global.get $hangLimit)
        )
        (return
         (ref.func $func_19)
        )
       )
       (global.set $hangLimit
        (i32.sub
         (global.get $hangLimit)
         (i32.const 1)
        )
       )
      )
      (block (result v128)
       (nop)
       (br_if $label$9
        (ref.is_null
         (global.get $global$2)
        )
       )
       (local.get $0)
      )
     )
    )
   )
  )
 )
 (func $hangLimitInitializer
  (global.set $hangLimit
   (i32.const 10)
  )
 )
)
