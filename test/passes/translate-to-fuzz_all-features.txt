(module
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_none (func))
 (type $i32_=>_none (func (param i32)))
 (type $i64_=>_none (func (param i64)))
 (type $f32_=>_none (func (param f32)))
 (type $f64_=>_none (func (param f64)))
 (type $f64_f32_=>_none (func (param f64 f32)))
 (type $v128_=>_none (func (param v128)))
 (type $f64_i32_=>_v128 (func (param f64 i32) (result v128)))
 (import "fuzzing-support" "log-i32" (func $log-i32 (param i32)))
 (import "fuzzing-support" "log-i64" (func $log-i64 (param i64)))
 (import "fuzzing-support" "log-f32" (func $log-f32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $log-f64 (param f64)))
 (import "fuzzing-support" "log-v128" (func $log-v128 (param v128)))
 (memory $0 (shared 1 1))
 (data (i32.const 0) "N\0fN\f5\f9\b1\ff\fa\eb\e5\fe\a7\ec\fb\fc\f4\a6\e4\ea\f0\ae\e3")
 (table $0 0 funcref)
 (global $global$0 (mut i32) (i32.const 975663930))
 (global $global$1 (mut i32) (i32.const 2066300474))
 (global $global$2 (mut i64) (i64.const 20510))
 (global $global$3 (mut f32) (f32.const -2147483648))
 (global $global$4 (mut v128) (v128.const i32x4 0x7f002833 0x580000fe 0x59750500 0x01ff002f))
 (global $hangLimit (mut i32) (i32.const 10))
 (event $event$0 (attr 0) (param f64 f32))
 (export "hashMemory" (func $hashMemory))
 (export "memory" (memory $0))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $hashMemory (; 5 ;) (result i32)
  (local $0 i32)
  (local.set $0
   (i32.const 5381)
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=1
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=2
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=3
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=4
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=5
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=6
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=7
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=8
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=9
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=10
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=11
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=12
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=13
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=14
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=15
     (i32.const 0)
    )
   )
  )
  (local.get $0)
 )
 (func $func_6 (; 6 ;) (result i32)
  (local $0 i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i32.const 1296977737)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (nop)
   (nop)
   (return
    (i32.const -4096)
   )
  )
 )
 (func $func_7 (; 7 ;) (param $0 f64) (param $1 i32) (result v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (v128.const i32x4 0xd6000000 0xfffffff4 0x00000000 0xbf800000)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result v128)
   (call $log-v128
    (br_if $label$0
     (loop $label$1 (result v128)
      (block
       (if
        (i32.eqz
         (global.get $hangLimit)
        )
        (return
         (v128.const i32x4 0xe7010001 0xe5bb1b00 0x15001800 0x005d0001)
        )
       )
       (global.set $hangLimit
        (i32.sub
         (global.get $hangLimit)
         (i32.const 1)
        )
       )
      )
      (block (result v128)
       (loop $label$2
        (block
         (if
          (i32.eqz
           (global.get $hangLimit)
          )
          (return
           (v128.const i32x4 0x00000000 0x405ac000 0x00000000 0x40448000)
          )
         )
         (global.set $hangLimit
          (i32.sub
           (global.get $hangLimit)
           (i32.const 1)
          )
         )
        )
        (block
         (block $label$3
          (call $log-i32
           (i32.const -43)
          )
          (call $log-i32
           (call $hashMemory)
          )
         )
         (br_if $label$2
          (if (result i32)
           (if (result i32)
            (block $label$4
             (call $log-i64
              (if (result i64)
               (i32.eqz
                (block $label$5 (result i32)
                 (block $label$6
                  (nop)
                  (nop)
                 )
                 (local.get $1)
                )
               )
               (block $label$7 (result i64)
                (call $log-v128
                 (call $func_7
                  (f64.const 404429336)
                  (local.tee $1
                   (i32.const 128)
                  )
                 )
                )
                (i64.const -131072)
               )
               (block $label$8
                (call $log-i64
                 (i64.const 4294967230)
                )
                (br $label$2)
               )
              )
             )
             (br $label$2)
            )
            (block $label$9 (result i32)
             (br_if $label$1
              (i32.eqz
               (local.tee $1
                (br_if $label$9
                 (i32.const 1364020300)
                 (i32.eqz
                  (local.tee $1
                   (br_if $label$9
                    (loop $label$10 (result i32)
                     (block
                      (if
                       (i32.eqz
                        (global.get $hangLimit)
                       )
                       (return
                        (v128.const i32x4 0x0000084d 0x00000000 0x00000001 0x00000000)
                       )
                      )
                      (global.set $hangLimit
                       (i32.sub
                        (global.get $hangLimit)
                        (i32.const 1)
                       )
                      )
                     )
                     (i32.const 151324422)
                    )
                    (i32.eqz
                     (i32.const 65535)
                    )
                   )
                  )
                 )
                )
               )
              )
             )
             (select
              (local.get $1)
              (i32.const -124)
              (loop $label$11
               (block
                (if
                 (i32.eqz
                  (global.get $hangLimit)
                 )
                 (return
                  (v128.const i32x4 0x5f5f5f5f 0xd2800000 0x59595959 0x469e9800)
                 )
                )
                (global.set $hangLimit
                 (i32.sub
                  (global.get $hangLimit)
                  (i32.const 1)
                 )
                )
               )
               (block
                (block $label$12
                 (loop $label$13
                  (block
                   (if
                    (i32.eqz
                     (global.get $hangLimit)
                    )
                    (return
                     (v128.const i32x4 0x00000040 0x00000000 0x80000001 0x00000000)
                    )
                   )
                   (global.set $hangLimit
                    (i32.sub
                     (global.get $hangLimit)
                     (i32.const 1)
                    )
                   )
                  )
                  (block $label$14
                   (call $log-v128
                    (v128.const i32x4 0xffea0000 0x0020ff80 0x50590000 0x1c002e39)
                   )
                  )
                 )
                 (call $log-f32
                  (f32.const 35766419849216)
                 )
                )
                (br_if $label$11
                 (br_if $label$9
                  (local.tee $1
                   (i32.const -14)
                  )
                  (local.tee $1
                   (local.tee $1
                    (i32.const -67108864)
                   )
                  )
                 )
                )
                (if
                 (local.tee $1
                  (local.tee $1
                   (i32.const -32766)
                  )
                 )
                 (block $label$15
                  (nop)
                  (br $label$11)
                 )
                 (block $label$16
                  (loop $label$17
                   (block
                    (if
                     (i32.eqz
                      (global.get $hangLimit)
                     )
                     (return
                      (v128.const i32x4 0x00000001 0xffffffff 0xffffffeb 0xffffffff)
                     )
                    )
                    (global.set $hangLimit
                     (i32.sub
                      (global.get $hangLimit)
                      (i32.const 1)
                     )
                    )
                   )
                   (block
                    (block $label$18
                     (call $log-i32
                      (local.tee $1
                       (local.get $1)
                      )
                     )
                     (br_if $label$17
                      (local.tee $1
                       (loop $label$19 (result i32)
                        (block
                         (if
                          (i32.eqz
                           (global.get $hangLimit)
                          )
                          (return
                           (v128.const i32x4 0x05090b0a 0x06080f09 0x00007f63 0x80000000)
                          )
                         )
                         (global.set $hangLimit
                          (i32.sub
                           (global.get $hangLimit)
                           (i32.const 1)
                          )
                         )
                        )
                        (block (result i32)
                         (call $log-i64
                          (i64.const -28)
                         )
                         (br_if $label$19
                          (local.tee $1
                           (local.get $1)
                          )
                         )
                         (i32.const -5)
                        )
                       )
                      )
                     )
                    )
                    (br_if $label$17
                     (local.tee $1
                      (local.get $1)
                     )
                    )
                    (call $log-i32
                     (call $hashMemory)
                    )
                   )
                  )
                  (br $label$1)
                 )
                )
               )
              )
             )
            )
            (block $label$20
             (nop)
             (br $label$2)
            )
           )
           (block $label$21 (result i32)
            (call $log-i64
             (if (result i64)
              (if (result i32)
               (loop $label$22
                (block
                 (if
                  (i32.eqz
                   (global.get $hangLimit)
                  )
                  (return
                   (v128.const i32x4 0x641a061c 0x0000151a 0xffffff81 0x14071e1b)
                  )
                 )
                 (global.set $hangLimit
                  (i32.sub
                   (global.get $hangLimit)
                   (i32.const 1)
                  )
                 )
                )
                (block $label$23
                 (call $log-i32
                  (block $label$24 (result i32)
                   (nop)
                   (loop $label$25 (result i32)
                    (block
                     (if
                      (i32.eqz
                       (global.get $hangLimit)
                      )
                      (return
                       (v128.const i32x4 0x40000000 0x4f000000 0x477fe400 0x4694b200)
                      )
                     )
                     (global.set $hangLimit
                      (i32.sub
                       (global.get $hangLimit)
                       (i32.const 1)
                      )
                     )
                    )
                    (block (result i32)
                     (nop)
                     (br_if $label$25
                      (i32.const 31097)
                     )
                     (call $func_6)
                    )
                   )
                  )
                 )
                 (br $label$2)
                )
               )
               (block $label$26
                (loop $label$27
                 (block
                  (if
                   (i32.eqz
                    (global.get $hangLimit)
                   )
                   (return
                    (v128.const i32x4 0xffffffa2 0x0e0f0e09 0x0000007f 0x116f110d)
                   )
                  )
                  (global.set $hangLimit
                   (i32.sub
                    (global.get $hangLimit)
                    (i32.const 1)
                   )
                  )
                 )
                 (block
                  (block $label$28
                   (call $log-i32
                    (call $hashMemory)
                   )
                   (call $log-i64
                    (i64.const -4194304)
                   )
                  )
                  (br_if $label$27
                   (i32.eqz
                    (i32.const 2147483647)
                   )
                  )
                  (nop)
                 )
                )
                (br $label$2)
               )
               (block $label$29 (result i32)
                (call $log-f64
                 (f64.const 8.697524797146243e-275)
                )
                (i32.const 262144)
               )
              )
              (block $label$30
               (call $log-i64
                (i64.const -24)
               )
               (br $label$2)
              )
              (i64.mul
               (i64.const 10797)
               (i64.const 4190383344442562905)
              )
             )
            )
            (br_if $label$21
             (local.tee $1
              (loop $label$35 (result i32)
               (block
                (if
                 (i32.eqz
                  (global.get $hangLimit)
                 )
                 (return
                  (v128.const i32x4 0x1d131913 0x00000000 0x00000000 0x00004000)
                 )
                )
                (global.set $hangLimit
                 (i32.sub
                  (global.get $hangLimit)
                  (i32.const 1)
                 )
                )
               )
               (if (result i32)
                (i32.eqz
                 (local.get $1)
                )
                (block $label$36 (result i32)
                 (call $log-i64
                  (i64.const 3079)
                 )
                 (i32.const 24684)
                )
                (local.tee $1
                 (i32.const 2048)
                )
               )
              )
             )
             (i32.eqz
              (br_if $label$21
               (block $label$32 (result i32)
                (call $log-f64
                 (local.tee $0
                  (local.tee $0
                   (f64.const 1900100968416013050458753e112)
                  )
                 )
                )
                (i16x8.extract_lane_u 7
                 (loop $label$33 (result v128)
                  (block
                   (if
                    (i32.eqz
                     (global.get $hangLimit)
                    )
                    (return
                     (v128.const i32x4 0x1c171e11 0xfffc0000 0x00004d42 0xfc000000)
                    )
                   )
                   (global.set $hangLimit
                    (i32.sub
                     (global.get $hangLimit)
                     (i32.const 1)
                    )
                   )
                  )
                  (loop $label$34 (result v128)
                   (block
                    (if
                     (i32.eqz
                      (global.get $hangLimit)
                     )
                     (return
                      (v128.const i32x4 0x80000000 0x00008000 0x00000020 0x00800000)
                     )
                    )
                    (global.set $hangLimit
                     (i32.sub
                      (global.get $hangLimit)
                      (i32.const 1)
                     )
                    )
                   )
                   (v128.const i32x4 0x00000000 0x43b00000 0x00000000 0xc0300000)
                  )
                 )
                )
               )
               (i32.eqz
                (block $label$31
                 (call $log-i32
                  (call $hashMemory)
                 )
                 (br $label$1)
                )
               )
              )
             )
            )
           )
           (block $label$37
            (if
             (block $label$38 (result i32)
              (call $log-f64
               (local.get $0)
              )
              (local.tee $1
               (i32.const -116)
              )
             )
             (call $log-i32
              (call $hashMemory)
             )
             (block $label$39
              (call $log-i32
               (i32.const -1)
              )
              (call $log-i32
               (call $hashMemory)
              )
             )
            )
            (br $label$2)
           )
          )
         )
         (call $log-i64
          (i64.const 65481)
         )
        )
       )
       (br_if $label$1
        (i32.eqz
         (block $label$40 (result i32)
          (drop
           (block
            (if
             (i32.eqz
              (block $label$46
               (call $log-i32
                (call $hashMemory)
               )
               (block $label$47
                (call $log-v128
                 (v128.const i32x4 0xfc000000 0x00000041 0x5e48481b 0x36703625)
                )
                (br $label$1)
               )
              )
             )
             (block $label$48
              (call $log-i64
               (loop $label$49 (result i64)
                (block
                 (if
                  (i32.eqz
                   (global.get $hangLimit)
                  )
                  (return
                   (v128.const i32x4 0x16590e16 0x17590d0e 0x00000000 0x41600000)
                  )
                 )
                 (global.set $hangLimit
                  (i32.sub
                   (global.get $hangLimit)
                   (i32.const 1)
                  )
                 )
                )
                (block $label$50 (result i64)
                 (i64.const -9223372036854775807)
                )
               )
              )
              (br $label$1)
             )
             (block $label$51
              (local.set $0
               (loop $label$52 (result f64)
                (block
                 (if
                  (i32.eqz
                   (global.get $hangLimit)
                  )
                  (return
                   (v128.const i32x4 0x8e997f88 0x00b56f00 0xff010000 0x02004300)
                  )
                 )
                 (global.set $hangLimit
                  (i32.sub
                   (global.get $hangLimit)
                   (i32.const 1)
                  )
                 )
                )
                (block (result f64)
                 (call $log-f64
                  (f64.const 128)
                 )
                 (br_if $label$52
                  (i32.eqz
                   (block $label$53
                    (call $log-f64
                     (f64.const 4.955179737724083e-183)
                    )
                    (br $label$1)
                   )
                  )
                 )
                 (local.tee $0
                  (loop $label$54 (result f64)
                   (block
                    (if
                     (i32.eqz
                      (global.get $hangLimit)
                     )
                     (return
                      (v128.const i32x4 0x00040000 0x00000050 0x00010000 0xfffffff0)
                     )
                    )
                    (global.set $hangLimit
                     (i32.sub
                      (global.get $hangLimit)
                      (i32.const 1)
                     )
                    )
                   )
                   (f64.const 1.1754943508222875e-38)
                  )
                 )
                )
               )
              )
              (br $label$1)
             )
            )
            (br_if $label$40
             (block $label$45 (result i32)
              (call $log-f64
               (local.tee $0
                (f64.const 1073741824)
               )
              )
              (local.get $1)
             )
             (i32.eqz
              (br_if $label$40
               (local.tee $1
                (loop $label$44 (result i32)
                 (block
                  (if
                   (i32.eqz
                    (global.get $hangLimit)
                   )
                   (return
                    (v128.const i32x4 0xff520000 0x55041a00 0x15807253 0x011be7a2)
                   )
                  )
                  (global.set $hangLimit
                   (i32.sub
                    (global.get $hangLimit)
                    (i32.const 1)
                   )
                  )
                 )
                 (local.get $1)
                )
               )
               (if
                (i32.eqz
                 (block $label$41
                  (nop)
                  (br $label$1)
                 )
                )
                (block $label$42
                 (call $log-f32
                  (f32.const 1162102144)
                 )
                 (br $label$1)
                )
                (block $label$43
                 (call $log-v128
                  (v128.const i32x4 0x00001d1c 0x00000000 0x00000000 0x00000000)
                 )
                 (return
                  (v128.const i32x4 0x7fffc000 0x0000125f 0xff01444e 0x1d1d0b01)
                 )
                )
               )
              )
             )
            )
           )
          )
          (if (result i32)
           (br_if $label$40
            (br_if $label$40
             (local.tee $1
              (local.get $1)
             )
             (br_if $label$40
              (local.get $1)
              (br_if $label$40
               (local.tee $1
                (local.tee $1
                 (local.get $1)
                )
               )
               (call $hashMemory)
              )
             )
            )
            (block $label$55 (result i32)
             (call $log-i32
              (call $hashMemory)
             )
             (local.get $1)
            )
           )
           (block $label$56 (result i32)
            (call $log-f32
             (f32.const 18773)
            )
            (i32.const 23632)
           )
           (local.get $1)
          )
         )
        )
       )
       (v128.const i32x4 0xca000000 0x07101419 0x46b62a00 0xffffffe5)
      )
     )
     (i32.eqz
      (i32.const 16719)
     )
    )
   )
   (v128.const i32x4 0x1d735757 0xd9800000 0xffffffc5 0xc9800000)
  )
 )
 (func $hangLimitInitializer (; 8 ;)
  (global.set $hangLimit
   (i32.const 10)
  )
 )
)
