(module
 (type $FUNCSIG$i (func (result i32)))
 (type $FUNCSIG$vi (func (param i32)))
 (type $FUNCSIG$vj (func (param i64)))
 (type $FUNCSIG$vf (func (param f32)))
 (type $FUNCSIG$vd (func (param f64)))
 (type $FUNCSIG$vV (func (param v128)))
 (type $FUNCSIG$d (func (result f64)))
 (type $FUNCSIG$v (func))
 (type $FUNCSIG$ji (func (param i32) (result i64)))
 (type $FUNCSIG$ff (func (param f32) (result f32)))
 (type $FUNCSIG$fi (func (param i32) (result f32)))
 (import "fuzzing-support" "log-i32" (func $log-i32 (param i32)))
 (import "fuzzing-support" "log-i64" (func $log-i64 (param i64)))
 (import "fuzzing-support" "log-f32" (func $log-f32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $log-f64 (param f64)))
 (import "fuzzing-support" "log-v128" (func $log-v128 (param v128)))
 (memory $0 (shared 1 1))
 (data (i32.const 0) "N\0fN\f5\f9\b1\ff\fa\eb\e5\fe\a7\ec\fb\fc\f4\a6\e4\ea\f0\ae\e3")
 (table $0 4 4 funcref)
 (elem (i32.const 0) $func_11 $func_13 $func_15 $func_15)
 (global $global$0 (mut i32) (i32.const 975663930))
 (global $global$1 (mut i32) (i32.const 2066300474))
 (global $global$2 (mut i64) (i64.const 20510))
 (global $global$3 (mut f32) (f32.const -2147483648))
 (global $global$4 (mut v128) (v128.const i32x4 0x7f002833 0x580000fe 0x59750500 0x01ff002f))
 (global $hangLimit (mut i32) (i32.const 10))
 (event $event$0 (attr 0) (param f64 f32))
 (export "hashMemory" (func $hashMemory))
 (export "memory" (memory $0))
 (export "func_9" (func $func_9))
 (export "func_9_invoker" (func $func_9_invoker))
 (export "func_11_invoker" (func $func_11_invoker))
 (export "func_13" (func $func_13))
 (export "func_14" (func $func_14))
 (export "func_15" (func $func_15))
 (export "func_16_invoker" (func $func_16_invoker))
 (export "func_18_invoker" (func $func_18_invoker))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $hashMemory (; 5 ;) (type $FUNCSIG$i) (result i32)
  (local $0 i32)
  (local.set $0
   (i32.const 5381)
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=1
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=2
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=3
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=4
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=5
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=6
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=7
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=8
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=9
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=10
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=11
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=12
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=13
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=14
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=15
     (i32.const 0)
    )
   )
  )
  (local.get $0)
 )
 (func $func_6 (; 6 ;) (param $0 i64) (param $1 v128) (param $2 i64) (result f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f64.const -1)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (f64.const 16970)
 )
 (func $func_7 (; 7 ;) (result i32)
  (local $0 f32)
  (local $1 f32)
  (local $2 i32)
  (local $3 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $2)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (call $log-i32
    (call $hashMemory)
   )
   (local.set $3
    (v128.const i32x4 0x3b681019 0x00000000 0xfffeff80 0x0054060b)
   )
   (return
    (i32.const -65535)
   )
  )
 )
 (func $func_8 (; 8 ;) (param $0 f64) (param $1 f32) (param $2 v128) (param $3 f64) (result f32)
  (local $4 i32)
  (local $5 f32)
  (local $6 i64)
  (local $7 i64)
  (local $8 i32)
  (local $9 v128)
  (local $10 i64)
  (local $11 i64)
  (local $12 f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $5)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (call $log-f32
    (local.get $5)
   )
   (return
    (f32.const 203013.03125)
   )
  )
 )
 (func $func_9 (; 9 ;) (type $FUNCSIG$d) (result f64)
  (local $0 f32)
  (local $1 f64)
  (local $2 v128)
  (local $3 i32)
  (local $4 i64)
  (local $5 f32)
  (local $6 i32)
  (local $7 i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $1)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (call $log-v128
    (v128.const i32x4 0x77367f7e 0x00000045 0x40000000 0x0000007f)
   )
   (local.set $2
    (v128.const i32x4 0xbc400000 0x0000fd80 0x0043186f 0xc5c72600)
   )
   (return
    (local.get $1)
   )
  )
 )
 (func $func_9_invoker (; 10 ;) (type $FUNCSIG$v)
  (drop
   (call $func_9)
  )
 )
 (func $func_11 (; 11 ;) (result f32)
  (local $0 v128)
  (local $1 f32)
  (local $2 v128)
  (local $3 f32)
  (local $4 v128)
  (local $5 v128)
  (local $6 i64)
  (local $7 f32)
  (local $8 i32)
  (local $9 f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f32.const 10961.05859375)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (local.get $7)
 )
 (func $func_11_invoker (; 12 ;) (type $FUNCSIG$v)
  (drop
   (call $func_11)
  )
  (drop
   (call $func_11)
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_11)
  )
  (drop
   (call $func_11)
  )
  (drop
   (call $func_11)
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_11)
  )
  (drop
   (call $func_11)
  )
 )
 (func $func_13 (; 13 ;) (type $FUNCSIG$ji) (param $0 i32) (result i64)
  (local $1 f32)
  (local $2 f32)
  (local $3 v128)
  (local $4 f32)
  (local $5 v128)
  (local $6 i64)
  (local $7 i32)
  (local $8 v128)
  (local $9 f64)
  (local $10 i64)
  (local $11 i64)
  (local $12 i64)
  (local $13 v128)
  (local $14 i32)
  (local $15 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $12)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (i64.const 2)
 )
 (func $func_14 (; 14 ;) (type $FUNCSIG$ff) (param $0 f32) (result f32)
  (local $1 f32)
  (local $2 f32)
  (local $3 i64)
  (local $4 f64)
  (local $5 i32)
  (local $6 f32)
  (local $7 f32)
  (local $8 f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f32.const -4294967296)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (block $label$1
    (local.set $6
     (local.tee $1
      (local.tee $0
       (local.tee $7
        (local.tee $1
         (loop $label$2 (result f32)
          (block
           (if
            (i32.eqz
             (global.get $hangLimit)
            )
            (return
             (local.get $6)
            )
           )
           (global.set $hangLimit
            (i32.sub
             (global.get $hangLimit)
             (i32.const 1)
            )
           )
          )
          (block $label$3 (result f32)
           (local.tee $2
            (loop $label$4 (result f32)
             (block
              (if
               (i32.eqz
                (global.get $hangLimit)
               )
               (return
                (f32.const -3402823466385288598117041e14)
               )
              )
              (global.set $hangLimit
               (i32.sub
                (global.get $hangLimit)
                (i32.const 1)
               )
              )
             )
             (local.tee $2
              (local.tee $2
               (loop $label$5 (result f32)
                (block
                 (if
                  (i32.eqz
                   (global.get $hangLimit)
                  )
                  (return
                   (f32.const -nan:0x7fffe6)
                  )
                 )
                 (global.set $hangLimit
                  (i32.sub
                   (global.get $hangLimit)
                   (i32.const 1)
                  )
                 )
                )
                (f32.const 35184372088832)
               )
              )
             )
            )
           )
          )
         )
        )
       )
      )
     )
    )
    (br_if $label$1
     (i32.eqz
      (local.get $5)
     )
    )
   )
   (return
    (f32.const 65521)
   )
  )
 )
 (func $func_15 (; 15 ;) (type $FUNCSIG$fi) (param $0 i32) (result f32)
  (local $1 f32)
  (local $2 f64)
  (local $3 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f32.const -65536)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (f64x2.splat
   (return
    (f32.const 1)
   )
  )
 )
 (func $func_16 (; 16 ;) (result i32)
  (local $0 i32)
  (local $1 i64)
  (local $2 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i32.const 84558856)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result i32)
   (nop)
   (br_if $label$0
    (i32.const 16777216)
    (i32.eqz
     (i32.const 524288)
    )
   )
  )
 )
 (func $func_16_invoker (; 17 ;) (type $FUNCSIG$v)
  (drop
   (call $func_16)
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_16)
  )
 )
 (func $func_18 (; 18 ;) (result v128)
  (local $0 v128)
  (local $1 v128)
  (local $2 v128)
  (local $3 f64)
  (local $4 i32)
  (local $5 f32)
  (local $6 i32)
  (local $7 f64)
  (local $8 f64)
  (local $9 f64)
  (local $10 v128)
  (local $11 i32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $10)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (local.tee $1
   (local.tee $1
    (loop $label$0 (result v128)
     (block
      (if
       (i32.eqz
        (global.get $hangLimit)
       )
       (return
        (v128.const i32x4 0xffe00000 0xc1efffff 0x571e0419 0x031f1e04)
       )
      )
      (global.set $hangLimit
       (i32.sub
        (global.get $hangLimit)
        (i32.const 1)
       )
      )
     )
     (block $label$1 (result v128)
      (nop)
      (local.get $0)
     )
    )
   )
  )
 )
 (func $func_18_invoker (; 19 ;) (type $FUNCSIG$v)
  (drop
   (call $func_18)
  )
  (drop
   (call $func_18)
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_18)
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_20 (; 20 ;) (param $0 i64) (param $1 f32) (param $2 i32) (param $3 i32) (result v128)
  (local $4 i64)
  (local $5 f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (v128.const i32x4 0x4e000000 0x4f000000 0x45821000 0x7f7fffff)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result v128)
   (local.set $1
    (local.get $1)
   )
   (v128.const i32x4 0x00001c1f 0x00000000 0x36387d30 0x00000000)
  )
 )
 (func $hangLimitInitializer (; 21 ;)
  (global.set $hangLimit
   (i32.const 10)
  )
 )
)
