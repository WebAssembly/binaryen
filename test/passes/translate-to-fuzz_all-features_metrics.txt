total
 [exports]      : 17      
 [funcs]        : 28      
 [globals]      : 11      
 [imports]      : 5       
 [memories]     : 1       
 [memory-data]  : 20      
 [table-data]   : 13      
 [tables]       : 1       
 [tags]         : 1       
 [total]        : 833     
 [vars]         : 72      
 ArrayInit      : 13      
 AtomicFence    : 1       
 Binary         : 79      
 Block          : 126     
 Break          : 7       
 Call           : 70      
 Const          : 145     
 Drop           : 18      
 GlobalGet      : 63      
 GlobalSet      : 68      
 I31New         : 4       
 If             : 35      
 Load           : 15      
 LocalGet       : 39      
 LocalSet       : 22      
 Loop           : 2       
 Nop            : 7       
 RefAs          : 2       
 RefFunc        : 15      
 RefNull        : 9       
 Return         : 8       
 SIMDExtract    : 1       
 Select         : 1       
 Store          : 2       
 StructNew      : 6       
 TupleExtract   : 4       
 TupleMake      : 6       
 Unary          : 35      
 Unreachable    : 30      
(module
 (type $[i8] (array i8))
 (type $none_=>_none (func))
 (type ${} (struct ))
 (type $none_=>_f64_ref|none| (func (result f64 (ref none))))
 (type $none_=>_i32 (func (result i32)))
 (type $funcref_=>_none (func (param funcref)))
 (type $i32_=>_none (func (param i32)))
 (type $i64_=>_none (func (param i64)))
 (type $f32_=>_none (func (param f32)))
 (type $f64_=>_none (func (param f64)))
 (type $v128_=>_none (func (param v128)))
 (type $externref_=>_eqref (func (param externref) (result eqref)))
 (type $i64_=>_structref (func (param i64) (result structref)))
 (type $i64_i64_externref_eqref_f64_f32_i64_=>_f64 (func (param i64 i64 externref eqref f64 f32 i64) (result f64)))
 (type $f32_=>_f64 (func (param f32) (result f64)))
 (type $none_=>_externref (func (result externref)))
 (type $none_=>_i64 (func (result i64)))
 (type $i64_i64_v128_i64_eqref_funcref_ref|array|_i31ref_=>_ref|eq| (func (param i64 i64 v128 i64 eqref funcref (ref array) i31ref) (result (ref eq))))
 (type $i32_i31ref_=>_ref|array| (func (param i32 i31ref) (result (ref array))))
 (type $i32_structref_i32_eqref_=>_eqref (func (param i32 structref i32 eqref) (result eqref)))
 (type $ref|eq|_arrayref_=>_none (func (param (ref eq) arrayref)))
 (type $none_=>_v128 (func (result v128)))
 (type $f32_i32_=>_f64 (func (param f32 i32) (result f64)))
 (type $i64_=>_i32 (func (param i64) (result i32)))
 (type $none_=>_anyref (func (result anyref)))
 (import "fuzzing-support" "log-i32" (func $log-i32 (param i32)))
 (import "fuzzing-support" "log-i64" (func $log-i64 (param i64)))
 (import "fuzzing-support" "log-f32" (func $log-f32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $log-f64 (param f64)))
 (import "fuzzing-support" "log-v128" (func $log-v128 (param v128)))
 (global $global$ (mut funcref) (ref.func $hashMemory))
 (global $global$_0 (mut (f32 v128 anyref f64)) (tuple.make
  (f32.const 20817)
  (v128.const i32x4 0xc0d16420 0x10000000 0x59590000 0x51000000)
  (struct.new_default ${})
  (f64.const 1.1754943508222875e-38)
 ))
 (global $global$_1 (mut f32) (f32.const 9223372036854775808))
 (global $global$_2 (mut funcref) (ref.func $hashMemory))
 (global $global$_3 (mut anyref) (ref.null none))
 (global $global$_4 (mut v128) (v128.const i32x4 0x16100000 0xff810002 0x1fffe000 0x19001400))
 (global $global$_5 (mut i32) (i32.const 87563292))
 (global $global$_6 (mut (ref struct)) (struct.new_default ${}))
 (global $global$_7 (mut (v128 v128 v128 v128 v128)) (tuple.make
  (v128.const i32x4 0xfffffff6 0x430fffff 0x00000000 0x40c91d00)
  (v128.const i32x4 0xf389374c 0x418fffff 0xffffffff 0xffefffff)
  (v128.const i32x4 0x51802100 0x7d7d031f 0x40000000 0xc1d00000)
  (v128.const i32x4 0xffffffa6 0xffffffff 0x64000000 0x00000000)
  (v128.const i32x4 0x00000000 0x43000000 0xffffffa1 0xffffffff)
 ))
 (global $global$_8 (mut f64) (f64.const -nan:0xfffffffffffb4))
 (global $hangLimit (mut i32) (i32.const 100))
 (memory $0 (shared 16 17))
 (data (i32.const 0) "&IO\f4\f1\fe\f6\fd\b0\ea\eb\ad\e3")
 (data "\e1\f7\ea\f3\e5\0c\a5")
 (table $fuzzing_table 13 13 funcref)
 (elem (i32.const 0) $func $func_5 $func_5 $func_6 $func_7 $func_8 $func_9 $func_9 $func_9 $func_10 $func_11 $func_11 $func_13)
 (tag $tag$ (param funcref))
 (export "hashMemory" (func $hashMemory))
 (export "memory" (memory $0))
 (export "func_invoker" (func $func_invoker))
 (export "func_0_invoker" (func $func_0_invoker))
 (export "func_2" (func $func_2))
 (export "func_4_invoker" (func $func_4_invoker))
 (export "func_5" (func $func_5))
 (export "func_5_invoker" (func $func_5_invoker))
 (export "func_7_invoker" (func $func_7_invoker))
 (export "func_8_invoker" (func $func_8_invoker))
 (export "func_9_invoker" (func $func_9_invoker))
 (export "func_10_invoker" (func $func_10_invoker))
 (export "func_11_invoker" (func $func_11_invoker))
 (export "func_12" (func $func_12))
 (export "func_12_invoker" (func $func_12_invoker))
 (export "func_13" (func $func_13))
 (export "func_13_invoker" (func $func_13_invoker))
 (func $hashMemory (type $none_=>_i32) (result i32)
  (local $0 i32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block (result i32)
   (local.set $0
    (local.get $0)
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=1
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=2
      (i32.const 5)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (i32.const 5)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=3
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=4
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=2
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=6
      (local.get $0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=7
      (local.get $0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=8
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.const 0)
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=10
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=11
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=12
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (local.get $0)
       (i32.const 0)
      )
      (local.get $0)
     )
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.add
      (i32.shl
       (i32.const 0)
       (i32.const 5)
      )
      (local.get $0)
     )
     (i32.load8_u offset=14
      (i32.const 0)
     )
    )
   )
   (local.set $0
    (i32.xor
     (i32.xor
      (i32.add
       (i32.shl
        (local.get $0)
        (i32.const 5)
       )
       (local.get $0)
      )
      (i32.load8_u offset=2
       (i32.const 0)
      )
     )
     (i32.load8_u offset=15
      (i32.const 0)
     )
    )
   )
   (local.get $0)
  )
 )
 (func $func (type $externref_=>_eqref) (param $0 externref) (result eqref)
  (local $1 (v128 i32))
  (local $2 f32)
  (local $3 i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result (ref $[i8]))
   (call $log-f64
    (block $label$1 (result f64)
     (call $log-i32
      (call $hashMemory)
     )
     (f32.store offset=3 align=2
      (i32.and
       (i32.const 1561875801)
       (i32.const 15)
      )
      (global.get $global$_1)
     )
     (f64.const 66)
    )
   )
   (array.init_static $[i8])
  )
 )
 (func $func_invoker (type $none_=>_none)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block
   (global.set $hangLimit
    (i32.const 100)
   )
   (drop
    (call $func
     (ref.null noextern)
    )
   )
   (call $log-i32
    (call $hashMemory)
   )
   (drop
    (call $func
     (ref.null noextern)
    )
   )
   (call $log-i32
    (call $hashMemory)
   )
   (drop
    (call $func
     (ref.null noextern)
    )
   )
   (drop
    (call $func
     (ref.null noextern)
    )
   )
   (call $log-i32
    (call $hashMemory)
   )
   (drop
    (call $func
     (ref.null noextern)
    )
   )
  )
 )
 (func $func_0 (type $i64_=>_structref) (param $0 i64) (result structref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result (ref none))
   (loop $label$1
    (block
     (if
      (i32.eqz
       (global.get $hangLimit)
      )
      (block
       (global.set $hangLimit
        (i32.const 100)
       )
       (unreachable)
      )
     )
     (global.set $hangLimit
      (i32.sub
       (global.get $hangLimit)
       (i32.const 1)
      )
     )
    )
    (block
     (call $log-i32
      (call $hashMemory)
     )
     (br_if $label$1
      (call $hashMemory)
     )
     (i64.atomic.store offset=4
      (i32.and
       (tuple.extract 1
        (tuple.make
         (f32.const 32)
         (i32.const -32767)
         (f64.const -nan:0xfffffffffffe7)
        )
       )
       (i32.const 15)
      )
      (local.tee $0
       (i64.const 386273303)
      )
     )
    )
   )
   (tuple.extract 1
    (loop $label$2 (result f64 (ref none))
     (block
      (if
       (i32.eqz
        (global.get $hangLimit)
       )
       (block
        (global.set $hangLimit
         (i32.const 100)
        )
        (unreachable)
       )
      )
      (global.set $hangLimit
       (i32.sub
        (global.get $hangLimit)
        (i32.const 1)
       )
      )
     )
     (block $label$3 (result f64 (ref none))
      (call $log-i32
       (call $hashMemory)
      )
      (tuple.make
       (f64.const 21)
       (ref.as_non_null
        (ref.null none)
       )
      )
     )
    )
   )
  )
 )
 (func $func_0_invoker (type $none_=>_none)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block
   (drop
    (call $func_0
     (i64.const 2900094054293121595)
    )
   )
  )
 )
 (func $func_1 (type $i64_i64_externref_eqref_f64_f32_i64_=>_f64) (param $0 i64) (param $1 i64) (param $2 externref) (param $3 eqref) (param $4 f64) (param $5 f32) (param $6 i64) (result f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (tuple.extract 1
   (tuple.make
    (i31.new
     (i32.const -113)
    )
    (f64.const 12)
    (array.init_static $[i8])
    (i64.const 5)
   )
  )
 )
 (func $func_2 (type $none_=>_i32) (result i32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (i32.const -4096)
 )
 (func $func_3 (type $f32_=>_f64) (param $0 f32) (result f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (nop)
   (return
    (f64.const 4190)
   )
  )
 )
 (func $func_4 (type $none_=>_externref) (result externref)
  (local $0 i32)
  (local $1 i32)
  (local $2 (i32 f32 i32))
  (local $3 f32)
  (local $4 (f64 funcref v128 structref))
  (local $5 i64)
  (local $6 f64)
  (local $7 i64)
  (local $8 (i32 i32 f32 f64 i32 i32))
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (ref.null noextern)
 )
 (func $func_4_invoker (type $none_=>_none)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block
   (global.set $hangLimit
    (i32.const 100)
   )
   (drop
    (call $func_4)
   )
   (drop
    (call $func_4)
   )
   (drop
    (call $func_4)
   )
   (call $log-i32
    (call $hashMemory)
   )
   (drop
    (call $func_4)
   )
   (call $log-i32
    (call $hashMemory)
   )
  )
 )
 (func $func_5 (type $none_=>_i64) (result i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (block $label$1
    (nop)
    (br_if $label$1
     (i32.eqz
      (i32.const 1886521668)
     )
    )
   )
   (return
    (i64.const 5909)
   )
  )
 )
 (func $func_5_invoker (type $none_=>_none)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block
   (global.set $hangLimit
    (i32.const 100)
   )
  )
 )
 (func $func_6 (type $i64_i64_v128_i64_eqref_funcref_ref|array|_i31ref_=>_ref|eq|) (param $0 i64) (param $1 i64) (param $2 v128) (param $3 i64) (param $4 eqref) (param $5 funcref) (param $6 (ref array)) (param $7 i31ref) (result (ref eq))
  (local $8 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result (ref none))
   (call $log-f64
    (f64.const -8.083)
   )
   (ref.as_non_null
    (ref.null none)
   )
  )
 )
 (func $func_7 (type $i32_i31ref_=>_ref|array|) (param $0 i32) (param $1 i31ref) (result (ref array))
  (local $2 (i32 f64))
  (local $3 i64)
  (local $4 (i64 f64))
  (local $5 (v128 structref f32 i64 anyref f32))
  (local $6 i32)
  (local $7 f32)
  (local $8 f32)
  (local $9 funcref)
  (local $10 f64)
  (local $11 i32)
  (local $12 i32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result (ref $[i8]))
   (local.set $11
    (global.get $global$_5)
   )
   (select (result (ref $[i8]))
    (array.init_static $[i8])
    (if (result (ref $[i8]))
     (i16x8.extract_lane_s 2
      (v128.const i32x4 0x00000000 0x40100000 0x00000000 0x40d5c680)
     )
     (block $label$1
      (call $log-i32
       (i32.const -512)
      )
      (if
       (i32.eqz
        (global.get $global$_5)
       )
       (block $label$2
        (block $label$3
         (nop)
         (nop)
        )
        (return
         (array.init_static $[i8])
        )
       )
       (block $label$4
        (nop)
        (return
         (array.init_static $[i8])
        )
       )
      )
     )
     (array.init_static $[i8])
    )
    (i32.const 87)
   )
  )
 )
 (func $func_7_invoker (type $none_=>_none)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block
   (global.set $hangLimit
    (i32.const 100)
   )
   (drop
    (call $func_7
     (i32.const 402788383)
     (i31.new
      (i32.const 0)
     )
    )
   )
   (call $log-i32
    (call $hashMemory)
   )
  )
 )
 (func $func_8 (type $i32_structref_i32_eqref_=>_eqref) (param $0 i32) (param $1 structref) (param $2 i32) (param $3 eqref) (result eqref)
  (local $4 (i32 f64))
  (local $5 i64)
  (local $6 externref)
  (local $7 i32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (nop)
   (return
    (local.get $3)
   )
  )
 )
 (func $func_8_invoker (type $none_=>_none)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block
   (global.set $hangLimit
    (i32.const 100)
   )
  )
 )
 (func $func_9 (type $none_=>_none)
  (local $0 f32)
  (local $1 i64)
  (local $2 f64)
  (local $3 i32)
  (local $4 i32)
  (local $5 (i32 i32 f64 i64))
  (local $6 arrayref)
  (local $7 i32)
  (local $8 i31ref)
  (local $9 f32)
  (local $10 (f32 f32 i64 i64))
  (local $11 f64)
  (local $12 f32)
  (local $13 (f64 f64 i32 f64))
  (local $14 i64)
  (local $15 i32)
  (local $16 f32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (local.set $7
    (call $func_2)
   )
   (global.set $global$_6
    (struct.new_default ${})
   )
  )
 )
 (func $func_9_invoker (type $none_=>_none)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block
   (call $func_9)
  )
 )
 (func $func_10 (type $ref|eq|_arrayref_=>_none) (param $0 (ref eq)) (param $1 arrayref)
  (local $2 i64)
  (local $3 (i64 f32))
  (local $4 arrayref)
  (local $5 i64)
  (local $6 f32)
  (local $7 i32)
  (local $8 externref)
  (local $9 arrayref)
  (local $10 i32)
  (local $11 v128)
  (local $12 f32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (call $log-i32
    (local.get $10)
   )
   (call $log-i64
    (if (result i64)
     (if
      (local.tee $10
       (i32x4.all_true
        (local.get $11)
       )
      )
      (block $label$1
       (call $log-i32
        (call $hashMemory)
       )
       (br $label$0)
      )
      (block $label$2
       (nop)
       (br $label$0)
      )
     )
     (block $label$3 (result i64)
      (br_if $label$0
       (i32.eqz
        (local.get $7)
       )
      )
      (i64.const 9223372036854775807)
     )
     (block $label$4
      (call $log-f64
       (if (result f64)
        (local.get $7)
        (block $label$8
         (call $log-i32
          (call $hashMemory)
         )
         (br $label$0)
        )
        (tuple.extract 1
         (tuple.make
          (array.init_static $[i8])
          (f64.const -1.81)
         )
        )
       )
      )
      (br $label$0)
     )
    )
   )
  )
 )
 (func $func_10_invoker (type $none_=>_none)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block
   (call $func_10
    (struct.new_default ${})
    (array.init_static $[i8])
   )
   (call $func_10
    (struct.new_default ${})
    (array.init_static $[i8])
   )
   (call $log-i32
    (call $hashMemory)
   )
   (call $func_10
    (i31.new
     (i32.const -32767)
    )
    (array.init_static $[i8])
   )
   (call $log-i32
    (call $hashMemory)
   )
   (call $func_10
    (struct.new_default ${})
    (array.init_static $[i8])
   )
   (call $log-i32
    (call $hashMemory)
   )
   (call $func_10
    (i31.new
     (i32.const 151587081)
    )
    (array.init_static $[i8])
   )
   (call $log-i32
    (call $hashMemory)
   )
  )
 )
 (func $func_11 (type $none_=>_v128) (result v128)
  (local $0 v128)
  (local $1 (i64 funcref i64 f64))
  (local $2 eqref)
  (local $3 anyref)
  (local $4 f32)
  (local $5 arrayref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (return
   (local.get $0)
  )
 )
 (func $func_11_invoker (type $none_=>_none)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block
   (drop
    (call $func_11)
   )
   (drop
    (call $func_11)
   )
   (drop
    (call $func_11)
   )
   (drop
    (call $func_11)
   )
   (call $log-i32
    (call $hashMemory)
   )
   (drop
    (call $func_11)
   )
   (call $log-i32
    (call $hashMemory)
   )
   (drop
    (call $func_11)
   )
   (call $log-i32
    (call $hashMemory)
   )
  )
 )
 (func $func_12 (type $f32_i32_=>_f64) (param $0 f32) (param $1 i32) (result f64)
  (local $2 i64)
  (local $3 f64)
  (local $4 (i64 f64))
  (local $5 i31ref)
  (local $6 (i32 f32 i32 i32 i64 f64))
  (local $7 i32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (local.tee $7
    (block $label$1
     (atomic.fence)
     (return
      (f64.const 5.790347542840541e-159)
     )
    )
   )
   (return
    (f64.const -nan:0xfffffffffffb1)
   )
  )
 )
 (func $func_12_invoker (type $none_=>_none)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block
   (global.set $hangLimit
    (i32.const 100)
   )
  )
 )
 (func $func_13 (type $i64_=>_i32) (param $0 i64) (result i32)
  (local $1 v128)
  (local $2 f64)
  (local $3 f32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (i32.eqz
   (i32.const -2147483648)
  )
 )
 (func $func_13_invoker (type $none_=>_none)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block
   (global.set $hangLimit
    (i32.const 100)
   )
   (drop
    (call $func_13
     (i64.const 20817)
    )
   )
   (call $log-i32
    (call $hashMemory)
   )
  )
 )
 (func $func_14 (type $none_=>_anyref) (result anyref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (block
     (global.set $hangLimit
      (i32.const 100)
     )
     (unreachable)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (array.init_static $[i8])
 )
)
