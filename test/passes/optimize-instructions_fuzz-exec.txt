[fuzz-exec] calling test32
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x7fff82]
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[fuzz-exec] calling test64
[LoggingExternalInterface logging nan:0x8000000000000]
[LoggingExternalInterface logging nan:0x8000000000000]
[LoggingExternalInterface logging nan:0x8000000000000]
[LoggingExternalInterface logging nan:0x8000000000000]
[LoggingExternalInterface logging nan:0xfffffffffff82]
[LoggingExternalInterface logging nan:0x8000000000000]
[LoggingExternalInterface logging nan:0x8000000000000]
[fuzz-exec] calling just-one-nan
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[fuzz-exec] calling ignore
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
(module
 (type $0 (func))
 (type $1 (func (param f32)))
 (type $2 (func (param f64)))
 (import "fuzzing-support" "log-f32" (func $logf32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $logf64 (param f64)))
 (export "test32" (func $test32))
 (export "test64" (func $test64))
 (export "just-one-nan" (func $just-one-nan))
 (export "ignore" (func $ignore))
 (func $test32
  (call $logf32
   (f32.const nan:0x400000)
  )
  (call $logf32
   (f32.const nan:0x400000)
  )
  (call $logf32
   (f32.mul
    (f32.const -nan:0x7fff82)
    (f32.neg
     (f32.const -nan:0x7ff622)
    )
   )
  )
  (call $logf32
   (f32.const nan:0x400000)
  )
  (call $logf32
   (f32.copysign
    (f32.const -nan:0x7fff82)
    (f32.neg
     (f32.const -nan:0x7ff622)
    )
   )
  )
  (call $logf32
   (f32.const nan:0x400000)
  )
  (call $logf32
   (f32.const nan:0x400000)
  )
 )
 (func $test64
  (call $logf64
   (f64.const nan:0x8000000000000)
  )
  (call $logf64
   (f64.const nan:0x8000000000000)
  )
  (call $logf64
   (f64.mul
    (f64.const -nan:0xfffffffffff82)
    (f64.neg
     (f64.const -nan:0xfffffffffa622)
    )
   )
  )
  (call $logf64
   (f64.const nan:0x8000000000000)
  )
  (call $logf64
   (f64.copysign
    (f64.const -nan:0xfffffffffff82)
    (f64.neg
     (f64.const -nan:0xfffffffffa622)
    )
   )
  )
  (call $logf64
   (f64.const nan:0x8000000000000)
  )
  (call $logf64
   (f64.const nan:0x8000000000000)
  )
 )
 (func $just-one-nan
  (call $logf32
   (f32.const nan:0x400000)
  )
  (call $logf32
   (f32.add
    (f32.const -nan:0x7ff622)
    (f32.const -0)
   )
  )
  (call $logf32
   (f32.const nan:0x400000)
  )
  (call $logf32
   (f32.add
    (f32.const -nan:0x7ff622)
    (f32.const 0)
   )
  )
  (call $logf32
   (f32.const nan:0x400000)
  )
  (call $logf32
   (f32.add
    (f32.const nan:0x7ff622)
    (f32.const -0)
   )
  )
 )
 (func $ignore
  (call $logf32
   (f32.div
    (f32.const -0)
    (f32.const 0)
   )
  )
  (call $logf32
   (f32.div
    (f32.const 0)
    (f32.const 0)
   )
  )
  (call $logf32
   (f32.div
    (f32.const -0)
    (f32.const -0)
   )
  )
  (call $logf32
   (f32.div
    (f32.const 0)
    (f32.const -0)
   )
  )
 )
)
[fuzz-exec] calling test32
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x7fff82]
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[fuzz-exec] calling test64
[LoggingExternalInterface logging nan:0x8000000000000]
[LoggingExternalInterface logging nan:0x8000000000000]
[LoggingExternalInterface logging nan:0x8000000000000]
[LoggingExternalInterface logging nan:0x8000000000000]
[LoggingExternalInterface logging nan:0xfffffffffff82]
[LoggingExternalInterface logging nan:0x8000000000000]
[LoggingExternalInterface logging nan:0x8000000000000]
[fuzz-exec] calling just-one-nan
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[fuzz-exec] calling ignore
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[LoggingExternalInterface logging nan:0x400000]
[fuzz-exec] comparing ignore
[fuzz-exec] comparing just-one-nan
[fuzz-exec] comparing test32
[fuzz-exec] comparing test64
[fuzz-exec] calling foo
[LoggingExternalInterface logging 1]
[LoggingExternalInterface logging 1]
[LoggingExternalInterface logging 0]
[fuzz-exec] calling do-shift
[LoggingExternalInterface logging -64]
[fuzz-exec] calling call-compare-maybe-signed-eq
[fuzz-exec] note result: call-compare-maybe-signed-eq => 0
[fuzz-exec] calling call-compare-maybe-signed-ne
[fuzz-exec] note result: call-compare-maybe-signed-ne => 1
(module
 (type $0 (func (param i32)))
 (type $1 (func))
 (type $2 (func (param i32) (result i32)))
 (type $3 (func (result i32)))
 (import "fuzzing-support" "log-i32" (func $log (param i32)))
 (export "foo" (func $foo))
 (export "do-shift" (func $do-shift))
 (export "call-compare-maybe-signed-eq" (func $call-compare-maybe-signed-eq))
 (export "call-compare-maybe-signed-ne" (func $call-compare-maybe-signed-ne))
 (func $signed-comparison-to-unsigned
  (call $log
   (block (result i32)
    (drop
     (i32.const -25749)
    )
    (i32.const 0)
   )
  )
  (call $log
   (block (result i32)
    (drop
     (i32.const -25749)
    )
    (i32.const 0)
   )
  )
  (call $log
   (block (result i32)
    (drop
     (i32.const -25749)
    )
    (i32.const 1)
   )
  )
 )
 (func $foo (param $0 i32)
  (call $log
   (i32.le_s
    (i32.sub
     (i32.const 8)
     (block $label$1 (result i32)
      (i32.const -2147483648)
     )
    )
    (i32.const 0)
   )
  )
  (call $log
   (i32.le_s
    (i32.const -2147483640)
    (i32.const 0)
   )
  )
  (call $log
   (i32.const 0)
  )
 )
 (func $shift (param $0 i32)
  (call $log
   (i32.shr_s
    (i32.shl
     (i32.extend8_s
      (local.get $0)
     )
     (i32.const 30)
    )
    (i32.const 24)
   )
  )
 )
 (func $do-shift
  (call $shift
   (i32.const 65419)
  )
 )
 (func $compare-maybe-signed-eq (param $0 i32) (result i32)
  (drop
   (local.get $0)
  )
  (i32.const 0)
 )
 (func $call-compare-maybe-signed-eq (result i32)
  (call $compare-maybe-signed-eq
   (i32.const 128)
  )
 )
 (func $compare-maybe-signed-ne (param $0 i32) (result i32)
  (drop
   (local.get $0)
  )
  (i32.const 1)
 )
 (func $call-compare-maybe-signed-ne (result i32)
  (call $compare-maybe-signed-ne
   (i32.const 128)
  )
 )
)
[fuzz-exec] calling foo
[LoggingExternalInterface logging 1]
[LoggingExternalInterface logging 1]
[LoggingExternalInterface logging 0]
[fuzz-exec] calling do-shift
[LoggingExternalInterface logging -64]
[fuzz-exec] calling call-compare-maybe-signed-eq
[fuzz-exec] note result: call-compare-maybe-signed-eq => 0
[fuzz-exec] calling call-compare-maybe-signed-ne
[fuzz-exec] note result: call-compare-maybe-signed-ne => 1
[fuzz-exec] comparing call-compare-maybe-signed-eq
[fuzz-exec] comparing call-compare-maybe-signed-ne
[fuzz-exec] comparing do-shift
[fuzz-exec] comparing foo
