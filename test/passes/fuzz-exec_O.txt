[fuzz-exec] calling func_0
[trap final > memory: 18446744073709551615 > 65514]
[fuzz-exec] calling func_1
[trap final > memory: 18446744073709551615 > 65514]
(module
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_i64 (func (result i64)))
 (memory $0 1 1)
 (export "func_0" (func $func_0))
 (export "func_1" (func $func_1))
 (func $func_0 (; has Stack IR ;) (result i64)
  (block $label$0 (result i64)
   (br_if $label$0
    (i64.const 1234)
    (i32.load16_s offset=22 align=1
     (i32.const -1)
    )
   )
  )
 )
 (func $func_1 (; has Stack IR ;) (result i32)
  (i32.load16_s offset=22 align=1
   (i32.const -1)
  )
 )
)
[fuzz-exec] calling func_0
[trap final > memory: 18446744073709551615 > 65514]
[fuzz-exec] calling func_1
[trap final > memory: 18446744073709551615 > 65514]
[fuzz-exec] comparing func_0
[fuzz-exec] comparing func_1
[fuzz-exec] calling div
[fuzz-exec] note result: div => nan:0x400000
[fuzz-exec] calling mul1
[fuzz-exec] note result: mul1 => nan:0x400000
[fuzz-exec] calling mul2
[fuzz-exec] note result: mul2 => nan:0x400000
[fuzz-exec] calling add1
[fuzz-exec] note result: add1 => nan:0x400000
[fuzz-exec] calling add2
[fuzz-exec] note result: add2 => nan:0x400000
[fuzz-exec] calling add3
[fuzz-exec] note result: add3 => nan:0x400000
[fuzz-exec] calling add4
[fuzz-exec] note result: add4 => nan:0x400000
[fuzz-exec] calling sub1
[fuzz-exec] note result: sub1 => nan:0x400000
[fuzz-exec] calling sub2
[fuzz-exec] note result: sub2 => nan:0x400000
(module
 (type $none_=>_f32 (func (result f32)))
 (export "div" (func $0))
 (export "mul1" (func $0))
 (export "mul2" (func $0))
 (export "add1" (func $0))
 (export "add2" (func $0))
 (export "add3" (func $0))
 (export "add4" (func $0))
 (export "sub1" (func $0))
 (export "sub2" (func $0))
 (func $0 (; has Stack IR ;) (result f32)
  (f32.const nan:0x400000)
 )
)
[fuzz-exec] calling div
[fuzz-exec] note result: div => nan:0x400000
[fuzz-exec] calling mul1
[fuzz-exec] note result: mul1 => nan:0x400000
[fuzz-exec] calling mul2
[fuzz-exec] note result: mul2 => nan:0x400000
[fuzz-exec] calling add1
[fuzz-exec] note result: add1 => nan:0x400000
[fuzz-exec] calling add2
[fuzz-exec] note result: add2 => nan:0x400000
[fuzz-exec] calling add3
[fuzz-exec] note result: add3 => nan:0x400000
[fuzz-exec] calling add4
[fuzz-exec] note result: add4 => nan:0x400000
[fuzz-exec] calling sub1
[fuzz-exec] note result: sub1 => nan:0x400000
[fuzz-exec] calling sub2
[fuzz-exec] note result: sub2 => nan:0x400000
[fuzz-exec] comparing add1
[fuzz-exec] comparing add2
[fuzz-exec] comparing add3
[fuzz-exec] comparing add4
[fuzz-exec] comparing div
[fuzz-exec] comparing mul1
[fuzz-exec] comparing mul2
[fuzz-exec] comparing sub1
[fuzz-exec] comparing sub2
