[fuzz-exec] calling func_0
[trap final > memory: 18446744073709551615 > 65514]
[fuzz-exec] calling func_1
[trap final > memory: 18446744073709551615 > 65514]
(module
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_i64 (func (result i64)))
 (memory $0 1 1)
 (export "func_0" (func $func_0))
 (export "func_1" (func $func_1))
 (func $func_0 (; has Stack IR ;) (result i64)
  (block $label$0 (result i64)
   (br_if $label$0
    (i64.const 1234)
    (i32.load16_s offset=22 align=1
     (i32.const -1)
    )
   )
  )
 )
 (func $func_1 (; has Stack IR ;) (result i32)
  (i32.load16_s offset=22 align=1
   (i32.const -1)
  )
 )
)
[fuzz-exec] calling func_0
[trap final > memory: 18446744073709551615 > 65514]
[fuzz-exec] calling func_1
[trap final > memory: 18446744073709551615 > 65514]
[fuzz-exec] comparing func_0
[fuzz-exec] comparing func_1
[fuzz-exec] calling div
[fuzz-exec] note result: div => -nan:0x23017a
[fuzz-exec] calling mul1
[fuzz-exec] note result: mul1 => -nan:0x34546d
[fuzz-exec] calling mul2
[fuzz-exec] note result: mul2 => -nan:0x34546d
(module
 (type $none_=>_f32 (func (result f32)))
 (export "div" (func $0))
 (export "mul1" (func $1))
 (export "mul2" (func $1))
 (func $0 (; has Stack IR ;) (result f32)
  (f32.const -nan:0x23017a)
 )
 (func $1 (; has Stack IR ;) (result f32)
  (f32.const -nan:0x34546d)
 )
)
[fuzz-exec] calling div
[fuzz-exec] note result: div => -nan:0x23017a
[fuzz-exec] calling mul1
[fuzz-exec] note result: mul1 => -nan:0x34546d
[fuzz-exec] calling mul2
[fuzz-exec] note result: mul2 => -nan:0x34546d
[fuzz-exec] comparing div
[fuzz-exec] comparing mul1
[fuzz-exec] comparing mul2
