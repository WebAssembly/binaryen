(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (export "stacky-help" (func $stacky-help))
 (func $stacky-help (param $0 i32) (result i32)
  i32.const 0
  call $stacky-help
  i32.const 1
  call $stacky-help
  i32.const 2
  call $stacky-help
  drop
  i32.eqz
  i32.add
 )
)
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (export "stacky-help" (func $stacky-help))
 (func $stacky-help (; has Stack IR ;) (param $0 i32) (result i32)
  (i32.add
   (call $stacky-help
    (i32.const 0)
   )
   (block (result i32)
    (local.set $0
     (call $stacky-help
      (i32.const 1)
     )
    )
    (drop
     (call $stacky-help
      (i32.const 2)
     )
    )
    (i32.eqz
     (local.get $0)
    )
   )
  )
 )
)
(module
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_i32_f64 (func (result i32 f64)))
 (type $none_=>_i64 (func (result i64)))
 (type $none_=>_f32 (func (result f32)))
 (type $none_=>_f64 (func (result f64)))
 (export "ppi32" (func $0))
 (export "ppi64" (func $1))
 (export "ppf32" (func $2))
 (export "ppf64" (func $3))
 (export "pair" (func $4))
 (func $0 (result i32)
  
 )
 (func $1 (result i64)
  
 )
 (func $2 (result f32)
  
 )
 (func $3 (result f64)
  
 )
 (func $4 (result i32 f64)
  
 )
)
(module
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_i32_f64 (func (result i32 f64)))
 (type $none_=>_i64 (func (result i64)))
 (type $none_=>_f32 (func (result f32)))
 (type $none_=>_f64 (func (result f64)))
 (export "ppi32" (func $0))
 (export "ppi64" (func $1))
 (export "ppf32" (func $2))
 (export "ppf64" (func $3))
 (export "pair" (func $4))
 (func $0 (; has Stack IR ;) (result i32)
  (pop i32)
 )
 (func $1 (; has Stack IR ;) (result i64)
  (pop i64)
 )
 (func $2 (; has Stack IR ;) (result f32)
  (pop f32)
 )
 (func $3 (; has Stack IR ;) (result f64)
  (pop f64)
 )
 (func $4 (; has Stack IR ;) (result i32 f64)
  (pop i32 f64)
 )
)
