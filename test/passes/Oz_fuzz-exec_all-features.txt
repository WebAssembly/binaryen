[fuzz-exec] calling structs
[LoggingExternalInterface logging 0]
[LoggingExternalInterface logging 42]
[LoggingExternalInterface logging 100]
[LoggingExternalInterface logging 100]
[fuzz-exec] calling arrays
[LoggingExternalInterface logging 50]
[LoggingExternalInterface logging 42]
[LoggingExternalInterface logging 128]
[LoggingExternalInterface logging -128]
[LoggingExternalInterface logging 42]
[fuzz-exec] calling rtts
[LoggingExternalInterface logging 1]
[LoggingExternalInterface logging 0]
[LoggingExternalInterface logging 0]
[LoggingExternalInterface logging 1]
[LoggingExternalInterface logging 0]
[LoggingExternalInterface logging 1]
[LoggingExternalInterface logging 0]
[LoggingExternalInterface logging 1]
[fuzz-exec] calling br_on_cast
[LoggingExternalInterface logging 3]
[trap unreachable]
[fuzz-exec] calling cast-null-anyref-to-gc
[LoggingExternalInterface logging 0]
[fuzz-exec] calling br_on_data
[LoggingExternalInterface logging 1]
[fuzz-exec] calling rtt-and-cast-on-func
[LoggingExternalInterface logging 0]
[LoggingExternalInterface logging 1]
[LoggingExternalInterface logging 2]
[LoggingExternalInterface logging 1337]
[LoggingExternalInterface logging 3]
[trap cast error]
[fuzz-exec] calling array-alloc-failure
[host limit allocation failure]
(module
 (type $void_func (func))
 (type $i32_=>_none (func (param i32)))
 (type $anyref_=>_none (func (param anyref)))
 (type $int_func (func (result i32)))
 (type $struct (struct (field (mut i32))))
 (import "fuzzing-support" "log-i32" (func $log (param i32)))
 (elem declare func $a-void-func)
 (export "structs" (func $0))
 (export "arrays" (func $1))
 (export "rtts" (func $2))
 (export "br_on_cast" (func $3))
 (export "cast-null-anyref-to-gc" (func $4))
 (export "br_on_data" (func $6))
 (export "rtt-and-cast-on-func" (func $8))
 (export "array-alloc-failure" (func $9))
 (func $0 (; has Stack IR ;)
  (call $log
   (i32.const 0)
  )
  (call $log
   (i32.const 42)
  )
  (call $log
   (i32.const 100)
  )
  (call $log
   (i32.const 100)
  )
 )
 (func $1 (; has Stack IR ;)
  (call $log
   (i32.const 50)
  )
  (call $log
   (i32.const 42)
  )
  (call $log
   (i32.const 128)
  )
  (call $log
   (i32.const -128)
  )
  (call $log
   (i32.const 42)
  )
 )
 (func $2 (; has Stack IR ;)
  (call $log
   (i32.const 1)
  )
  (call $log
   (i32.const 0)
  )
  (call $log
   (i32.const 0)
  )
  (call $log
   (i32.const 1)
  )
  (call $log
   (i32.const 0)
  )
  (call $log
   (i32.const 1)
  )
  (call $log
   (i32.const 0)
  )
  (call $log
   (i32.const 1)
  )
 )
 (func $3 (; has Stack IR ;)
  (call $log
   (i32.const 3)
  )
  (unreachable)
 )
 (func $4 (; has Stack IR ;)
  (call $log
   (i32.const 0)
  )
 )
 (func $6 (; has Stack IR ;) (param $0 anyref)
  (drop
   (block $data (result dataref)
    (drop
     (br_on_data $data
      (local.get $0)
     )
    )
    (call $log
     (i32.const 1)
    )
    (struct.new_default_with_rtt $struct
     (rtt.canon $struct)
    )
   )
  )
 )
 (func $a-void-func (; has Stack IR ;)
  (call $log
   (i32.const 1337)
  )
 )
 (func $8 (; has Stack IR ;)
  (call $log
   (i32.const 0)
  )
  (call $log
   (i32.const 1)
  )
  (call $log
   (i32.const 2)
  )
  (call $a-void-func)
  (call $log
   (i32.const 3)
  )
  (drop
   (call_ref
    (ref.cast
     (ref.func $a-void-func)
     (rtt.canon $int_func)
    )
   )
  )
  (call $log
   (i32.const 4)
  )
 )
 (func $9 (; has Stack IR ;)
  (nop)
 )
)
[fuzz-exec] calling structs
[LoggingExternalInterface logging 0]
[LoggingExternalInterface logging 42]
[LoggingExternalInterface logging 100]
[LoggingExternalInterface logging 100]
[fuzz-exec] calling arrays
[LoggingExternalInterface logging 50]
[LoggingExternalInterface logging 42]
[LoggingExternalInterface logging 128]
[LoggingExternalInterface logging -128]
[LoggingExternalInterface logging 42]
[fuzz-exec] calling rtts
[LoggingExternalInterface logging 1]
[LoggingExternalInterface logging 0]
[LoggingExternalInterface logging 0]
[LoggingExternalInterface logging 1]
[LoggingExternalInterface logging 0]
[LoggingExternalInterface logging 1]
[LoggingExternalInterface logging 0]
[LoggingExternalInterface logging 1]
[fuzz-exec] calling br_on_cast
[LoggingExternalInterface logging 3]
[trap unreachable]
[fuzz-exec] calling cast-null-anyref-to-gc
[LoggingExternalInterface logging 0]
[fuzz-exec] calling br_on_data
[LoggingExternalInterface logging 1]
[fuzz-exec] calling rtt-and-cast-on-func
[LoggingExternalInterface logging 0]
[LoggingExternalInterface logging 1]
[LoggingExternalInterface logging 2]
[LoggingExternalInterface logging 1337]
[LoggingExternalInterface logging 3]
[trap cast error]
[fuzz-exec] calling array-alloc-failure
ignoring comparison of ExecutionResults!
[fuzz-exec] calling foo
[host limit allocation failure]
(module
 (type $none_=>_i32 (func (result i32)))
 (export "foo" (func $0))
 (func $0 (; has Stack IR ;) (result i32)
  (i32.const 0)
 )
)
[fuzz-exec] calling foo
[fuzz-exec] note result: foo => 0
ignoring comparison of ExecutionResults!
