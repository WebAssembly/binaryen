(module
 (type $0 (func))
 (type $1 (func (param i32)))
 (type $2 (func (param i32) (result i32)))
 (memory $0 0)
 (table $0 1 1 funcref)
 (elem (i32.const 0) $called_indirect)
 (export "memory" (memory $0))
 (export "exported" (func $exported))
 (export "other1" (func $other1))
 (export "other2" (func $other2))
 (start $start)
 (func $start
  (call $called0)
 )
 (func $called0
  (call $called1)
 )
 (func $called1
  (nop)
 )
 (func $called_indirect
  (nop)
 )
 (func $exported
  (call $called2)
 )
 (func $called2
  (call $called2)
  (call $called3)
 )
 (func $called3
  (call $called4)
 )
 (func $called4
  (call $called3)
 )
 (func $other1 (param $0 i32)
  (call_indirect $0 (type $0)
   (i32.const 0)
  )
  (call_indirect $0 (type $0)
   (i32.const 0)
  )
  (call_indirect $0 (type $0)
   (i32.const 0)
  )
  (call_indirect $0 (type $0)
   (i32.const 0)
  )
  (call_indirect $0 (type $1)
   (i32.const 0)
   (i32.const 0)
  )
  (call_indirect $0 (type $1)
   (i32.const 0)
   (i32.const 0)
  )
  (drop
   (call_indirect $0 (type $2)
    (i32.const 0)
    (i32.const 0)
   )
  )
  (drop
   (call_indirect $0 (type $2)
    (i32.const 0)
    (i32.const 0)
   )
  )
  (drop
   (call_indirect $0 (type $2)
    (i32.const 0)
    (i32.const 0)
   )
  )
 )
 (func $other2 (param $0 i32)
  (unreachable)
 )
)
(module
)
(module
)
(module
 (type $none_=>_none (func))
 (import "env" "table2" (table $1 1 1 funcref))
 (elem (i32.const 0) $f)
 (func $f
  (nop)
 )
)
(module
)
(module
)
(module
 (import "env" "memory" (memory $0 256))
 (import "env" "table" (table $timport$0 1 funcref))
 (export "mem" (memory $0))
 (export "tab" (table $timport$0))
)
(module
 (type $none_=>_none (func))
 (import "env" "memory" (memory $0 256))
 (data (i32.const 1) "hello, world!")
 (import "env" "table" (table $timport$0 1 funcref))
 (elem (i32.const 0) $waka)
 (func $waka
  (nop)
 )
)
(module
 (type $0 (func))
 (import "env" "memory" (memory $0 256))
 (import "env" "table" (table $timport$0 0 funcref))
 (export "user" (func $user))
 (func $user
  (drop
   (i32.load
    (i32.const 0)
   )
  )
  (call_indirect $timport$0 (type $0)
   (i32.const 0)
  )
 )
)
(module
 (type $none_=>_none (func))
 (memory $0 (shared 23 256))
 (export "user" (func $user))
 (func $user
  (i32.store
   (i32.const 0)
   (i32.const 0)
  )
 )
)
(module
 (type $none_=>_i32 (func (result i32)))
 (memory $0 (shared 23 256))
 (export "user" (func $user))
 (func $user (result i32)
  (i32.atomic.rmw.add
   (i32.const 0)
   (i32.const 0)
  )
 )
)
(module
 (type $none_=>_i32 (func (result i32)))
 (memory $0 (shared 23 256))
 (export "user" (func $user))
 (func $user (result i32)
  (i32.atomic.rmw8.cmpxchg_u
   (i32.const 0)
   (i32.const 0)
   (i32.const 0)
  )
 )
)
(module
 (type $none_=>_none (func))
 (memory $0 (shared 23 256))
 (export "user" (func $user))
 (func $user
  (local $0 i32)
  (local $1 i64)
  (drop
   (memory.atomic.wait32
    (local.get $0)
    (local.get $0)
    (local.get $1)
   )
  )
 )
)
(module
 (type $none_=>_i32 (func (result i32)))
 (memory $0 (shared 23 256))
 (export "user" (func $user))
 (func $user (result i32)
  (memory.atomic.notify
   (i32.const 0)
   (i32.const 0)
  )
 )
)
(module
 (type $none_=>_i32 (func (result i32)))
 (memory $0 23 256)
 (export "user" (func $user))
 (func $user (result i32)
  (memory.grow
   (i32.const 0)
  )
 )
)
(module
 (type $none_=>_i32 (func (result i32)))
 (import "env" "memory" (memory $0 256))
 (export "user" (func $user))
 (func $user (result i32)
  (memory.grow
   (i32.const 0)
  )
 )
)
(module
 (type $none_=>_i32 (func (result i32)))
 (memory $0 23 256)
 (export "user" (func $user))
 (func $user (result i32)
  (memory.size)
 )
)
(module
 (type $none_=>_none (func))
 (import "env" "memory" (memory $0 256))
 (data (global.get $memoryBase) "hello, world!")
 (import "env" "table" (table $timport$0 0 funcref))
 (elem (global.get $tableBase) $waka)
 (import "env" "memoryBase" (global $memoryBase i32))
 (import "env" "tableBase" (global $tableBase i32))
 (func $waka
  (nop)
 )
)
(module
 (type $none_=>_none (func))
 (type $none_=>_i32 (func (result i32)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "env" "imported" (global $imported i32))
 (import "env" "_puts" (func $_puts (param i32) (result i32)))
 (global $int (mut i32) (global.get $imported))
 (global $set (mut i32) (i32.const 100))
 (global $exp_glob i32 (i32.const 600))
 (export "one" (func $one))
 (export "three" (func $three))
 (export "exp_glob" (global $exp_glob))
 (func $one (result i32)
  (call $two)
 )
 (func $two (result i32)
  (global.get $int)
 )
 (func $three
  (call $four)
 )
 (func $four
  (global.set $set
   (i32.const 200)
  )
  (drop
   (call $_puts
    (i32.const 300)
   )
  )
 )
)
(module
)
(module
 (type $none_=>_none (func))
 (start $starter)
 (func $starter
  (drop
   (i32.const 0)
  )
 )
)
(module
)
(module
)
(module
 (type $0 (func (param f64) (result f64)))
 (import "env" "table" (table $timport$0 6 6 funcref))
 (elem (i32.const 0) $0)
 (func $0 (param $var$0 f64) (result f64)
  (if (result f64)
   (f64.eq
    (f64.const 1)
    (f64.const 1)
   )
   (f64.const 1)
   (f64.const 0)
  )
 )
)
(module
 (type $0 (func (param i32)))
 (type $none_=>_none (func))
 (type $i64_=>_none (func (param i64)))
 (event $e-export (attr 0) (param i64))
 (event $e-throw (attr 0) (param i32))
 (event $e-catch (attr 0) (param i32))
 (export "e-export" (event $e-export))
 (start $start)
 (func $start
  (try $try
   (do
    (throw $e-throw
     (i32.const 0)
    )
   )
   (catch $e-catch
    (drop
     (pop i32)
    )
   )
  )
 )
)
(module
 (type $none_=>_none (func))
 (export "test" (func $test))
 (func $foo
  (nop)
 )
 (func $test
  (drop
   (ref.func $foo)
  )
 )
)
