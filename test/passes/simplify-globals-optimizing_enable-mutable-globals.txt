(module
 (type $none_=>_none (func))
 (import "env" "global-1" (global $g1 i32))
 (global $g2 i32 (global.get $g1))
 (func $foo (; 0 ;)
  (drop
   (global.get $g1)
  )
  (drop
   (global.get $g1)
  )
 )
)
(module
 (type $none_=>_none (func))
 (import "env" "global-1" (global $g1 i32))
 (global $g2 i32 (global.get $g1))
 (global $g3 i32 (global.get $g2))
 (global $g4 i32 (global.get $g3))
 (func $foo (; 0 ;)
  (drop
   (global.get $g1)
  )
  (drop
   (global.get $g1)
  )
  (drop
   (global.get $g1)
  )
  (drop
   (global.get $g1)
  )
 )
)
(module
 (import "env" "global-1" (global $g1 (mut i32)))
 (global $g2 i32 (global.get $g1))
)
(module
 (type $none_=>_none (func))
 (import "env" "global-1" (global $g1 i32))
 (global $g2 (mut i32) (global.get $g1))
 (func $foo (; 0 ;)
  (global.set $g2
   (unreachable)
  )
 )
)
(module
 (import "env" "global-1" (global $g1 (mut i32)))
 (global $g2 (mut i32) (global.get $g1))
 (export "global-2" (global $g2))
)
(module
 (type $none_=>_none (func))
 (global $g1 i32 (i32.const 1))
 (global $g2 i32 (i32.const 1))
 (global $g3 f64 (f64.const -3.4))
 (global $g4 f64 (f64.const -2.8))
 (global $g5 i32 (i32.const 2))
 (global $g6 i32 (i32.const 2))
 (global $g7 i32 (i32.const 3))
 (global $g8 i32 (i32.const 3))
 (global $g9 i32 (i32.const 4))
 (global $ga (mut i32) (i32.const 4))
 (global $gb (mut i32) (i32.const 5))
 (global $gc i32 (i32.const 5))
 (func $foo (; 0 ;)
  (global.set $ga
   (i32.const 6)
  )
  (global.set $gb
   (i32.const 7)
  )
 )
)
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (global $g1 (mut i32) (i32.const 1))
 (global $g2 (mut i32) (i32.const 1))
 (func $f (; 0 ;) (param $0 i32) (result i32)
  (global.set $g1
   (i32.const 100)
  )
  (global.set $g2
   (local.get $0)
  )
  (if
   (local.get $0)
   (return
    (i32.const 0)
   )
  )
  (if
   (local.tee $0
    (i32.add
     (global.get $g1)
     (global.get $g2)
    )
   )
   (return
    (i32.const 1)
   )
  )
  (global.set $g1
   (i32.const 200)
  )
  (global.set $g2
   (local.get $0)
  )
  (i32.add
   (global.get $g2)
   (i32.const 200)
  )
 )
)
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (global $g1 (mut i32) (i32.const 1))
 (global $g2 (mut i32) (i32.const 1))
 (func $f (; 0 ;) (param $0 i32) (result i32)
  (global.set $g1
   (i32.const 100)
  )
  (global.set $g2
   (local.get $0)
  )
  (i32.add
   (global.get $g2)
   (i32.const 200)
  )
 )
)
(module
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (global $g1 (mut i32) (i32.const 1))
 (global $g2 (mut i32) (i32.const 1))
 (func $no (; 0 ;) (param $x i32) (result i32)
  (global.set $g1
   (i32.const 100)
  )
  (drop
   (call $no
    (i32.const 200)
   )
  )
  (global.get $g1)
 )
 (func $no2 (; 1 ;) (param $x i32) (result i32)
  (global.set $g1
   (i32.const 100)
  )
  (global.set $g1
   (local.get $x)
  )
  (global.get $g1)
 )
 (func $yes (; 2 ;) (param $0 i32) (result i32)
  (global.set $g1
   (i32.const 100)
  )
  (global.set $g2
   (local.get $0)
  )
  (i32.const 100)
 )
)
