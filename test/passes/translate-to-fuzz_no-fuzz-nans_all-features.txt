(module
 (type $none_=>_none (func))
 (type $i64_=>_none (func (param i64)))
 (type $i32_=>_none (func (param i32)))
 (type $f32_=>_none (func (param f32)))
 (type $f64_=>_none (func (param f64)))
 (type $v128_=>_none (func (param v128)))
 (type $nullref_=>_none (func (param nullref)))
 (type $exnref_=>_none (func (param exnref)))
 (type $none_=>_i32 (func (result i32)))
 (type $f32_=>_f32 (func (param f32) (result f32)))
 (type $f64_=>_f64 (func (param f64) (result f64)))
 (type $none_=>_v128 (func (result v128)))
 (type $exnref_v128_=>_funcref (func (param exnref v128) (result funcref)))
 (type $none_=>_anyref (func (result anyref)))
 (import "fuzzing-support" "log-i32" (func $log-i32 (param i32)))
 (import "fuzzing-support" "log-i64" (func $log-i64 (param i64)))
 (import "fuzzing-support" "log-f32" (func $log-f32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $log-f64 (param f64)))
 (import "fuzzing-support" "log-v128" (func $log-v128 (param v128)))
 (import "fuzzing-support" "log-nullref" (func $log-nullref (param nullref)))
 (import "fuzzing-support" "log-exnref" (func $log-exnref (param exnref)))
 (memory $0 (shared 1 1))
 (data (i32.const 0) "N\0fN\f5\f9\b1\ff\fa\eb\e5\fe\a7\ec\fb\fc\f4\a6\e4\ea\f0\ae\e3")
 (table $0 0 0 funcref)
 (global $global$5 (mut f32) (f32.const 74))
 (global $global$4 (mut nullref) (ref.null))
 (global $global$3 (mut i32) (i32.const 1263230471))
 (global $global$2 (mut i32) (i32.const -131072))
 (global $global$1 (mut (i64 f64 exnref)) (tuple.make
  (i64.const 4294967295)
  (f64.const 0)
  (ref.null)
 ))
 (global $hangLimit (mut i32) (i32.const 10))
 (event $event$0 (attr 0) (param i64))
 (event $event$1 (attr 0) (param))
 (export "hashMemory" (func $hashMemory))
 (export "memory" (memory $0))
 (export "func_8" (func $func_8))
 (export "func_8_invoker" (func $func_8_invoker))
 (export "func_10" (func $func_10))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $hashMemory (result i32)
  (local $0 i32)
  (local.set $0
   (i32.const 5381)
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=1
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=2
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=3
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=4
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=5
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=6
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=7
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=8
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=9
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=10
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=11
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=12
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=13
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=14
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=15
     (i32.const 0)
    )
   )
  )
  (local.get $0)
 )
 (func $func_8 (result anyref)
  (local $0 i64)
  (local $1 exnref)
  (local $2 nullref)
  (local $3 i32)
  (local $4 anyref)
  (local $5 nullref)
  (local $6 f32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $4)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (loop $label$1
    (block
     (if
      (i32.eqz
       (global.get $hangLimit)
      )
      (return
       (ref.null)
      )
     )
     (global.set $hangLimit
      (i32.sub
       (global.get $hangLimit)
       (i32.const 1)
      )
     )
    )
    (block
     (block $label$2
      (atomic.fence)
      (call $log-f64
       (f64.const 0)
      )
     )
     (br_if $label$1
      (local.tee $3
       (i32.trunc_sat_f32_u
        (if (result f32)
         (local.get $3)
         (block $label$3 (result f32)
          (local.set $3
           (global.get $global$3)
          )
          (block $label$4 (result f32)
           (local.set $3
            (loop $label$5 (result i32)
             (block
              (if
               (i32.eqz
                (global.get $hangLimit)
               )
               (return
                (local.get $4)
               )
              )
              (global.set $hangLimit
               (i32.sub
                (global.get $hangLimit)
                (i32.const 1)
               )
              )
             )
             (block (result i32)
              (block $label$6
               (block $label$7
                (loop $label$8
                 (block
                  (if
                   (i32.eqz
                    (global.get $hangLimit)
                   )
                   (return
                    (ref.null)
                   )
                  )
                  (global.set $hangLimit
                   (i32.sub
                    (global.get $hangLimit)
                    (i32.const 1)
                   )
                  )
                 )
                 (nop)
                )
                (block $label$9
                 (loop $label$10
                  (block
                   (if
                    (i32.eqz
                     (global.get $hangLimit)
                    )
                    (return
                     (local.get $4)
                    )
                   )
                   (global.set $hangLimit
                    (i32.sub
                     (global.get $hangLimit)
                     (i32.const 1)
                    )
                   )
                  )
                  (block
                   (nop)
                   (br_if $label$10
                    (i32.eqz
                     (local.get $3)
                    )
                   )
                   (nop)
                  )
                 )
                 (br_if $label$7
                  (i32.eqz
                   (i32.const 790965538)
                  )
                 )
                )
               )
              )
              (br_if $label$5
               (loop $label$11 (result i32)
                (block
                 (if
                  (i32.eqz
                   (global.get $hangLimit)
                  )
                  (return
                   (local.get $4)
                  )
                 )
                 (global.set $hangLimit
                  (i32.sub
                   (global.get $hangLimit)
                   (i32.const 1)
                  )
                 )
                )
                (block (result i32)
                 (block $label$12
                  (memory.fill
                   (i32.and
                    (if (result i32)
                     (local.get $3)
                     (local.get $3)
                     (local.get $3)
                    )
                    (i32.const 15)
                   )
                   (i32.and
                    (i32.const 72)
                    (i32.const 15)
                   )
                   (if (result i32)
                    (loop $label$13 (result i32)
                     (block
                      (if
                       (i32.eqz
                        (global.get $hangLimit)
                       )
                       (return
                        (local.get $4)
                       )
                      )
                      (global.set $hangLimit
                       (i32.sub
                        (global.get $hangLimit)
                        (i32.const 1)
                       )
                      )
                     )
                     (atomic.notify offset=22
                      (i32.and
                       (i32.const 168631327)
                       (i32.const 15)
                      )
                      (local.get $3)
                     )
                    )
                    (i32.const 102434061)
                    (local.get $3)
                   )
                  )
                  (block $label$14
                   (call $log-exnref
                    (tuple.extract 1
                     (tuple.make
                      (f32.const 3402823466385288598117041e14)
                      (ref.null)
                      (i32.const -65535)
                      (i32.const 0)
                      (i64.const 4503599627370496)
                      (i32.const 1900762444)
                     )
                    )
                   )
                   (loop $label$15
                    (block
                     (if
                      (i32.eqz
                       (global.get $hangLimit)
                      )
                      (return
                       (ref.null)
                      )
                     )
                     (global.set $hangLimit
                      (i32.sub
                       (global.get $hangLimit)
                       (i32.const 1)
                      )
                     )
                    )
                    (block
                     (nop)
                     (br_if $label$15
                      (i32.eqz
                       (local.get $3)
                      )
                     )
                     (nop)
                    )
                   )
                  )
                 )
                 (br_if $label$11
                  (call $hashMemory)
                 )
                 (block $label$16 (result i32)
                  (nop)
                  (i32.const 15677)
                 )
                )
               )
              )
              (ref.is_null
               (local.get $1)
              )
             )
            )
           )
           (local.get $6)
          )
         )
         (block $label$17 (result f32)
          (f64.store offset=4 align=4
           (i32.and
            (global.get $global$3)
            (i32.const 15)
           )
           (call $deNan64
            (f64.promote_f32
             (local.tee $6
              (br_if $label$17
               (block $label$18 (result f32)
                (f32.const 9223372036854775808)
               )
               (i32.eqz
                (local.get $3)
               )
              )
             )
            )
           )
          )
          (call $deNan32
           (select
            (global.get $global$5)
            (f32.const 81)
            (i64.eqz
             (block $label$19 (result i64)
              (memory.fill
               (i32.and
                (local.get $3)
                (i32.const 15)
               )
               (i32.and
                (i32.const -254)
                (i32.const 15)
               )
               (local.get $3)
              )
              (loop $label$20 (result i64)
               (block
                (if
                 (i32.eqz
                  (global.get $hangLimit)
                 )
                 (return
                  (local.get $4)
                 )
                )
                (global.set $hangLimit
                 (i32.sub
                  (global.get $hangLimit)
                  (i32.const 1)
                 )
                )
               )
               (local.get $0)
              )
             )
            )
           )
          )
         )
        )
       )
      )
     )
     (br_if $label$1
      (i32.eqz
       (i16x8.extract_lane_u 3
        (i64x2.splat
         (i64.trunc_sat_f32_s
          (local.get $6)
         )
        )
       )
      )
     )
    )
   )
   (i32.atomic.store16 offset=4
    (i32.and
     (local.tee $3
      (i32.const 1359351837)
     )
     (i32.const 15)
    )
    (global.get $global$3)
   )
   (return
    (local.get $4)
   )
  )
 )
 (func $func_8_invoker
  (drop
   (call $func_8)
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_10 (param $0 exnref) (param $1 v128) (result funcref)
  (local $2 f32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result funcref)
   (tuple.extract 3
    (tuple.make
     (f64.const -262144)
     (ref.null)
     (ref.null)
     (ref.func $log-f32)
    )
   )
  )
 )
 (func $func_11 (result v128)
  (local $0 exnref)
  (local $1 i32)
  (local $2 funcref)
  (local $3 (i64 exnref f64))
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (v128.const i32x4 0xffc9ffff 0x6a370007 0xff813c7a 0xff88ff00)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result v128)
   (loop $label$1
    (block
     (if
      (i32.eqz
       (global.get $hangLimit)
      )
      (return
       (v128.const i32x4 0x0000025b 0x53074942 0x00008001 0xfffffff8)
      )
     )
     (global.set $hangLimit
      (i32.sub
       (global.get $hangLimit)
       (i32.const 1)
      )
     )
    )
    (block $label$2
     (nop)
     (call $log-f32
      (tuple.extract 3
       (tuple.make
        (ref.null)
        (ref.null)
        (v128.const i32x4 0x00000000 0x40534000 0xffffffff 0x7fefffff)
        (f32.const 7802510723842975705811014e7)
        (i64.trunc_f64_u
         (f64.const -2147483648)
        )
       )
      )
     )
    )
   )
   (v128.load offset=2 align=8
    (i32.and
     (f64.eq
      (f64.const 1)
      (f64.const -1)
     )
     (i32.const 15)
    )
   )
  )
 )
 (func $hangLimitInitializer
  (global.set $hangLimit
   (i32.const 10)
  )
 )
 (func $deNan32 (param $0 f32) (result f32)
  (if (result f32)
   (f32.eq
    (local.get $0)
    (local.get $0)
   )
   (local.get $0)
   (f32.const 0)
  )
 )
 (func $deNan64 (param $0 f64) (result f64)
  (if (result f64)
   (f64.eq
    (local.get $0)
    (local.get $0)
   )
   (local.get $0)
   (f64.const 0)
  )
 )
)
