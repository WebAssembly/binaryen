(module
 (type $none_=>_none (func))
 (type $none_=>_i64 (func (result i64)))
 (type $exnref_=>_none (func (param exnref)))
 (type $none_=>_f64 (func (result f64)))
 (type $i32_=>_none (func (param i32)))
 (type $i64_=>_none (func (param i64)))
 (type $i64_exnref_f32_funcref_exnref_=>_none (func (param i64 exnref f32 funcref exnref)))
 (type $f32_=>_none (func (param f32)))
 (type $f64_=>_none (func (param f64)))
 (type $f64_exnref_exnref_=>_none (func (param f64 exnref exnref)))
 (type $v128_=>_none (func (param v128)))
 (type $nullref_=>_none (func (param nullref)))
 (type $none_=>_i32 (func (result i32)))
 (type $f32_=>_f32 (func (param f32) (result f32)))
 (type $f64_=>_f64 (func (param f64) (result f64)))
 (type $f64_=>_v128 (func (param f64) (result v128)))
 (type $f64_exnref_=>_v128 (func (param f64 exnref) (result v128)))
 (type $none_=>_anyref (func (result anyref)))
 (type $f64_exnref_=>_anyref (func (param f64 exnref) (result anyref)))
 (type $nullref_funcref_nullref_exnref_=>_anyref (func (param nullref funcref nullref exnref) (result anyref)))
 (type $none_=>_nullref (func (result nullref)))
 (type $f32_=>_exnref (func (param f32) (result exnref)))
 (import "fuzzing-support" "log-i32" (func $log-i32 (param i32)))
 (import "fuzzing-support" "log-i64" (func $log-i64 (param i64)))
 (import "fuzzing-support" "log-f32" (func $log-f32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $log-f64 (param f64)))
 (import "fuzzing-support" "log-v128" (func $log-v128 (param v128)))
 (import "fuzzing-support" "log-nullref" (func $log-nullref (param nullref)))
 (import "fuzzing-support" "log-exnref" (func $log-exnref (param exnref)))
 (memory $0 1 1)
 (data (i32.const 0) "N\0fN\f5\f9\b1\ff\fa\eb\e5\fe\a7\ec\fb\fc\f4\a6\e4\ea\f0\ae\e3")
 (table $0 10 10 funcref)
 (elem (i32.const 0) $func_16 $func_16 $func_18 $func_19 $func_23 $func_23 $func_23 $func_23 $func_23 $func_23)
 (global $global$0 (mut i32) (i32.const 975663930))
 (global $global$1 (mut i32) (i32.const 2066300474))
 (global $global$2 (mut i64) (i64.const 20510))
 (global $global$3 (mut f32) (f32.const -2147483648))
 (global $global$4 (mut v128) (v128.const i32x4 0x7f002833 0x580000fe 0x59750500 0x01ff002f))
 (global $global$5 (mut funcref) (ref.null))
 (global $global$6 (mut anyref) (ref.null))
 (global $global$7 (mut nullref) (ref.null))
 (global $global$8 (mut nullref) (ref.null))
 (global $hangLimit (mut i32) (i32.const 10))
 (event $event$0 (attr 0) (param f64 exnref exnref))
 (event $event$1 (attr 0) (param exnref))
 (export "hashMemory" (func $hashMemory))
 (export "memory" (memory $0))
 (export "func_8" (func $func_8))
 (export "func_9" (func $func_9))
 (export "func_9_invoker" (func $func_9_invoker))
 (export "func_11_invoker" (func $func_11_invoker))
 (export "func_13_invoker" (func $func_13_invoker))
 (export "func_17" (func $func_17))
 (export "func_18" (func $func_18))
 (export "func_20" (func $func_20))
 (export "func_21_invoker" (func $func_21_invoker))
 (export "func_23" (func $func_23))
 (export "func_24" (func $func_24))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $hashMemory (; 7 ;) (result i32)
  (local $0 i32)
  (local.set $0
   (i32.const 5381)
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=1
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=2
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=3
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=4
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=5
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=6
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=7
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=8
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=9
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=10
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=11
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=12
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=13
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=14
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=15
     (i32.const 0)
    )
   )
  )
  (local.get $0)
 )
 (func $func_8 (; 8 ;) (result anyref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (ref.null)
 )
 (func $func_9 (; 9 ;) (result i64)
  (local $0 v128)
  (local $1 f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i64.const 127)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result i64)
   (call $log-i32
    (call $hashMemory)
   )
   (i64.const 18014398509481984)
  )
 )
 (func $func_9_invoker (; 10 ;)
  (drop
   (call $func_9)
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_11 (; 11 ;) (param $0 f64) (result v128)
  (local $1 nullref)
  (local $2 f32)
  (local $3 funcref)
  (local $4 i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (v128.const i32x4 0x314e0000 0x0000e901 0x19000354 0x0001e501)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (v128.const i32x4 0x00020000 0x00000000 0xfffffff3 0xffffffff)
 )
 (func $func_11_invoker (; 12 ;)
  (drop
   (call $func_11
    (f64.const -1.1754943508222875e-38)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_11
    (f64.const 536870912)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_11
    (f64.const 6009)
   )
  )
 )
 (func $func_13 (; 13 ;) (param $0 i64) (param $1 exnref) (param $2 f32) (param $3 funcref) (param $4 exnref)
  (local $5 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (call $log-i64
   (if (result i64)
    (i32.eqz
     (i32.const 3084)
    )
    (block $label$0 (result i64)
     (call $log-i32
      (call $hashMemory)
     )
     (if (result i64)
      (i32.eqz
       (if (result i32)
        (i32.eqz
         (loop $label$1
          (block
           (if
            (i32.eqz
             (global.get $hangLimit)
            )
            (return)
           )
           (global.set $hangLimit
            (i32.sub
             (global.get $hangLimit)
             (i32.const 1)
            )
           )
          )
          (block $label$2
           (call $log-i32
            (call $hashMemory)
           )
           (return)
          )
         )
        )
        (i32.const 1532511570)
        (i32.const 52123137)
       )
      )
      (i64.const -110)
      (block $label$3
       (nop)
       (return)
      )
     )
    )
    (block $label$4
     (nop)
     (loop $label$6
      (block
       (if
        (i32.eqz
         (global.get $hangLimit)
        )
        (return)
       )
       (global.set $hangLimit
        (i32.sub
         (global.get $hangLimit)
         (i32.const 1)
        )
       )
      )
      (block $label$7
       (if
        (loop $label$8 (result i32)
         (block
          (if
           (i32.eqz
            (global.get $hangLimit)
           )
           (return)
          )
          (global.set $hangLimit
           (i32.sub
            (global.get $hangLimit)
            (i32.const 1)
           )
          )
         )
         (block $label$9 (result i32)
          (local.set $1
           (loop $label$10 (result exnref)
            (block
             (if
              (i32.eqz
               (global.get $hangLimit)
              )
              (return)
             )
             (global.set $hangLimit
              (i32.sub
               (global.get $hangLimit)
               (i32.const 1)
              )
             )
            )
            (block (result exnref)
             (block $label$11
              (if
               (i32.eqz
                (if (result i32)
                 (i32.const -536870912)
                 (i32.const 10016)
                 (block $label$12
                  (call $log-i32
                   (i32.const 486999634)
                  )
                  (br $label$11)
                 )
                )
               )
               (call $log-i32
                (call $hashMemory)
               )
               (block $label$13
                (nop)
               )
              )
              (call $log-i64
               (local.get $0)
              )
             )
             (br_if $label$10
              (i32.eqz
               (loop $label$14 (result i32)
                (block
                 (if
                  (i32.eqz
                   (global.get $hangLimit)
                  )
                  (return)
                 )
                 (global.set $hangLimit
                  (i32.sub
                   (global.get $hangLimit)
                   (i32.const 1)
                  )
                 )
                )
                (block (result i32)
                 (block $label$15
                  (local.tee $1
                   (block $label$16
                    (local.set $1
                     (ref.null)
                    )
                    (br $label$14)
                   )
                  )
                  (block $label$17
                   (call $log-i32
                    (i32.const -41)
                   )
                   (call $log-i32
                    (call $hashMemory)
                   )
                  )
                 )
                 (br_if $label$14
                  (br_if $label$9
                   (ref.is_null
                    (ref.null)
                   )
                   (br_if $label$9
                    (i32.const 262144)
                    (i32.const 3084)
                   )
                  )
                 )
                 (i32.const 128)
                )
               )
              )
             )
             (local.get $4)
            )
           )
          )
          (i32.const 792338989)
         )
        )
        (block $label$18
         (loop $label$19
          (block
           (if
            (i32.eqz
             (global.get $hangLimit)
            )
            (return)
           )
           (global.set $hangLimit
            (i32.sub
             (global.get $hangLimit)
             (i32.const 1)
            )
           )
          )
          (local.set $5
           (local.get $5)
          )
         )
         (nop)
        )
        (local.set $1
         (local.get $4)
        )
       )
       (br $label$6)
      )
     )
    )
   )
  )
 )
 (func $func_13_invoker (; 14 ;)
  (call $func_13
   (i64.const -9223372036854775808)
   (ref.null)
   (f32.const 9223372036854775808)
   (ref.func $log-i32)
   (ref.null)
  )
 )
 (func $func_15 (; 15 ;) (result f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f64.const 3.8437398592487645e-236)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (f64.const 0)
 )
 (func $func_16 (; 16 ;) (param $0 f64) (param $1 exnref) (result v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (v128.const i32x4 0x000800ff 0x42410000 0x223a652c 0x4000fff8)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (v128.const i32x4 0x00000000 0x00000000 0x444b4141 0x40434a4a)
 )
 (func $func_17 (; 17 ;) (param $0 f64) (param $1 exnref) (result anyref)
  (local $2 nullref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (if (result nullref)
   (i32.eqz
    (i32.const 262144)
   )
   (ref.null)
   (ref.null)
  )
 )
 (func $func_18 (; 18 ;) (result i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i64.const 4096)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (loop $label$0 (result i64)
   (block
    (if
     (i32.eqz
      (global.get $hangLimit)
     )
     (return
      (i64.const 15)
     )
    )
    (global.set $hangLimit
     (i32.sub
      (global.get $hangLimit)
      (i32.const 1)
     )
    )
   )
   (i64.const 6509766706562358106)
  )
 )
 (func $func_19 (; 19 ;) (result i64)
  (local $0 anyref)
  (local $1 funcref)
  (local $2 f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i64.const 21339)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (nop)
   (return
    (i64.const -2199023255552)
   )
  )
 )
 (func $func_20 (; 20 ;) (result f64)
  (local $0 v128)
  (local $1 f32)
  (local $2 v128)
  (local $3 funcref)
  (local $4 v128)
  (local $5 nullref)
  (local $6 i32)
  (local $7 i32)
  (local $8 funcref)
  (local $9 v128)
  (local $10 v128)
  (local $11 v128)
  (local $12 funcref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f64.const 5)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (f64.const 1.6293189712507804e-52)
 )
 (func $func_21 (; 21 ;) (result nullref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (nop)
   (return
    (ref.null)
   )
  )
 )
 (func $func_21_invoker (; 22 ;)
  (drop
   (call $func_21)
  )
  (drop
   (call $func_21)
  )
  (drop
   (call $func_21)
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_21)
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_23 (; 23 ;) (param $0 nullref) (param $1 funcref) (param $2 nullref) (param $3 exnref) (result anyref)
  (local $4 exnref)
  (local $5 i32)
  (local $6 i32)
  (local $7 f32)
  (local $8 i32)
  (local $9 funcref)
  (local $10 nullref)
  (local $11 anyref)
  (local $12 v128)
  (local $13 anyref)
  (local $14 f32)
  (local $15 f32)
  (local $16 funcref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $11)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (ref.null)
 )
 (func $func_24 (; 24 ;) (param $0 f32) (result exnref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (if (result nullref)
   (i32.const 926356344)
   (block $label$0 (result nullref)
    (local.set $0
     (local.tee $0
      (f32.const 9223372036854775808)
     )
    )
    (loop $label$1 (result nullref)
     (block
      (if
       (i32.eqz
        (global.get $hangLimit)
       )
       (return
        (ref.null)
       )
      )
      (global.set $hangLimit
       (i32.sub
        (global.get $hangLimit)
        (i32.const 1)
       )
      )
     )
     (block (result nullref)
      (block $label$2
       (block $label$3
        (nop)
       )
       (nop)
      )
      (br_if $label$1
       (i32.const -16777216)
      )
      (block $label$4 (result nullref)
       (block $label$5
        (local.set $0
         (if (result f32)
          (loop $label$6 (result i32)
           (block
            (if
             (i32.eqz
              (global.get $hangLimit)
             )
             (return
              (ref.null)
             )
            )
            (global.set $hangLimit
             (i32.sub
              (global.get $hangLimit)
              (i32.const 1)
             )
            )
           )
           (block (result i32)
            (block $label$7
             (nop)
             (nop)
            )
            (br_if $label$6
             (i32.eqz
              (block $label$8
               (block $label$9
                (nop)
                (br_if $label$1
                 (i32.const -134217728)
                )
               )
               (br $label$6)
              )
             )
            )
            (i32.const 6924)
           )
          )
          (local.tee $0
           (f32.const 1668112640)
          )
          (f32.const 1.6767243896965264e-30)
         )
        )
        (nop)
        (nop)
       )
       (ref.null)
      )
     )
    )
   )
   (block $label$11
    (nop)
    (return
     (ref.null)
    )
   )
  )
 )
 (func $hangLimitInitializer (; 25 ;)
  (global.set $hangLimit
   (i32.const 10)
  )
 )
 (func $deNan32 (; 26 ;) (param $0 f32) (result f32)
  (if (result f32)
   (f32.eq
    (local.get $0)
    (local.get $0)
   )
   (local.get $0)
   (f32.const 0)
  )
 )
 (func $deNan64 (; 27 ;) (param $0 f64) (result f64)
  (if (result f64)
   (f64.eq
    (local.get $0)
    (local.get $0)
   )
   (local.get $0)
   (f64.const 0)
  )
 )
)
