(module
 (type $none_=>_none (func))
 (type $i32_=>_none (func (param i32)))
 (type $i64_=>_none (func (param i64)))
 (type $f32_=>_none (func (param f32)))
 (type $f64_=>_none (func (param f64)))
 (type $v128_=>_none (func (param v128)))
 (type $funcref_anyref_f64_=>_none (func (param funcref anyref f64)))
 (type $nullref_=>_none (func (param nullref)))
 (type $exnref_=>_none (func (param exnref)))
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_i64 (func (result i64)))
 (type $v128_=>_i64 (func (param v128) (result i64)))
 (type $none_=>_f32 (func (result f32)))
 (type $f32_=>_f32 (func (param f32) (result f32)))
 (type $none_=>_f64 (func (result f64)))
 (type $f32_anyref_v128_=>_f64 (func (param f32 anyref v128) (result f64)))
 (type $f64_=>_f64 (func (param f64) (result f64)))
 (type $v128_i64_nullref_i64_v128_=>_f64 (func (param v128 i64 nullref i64 v128) (result f64)))
 (type $nullref_exnref_nullref_funcref_v128_=>_funcref (func (param nullref exnref nullref funcref v128) (result funcref)))
 (type $none_=>_nullref (func (result nullref)))
 (type $nullref_i64_i64_f64_=>_nullref (func (param nullref i64 i64 f64) (result nullref)))
 (type $none_=>_exnref (func (result exnref)))
 (type $f64_nullref_i32_funcref_nullref_=>_exnref (func (param f64 nullref i32 funcref nullref) (result exnref)))
 (type $anyref_nullref_v128_f64_=>_exnref (func (param anyref nullref v128 f64) (result exnref)))
 (import "fuzzing-support" "log-i32" (func $log-i32 (param i32)))
 (import "fuzzing-support" "log-i64" (func $log-i64 (param i64)))
 (import "fuzzing-support" "log-f32" (func $log-f32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $log-f64 (param f64)))
 (import "fuzzing-support" "log-v128" (func $log-v128 (param v128)))
 (import "fuzzing-support" "log-nullref" (func $log-nullref (param nullref)))
 (import "fuzzing-support" "log-exnref" (func $log-exnref (param exnref)))
 (memory $0 (shared 1 1))
 (data (i32.const 0) "N\0fN\f5\f9\b1\ff\fa\eb\e5\fe\a7\ec\fb\fc\f4\a6\e4\ea\f0\ae\e3")
 (table $0 5 funcref)
 (elem (i32.const 0) $func_10 $func_17 $func_17 $func_17 $func_23)
 (global $global$0 (mut i32) (i32.const 975663930))
 (global $global$1 (mut i32) (i32.const 2066300474))
 (global $global$2 (mut i64) (i64.const 20510))
 (global $global$3 (mut f32) (f32.const -2147483648))
 (global $global$4 (mut v128) (v128.const i32x4 0x7f002833 0x580000fe 0x59750500 0x01ff002f))
 (global $global$5 (mut funcref) (ref.null))
 (global $global$6 (mut anyref) (ref.null))
 (global $global$7 (mut nullref) (ref.null))
 (global $global$8 (mut nullref) (ref.null))
 (global $hangLimit (mut i32) (i32.const 10))
 (event $event$0 (attr 0) (param funcref anyref f64))
 (event $event$1 (attr 0) (param i32))
 (export "hashMemory" (func $hashMemory))
 (export "memory" (memory $0))
 (export "func_8" (func $func_8))
 (export "func_11" (func $func_11))
 (export "func_12_invoker" (func $func_12_invoker))
 (export "func_15" (func $func_15))
 (export "func_15_invoker" (func $func_15_invoker))
 (export "func_17_invoker" (func $func_17_invoker))
 (export "func_19" (func $func_19))
 (export "func_19_invoker" (func $func_19_invoker))
 (export "func_21" (func $func_21))
 (export "func_21_invoker" (func $func_21_invoker))
 (export "func_23_invoker" (func $func_23_invoker))
 (export "func_25" (func $func_25))
 (export "func_26" (func $func_26))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $hashMemory (result i32)
  (local $0 i32)
  (local.set $0
   (i32.const 5381)
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=1
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=2
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=3
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=4
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=5
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=6
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=7
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=8
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=9
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=10
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=11
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=12
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=13
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=14
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=15
     (i32.const 0)
    )
   )
  )
  (local.get $0)
 )
 (func $func_8
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (block $label$1
    (block $label$2
     (nop)
     (nop)
    )
    (nop)
   )
   (nop)
  )
 )
 (func $func_9 (param $0 nullref) (param $1 exnref) (param $2 nullref) (param $3 funcref) (param $4 v128) (result funcref)
  (local $5 nullref)
  (local $6 f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (local.tee $3
   (ref.null)
  )
 )
 (func $func_10 (result i64)
  (local $0 anyref)
  (local $1 funcref)
  (local $2 f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i64.const 21339)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (nop)
   (return
    (i64.const -2199023255552)
   )
  )
 )
 (func $func_11 (result f64)
  (local $0 v128)
  (local $1 f32)
  (local $2 v128)
  (local $3 funcref)
  (local $4 v128)
  (local $5 nullref)
  (local $6 i32)
  (local $7 i32)
  (local $8 funcref)
  (local $9 v128)
  (local $10 v128)
  (local $11 v128)
  (local $12 funcref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f64.const 5)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (f64.const 1.6293189712507804e-52)
 )
 (func $func_12 (result nullref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (nop)
   (return
    (ref.null)
   )
  )
 )
 (func $func_12_invoker
  (drop
   (call $func_12)
  )
  (drop
   (call $func_12)
  )
  (drop
   (call $func_12)
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_12)
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_14 (param $0 nullref) (param $1 i64) (param $2 i64) (param $3 f64) (result nullref)
  (local $4 f64)
  (local $5 f32)
  (local $6 i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result nullref)
   (nop)
   (block $label$1 (result nullref)
    (local.get $0)
   )
  )
 )
 (func $func_15 (result f32)
  (local $0 funcref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f32.const -0)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (call $log-f32
    (loop $label$1 (result f32)
     (block
      (if
       (i32.eqz
        (global.get $hangLimit)
       )
       (return
        (f32.const 0)
       )
      )
      (global.set $hangLimit
       (i32.sub
        (global.get $hangLimit)
        (i32.const 1)
       )
      )
     )
     (block (result f32)
      (block $label$2
       (nop)
       (nop)
      )
      (br_if $label$1
       (i32.eqz
        (i32.const 31868)
       )
      )
      (f32.const -18446744073709551615)
     )
    )
   )
   (if
    (block $label$3
     (call $log-exnref
      (ref.null)
     )
     (loop $label$4
      (block
       (if
        (i32.eqz
         (global.get $hangLimit)
        )
        (return
         (f32.const 0)
        )
       )
       (global.set $hangLimit
        (i32.sub
         (global.get $hangLimit)
         (i32.const 1)
        )
       )
      )
      (call $log-exnref
       (ref.null)
      )
     )
     (return
      (f32.const 2101943053617856459558324e13)
     )
    )
    (block $label$5
     (call $log-i32
      (call $hashMemory)
     )
     (br_if $label$5
      (i32.eqz
       (i32.const -2147483648)
      )
     )
    )
    (nop)
   )
   (return
    (f32.const 35013904)
   )
  )
 )
 (func $func_15_invoker
  (drop
   (call $func_15)
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_15)
  )
  (drop
   (call $func_15)
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_17 (param $0 f64) (param $1 nullref) (param $2 i32) (param $3 funcref) (param $4 nullref) (result exnref)
  (local $5 anyref)
  (local $6 exnref)
  (local $7 f32)
  (local $8 f32)
  (local $9 funcref)
  (local $10 nullref)
  (local $11 nullref)
  (local $12 f32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (local.tee $6
   (local.tee $6
    (ref.null)
   )
  )
 )
 (func $func_17_invoker
  (drop
   (call $func_17
    (f64.const 3.2330574282313187e-229)
    (ref.null)
    (i32.const 65536)
    (ref.func $func_10)
    (ref.null)
   )
  )
  (drop
   (call $func_17
    (f64.const 2.2250738585072014e-308)
    (ref.null)
    (i32.const -66)
    (ref.func $func_15_invoker)
    (ref.null)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_19 (result exnref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (select (result nullref)
   (ref.null)
   (ref.null)
   (i32.const 1)
  )
 )
 (func $func_19_invoker
  (drop
   (call $func_19)
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_19)
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_21 (param $0 f32) (param $1 anyref) (param $2 v128) (result f64)
  (local $3 f32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f64.const -35)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (if
    (i32.const -1024)
    (block $label$1
     (if
      (loop $label$2 (result i32)
       (block
        (if
         (i32.eqz
          (global.get $hangLimit)
         )
         (return
          (f64.const 218)
         )
        )
        (global.set $hangLimit
         (i32.sub
          (global.get $hangLimit)
          (i32.const 1)
         )
        )
       )
       (block (result i32)
        (local.set $0
         (local.get $3)
        )
        (br_if $label$2
         (i32.eqz
          (i32.const -127)
         )
        )
        (loop $label$5 (result i32)
         (block
          (if
           (i32.eqz
            (global.get $hangLimit)
           )
           (return
            (f64.const 18250224326260770977349632)
           )
          )
          (global.set $hangLimit
           (i32.sub
            (global.get $hangLimit)
            (i32.const 1)
           )
          )
         )
         (block (result i32)
          (local.tee $2
           (loop $label$6
            (block
             (if
              (i32.eqz
               (global.get $hangLimit)
              )
              (return
               (f64.const 536870912)
              )
             )
             (global.set $hangLimit
              (i32.sub
               (global.get $hangLimit)
               (i32.const 1)
              )
             )
            )
            (block $label$7
             (br $label$1)
            )
           )
          )
          (br_if $label$5
           (i32.const 37771863)
          )
          (i32.const 1026961235)
         )
        )
       )
      )
      (local.set $0
       (f32.const 15574585428672512)
      )
      (block $label$15
       (call $log-i32
        (call $hashMemory)
       )
      )
     )
     (nop)
    )
    (nop)
   )
   (return
    (f64.const 302456592)
   )
  )
 )
 (func $func_21_invoker
  (drop
   (call $func_21
    (f32.const 589308224)
    (ref.null)
    (v128.const i32x4 0xffffff81 0x04070504 0x02007d03 0xfffffe00)
   )
  )
  (drop
   (call $func_21
    (f32.const 168096624)
    (ref.null)
    (v128.const i32x4 0x4ed626fe 0x74770f63 0xdf000000 0x564a5657)
   )
  )
  (drop
   (call $func_21
    (f32.const 707669312)
    (ref.null)
    (v128.const i32x4 0x0000001f 0xfc7f3000 0x00005c00 0x5f110d0f)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_23 (param $0 v128) (result i64)
  (local $1 i32)
  (local $2 f64)
  (local $3 f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i64.const 2147483646)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (local.set $3
    (local.tee $3
     (local.get $3)
    )
   )
   (return
    (i64.const 110)
   )
  )
 )
 (func $func_23_invoker
  (drop
   (call $func_23
    (v128.const i32x4 0xf0000000 0x00000046 0x00080000 0x513d3229)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_23
    (v128.const i32x4 0x4409256e 0xff807c7c 0x0000ffa1 0x51378000)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_25 (param $0 anyref) (param $1 nullref) (param $2 v128) (param $3 f64) (result exnref)
  (local $4 i64)
  (local $5 nullref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (ref.null)
 )
 (func $func_26 (param $0 v128) (param $1 i64) (param $2 nullref) (param $3 i64) (param $4 v128) (result f64)
  (local $5 funcref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f64.const 18505)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (loop $label$0 (result f64)
   (block
    (if
     (i32.eqz
      (global.get $hangLimit)
     )
     (return
      (f64.const -1)
     )
    )
    (global.set $hangLimit
     (i32.sub
      (global.get $hangLimit)
      (i32.const 1)
     )
    )
   )
   (block (result f64)
    (block $label$1
     (nop)
     (call $log-v128
      (v128.const i32x4 0x00000000 0xc3e00000 0x00000000 0x403c0000)
     )
    )
    (br_if $label$0
     (i32.const 127)
    )
    (f64.const 2147483647)
   )
  )
 )
 (func $hangLimitInitializer
  (global.set $hangLimit
   (i32.const 10)
  )
 )
 (func $deNan32 (param $0 f32) (result f32)
  (if (result f32)
   (f32.eq
    (local.get $0)
    (local.get $0)
   )
   (local.get $0)
   (f32.const 0)
  )
 )
 (func $deNan64 (param $0 f64) (result f64)
  (if (result f64)
   (f64.eq
    (local.get $0)
    (local.get $0)
   )
   (local.get $0)
   (f64.const 0)
  )
 )
)
