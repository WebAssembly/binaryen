(module
 (type $none_=>_none (func))
 (type $none_=>_i32 (func (result i32)))
 (type $i32_=>_none (func (param i32)))
 (type $i64_=>_none (func (param i64)))
 (type $f32_=>_none (func (param f32)))
 (type $f64_=>_none (func (param f64)))
 (type $f64_i32_=>_none (func (param f64 i32)))
 (type $v128_=>_none (func (param v128)))
 (type $v128_f32_=>_none (func (param v128 f32)))
 (type $nullref_=>_none (func (param nullref)))
 (type $exnref_=>_none (func (param exnref)))
 (type $none_=>_i64 (func (result i64)))
 (type $f32_=>_f32 (func (param f32) (result f32)))
 (type $f64_=>_f64 (func (param f64) (result f64)))
 (type $none_=>_v128 (func (result v128)))
 (type $exnref_v128_f64_f32_v128_nullref_=>_v128 (func (param exnref v128 f64 f32 v128 nullref) (result v128)))
 (type $none_=>_funcref (func (result funcref)))
 (type $f64_v128_=>_anyref (func (param f64 v128) (result anyref)))
 (type $f64_exnref_=>_exnref (func (param f64 exnref) (result exnref)))
 (import "fuzzing-support" "log-i32" (func $log-i32 (param i32)))
 (import "fuzzing-support" "log-i64" (func $log-i64 (param i64)))
 (import "fuzzing-support" "log-f32" (func $log-f32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $log-f64 (param f64)))
 (import "fuzzing-support" "log-v128" (func $log-v128 (param v128)))
 (import "fuzzing-support" "log-nullref" (func $log-nullref (param nullref)))
 (import "fuzzing-support" "log-exnref" (func $log-exnref (param exnref)))
 (memory $0 (shared 1 1))
 (data (i32.const 0) "N\0fN\f5\f9\b1\ff\fa\eb\e5\fe\a7\ec\fb\fc\f4\a6\e4\ea\f0\ae\e3")
 (table $0 1 funcref)
 (elem (i32.const 0) $func_12)
 (global $global$0 (mut i32) (i32.const 975663930))
 (global $global$1 (mut i32) (i32.const 2066300474))
 (global $global$2 (mut i64) (i64.const 20510))
 (global $global$3 (mut f32) (f32.const -2147483648))
 (global $global$4 (mut v128) (v128.const i32x4 0x7f002833 0x580000fe 0x59750500 0x01ff002f))
 (global $global$5 (mut funcref) (ref.null))
 (global $global$6 (mut anyref) (ref.null))
 (global $global$7 (mut nullref) (ref.null))
 (global $global$8 (mut nullref) (ref.null))
 (global $hangLimit (mut i32) (i32.const 10))
 (event $event$0 (attr 0) (param f64 i32))
 (event $event$1 (attr 0) (param v128 f32))
 (export "hashMemory" (func $hashMemory))
 (export "memory" (memory $0))
 (export "func_10_invoker" (func $func_10_invoker))
 (export "func_12_invoker" (func $func_12_invoker))
 (export "func_14" (func $func_14))
 (export "func_14_invoker" (func $func_14_invoker))
 (export "func_16" (func $func_16))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $hashMemory (; 7 ;) (result i32)
  (local $0 i32)
  (local.set $0
   (i32.const 5381)
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=1
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=2
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=3
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=4
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=5
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=6
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=7
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=8
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=9
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=10
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=11
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=12
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=13
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=14
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=15
     (i32.const 0)
    )
   )
  )
  (local.get $0)
 )
 (func $func_8 (; 8 ;) (param $0 exnref) (param $1 v128) (param $2 f64) (param $3 f32) (param $4 v128) (param $5 nullref) (result v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $4)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (if
    (i32.const 4)
    (call $log-v128
     (v128.const i32x4 0x00000000 0xc2f00000 0x00000000 0xc3e00000)
    )
    (block $label$1
     (block $label$2
      (call $log-i32
       (call $hashMemory)
      )
      (call $log-i32
       (call $hashMemory)
      )
     )
     (call $log-i32
      (call $hashMemory)
     )
    )
   )
   (return
    (v128.const i32x4 0xfffe1b09 0xfffe0000 0x5f0b1615 0x463dffe6)
   )
  )
 )
 (func $func_9 (; 9 ;) (result i32)
  (local $0 v128)
  (local $1 v128)
  (local $2 f64)
  (local $3 v128)
  (local $4 f32)
  (local $5 nullref)
  (local $6 v128)
  (local $7 i64)
  (local $8 v128)
  (local $9 f64)
  (local $10 funcref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i32.const 1699026950)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (i32.const 0)
 )
 (func $func_10 (; 10 ;) (param $0 f64) (param $1 v128) (result anyref)
  (local $2 i32)
  (local $3 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (ref.null)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result nullref)
   (nop)
   (ref.null)
  )
 )
 (func $func_10_invoker (; 11 ;)
  (drop
   (call $func_10
    (f64.const 0)
    (v128.const i32x4 0x55555555 0x55555555 0x45465b4c 0x00000000)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_12 (; 12 ;) (param $0 f64) (param $1 exnref) (result exnref)
  (local $2 anyref)
  (local $3 nullref)
  (local $4 v128)
  (local $5 nullref)
  (local $6 nullref)
  (local $7 anyref)
  (local $8 i64)
  (local $9 v128)
  (local $10 i32)
  (local $11 funcref)
  (local $12 i32)
  (local $13 i64)
  (local $14 anyref)
  (local $15 nullref)
  (local $16 f64)
  (local $17 f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $1)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (ref.null)
 )
 (func $func_12_invoker (; 13 ;)
  (drop
   (call $func_12
    (f64.const 1073741824)
    (ref.null)
   )
  )
 )
 (func $func_14 (; 14 ;) (result v128)
  (local $0 f64)
  (local $1 i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (v128.const i32x4 0xffffffff 0x00000000 0x7e040a06 0x00000000)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (if (result v128)
   (block $label$0 (result i32)
    (local.set $0
     (local.tee $0
      (local.tee $0
       (local.get $0)
      )
     )
    )
    (i32.const 1442978134)
   )
   (block $label$1
    (nop)
    (return
     (v128.const i32x4 0x00000000 0x00000000 0xffffffd6 0xffffffff)
    )
   )
   (block $label$2 (result v128)
    (call $log-i32
     (call $hashMemory)
    )
    (v128.const i32x4 0x020d0008 0xfffe007f 0x0000ffff 0x0a140000)
   )
  )
 )
 (func $func_14_invoker (; 15 ;)
  (drop
   (call $func_14)
  )
 )
 (func $func_16 (; 16 ;) (result funcref)
  (local $0 f64)
  (local $1 exnref)
  (local $2 funcref)
  (local $3 i64)
  (local $4 funcref)
  (local $5 anyref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $4)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (local.set $1
    (ref.null)
   )
   (return
    (ref.func $hashMemory)
   )
  )
 )
 (func $func_17 (; 17 ;) (result i64)
  (local $0 i32)
  (local $1 i64)
  (local $2 nullref)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i64.const 6678)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (if
    (i32.eqz
     (if
      (i32.eqz
       (block $label$1
        (nop)
        (return
         (i64.const 870913346513079836)
        )
       )
      )
      (block $label$2
       (return
        (local.get $1)
       )
      )
      (block $label$3
       (loop $label$4
        (block
         (if
          (i32.eqz
           (global.get $hangLimit)
          )
          (return
           (local.get $1)
          )
         )
         (global.set $hangLimit
          (i32.sub
           (global.get $hangLimit)
           (i32.const 1)
          )
         )
        )
        (local.set $0
         (i32.const -65535)
        )
       )
       (return
        (i64.const -23)
       )
      )
     )
    )
    (block $label$35
     (loop $label$36
      (block
       (if
        (i32.eqz
         (global.get $hangLimit)
        )
        (return
         (local.get $1)
        )
       )
       (global.set $hangLimit
        (i32.sub
         (global.get $hangLimit)
         (i32.const 1)
        )
       )
      )
      (local.set $2
       (ref.null)
      )
     )
     (nop)
     (local.set $1
      (local.get $1)
     )
    )
    (block $label$38
     (local.tee $0
      (block $label$39
       (nop)
       (br $label$38)
      )
     )
     (nop)
    )
   )
   (block $label$40
    (i32.store16 offset=4
     (i32.and
      (if (result i32)
       (i32.eqz
        (if (result i32)
         (i32.eqz
          (local.get $0)
         )
         (local.get $0)
         (if (result i32)
          (i32.eqz
           (if (result i32)
            (i32.eqz
             (if (result i32)
              (i32.eqz
               (if (result i32)
                (i32.eqz
                 (if (result i32)
                  (i32.eqz
                   (if (result i32)
                    (i32.eqz
                     (if (result i32)
                      (local.get $0)
                      (local.tee $0
                       (block $label$19 (result i32)
                        (i32.const 2147483647)
                       )
                      )
                      (local.get $0)
                     )
                    )
                    (local.get $0)
                    (i32.const -1073741824)
                   )
                  )
                  (local.get $0)
                  (i32.const 26886)
                 )
                )
                (local.get $0)
                (local.get $0)
               )
              )
              (i32.const -2097152)
              (local.get $0)
             )
            )
            (local.get $0)
            (local.get $0)
           )
          )
          (local.get $0)
          (local.get $0)
         )
        )
       )
       (local.get $0)
       (local.get $0)
      )
      (local.get $0)
     )
     (i32.const -128)
    )
    (return
     (local.get $1)
    )
   )
  )
 )
 (func $hangLimitInitializer (; 18 ;)
  (global.set $hangLimit
   (i32.const 10)
  )
 )
 (func $deNan32 (; 19 ;) (param $0 f32) (result f32)
  (if (result f32)
   (f32.eq
    (local.get $0)
    (local.get $0)
   )
   (local.get $0)
   (f32.const 0)
  )
 )
 (func $deNan64 (; 20 ;) (param $0 f64) (result f64)
  (if (result f64)
   (f64.eq
    (local.get $0)
    (local.get $0)
   )
   (local.get $0)
   (f64.const 0)
  )
 )
)
