(module
 (type $FUNCSIG$i (func (result i32)))
 (type $FUNCSIG$vi (func (param i32)))
 (type $FUNCSIG$vj (func (param i64)))
 (type $FUNCSIG$vf (func (param f32)))
 (type $FUNCSIG$vd (func (param f64)))
 (type $FUNCSIG$v (func))
 (type $FUNCSIG$if (func (param f32) (result i32)))
 (type $FUNCSIG$ijVf (func (param i64 v128 f32) (result i32)))
 (import "fuzzing-support" "log-i32" (func $log-i32 (param i32)))
 (import "fuzzing-support" "log-i64" (func $log-i64 (param i64)))
 (import "fuzzing-support" "log-f32" (func $log-f32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $log-f64 (param f64)))
 (memory $0 1 1)
 (data (i32.const 0) "N\0fN\f5\f9\b1\ff\fa\eb\e5\fe\a7\ec\fb\fc\f4\a6\e4\ea\f0\ae\e3")
 (table $0 2 funcref)
 (elem (i32.const 0) $func_9 $func_18)
 (global $global$0 (mut i32) (i32.const 975664160))
 (global $global$1 (mut i32) (i32.const -536870912))
 (global $global$2 (mut f32) (f32.const 2147483648))
 (global $global$3 (mut f32) (f32.const 1448959360))
 (global $hangLimit (mut i32) (i32.const 10))
 (export "hashMemory" (func $hashMemory))
 (export "func_5_invoker" (func $func_5_invoker))
 (export "func_7" (func $func_7))
 (export "func_9" (func $func_9))
 (export "func_9_invoker" (func $func_9_invoker))
 (export "func_11_invoker" (func $func_11_invoker))
 (export "func_14_invoker" (func $func_14_invoker))
 (export "func_16" (func $func_16))
 (export "func_16_invoker" (func $func_16_invoker))
 (export "func_19_invoker" (func $func_19_invoker))
 (export "func_21" (func $func_21))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $hashMemory (; 4 ;) (type $FUNCSIG$i) (result i32)
  (local $0 i32)
  (local.set $0
   (i32.const 5381)
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=1
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=2
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=3
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=4
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=5
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=6
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=7
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=8
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=9
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=10
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=11
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=12
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=13
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=14
     (i32.const 0)
    )
   )
  )
  (local.set $0
   (i32.xor
    (i32.add
     (i32.shl
      (local.get $0)
      (i32.const 5)
     )
     (local.get $0)
    )
    (i32.load8_u offset=15
     (i32.const 0)
    )
   )
  )
  (local.get $0)
 )
 (func $func_5 (; 5 ;) (param $0 i64) (param $1 v128) (param $2 f64) (param $3 f64) (param $4 f64) (param $5 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (block
    (push
     (loop $label$1 (result f64)
      (block
       (if
        (i32.eqz
         (global.get $hangLimit)
        )
        (return)
       )
       (global.set $hangLimit
        (i32.sub
         (global.get $hangLimit)
         (i32.const 1)
        )
       )
      )
      (block $label$2 (result f64)
       (block
        (push
         (call $hashMemory)
        )
        (call $log-i32
         (pop)
        )
       )
       (local.get $2)
      )
     )
    )
    (call $log-f64
     (pop)
    )
   )
   (call $log-i32
    (call $hashMemory)
   )
  )
 )
 (func $func_5_invoker (; 6 ;) (type $FUNCSIG$v)
  (call $func_5
   (i64.const 1080874948889810454)
   (v128.const i32x4 0x46f8f800 0x5f5f5f5f 0xd2800000 0x597d1b18)
   (f64.const 291247372)
   (f64.const -1024)
   (f64.const 4.3836609264391246e-284)
   (v128.const i32x4 0x04170406 0x004f0058 0x00feff01 0x007c5001)
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_7 (; 7 ;) (type $FUNCSIG$if) (param $0 f32) (result i32)
  (local $1 i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i32.const 2049840174)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (loop $label$1
    (block
     (if
      (i32.eqz
       (global.get $hangLimit)
      )
      (return
       (i32.const -2147483648)
      )
     )
     (global.set $hangLimit
      (i32.sub
       (global.get $hangLimit)
       (i32.const 1)
      )
     )
    )
    (block $label$2
     (nop)
     (nop)
    )
   )
   (block
    (push
     (i32.const 0)
    )
    (return
     (pop)
    )
   )
  )
 )
 (func $func_8 (; 8 ;) (param $0 f32) (param $1 i64)
  (local $2 v128)
  (local $3 i32)
  (local $4 i64)
  (local $5 i64)
  (local $6 i64)
  (local $7 f32)
  (local $8 i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (local.set $8
   (local.tee $8
    (local.tee $5
     (local.tee $8
      (i64.const 1)
     )
    )
   )
  )
 )
 (func $func_9 (; 9 ;) (type $FUNCSIG$vd) (param $0 f64)
  (local $1 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (call $log-f64
    (block $label$1
     (local.set $1
      (local.get $1)
     )
     (unreachable)
    )
   )
   (call $log-i32
    (call $hashMemory)
   )
  )
 )
 (func $func_9_invoker (; 10 ;) (type $FUNCSIG$v)
  (call $func_9
   (f64.const 1953788961)
  )
  (call $func_9
   (f64.const 117703943)
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_11 (; 11 ;) (result i64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i64.const 4919687010203223614)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result i64)
   (i64.const 2147483647)
  )
 )
 (func $func_11_invoker (; 12 ;) (type $FUNCSIG$v)
  (drop
   (call $func_11)
  )
  (drop
   (call $func_11)
  )
  (call $log-i32
   (call $hashMemory)
  )
 )
 (func $func_13 (; 13 ;) (param $0 i32) (param $1 f64) (param $2 i64) (param $3 v128) (param $4 f64) (param $5 i64) (param $6 i32) (param $7 f32) (result f32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i64)
  (local $12 f64)
  (local $13 i64)
  (local $14 f32)
  (local $15 i64)
  (local $16 v128)
  (local $17 f32)
  (local $18 f64)
  (local $19 i32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $17)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0
   (block
    (push
     (call $hashMemory)
    )
    (call $log-i32
     (pop)
    )
   )
   (block
    (push
     (local.get $17)
    )
    (return
     (pop)
    )
   )
  )
 )
 (func $func_14 (; 14 ;) (param $0 v128) (result i32)
  (local $1 f32)
  (local $2 i64)
  (local $3 i32)
  (local $4 i32)
  (local $5 i64)
  (local $6 v128)
  (local $7 f32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i32.const -126)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (return
   (local.get $4)
  )
 )
 (func $func_14_invoker (; 15 ;) (type $FUNCSIG$v)
  (drop
   (call $func_14
    (v128.const i32x4 0x00000014 0x00000000 0x00020000 0x00000000)
   )
  )
 )
 (func $func_16 (; 16 ;) (type $FUNCSIG$v)
  (local $0 f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return)
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (nop)
 )
 (func $func_16_invoker (; 17 ;) (type $FUNCSIG$v)
  (call $func_16)
 )
 (func $func_18 (; 18 ;) (result i32)
  (local $0 i32)
  (local $1 i32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (local.get $0)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (local.tee $1
   (i32.const 2117)
  )
 )
 (func $func_19 (; 19 ;) (param $0 f32) (result v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (v128.const i32x4 0x7fffffff 0xffffff80 0xffffffff 0xffff8001)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (loop $label$0 (result v128)
   (block
    (if
     (i32.eqz
      (global.get $hangLimit)
     )
     (return
      (v128.const i32x4 0x7fffffff 0x00000000 0x43454348 0x00000000)
     )
    )
    (global.set $hangLimit
     (i32.sub
      (global.get $hangLimit)
      (i32.const 1)
     )
    )
   )
   (block (result v128)
    (nop)
    (br_if $label$0
     (i32.eqz
      (i32.const 2)
     )
    )
    (v128.const i32x4 0x79151a01 0xffff8001 0x80000000 0xffff8001)
   )
  )
 )
 (func $func_19_invoker (; 20 ;) (type $FUNCSIG$v)
  (drop
   (call $func_19
    (f32.const -9223372036854775808)
   )
  )
  (drop
   (call $func_19
    (f32.const 117901064)
   )
  )
  (drop
   (call $func_19
    (f32.const 8)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_19
    (f32.const 0)
   )
  )
  (call $log-i32
   (call $hashMemory)
  )
  (drop
   (call $func_19
    (f32.const 4.015456962899047e-17)
   )
  )
 )
 (func $func_21 (; 21 ;) (type $FUNCSIG$ijVf) (param $0 i64) (param $1 v128) (param $2 f32) (result i32)
  (local $3 f64)
  (local $4 v128)
  (local $5 f32)
  (local $6 f32)
  (local $7 i64)
  (local $8 f64)
  (local $9 i64)
  (local $10 f64)
  (local $11 i64)
  (local $12 i64)
  (local $13 f64)
  (local $14 f64)
  (local $15 v128)
  (local $16 v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i32.const 65516)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result i32)
   (block
    (push
     (i32.const -16)
    )
    (if
     (pop)
     (nop)
     (block $label$31
      (nop)
     )
    )
   )
   (i32.const 91639605)
  )
 )
 (func $hangLimitInitializer (; 22 ;)
  (global.set $hangLimit
   (i32.const 10)
  )
 )
 (func $deNan32 (; 23 ;) (param $0 f32) (result f32)
  (if (result f32)
   (f32.eq
    (local.get $0)
    (local.get $0)
   )
   (local.get $0)
   (f32.const 0)
  )
 )
 (func $deNan64 (; 24 ;) (param $0 f64) (result f64)
  (if (result f64)
   (f64.eq
    (local.get $0)
    (local.get $0)
   )
   (local.get $0)
   (f64.const 0)
  )
 )
)
