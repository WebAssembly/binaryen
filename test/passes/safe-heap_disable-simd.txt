(module
 (type $FUNCSIG$v (func))
 (import "env" "DYNAMICTOP_PTR" (global $DYNAMICTOP_PTR i32))
 (import "env" "segfault" (func $segfault))
 (import "env" "alignfault" (func $alignfault))
 (func $SAFE_HEAP_LOAD_i32_1_1 (; 2 ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 1)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.load8_s
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_1_U_1 (; 3 ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 1)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.load8_u
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_2_1 (; 4 ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 2)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.load16_s align=1
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_2_2 (; 5 ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 2)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i32.load16_s
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_2_U_1 (; 6 ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 2)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.load16_u align=1
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_2_U_2 (; 7 ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 2)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i32.load16_u
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_4_1 (; 8 ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.load align=1
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_4_2 (; 9 ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i32.load align=2
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_4_4 (; 10 ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i32.load
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_4_U_1 (; 11 ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.load align=1
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_4_U_2 (; 12 ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i32.load align=2
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i32_4_U_4 (; 13 ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i32.load
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_1_1 (; 14 ;) (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 1)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load8_s
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_1_U_1 (; 15 ;) (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 1)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load8_u
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_2_1 (; 16 ;) (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 2)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load16_s align=1
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_2_2 (; 17 ;) (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 2)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.load16_s
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_2_U_1 (; 18 ;) (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 2)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load16_u align=1
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_2_U_2 (; 19 ;) (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 2)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.load16_u
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_4_1 (; 20 ;) (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load32_s align=1
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_4_2 (; 21 ;) (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.load32_s align=2
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_4_4 (; 22 ;) (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i64.load32_s
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_4_U_1 (; 23 ;) (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load32_u align=1
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_4_U_2 (; 24 ;) (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.load32_u align=2
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_4_U_4 (; 25 ;) (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i64.load32_u
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_1 (; 26 ;) (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 8)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load align=1
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_2 (; 27 ;) (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 8)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.load align=2
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_4 (; 28 ;) (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 8)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i64.load align=4
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_8 (; 29 ;) (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 8)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 7)
   )
   (call $alignfault)
  )
  (i64.load
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_U_1 (; 30 ;) (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 8)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.load align=1
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_U_2 (; 31 ;) (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 8)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.load align=2
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_U_4 (; 32 ;) (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 8)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i64.load align=4
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_i64_8_U_8 (; 33 ;) (param $0 i32) (param $1 i32) (result i64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 8)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 7)
   )
   (call $alignfault)
  )
  (i64.load
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f32_4_1 (; 34 ;) (param $0 i32) (param $1 i32) (result f32)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f32.load align=1
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f32_4_2 (; 35 ;) (param $0 i32) (param $1 i32) (result f32)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f32.load align=2
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f32_4_4 (; 36 ;) (param $0 i32) (param $1 i32) (result f32)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (f32.load
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_8_1 (; 37 ;) (param $0 i32) (param $1 i32) (result f64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 8)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f64.load align=1
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_8_2 (; 38 ;) (param $0 i32) (param $1 i32) (result f64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 8)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f64.load align=2
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_8_4 (; 39 ;) (param $0 i32) (param $1 i32) (result f64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 8)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (f64.load align=4
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_LOAD_f64_8_8 (; 40 ;) (param $0 i32) (param $1 i32) (result f64)
  (local $2 i32)
  (local.set $2
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $2)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $2)
      (i32.const 8)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $2)
    (i32.const 7)
   )
   (call $alignfault)
  )
  (f64.load
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_i32_1_1 (; 41 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 1)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.store8
   (local.get $3)
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_i32_2_1 (; 42 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 2)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.store16 align=1
   (local.get $3)
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_i32_2_2 (; 43 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 2)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i32.store16
   (local.get $3)
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_i32_4_1 (; 44 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i32.store align=1
   (local.get $3)
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_i32_4_2 (; 45 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i32.store align=2
   (local.get $3)
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_i32_4_4 (; 46 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $3)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i32.store
   (local.get $3)
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_1_1 (; 47 ;) (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 1)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.store8
   (local.get $3)
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_2_1 (; 48 ;) (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 2)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.store16 align=1
   (local.get $3)
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_2_2 (; 49 ;) (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 2)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.store16
   (local.get $3)
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_4_1 (; 50 ;) (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.store32 align=1
   (local.get $3)
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_4_2 (; 51 ;) (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.store32 align=2
   (local.get $3)
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_4_4 (; 52 ;) (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $3)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i64.store32
   (local.get $3)
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_8_1 (; 53 ;) (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 8)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (i64.store align=1
   (local.get $3)
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_8_2 (; 54 ;) (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 8)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (i64.store align=2
   (local.get $3)
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_8_4 (; 55 ;) (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 8)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $3)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (i64.store align=4
   (local.get $3)
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_i64_8_8 (; 56 ;) (param $0 i32) (param $1 i32) (param $2 i64)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 8)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $3)
    (i32.const 7)
   )
   (call $alignfault)
  )
  (i64.store
   (local.get $3)
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_f32_4_1 (; 57 ;) (param $0 i32) (param $1 i32) (param $2 f32)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f32.store align=1
   (local.get $3)
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_f32_4_2 (; 58 ;) (param $0 i32) (param $1 i32) (param $2 f32)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f32.store align=2
   (local.get $3)
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_f32_4_4 (; 59 ;) (param $0 i32) (param $1 i32) (param $2 f32)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 4)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $3)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (f32.store
   (local.get $3)
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_8_1 (; 60 ;) (param $0 i32) (param $1 i32) (param $2 f64)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 8)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (f64.store align=1
   (local.get $3)
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_8_2 (; 61 ;) (param $0 i32) (param $1 i32) (param $2 f64)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 8)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $3)
    (i32.const 1)
   )
   (call $alignfault)
  )
  (f64.store align=2
   (local.get $3)
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_8_4 (; 62 ;) (param $0 i32) (param $1 i32) (param $2 f64)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 8)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $3)
    (i32.const 3)
   )
   (call $alignfault)
  )
  (f64.store align=4
   (local.get $3)
   (local.get $2)
  )
 )
 (func $SAFE_HEAP_STORE_f64_8_8 (; 63 ;) (param $0 i32) (param $1 i32) (param $2 f64)
  (local $3 i32)
  (local.set $3
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
  (if
   (i32.or
    (i32.eq
     (local.get $3)
     (i32.const 0)
    )
    (i32.gt_u
     (i32.add
      (local.get $3)
      (i32.const 8)
     )
     (i32.load
      (global.get $DYNAMICTOP_PTR)
     )
    )
   )
   (call $segfault)
  )
  (if
   (i32.and
    (local.get $3)
    (i32.const 7)
   )
   (call $alignfault)
  )
  (f64.store
   (local.get $3)
   (local.get $2)
  )
 )
)
