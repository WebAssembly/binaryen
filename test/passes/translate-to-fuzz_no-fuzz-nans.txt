(module
 (type $FUNCSIG$vi (func (param i32)))
 (type $FUNCSIG$vj (func (param i64)))
 (type $FUNCSIG$vf (func (param f32)))
 (type $FUNCSIG$vd (func (param f64)))
 (type $FUNCSIG$d (func (result f64)))
 (type $FUNCSIG$v (func))
 (import "fuzzing-support" "log-i32" (func $log-i32 (param i32)))
 (import "fuzzing-support" "log-i64" (func $log-i64 (param i64)))
 (import "fuzzing-support" "log-f32" (func $log-f32 (param f32)))
 (import "fuzzing-support" "log-f64" (func $log-f64 (param f64)))
 (memory $0 1 1)
 (data (i32.const 0) "\\*C\e6\14\ae\e2\f9")
 (table $0 1 1 funcref)
 (elem (i32.const 0) $func_5)
 (global $global$0 (mut f32) (f32.const 14893))
 (global $global$1 (mut f64) (f64.const 269311755))
 (global $hangLimit (mut i32) (i32.const 10))
 (export "func_5" (func $func_5))
 (export "func_5_invoker" (func $func_5_invoker))
 (export "hangLimitInitializer" (func $hangLimitInitializer))
 (func $func_4 (; 4 ;) (result v128)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (v128.const i32x4 0x00000000 0x40982c00 0x00000000 0x40f00000)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (v128.const i32x4 0xffe00000 0x41efffff 0x00000000 0x42700000)
 )
 (func $func_5 (; 5 ;) (type $FUNCSIG$d) (result f64)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (f64.const 69)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (drop
   (block $label$0
    (loop $label$1
     (block
      (if
       (i32.eqz
        (global.get $hangLimit)
       )
       (return
        (f64.const -9223372036854775808)
       )
      )
      (global.set $hangLimit
       (i32.sub
        (global.get $hangLimit)
        (i32.const 1)
       )
      )
     )
     (block
      (nop)
      (br_if $label$1
       (i32.eqz
        (loop $label$2 (result i32)
         (block
          (if
           (i32.eqz
            (global.get $hangLimit)
           )
           (return
            (f64.const 0)
           )
          )
          (global.set $hangLimit
           (i32.sub
            (global.get $hangLimit)
            (i32.const 1)
           )
          )
         )
         (block (result i32)
          (nop)
          (br_if $label$2
           (i32.const 31579)
          )
          (if (result i32)
           (if
            (loop $label$15 (result i32)
             (block
              (if
               (i32.eqz
                (global.get $hangLimit)
               )
               (return
                (f64.const 30)
               )
              )
              (global.set $hangLimit
               (i32.sub
                (global.get $hangLimit)
                (i32.const 1)
               )
              )
             )
             (block (result i32)
              (block $label$16
               (nop)
               (call $log-f64
                (f64.const 19714)
               )
              )
              (br_if $label$15
               (i32.const 21314)
              )
              (block $label$17 (result i32)
               (i32.const 436346625)
              )
             )
            )
            (block $label$3
             (nop)
             (loop $label$18
              (block
               (if
                (i32.eqz
                 (global.get $hangLimit)
                )
                (return
                 (f64.const 0)
                )
               )
               (global.set $hangLimit
                (i32.sub
                 (global.get $hangLimit)
                 (i32.const 1)
                )
               )
              )
              (block $label$19
               (nop)
               (if
                (i32.eqz
                 (i32.const 31)
                )
                (block $label$20
                 (call $log-i32
                  (i32.const 184879627)
                 )
                 (loop $label$23
                  (block
                   (if
                    (i32.eqz
                     (global.get $hangLimit)
                    )
                    (return
                     (f64.const 3.703830284355737e-231)
                    )
                   )
                   (global.set $hangLimit
                    (i32.sub
                     (global.get $hangLimit)
                     (i32.const 1)
                    )
                   )
                  )
                  (block
                   (block $label$24
                    (nop)
                    (call $log-i64
                     (i64.const 524288)
                    )
                   )
                   (br_if $label$23
                    (i32.const 1392973312)
                   )
                   (if
                    (i32.const -8192)
                    (unreachable)
                    (block $label$25
                     (block $label$26
                      (nop)
                      (nop)
                     )
                     (if
                      (i32.const 101518412)
                      (return
                       (f64.const -2147483648)
                      )
                      (block $label$27
                       (call $log-i32
                        (loop $label$28 (result i32)
                         (block
                          (if
                           (i32.eqz
                            (global.get $hangLimit)
                           )
                           (return
                            (f64.const 26401)
                           )
                          )
                          (global.set $hangLimit
                           (i32.sub
                            (global.get $hangLimit)
                            (i32.const 1)
                           )
                          )
                         )
                         (block $label$29 (result i32)
                          (call $log-f32
                           (loop $label$30 (result f32)
                            (block
                             (if
                              (i32.eqz
                               (global.get $hangLimit)
                              )
                              (return
                               (f64.const -256)
                              )
                             )
                             (global.set $hangLimit
                              (i32.sub
                               (global.get $hangLimit)
                               (i32.const 1)
                              )
                             )
                            )
                            (block $label$31 (result f32)
                             (nop)
                             (f32.const -76)
                            )
                           )
                          )
                          (i32.const 1461083998)
                         )
                        )
                       )
                       (select
                        (block $label$32
                         (call $log-i64
                          (i64.const 9223372036854775807)
                         )
                         (return
                          (f64.const -1797693134862315708145274e284)
                         )
                        )
                        (br $label$23)
                        (i8x16.extract_lane_u 10
                         (v128.const i32x4 0x08091b0b 0x4eeef6c7 0xdf800000 0x4eea2221)
                        )
                       )
                      )
                     )
                    )
                   )
                  )
                 )
                )
                (block $label$33
                 (nop)
                 (unreachable)
                )
               )
              )
             )
            )
            (if
             (i32.const 387849744)
             (block $label$4
              (drop
               (if (result i32)
                (i32.const -16777216)
                (i32.const 170)
                (i32.const -67108864)
               )
              )
              (br $label$1)
             )
             (block $label$5
              (block $label$6
               (nop)
               (call $log-i64
                (i64.const 8589934592)
               )
              )
              (drop
               (select
                (i32.wrap_i64
                 (return
                  (f64.const -4398046511104)
                 )
                )
                (return
                 (f64.const 4294967214)
                )
                (i32.const 168298761)
               )
              )
             )
            )
           )
           (block $label$7 (result i32)
            (call $log-i32
             (br_if $label$7
              (i32.eqz
               (i32.const 268435456)
              )
              (i32.const 170)
             )
            )
            (i32.const 2147483647)
           )
           (block $label$9
            (call $log-i64
             (i64.const 1029969750753150239)
            )
            (br $label$2)
           )
          )
         )
        )
       )
      )
      (call $log-i64
       (i64.const 425132800)
      )
     )
    )
    (return
     (f64.const 5.20474707840597e-144)
    )
   )
  )
 )
 (func $func_5_invoker (; 6 ;) (type $FUNCSIG$v)
  (drop
   (call $func_5)
  )
 )
 (func $func_7 (; 7 ;) (param $0 f64) (param $1 i32) (result i64)
  (local $2 i64)
  (local $3 i32)
  (local $4 f64)
  (local $5 i64)
  (local $6 f32)
  (local $7 f32)
  (block
   (if
    (i32.eqz
     (global.get $hangLimit)
    )
    (return
     (i64.const -81)
    )
   )
   (global.set $hangLimit
    (i32.sub
     (global.get $hangLimit)
     (i32.const 1)
    )
   )
  )
  (block $label$0 (result i64)
   (nop)
   (br_if $label$0
    (i64.const -46)
    (i32.const 1073741824)
   )
  )
 )
 (func $hangLimitInitializer (; 8 ;)
  (global.set $hangLimit
   (i32.const 10)
  )
 )
 (func $deNan32 (; 9 ;) (param $0 f32) (result f32)
  (if (result f32)
   (f32.eq
    (local.get $0)
    (local.get $0)
   )
   (local.get $0)
   (f32.const 0)
  )
 )
 (func $deNan64 (; 10 ;) (param $0 f64) (result f64)
  (if (result f64)
   (f64.eq
    (local.get $0)
    (local.get $0)
   )
   (local.get $0)
   (f64.const 0)
  )
 )
)
