(module
 (type $FUNCSIG$ii (func (param i32) (result i32)))
 (export "stacky-help" (func $stacky-help))
 (func $stacky-help (; 0 ;) (type $FUNCSIG$ii) (param $0 i32) (result i32)
  i32.const 0
  call $stacky-help
  i32.const 1
  call $stacky-help
  i32.const 2
  call $stacky-help
  drop
  i32.eqz
  i32.add
 )
)
(module
 (type $FUNCSIG$ii (func (param i32) (result i32)))
 (export "stacky-help" (func $stacky-help))
 (func $stacky-help (; 0 ;) (; has Stack IR ;) (type $FUNCSIG$ii) (param $0 i32) (result i32)
  (i32.add
   (call $stacky-help
    (i32.const 0)
   )
   (block (result i32)
    (local.set $0
     (call $stacky-help
      (i32.const 1)
     )
    )
    (drop
     (call $stacky-help
      (i32.const 2)
     )
    )
    (i32.eqz
     (local.get $0)
    )
   )
  )
 )
)
(module
 (type $FUNCSIG$i (func (result i32)))
 (type $FUNCSIG$j (func (result i64)))
 (type $FUNCSIG$f (func (result f32)))
 (type $FUNCSIG$d (func (result f64)))
 (export "ppi32" (func $0))
 (export "ppi64" (func $1))
 (export "ppf32" (func $2))
 (export "ppf64" (func $3))
 (func $0 (; 0 ;) (type $FUNCSIG$i) (result i32)
  i32.const 1
 )
 (func $1 (; 1 ;) (type $FUNCSIG$j) (result i64)
  i64.const 1
 )
 (func $2 (; 2 ;) (type $FUNCSIG$f) (result f32)
  f32.const 1
 )
 (func $3 (; 3 ;) (type $FUNCSIG$d) (result f64)
  f64.const 1
 )
)
(module
 (type $FUNCSIG$i (func (result i32)))
 (type $FUNCSIG$j (func (result i64)))
 (type $FUNCSIG$f (func (result f32)))
 (type $FUNCSIG$d (func (result f64)))
 (export "ppi32" (func $0))
 (export "ppi64" (func $1))
 (export "ppf32" (func $2))
 (export "ppf64" (func $3))
 (func $0 (; 0 ;) (; has Stack IR ;) (type $FUNCSIG$i) (result i32)
  (push
   (i32.const 1)
  )
  (i32.pop)
 )
 (func $1 (; 1 ;) (; has Stack IR ;) (type $FUNCSIG$j) (result i64)
  (push
   (i64.const 1)
  )
  (i64.pop)
 )
 (func $2 (; 2 ;) (; has Stack IR ;) (type $FUNCSIG$f) (result f32)
  (push
   (f32.const 1)
  )
  (f32.pop)
 )
 (func $3 (; 3 ;) (; has Stack IR ;) (type $FUNCSIG$d) (result f64)
  (push
   (f64.const 1)
  )
  (f64.pop)
 )
)
