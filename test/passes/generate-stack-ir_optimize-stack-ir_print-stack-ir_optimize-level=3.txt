(module
 (type $FUNCSIG$vf (func (param f32)))
 (type $FUNCSIG$v (func))
 (type $FUNCSIG$id (func (param f64) (result i32)))
 (type $FUNCSIG$ddd (func (param f64 f64) (result f64)))
 (type $4 (func (result f64)))
 (type $5 (func (result i32)))
 (type $6 (func (param i32) (result i32)))
 (type $7 (func (param f64) (result f64)))
 (type $8 (func (result i64)))
 (type $9 (func (param i32 i64)))
 (import "env" "_emscripten_asm_const_vi" (func $_emscripten_asm_const_vi))
 (import "asm2wasm" "f64-to-int" (func $f64-to-int (param f64) (result i32)))
 (import "asm2wasm" "f64-rem" (func $f64-rem (param f64 f64) (result f64)))
 (memory $0 4096 4096)
 (data (i32.const 1026) "\14\00")
 (table $0 10 anyfunc)
 (elem (i32.const 0) $z $big_negative $z $z $w $w $importedDoubles $w $z $cneg)
 (export "big_negative" (func $big_negative))
 (func $big_negative (; 3 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  (local $temp f64)
  f64.const -2147483648
  set_local $temp
  f64.const -2147483648
  set_local $temp
  f64.const -21474836480
  set_local $temp
  f64.const 0.039625
  set_local $temp
  f64.const -0.039625
  set_local $temp
 )
 (func $importedDoubles (; 4 ;) (; has Stack IR ;) (type $4) (result f64)
  (local $temp f64)
  block $topmost (result f64)
   i32.const 8
   f64.load
   i32.const 16
   f64.load
   f64.add
   i32.const 16
   f64.load
   f64.neg
   f64.add
   i32.const 8
   f64.load
   f64.neg
   f64.add
   set_local $temp
   i32.const 24
   i32.load
   i32.const 0
   i32.gt_s
   if
    f64.const -3.4
    br $topmost
   end
   i32.const 32
   f64.load
   f64.const 0
   f64.gt
   if
    f64.const 5.6
    br $topmost
   end
   f64.const 1.2
  end
 )
 (func $doubleCompares (; 5 ;) (; has Stack IR ;) (type $FUNCSIG$ddd) (param $x f64) (param $y f64) (result f64)
  (local $t f64)
  (local $Int f64)
  (local $Double i32)
  block $topmost (result f64)
   get_local $x
   f64.const 0
   f64.gt
   if
    f64.const 1.2
    br $topmost
   end
   get_local $Int
   f64.const 0
   f64.gt
   if
    f64.const -3.4
    br $topmost
   end
   get_local $Double
   i32.const 0
   i32.gt_s
   if
    f64.const 5.6
    br $topmost
   end
   get_local $x
   get_local $y
   f64.lt
   if
    get_local $x
    br $topmost
   end
   get_local $y
  end
 )
 (func $intOps (; 6 ;) (; has Stack IR ;) (type $5) (result i32)
  (local $x i32)
  get_local $x
  i32.const 0
  i32.eq
 )
 (func $hexLiterals (; 7 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  i32.const 0
  i32.const 313249263
  i32.add
  i32.const -19088752
  i32.add
  drop
 )
 (func $conversions (; 8 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  (local $i i32)
  (local $d f64)
  get_local $d
  call $f64-to-int
  set_local $i
  get_local $i
  f64.convert_s/i32
  set_local $d
  get_local $i
  i32.const 0
  i32.shr_u
  f64.convert_u/i32
  set_local $d
 )
 (func $seq (; 9 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  (local $J f64)
  f64.const 0.1
  drop
  f64.const 5.1
  f64.const 3.2
  drop
  f64.const 4.2
  f64.sub
  set_local $J
 )
 (func $switcher (; 10 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  block $topmost (result i32)
   block $switch-default$3
    block $switch-case$2
     block $switch-case$1
      get_local $x
      i32.const 1
      i32.sub
      br_table $switch-case$1 $switch-case$2 $switch-default$3
     end
     i32.const 1
     br $topmost
    end
    i32.const 2
    br $topmost
   end
   nop
   block $switch-default$7
    block $switch-case$6
     block $switch-case$5
      get_local $x
      i32.const 5
      i32.sub
      br_table $switch-case$6 $switch-default$7 $switch-default$7 $switch-default$7 $switch-default$7 $switch-default$7 $switch-default$7 $switch-case$5 $switch-default$7
     end
     i32.const 121
     br $topmost
    end
    i32.const 51
    br $topmost
   end
   nop
   block $label$break$Lout
    block $switch-default$16
     block $switch-case$15
      block $switch-case$12
       block $switch-case$9
        block $switch-case$8
         get_local $x
         i32.const 2
         i32.sub
         br_table $switch-case$15 $switch-default$16 $switch-default$16 $switch-case$12 $switch-default$16 $switch-default$16 $switch-default$16 $switch-default$16 $switch-case$9 $switch-default$16 $switch-case$8 $switch-default$16
        end
        br $label$break$Lout
       end
       br $label$break$Lout
      end
      block $while-out$10
       loop $while-in$11
        br $while-out$10
       end
       unreachable
      end
     end
     loop $while-in$14
      br $label$break$Lout
     end
     unreachable
    end
    nop
   end
   i32.const 0
  end
 )
 (func $blocker (; 11 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  block $label$break$L
   br $label$break$L
  end
 )
 (func $frem (; 12 ;) (; has Stack IR ;) (type $4) (result f64)
  f64.const 5.5
  f64.const 1.2
  call $f64-rem
 )
 (func $big_uint_div_u (; 13 ;) (; has Stack IR ;) (type $5) (result i32)
  (local $x i32)
  i32.const -1
  i32.const 2
  i32.div_u
  i32.const -1
  i32.and
 )
 (func $fr (; 14 ;) (; has Stack IR ;) (type $FUNCSIG$vf) (param $x f32)
  (local $y f32)
  (local $z f64)
  get_local $z
  f32.demote/f64
  drop
  get_local $y
  drop
  f32.const 5
  drop
  f32.const 0
  drop
  f32.const 5
  drop
  f32.const 0
  drop
 )
 (func $negZero (; 15 ;) (; has Stack IR ;) (type $4) (result f64)
  f64.const -0
 )
 (func $abs (; 16 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  (local $x i32)
  (local $y f64)
  (local $z f32)
  (local $asm2wasm_i32_temp i32)
  i32.const 0
  set_local $asm2wasm_i32_temp
  i32.const 0
  get_local $asm2wasm_i32_temp
  i32.sub
  get_local $asm2wasm_i32_temp
  get_local $asm2wasm_i32_temp
  i32.const 0
  i32.lt_s
  select
  set_local $x
  f64.const 0
  f64.abs
  set_local $y
  f32.const 0
  f32.abs
  set_local $z
 )
 (func $neg (; 17 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  (local $x f32)
  get_local $x
  f32.neg
  i32.const 1
  i32.const 7
  i32.and
  i32.const 8
  i32.add
  call_indirect (type $FUNCSIG$vf)
 )
 (func $cneg (; 18 ;) (; has Stack IR ;) (type $FUNCSIG$vf) (param $x f32)
  get_local $x
  i32.const 1
  i32.const 7
  i32.and
  i32.const 8
  i32.add
  call_indirect (type $FUNCSIG$vf)
 )
 (func $___syscall_ret (; 19 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  (local $$0 i32)
  get_local $$0
  i32.const 0
  i32.shr_u
  i32.const -4096
  i32.gt_u
  drop
 )
 (func $z (; 20 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  nop
 )
 (func $w (; 21 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  nop
 )
 (func $block_and_after (; 22 ;) (; has Stack IR ;) (type $5) (result i32)
  block $waka
   i32.const 1
   drop
   br $waka
  end
  i32.const 0
 )
 (func $loop-roundtrip (; 23 ;) (; has Stack IR ;) (type $7) (param $0 f64) (result f64)
  loop $loop-in1 (result f64)
   get_local $0
   drop
   get_local $0
  end
 )
 (func $big-i64 (; 24 ;) (; has Stack IR ;) (type $8) (result i64)
  i64.const -9218868437227405313
 )
 (func $i64-store32 (; 25 ;) (; has Stack IR ;) (type $9) (param $0 i32) (param $1 i64)
  get_local $0
  get_local $1
  i64.store32
 )
 (func $return-unreachable (; 26 ;) (; has Stack IR ;) (type $5) (result i32)
  i32.const 1
  return
 )
 (func $unreachable-block (; 27 ;) (; has Stack IR ;) (type $5) (result i32)
  i32.const 1
  drop
  i32.const 2
  return
 )
 (func $unreachable-block-toplevel (; 28 ;) (; has Stack IR ;) (type $5) (result i32)
  i32.const 1
  drop
  i32.const 2
  return
 )
 (func $unreachable-block0 (; 29 ;) (; has Stack IR ;) (type $5) (result i32)
  i32.const 2
  return
 )
 (func $unreachable-block0-toplevel (; 30 ;) (; has Stack IR ;) (type $5) (result i32)
  i32.const 2
  return
 )
 (func $unreachable-block-with-br (; 31 ;) (; has Stack IR ;) (type $5) (result i32)
  block $block
   i32.const 1
   drop
   br $block
  end
  i32.const 1
 )
 (func $unreachable-if (; 32 ;) (; has Stack IR ;) (type $5) (result i32)
  i32.const 3
  if
   i32.const 2
   return
  else   
   i32.const 1
   return
  end
  unreachable
 )
 (func $unreachable-if-toplevel (; 33 ;) (; has Stack IR ;) (type $5) (result i32)
  i32.const 3
  if
   i32.const 2
   return
  else   
   i32.const 1
   return
  end
  unreachable
 )
 (func $unreachable-loop (; 34 ;) (; has Stack IR ;) (type $5) (result i32)
  loop $loop-in
   nop
   i32.const 1
   return
  end
  unreachable
 )
 (func $unreachable-loop0 (; 35 ;) (; has Stack IR ;) (type $5) (result i32)
  loop $loop-in
   i32.const 1
   return
  end
  unreachable
 )
 (func $unreachable-loop-toplevel (; 36 ;) (; has Stack IR ;) (type $5) (result i32)
  loop $loop-in
   nop
   i32.const 1
   return
  end
  unreachable
 )
 (func $unreachable-loop0-toplevel (; 37 ;) (; has Stack IR ;) (type $5) (result i32)
  loop $loop-in
   i32.const 1
   return
  end
  unreachable
 )
 (func $unreachable-ifs (; 38 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  unreachable
 )
 (func $unreachable-if-arm (; 39 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  i32.const 1
  if
   nop
  else   
   unreachable
  end
 )
 (func $local-to-stack (; 40 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp i32)
  i32.const 1
  call $local-to-stack
  i32.const 2
  call $local-to-stack
  drop
 )
 (func $local-to-stack-1 (; 41 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp i32)
  i32.const 1
  call $local-to-stack
  i32.const 2
  call $local-to-stack
  drop
  i32.eqz
 )
 (func $local-to-stack-1b (; 42 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp i32)
  i32.const 1
  call $local-to-stack
  i32.const 2
  call $local-to-stack
  drop
  i32.const 3
  i32.add
 )
 (func $local-to-stack-1c-no (; 43 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp i32)
  i32.const 1
  call $local-to-stack
  set_local $temp
  i32.const 2
  call $local-to-stack
  drop
  i32.const 3
  get_local $temp
  i32.add
 )
 (func $local-to-stack-2-no (; 44 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp i32)
  i32.const 1
  call $local-to-stack
  set_local $temp
  i32.const 2
  call $local-to-stack
  drop
  get_local $temp
  get_local $temp
  i32.add
 )
 (func $local-to-stack-3-no (; 45 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp i32)
  i32.const 1
  if
   i32.const 1
   call $local-to-stack
   set_local $temp
  else   
   i32.const 2
   call $local-to-stack
   set_local $temp
  end
  i32.const 3
  call $local-to-stack
  drop
  get_local $temp
 )
 (func $local-to-stack-multi-4 (; 46 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp1 i32)
  (local $temp2 i32)
  i32.const 1
  call $local-to-stack-multi-4
  i32.const 2
  call $local-to-stack-multi-4
  drop
  drop
  i32.const 3
  call $local-to-stack-multi-4
  i32.const 4
  call $local-to-stack-multi-4
  drop
 )
 (func $local-to-stack-multi-5 (; 47 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp1 i32)
  (local $temp2 i32)
  i32.const 1
  call $local-to-stack-multi-4
  i32.const 2
  call $local-to-stack-multi-4
  drop
  drop
  i32.const 3
  call $local-to-stack-multi-4
  i32.const 4
  call $local-to-stack-multi-4
  drop
 )
 (func $local-to-stack-multi-6-justone (; 48 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp1 i32)
  (local $temp2 i32)
  i32.const 1
  call $local-to-stack-multi-4
  i32.const 2
  call $local-to-stack-multi-4
  drop
  drop
  i32.const 3
  call $local-to-stack-multi-4
  set_local $temp2
  i32.const 4
  call $local-to-stack-multi-4
  drop
  get_local $temp2
  get_local $temp2
  i32.add
 )
 (func $local-to-stack-multi-7-justone (; 49 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp1 i32)
  (local $temp2 i32)
  i32.const 1
  call $local-to-stack-multi-4
  set_local $temp1
  i32.const 2
  call $local-to-stack-multi-4
  drop
  get_local $temp1
  get_local $temp1
  i32.add
  drop
  i32.const 3
  call $local-to-stack-multi-4
  i32.const 4
  call $local-to-stack-multi-4
  drop
 )
 (func $local-to-stack-overlapping-multi-8-no (; 50 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp1 i32)
  (local $temp2 i32)
  i32.const 1
  call $local-to-stack-multi-4
  set_local $temp1
  i32.const 1
  call $local-to-stack-multi-4
  i32.const 3
  call $local-to-stack-multi-4
  drop
  get_local $temp1
  i32.add
 )
 (func $local-to-stack-overlapping-multi-9-yes (; 51 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp1 i32)
  (local $temp2 i32)
  i32.const 1
  call $local-to-stack-multi-4
  i32.const 1
  call $local-to-stack-multi-4
  i32.const 3
  call $local-to-stack-multi-4
  drop
  i32.add
 )
 (func $local-to-stack-through-control-flow (; 52 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  (local $temp1 i32)
  (local $temp2 i32)
  i32.const 0
  call $local-to-stack-multi-4
  i32.const 1
  call $local-to-stack-multi-4
  i32.const 0
  if
   nop
  end
  drop
  i32.const 2
  call $local-to-stack-multi-4
  block $block
   br $block
  end
  drop
  drop
 )
 (func $local-to-stack-in-control-flow (; 53 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  (local $temp1 i32)
  i32.const 0
  if
   i32.const 0
   call $local-to-stack-multi-4
   drop
  else   
   i32.const 1
   call $local-to-stack-multi-4
   drop
  end
 )
 (func $remove-block (; 54 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp i32)
  i32.const 0
  call $remove-block
  i32.const 1
  call $remove-block
  i32.const 2
  call $remove-block
  drop
  i32.eqz
  i32.add
 )
)
(module
 (type $FUNCSIG$vf (func (param f32)))
 (type $FUNCSIG$v (func))
 (type $FUNCSIG$id (func (param f64) (result i32)))
 (type $FUNCSIG$ddd (func (param f64 f64) (result f64)))
 (type $4 (func (result f64)))
 (type $5 (func (result i32)))
 (type $6 (func (param i32) (result i32)))
 (type $7 (func (param f64) (result f64)))
 (type $8 (func (result i64)))
 (type $9 (func (param i32 i64)))
 (import "env" "_emscripten_asm_const_vi" (func $_emscripten_asm_const_vi))
 (import "asm2wasm" "f64-to-int" (func $f64-to-int (param f64) (result i32)))
 (import "asm2wasm" "f64-rem" (func $f64-rem (param f64 f64) (result f64)))
 (memory $0 4096 4096)
 (data (i32.const 1026) "\14\00")
 (table $0 10 anyfunc)
 (elem (i32.const 0) $z $big_negative $z $z $w $w $importedDoubles $w $z $cneg)
 (export "big_negative" (func $big_negative))
 (func $big_negative (; 3 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  (local $temp f64)
  (block $block0
   (set_local $temp
    (f64.const -2147483648)
   )
   (set_local $temp
    (f64.const -2147483648)
   )
   (set_local $temp
    (f64.const -21474836480)
   )
   (set_local $temp
    (f64.const 0.039625)
   )
   (set_local $temp
    (f64.const -0.039625)
   )
  )
 )
 (func $importedDoubles (; 4 ;) (; has Stack IR ;) (type $4) (result f64)
  (local $temp f64)
  (block $topmost (result f64)
   (set_local $temp
    (f64.add
     (f64.add
      (f64.add
       (f64.load
        (i32.const 8)
       )
       (f64.load
        (i32.const 16)
       )
      )
      (f64.neg
       (f64.load
        (i32.const 16)
       )
      )
     )
     (f64.neg
      (f64.load
       (i32.const 8)
      )
     )
    )
   )
   (if
    (i32.gt_s
     (i32.load
      (i32.const 24)
     )
     (i32.const 0)
    )
    (br $topmost
     (f64.const -3.4)
    )
   )
   (if
    (f64.gt
     (f64.load
      (i32.const 32)
     )
     (f64.const 0)
    )
    (br $topmost
     (f64.const 5.6)
    )
   )
   (f64.const 1.2)
  )
 )
 (func $doubleCompares (; 5 ;) (; has Stack IR ;) (type $FUNCSIG$ddd) (param $x f64) (param $y f64) (result f64)
  (local $t f64)
  (local $Int f64)
  (local $Double i32)
  (block $topmost (result f64)
   (if
    (f64.gt
     (get_local $x)
     (f64.const 0)
    )
    (br $topmost
     (f64.const 1.2)
    )
   )
   (if
    (f64.gt
     (get_local $Int)
     (f64.const 0)
    )
    (br $topmost
     (f64.const -3.4)
    )
   )
   (if
    (i32.gt_s
     (get_local $Double)
     (i32.const 0)
    )
    (br $topmost
     (f64.const 5.6)
    )
   )
   (if
    (f64.lt
     (get_local $x)
     (get_local $y)
    )
    (br $topmost
     (get_local $x)
    )
   )
   (get_local $y)
  )
 )
 (func $intOps (; 6 ;) (; has Stack IR ;) (type $5) (result i32)
  (local $x i32)
  (i32.eq
   (get_local $x)
   (i32.const 0)
  )
 )
 (func $hexLiterals (; 7 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  (drop
   (i32.add
    (i32.add
     (i32.const 0)
     (i32.const 313249263)
    )
    (i32.const -19088752)
   )
  )
 )
 (func $conversions (; 8 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  (local $i i32)
  (local $d f64)
  (block $block0
   (set_local $i
    (call $f64-to-int
     (get_local $d)
    )
   )
   (set_local $d
    (f64.convert_s/i32
     (get_local $i)
    )
   )
   (set_local $d
    (f64.convert_u/i32
     (i32.shr_u
      (get_local $i)
      (i32.const 0)
     )
    )
   )
  )
 )
 (func $seq (; 9 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  (local $J f64)
  (set_local $J
   (f64.sub
    (block $block0 (result f64)
     (drop
      (f64.const 0.1)
     )
     (f64.const 5.1)
    )
    (block $block1 (result f64)
     (drop
      (f64.const 3.2)
     )
     (f64.const 4.2)
    )
   )
  )
 )
 (func $switcher (; 10 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (block $topmost (result i32)
   (block $switch$0
    (block $switch-default$3
     (block $switch-case$2
      (block $switch-case$1
       (br_table $switch-case$1 $switch-case$2 $switch-default$3
        (i32.sub
         (get_local $x)
         (i32.const 1)
        )
       )
      )
      (br $topmost
       (i32.const 1)
      )
     )
     (br $topmost
      (i32.const 2)
     )
    )
    (nop)
   )
   (block $switch$4
    (block $switch-default$7
     (block $switch-case$6
      (block $switch-case$5
       (br_table $switch-case$6 $switch-default$7 $switch-default$7 $switch-default$7 $switch-default$7 $switch-default$7 $switch-default$7 $switch-case$5 $switch-default$7
        (i32.sub
         (get_local $x)
         (i32.const 5)
        )
       )
      )
      (br $topmost
       (i32.const 121)
      )
     )
     (br $topmost
      (i32.const 51)
     )
    )
    (nop)
   )
   (block $label$break$Lout
    (block $switch-default$16
     (block $switch-case$15
      (block $switch-case$12
       (block $switch-case$9
        (block $switch-case$8
         (br_table $switch-case$15 $switch-default$16 $switch-default$16 $switch-case$12 $switch-default$16 $switch-default$16 $switch-default$16 $switch-default$16 $switch-case$9 $switch-default$16 $switch-case$8 $switch-default$16
          (i32.sub
           (get_local $x)
           (i32.const 2)
          )
         )
        )
        (br $label$break$Lout)
       )
       (br $label$break$Lout)
      )
      (block $while-out$10
       (loop $while-in$11
        (block $block1
         (br $while-out$10)
         (br $while-in$11)
        )
       )
       (br $label$break$Lout)
      )
     )
     (block $while-out$13
      (loop $while-in$14
       (block $block3
        (br $label$break$Lout)
        (br $while-in$14)
       )
      )
      (br $label$break$Lout)
     )
    )
    (nop)
   )
   (i32.const 0)
  )
 )
 (func $blocker (; 11 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  (block $label$break$L
   (br $label$break$L)
  )
 )
 (func $frem (; 12 ;) (; has Stack IR ;) (type $4) (result f64)
  (call $f64-rem
   (f64.const 5.5)
   (f64.const 1.2)
  )
 )
 (func $big_uint_div_u (; 13 ;) (; has Stack IR ;) (type $5) (result i32)
  (local $x i32)
  (block $topmost (result i32)
   (set_local $x
    (i32.and
     (i32.div_u
      (i32.const -1)
      (i32.const 2)
     )
     (i32.const -1)
    )
   )
   (get_local $x)
  )
 )
 (func $fr (; 14 ;) (; has Stack IR ;) (type $FUNCSIG$vf) (param $x f32)
  (local $y f32)
  (local $z f64)
  (block $block0
   (drop
    (f32.demote/f64
     (get_local $z)
    )
   )
   (drop
    (get_local $y)
   )
   (drop
    (f32.const 5)
   )
   (drop
    (f32.const 0)
   )
   (drop
    (f32.const 5)
   )
   (drop
    (f32.const 0)
   )
  )
 )
 (func $negZero (; 15 ;) (; has Stack IR ;) (type $4) (result f64)
  (f64.const -0)
 )
 (func $abs (; 16 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  (local $x i32)
  (local $y f64)
  (local $z f32)
  (local $asm2wasm_i32_temp i32)
  (block $block0
   (set_local $x
    (block $block1 (result i32)
     (set_local $asm2wasm_i32_temp
      (i32.const 0)
     )
     (select
      (i32.sub
       (i32.const 0)
       (get_local $asm2wasm_i32_temp)
      )
      (get_local $asm2wasm_i32_temp)
      (i32.lt_s
       (get_local $asm2wasm_i32_temp)
       (i32.const 0)
      )
     )
    )
   )
   (set_local $y
    (f64.abs
     (f64.const 0)
    )
   )
   (set_local $z
    (f32.abs
     (f32.const 0)
    )
   )
  )
 )
 (func $neg (; 17 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  (local $x f32)
  (block $block0
   (set_local $x
    (f32.neg
     (get_local $x)
    )
   )
   (call_indirect (type $FUNCSIG$vf)
    (get_local $x)
    (i32.add
     (i32.and
      (i32.const 1)
      (i32.const 7)
     )
     (i32.const 8)
    )
   )
  )
 )
 (func $cneg (; 18 ;) (; has Stack IR ;) (type $FUNCSIG$vf) (param $x f32)
  (call_indirect (type $FUNCSIG$vf)
   (get_local $x)
   (i32.add
    (i32.and
     (i32.const 1)
     (i32.const 7)
    )
    (i32.const 8)
   )
  )
 )
 (func $___syscall_ret (; 19 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  (local $$0 i32)
  (drop
   (i32.gt_u
    (i32.shr_u
     (get_local $$0)
     (i32.const 0)
    )
    (i32.const -4096)
   )
  )
 )
 (func $z (; 20 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  (nop)
 )
 (func $w (; 21 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  (nop)
 )
 (func $block_and_after (; 22 ;) (; has Stack IR ;) (type $5) (result i32)
  (block $waka
   (drop
    (i32.const 1)
   )
   (br $waka)
  )
  (i32.const 0)
 )
 (func $loop-roundtrip (; 23 ;) (; has Stack IR ;) (type $7) (param $0 f64) (result f64)
  (loop $loop-in1 (result f64)
   (drop
    (get_local $0)
   )
   (get_local $0)
  )
 )
 (func $big-i64 (; 24 ;) (; has Stack IR ;) (type $8) (result i64)
  (i64.const -9218868437227405313)
 )
 (func $i64-store32 (; 25 ;) (; has Stack IR ;) (type $9) (param $0 i32) (param $1 i64)
  (i64.store32
   (get_local $0)
   (get_local $1)
  )
 )
 (func $return-unreachable (; 26 ;) (; has Stack IR ;) (type $5) (result i32)
  (return
   (i32.const 1)
  )
 )
 (func $unreachable-block (; 27 ;) (; has Stack IR ;) (type $5) (result i32)
  (f64.abs
   (block $block
    (drop
     (i32.const 1)
    )
    (return
     (i32.const 2)
    )
   )
  )
 )
 (func $unreachable-block-toplevel (; 28 ;) (; has Stack IR ;) (type $5) (result i32)
  (block $block
   (drop
    (i32.const 1)
   )
   (return
    (i32.const 2)
   )
  )
 )
 (func $unreachable-block0 (; 29 ;) (; has Stack IR ;) (type $5) (result i32)
  (f64.abs
   (block $block
    (return
     (i32.const 2)
    )
   )
  )
 )
 (func $unreachable-block0-toplevel (; 30 ;) (; has Stack IR ;) (type $5) (result i32)
  (block $block
   (return
    (i32.const 2)
   )
  )
 )
 (func $unreachable-block-with-br (; 31 ;) (; has Stack IR ;) (type $5) (result i32)
  (block $block
   (drop
    (i32.const 1)
   )
   (br $block)
  )
  (i32.const 1)
 )
 (func $unreachable-if (; 32 ;) (; has Stack IR ;) (type $5) (result i32)
  (f64.abs
   (if
    (i32.const 3)
    (return
     (i32.const 2)
    )
    (return
     (i32.const 1)
    )
   )
  )
 )
 (func $unreachable-if-toplevel (; 33 ;) (; has Stack IR ;) (type $5) (result i32)
  (if
   (i32.const 3)
   (return
    (i32.const 2)
   )
   (return
    (i32.const 1)
   )
  )
 )
 (func $unreachable-loop (; 34 ;) (; has Stack IR ;) (type $5) (result i32)
  (f64.abs
   (loop $loop-in
    (nop)
    (return
     (i32.const 1)
    )
   )
  )
 )
 (func $unreachable-loop0 (; 35 ;) (; has Stack IR ;) (type $5) (result i32)
  (f64.abs
   (loop $loop-in
    (return
     (i32.const 1)
    )
   )
  )
 )
 (func $unreachable-loop-toplevel (; 36 ;) (; has Stack IR ;) (type $5) (result i32)
  (loop $loop-in
   (nop)
   (return
    (i32.const 1)
   )
  )
 )
 (func $unreachable-loop0-toplevel (; 37 ;) (; has Stack IR ;) (type $5) (result i32)
  (loop $loop-in
   (return
    (i32.const 1)
   )
  )
 )
 (func $unreachable-ifs (; 38 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  (if
   (unreachable)
   (nop)
  )
  (if
   (unreachable)
   (unreachable)
  )
  (if
   (unreachable)
   (nop)
   (nop)
  )
  (if
   (unreachable)
   (unreachable)
   (nop)
  )
  (if
   (unreachable)
   (nop)
   (unreachable)
  )
  (if
   (unreachable)
   (unreachable)
   (unreachable)
  )
  (if
   (i32.const 1)
   (unreachable)
   (nop)
  )
  (if
   (i32.const 1)
   (nop)
   (unreachable)
  )
  (if
   (i32.const 1)
   (unreachable)
   (unreachable)
  )
 )
 (func $unreachable-if-arm (; 39 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  (if
   (i32.const 1)
   (block $block
    (nop)
   )
   (block $block12
    (unreachable)
    (drop
     (i32.const 1)
    )
   )
  )
 )
 (func $local-to-stack (; 40 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp i32)
  (set_local $temp
   (call $local-to-stack
    (i32.const 1)
   )
  )
  (drop
   (call $local-to-stack
    (i32.const 2)
   )
  )
  (get_local $temp)
 )
 (func $local-to-stack-1 (; 41 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp i32)
  (set_local $temp
   (call $local-to-stack
    (i32.const 1)
   )
  )
  (drop
   (call $local-to-stack
    (i32.const 2)
   )
  )
  (i32.eqz
   (get_local $temp)
  )
 )
 (func $local-to-stack-1b (; 42 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp i32)
  (set_local $temp
   (call $local-to-stack
    (i32.const 1)
   )
  )
  (drop
   (call $local-to-stack
    (i32.const 2)
   )
  )
  (i32.add
   (get_local $temp)
   (i32.const 3)
  )
 )
 (func $local-to-stack-1c-no (; 43 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp i32)
  (set_local $temp
   (call $local-to-stack
    (i32.const 1)
   )
  )
  (drop
   (call $local-to-stack
    (i32.const 2)
   )
  )
  (i32.add
   (i32.const 3)
   (get_local $temp)
  )
 )
 (func $local-to-stack-2-no (; 44 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp i32)
  (set_local $temp
   (call $local-to-stack
    (i32.const 1)
   )
  )
  (drop
   (call $local-to-stack
    (i32.const 2)
   )
  )
  (i32.add
   (get_local $temp)
   (get_local $temp)
  )
 )
 (func $local-to-stack-3-no (; 45 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp i32)
  (if
   (i32.const 1)
   (set_local $temp
    (call $local-to-stack
     (i32.const 1)
    )
   )
   (set_local $temp
    (call $local-to-stack
     (i32.const 2)
    )
   )
  )
  (drop
   (call $local-to-stack
    (i32.const 3)
   )
  )
  (get_local $temp)
 )
 (func $local-to-stack-multi-4 (; 46 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp1 i32)
  (local $temp2 i32)
  (set_local $temp1
   (call $local-to-stack-multi-4
    (i32.const 1)
   )
  )
  (drop
   (call $local-to-stack-multi-4
    (i32.const 2)
   )
  )
  (drop
   (get_local $temp1)
  )
  (set_local $temp1
   (call $local-to-stack-multi-4
    (i32.const 3)
   )
  )
  (drop
   (call $local-to-stack-multi-4
    (i32.const 4)
   )
  )
  (get_local $temp1)
 )
 (func $local-to-stack-multi-5 (; 47 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp1 i32)
  (local $temp2 i32)
  (set_local $temp1
   (call $local-to-stack-multi-4
    (i32.const 1)
   )
  )
  (drop
   (call $local-to-stack-multi-4
    (i32.const 2)
   )
  )
  (drop
   (get_local $temp1)
  )
  (set_local $temp2
   (call $local-to-stack-multi-4
    (i32.const 3)
   )
  )
  (drop
   (call $local-to-stack-multi-4
    (i32.const 4)
   )
  )
  (get_local $temp2)
 )
 (func $local-to-stack-multi-6-justone (; 48 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp1 i32)
  (local $temp2 i32)
  (set_local $temp1
   (call $local-to-stack-multi-4
    (i32.const 1)
   )
  )
  (drop
   (call $local-to-stack-multi-4
    (i32.const 2)
   )
  )
  (drop
   (get_local $temp1)
  )
  (set_local $temp2
   (call $local-to-stack-multi-4
    (i32.const 3)
   )
  )
  (drop
   (call $local-to-stack-multi-4
    (i32.const 4)
   )
  )
  (i32.add
   (get_local $temp2)
   (get_local $temp2)
  )
 )
 (func $local-to-stack-multi-7-justone (; 49 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp1 i32)
  (local $temp2 i32)
  (set_local $temp1
   (call $local-to-stack-multi-4
    (i32.const 1)
   )
  )
  (drop
   (call $local-to-stack-multi-4
    (i32.const 2)
   )
  )
  (drop
   (i32.add
    (get_local $temp1)
    (get_local $temp1)
   )
  )
  (set_local $temp2
   (call $local-to-stack-multi-4
    (i32.const 3)
   )
  )
  (drop
   (call $local-to-stack-multi-4
    (i32.const 4)
   )
  )
  (get_local $temp2)
 )
 (func $local-to-stack-overlapping-multi-8-no (; 50 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp1 i32)
  (local $temp2 i32)
  (set_local $temp1
   (call $local-to-stack-multi-4
    (i32.const 1)
   )
  )
  (set_local $temp2
   (call $local-to-stack-multi-4
    (i32.const 1)
   )
  )
  (drop
   (call $local-to-stack-multi-4
    (i32.const 3)
   )
  )
  (i32.add
   (get_local $temp2)
   (get_local $temp1)
  )
 )
 (func $local-to-stack-overlapping-multi-9-yes (; 51 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp1 i32)
  (local $temp2 i32)
  (set_local $temp1
   (call $local-to-stack-multi-4
    (i32.const 1)
   )
  )
  (set_local $temp2
   (call $local-to-stack-multi-4
    (i32.const 1)
   )
  )
  (drop
   (call $local-to-stack-multi-4
    (i32.const 3)
   )
  )
  (i32.add
   (get_local $temp1)
   (get_local $temp2)
  )
 )
 (func $local-to-stack-through-control-flow (; 52 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  (local $temp1 i32)
  (local $temp2 i32)
  (set_local $temp2
   (call $local-to-stack-multi-4
    (i32.const 0)
   )
  )
  (set_local $temp1
   (call $local-to-stack-multi-4
    (i32.const 1)
   )
  )
  (if
   (i32.const 0)
   (nop)
  )
  (drop
   (get_local $temp1)
  )
  (set_local $temp1
   (call $local-to-stack-multi-4
    (i32.const 2)
   )
  )
  (block $block
   (br $block)
  )
  (drop
   (get_local $temp1)
  )
  (drop
   (get_local $temp2)
  )
 )
 (func $local-to-stack-in-control-flow (; 53 ;) (; has Stack IR ;) (type $FUNCSIG$v)
  (local $temp1 i32)
  (if
   (i32.const 0)
   (block $block
    (set_local $temp1
     (call $local-to-stack-multi-4
      (i32.const 0)
     )
    )
    (drop
     (get_local $temp1)
    )
   )
   (block $block13
    (set_local $temp1
     (call $local-to-stack-multi-4
      (i32.const 1)
     )
    )
    (drop
     (get_local $temp1)
    )
   )
  )
 )
 (func $remove-block (; 54 ;) (; has Stack IR ;) (type $6) (param $x i32) (result i32)
  (local $temp i32)
  (i32.add
   (call $remove-block
    (i32.const 0)
   )
   (i32.eqz
    (block $block (result i32)
     (set_local $temp
      (call $remove-block
       (i32.const 1)
      )
     )
     (drop
      (call $remove-block
       (i32.const 2)
      )
     )
     (get_local $temp)
    )
   )
  )
 )
)
