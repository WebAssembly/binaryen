(module
 (type $FUNCSIG$v (func))
 (type $FUNCSIG$i (func (result i32)))
 (memory $0 1)
 (func $push1 (; 0 ;) (type $FUNCSIG$v)
  (local $x i32)
  (block $out
   (br_if $out
    (i32.const 2)
   )
   (local.set $x
    (i32.const 1)
   )
   (drop
    (local.get $x)
   )
  )
 )
 (func $push2 (; 1 ;) (type $FUNCSIG$v)
  (local $x i32)
  (local $y i32)
  (block $out
   (br_if $out
    (i32.const 2)
   )
   (local.set $x
    (i32.const 1)
   )
   (local.set $y
    (i32.const 3)
   )
   (drop
    (local.get $x)
   )
   (drop
    (local.get $y)
   )
  )
 )
 (func $push1-twice (; 2 ;) (type $FUNCSIG$v)
  (local $x i32)
  (block $out
   (br_if $out
    (i32.const 2)
   )
   (br_if $out
    (i32.const 3)
   )
   (local.set $x
    (i32.const 1)
   )
   (drop
    (local.get $x)
   )
  )
 )
 (func $push1-twiceb (; 3 ;) (type $FUNCSIG$v)
  (local $x i32)
  (block $out
   (br_if $out
    (i32.const 2)
   )
   (nop)
   (br_if $out
    (i32.const 3)
   )
   (local.set $x
    (i32.const 1)
   )
   (drop
    (local.get $x)
   )
  )
 )
 (func $push2-twice (; 4 ;) (type $FUNCSIG$v)
  (local $x i32)
  (local $y i32)
  (block $out
   (br_if $out
    (i32.const 2)
   )
   (br_if $out
    (i32.const 2)
   )
   (local.set $x
    (i32.const 1)
   )
   (local.set $y
    (i32.const 3)
   )
   (drop
    (local.get $x)
   )
   (drop
    (local.get $y)
   )
  )
 )
 (func $ignore-last (; 5 ;) (type $FUNCSIG$v)
  (local $x i32)
  (block $out
   (local.set $x
    (i32.const 1)
   )
   (br_if $out
    (i32.const 2)
   )
  )
 )
 (func $ignore-last2 (; 6 ;) (type $FUNCSIG$v)
  (local $x i32)
  (block $out
   (local.set $x
    (i32.const 1)
   )
   (nop)
   (nop)
   (br_if $out
    (i32.const 2)
   )
  )
 )
 (func $push-if (; 7 ;) (type $FUNCSIG$v)
  (local $x i32)
  (block $out
   (if
    (i32.const 2)
    (nop)
   )
   (local.set $x
    (i32.const 1)
   )
   (drop
    (local.get $x)
   )
  )
 )
 (func $push-dropped (; 8 ;) (type $FUNCSIG$i) (result i32)
  (local $x i32)
  (block $out (result i32)
   (drop
    (br_if $out
     (i32.const 2)
     (i32.const 3)
    )
   )
   (local.set $x
    (i32.const 1)
   )
   (drop
    (local.get $x)
   )
   (i32.const 4)
  )
 )
 (func $push-past-stuff (; 9 ;) (type $FUNCSIG$v)
  (local $x i32)
  (block $out
   (call $push-past-stuff)
   (drop
    (i32.const 1)
   )
   (br_if $out
    (i32.const 2)
   )
   (local.set $x
    (i32.const 1)
   )
   (drop
    (local.get $x)
   )
  )
 )
 (func $fail-then-push (; 10 ;) (type $FUNCSIG$v)
  (local $x i32)
  (local $y i32)
  (block $out
   (local.set $x
    (i32.const 1)
   )
   (drop
    (local.get $x)
   )
   (br_if $out
    (i32.const 2)
   )
   (br_if $out
    (i32.const 3)
   )
   (local.set $y
    (i32.const 1)
   )
   (drop
    (local.get $x)
   )
   (drop
    (local.get $y)
   )
  )
 )
 (func $used (; 11 ;) (type $FUNCSIG$v)
  (local $x i32)
  (block $out
   (local.set $x
    (i32.const 1)
   )
   (br_if $out
    (local.get $x)
   )
   (drop
    (local.get $x)
   )
  )
 )
 (func $not-sfa (; 12 ;) (type $FUNCSIG$v)
  (local $x i32)
  (local.set $x
   (i32.const 1)
  )
  (block $out
   (local.set $x
    (i32.const 1)
   )
   (br_if $out
    (i32.const 2)
   )
   (drop
    (local.get $x)
   )
  )
 )
 (func $not-sfa2 (; 13 ;) (type $FUNCSIG$v)
  (local $x i32)
  (drop
   (local.get $x)
  )
  (block $out
   (local.set $x
    (i32.const 1)
   )
   (br_if $out
    (i32.const 2)
   )
   (drop
    (local.get $x)
   )
  )
 )
 (func $used-out (; 14 ;) (type $FUNCSIG$v)
  (local $x i32)
  (block $out
   (local.set $x
    (i32.const 1)
   )
   (br_if $out
    (i32.const 2)
   )
   (drop
    (local.get $x)
   )
  )
  (drop
   (local.get $x)
  )
 )
 (func $value-might-interfere (; 15 ;) (type $FUNCSIG$v)
  (local $x i32)
  (block $out
   (br_if $out
    (i32.const 2)
   )
   (local.set $x
    (i32.load
     (i32.const 0)
    )
   )
   (drop
    (local.get $x)
   )
  )
 )
 (func $value-interferes (; 16 ;) (type $FUNCSIG$v)
  (local $x i32)
  (block $out
   (local.set $x
    (i32.load
     (i32.const 0)
    )
   )
   (i32.store
    (i32.const 1)
    (i32.const 3)
   )
   (br_if $out
    (i32.const 2)
   )
   (drop
    (local.get $x)
   )
  )
 )
 (func $value-interferes-accumulation (; 17 ;) (type $FUNCSIG$v)
  (local $x i32)
  (block $out
   (local.set $x
    (i32.load
     (i32.const 0)
    )
   )
   (nop)
   (i32.store
    (i32.const 1)
    (i32.const 3)
   )
   (nop)
   (br_if $out
    (i32.const 2)
   )
   (drop
    (local.get $x)
   )
  )
 )
 (func $value-interferes-in-pushpoint (; 18 ;) (type $FUNCSIG$v)
  (local $x i32)
  (block $out
   (local.set $x
    (i32.load
     (i32.const 0)
    )
   )
   (if
    (i32.const 1)
    (call $value-interferes)
   )
   (drop
    (local.get $x)
   )
  )
 )
 (func $values-might-interfere (; 19 ;) (type $FUNCSIG$v)
  (local $x i32)
  (local $y i32)
  (block $out
   (local.set $x
    (call $push-dropped)
   )
   (local.set $y
    (call $push-dropped)
   )
   (br_if $out
    (i32.const 2)
   )
   (drop
    (local.get $x)
   )
   (drop
    (local.get $y)
   )
  )
 )
 (func $unpushed-interferes (; 20 ;) (type $FUNCSIG$v)
  (local $x i32)
  (local $y i32)
  (block $out
   (local.set $x
    (call $push-dropped)
   )
   (local.set $y
    (call $push-dropped)
   )
   (br_if $out
    (i32.const 2)
   )
   (drop
    (local.get $x)
   )
   (drop
    (local.get $y)
   )
  )
  (drop
   (local.get $y)
  )
 )
 (func $unpushed-ignorable (; 21 ;) (type $FUNCSIG$v)
  (local $x i32)
  (local $y i32)
  (block $out
   (local.set $x
    (i32.const 1)
   )
   (br_if $out
    (i32.const 2)
   )
   (local.set $y
    (i32.const 3)
   )
   (drop
    (local.get $x)
   )
   (drop
    (local.get $y)
   )
  )
  (drop
   (local.get $x)
  )
 )
 (func $unpushed-ignorable-side-effect (; 22 ;) (type $FUNCSIG$v)
  (local $x i32)
  (local $y i32)
  (block $out
   (local.set $x
    (call $push-dropped)
   )
   (br_if $out
    (i32.const 2)
   )
   (local.set $y
    (i32.const 3)
   )
   (drop
    (local.get $x)
   )
   (drop
    (local.get $y)
   )
  )
 )
 (func $unpushed-side-effect-into-drop (; 23 ;) (type $FUNCSIG$v)
  (local $x i32)
  (block $out
   (local.set $x
    (call $push-dropped)
   )
   (br_if $out
    (i32.const 1)
   )
   (drop
    (local.get $x)
   )
  )
 )
 (func $unpushed-side-effect-into-if (; 24 ;) (type $FUNCSIG$v)
  (local $x i32)
  (block $out
   (local.set $x
    (call $push-dropped)
   )
   (br_if $out
    (i32.const 1)
   )
   (if
    (local.get $x)
    (nop)
   )
  )
 )
)
