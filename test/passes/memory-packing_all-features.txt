(module
 (import "env" "memory" (memory $0 2048 2048))
 (import "env" "memoryBase" (global $memoryBase i32))
)
(module
 (import "env" "memory" (memory $0 2048 2048))
 (import "env" "memoryBase" (global $memoryBase i32))
)
(module
 (type $none_=>_none (func))
 (import "env" "memory" (memory $0 2048 2048))
 (data (global.get $memoryBase) "waka this cannot be optimized\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00we don\'t know where it will go")
 (data (i32.const 1024) "waka this CAN be optimized")
 (data (i32.const 1107) "we DO know where it will go")
 (data (i32.const 2057) "zeros before")
 (data (i32.const 3000) "zeros after")
 (data (i32.const 4000) "zeros\00in\00the\00middle")
 (data (i32.const 4035) "nice skip here")
 (data (i32.const 4066) "another\00but no")
 (import "env" "memoryBase" (global $memoryBase i32))
 (func $will-trap (; 0 ;)
  (block
   (drop
    (i32.const 1)
   )
   (drop
    (i32.const 2)
   )
   (if
    (i32.const 3)
    (unreachable)
   )
  )
  (block
   (data.drop 0)
  )
 )
 (func $will-trap-refinalized (; 1 ;)
  (drop
   (loop $loop-in (result i32)
    (block
     (drop
      (i32.const 1)
     )
     (drop
      (i32.const 2)
     )
     (if
      (i32.const 3)
      (unreachable)
     )
    )
    (i32.const 42)
   )
  )
  (drop
   (loop $loop-in0 (result i32)
    (block
     (data.drop 1)
     (data.drop 2)
    )
    (i32.const 42)
   )
  )
 )
 (func $zero-sized-nop (; 2 ;)
  (block
   (drop
    (i32.const 1)
   )
   (drop
    (i32.const 2)
   )
  )
  (block
   (data.drop 3)
  )
 )
)
(module
 (type $none_=>_none (func))
 (import "env" "memory" (memory $0 2048 2048))
 (data passive "zeroes at start")
 (data passive "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00zeroes at start")
 (data passive "\00\00\00few zeroes at start")
 (data passive "zeroes at end")
 (data passive "zeroes at end\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data passive "few zeroes at end\00\00\00")
 (data passive "zeroes")
 (data passive "in middle")
 (data passive "zeroes\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00in middle")
 (data passive "few zeroes\00\00\00in middle")
 (data passive "multiple")
 (data passive "spans")
 (data passive "of zeroes")
 (data passive "even")
 (data passive "more")
 (data passive "zeroes")
 (data passive "")
 (data passive "no zeroes")
 (data passive "")
 (data passive "")
 (data passive "")
 (data passive "")
 (data passive "nonzero")
 (func $zeroes-at-start (; 0 ;)
  (block
   (memory.fill
    (i32.const 0)
    (i32.const 0)
    (i32.const 20)
   )
   (memory.init 0
    (i32.const 20)
    (i32.const 0)
    (i32.const 15)
   )
  )
  (block
   (data.drop 0)
  )
 )
 (func $zeroes-at-start-not-split (; 1 ;)
  (memory.init 1
   (i32.const 0)
   (i32.const 0)
   (i32.const 35)
  )
  (memory.init 1
   (i32.const 0)
   (i32.const 0)
   (i32.const 35)
  )
  (memory.init 1
   (i32.const 0)
   (i32.const 0)
   (i32.const 35)
  )
  (block
   (data.drop 1)
  )
 )
 (func $few-zeroes-at-start (; 2 ;)
  (memory.init 2
   (i32.const 0)
   (i32.const 0)
   (i32.const 22)
  )
  (block
   (data.drop 2)
  )
 )
 (func $zeroes-at-end (; 3 ;)
  (block
   (memory.init 3
    (i32.const 0)
    (i32.const 0)
    (i32.const 13)
   )
   (memory.fill
    (i32.const 13)
    (i32.const 0)
    (i32.const 20)
   )
  )
  (block
   (data.drop 3)
  )
 )
 (func $zeroes-at-end-not-split (; 4 ;)
  (memory.init 4
   (i32.const 0)
   (i32.const 0)
   (i32.const 33)
  )
  (memory.init 4
   (i32.const 0)
   (i32.const 0)
   (i32.const 33)
  )
  (memory.init 4
   (i32.const 0)
   (i32.const 0)
   (i32.const 33)
  )
  (block
   (data.drop 4)
  )
 )
 (func $few-zeroes-at-end (; 5 ;)
  (memory.init 5
   (i32.const 0)
   (i32.const 0)
   (i32.const 20)
  )
  (block
   (data.drop 5)
  )
 )
 (func $zeroes-in-middle (; 6 ;)
  (block
   (memory.init 6
    (i32.const 0)
    (i32.const 0)
    (i32.const 6)
   )
   (memory.fill
    (i32.const 6)
    (i32.const 0)
    (i32.const 20)
   )
   (memory.init 7
    (i32.const 26)
    (i32.const 0)
    (i32.const 9)
   )
  )
  (block
   (data.drop 6)
   (data.drop 7)
  )
 )
 (func $zeroes-in-middle-not-split (; 7 ;)
  (memory.init 8
   (i32.const 0)
   (i32.const 0)
   (i32.const 35)
  )
  (memory.init 8
   (i32.const 0)
   (i32.const 0)
   (i32.const 35)
  )
  (block
   (data.drop 8)
  )
 )
 (func $few-zeroes-in-middle (; 8 ;)
  (memory.init 9
   (i32.const 0)
   (i32.const 0)
   (i32.const 22)
  )
  (block
   (data.drop 9)
  )
 )
 (func $multiple-spans-of-zeroes (; 9 ;)
  (block
   (memory.init 10
    (i32.const 0)
    (i32.const 0)
    (i32.const 8)
   )
   (memory.fill
    (i32.const 8)
    (i32.const 0)
    (i32.const 20)
   )
   (memory.init 11
    (i32.const 28)
    (i32.const 0)
    (i32.const 5)
   )
   (memory.fill
    (i32.const 33)
    (i32.const 0)
    (i32.const 20)
   )
   (memory.init 12
    (i32.const 53)
    (i32.const 0)
    (i32.const 9)
   )
  )
  (block
   (data.drop 10)
   (data.drop 11)
   (data.drop 12)
  )
 )
 (func $even-more-zeroes (; 10 ;)
  (block
   (memory.fill
    (i32.const 0)
    (i32.const 0)
    (i32.const 20)
   )
   (memory.init 13
    (i32.const 20)
    (i32.const 0)
    (i32.const 4)
   )
   (memory.fill
    (i32.const 24)
    (i32.const 0)
    (i32.const 20)
   )
   (memory.init 14
    (i32.const 44)
    (i32.const 0)
    (i32.const 4)
   )
   (memory.fill
    (i32.const 48)
    (i32.const 0)
    (i32.const 20)
   )
   (memory.init 15
    (i32.const 68)
    (i32.const 0)
    (i32.const 6)
   )
   (memory.fill
    (i32.const 74)
    (i32.const 0)
    (i32.const 20)
   )
  )
  (block
   (data.drop 13)
   (data.drop 14)
   (data.drop 15)
  )
 )
 (func $only-zeroes (; 11 ;)
  (block
   (memory.fill
    (i32.const 0)
    (i32.const 0)
    (i32.const 20)
   )
  )
  (data.drop 16)
 )
 (func $no-zeroes (; 12 ;)
  (memory.init 17
   (i32.const 0)
   (i32.const 0)
   (i32.const 9)
  )
  (block
   (data.drop 17)
  )
 )
 (func $empty (; 13 ;)
  (block
   (drop
    (i32.const 0)
   )
   (drop
    (i32.const 0)
   )
  )
  (data.drop 18)
 )
 (func $empty-nonzero-size (; 14 ;)
  (block
   (drop
    (i32.const 0)
   )
   (drop
    (i32.const 0)
   )
   (if
    (i32.const 1)
    (unreachable)
   )
  )
  (data.drop 19)
 )
 (func $multiple-drop-empty (; 15 ;)
  (data.drop 20)
  (data.drop 20)
 )
 (func $multiple-drop-zeroes (; 16 ;)
  (data.drop 21)
  (data.drop 21)
 )
 (func $multiple-drop-nonzero (; 17 ;)
  (block
   (data.drop 22)
  )
  (block
   (data.drop 22)
  )
 )
)
(module
 (type $none_=>_none (func))
 (import "env" "memory" (memory $0 2048 2048))
 (data passive "even")
 (data passive "more")
 (data passive "zeroes")
 (data passive "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00even\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00more\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00zeroes\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data passive "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00even\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00more\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00zeroes\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
 (data passive "even")
 (data passive "more")
 (data passive "zeroes")
 (data passive "even")
 (data passive "more")
 (data passive "zeroes")
 (data passive "even")
 (data passive "more")
 (data passive "zeroes")
 (data passive "even")
 (data passive "more")
 (data passive "zeroes")
 (data passive "even")
 (data passive "more")
 (data passive "zeroes")
 (data passive "even")
 (data passive "more")
 (data passive "zeroes")
 (data passive "even")
 (data passive "more")
 (data passive "zeroes")
 (data passive "even")
 (data passive "more")
 (data passive "zeroes")
 (data passive "even")
 (data passive "more")
 (data passive "zeroes")
 (import "env" "param" (global $param i32))
 (func $nonconst-dest (; 0 ;)
  (local $0 i32)
  (block
   (local.set $0
    (global.get $param)
   )
   (memory.fill
    (local.get $0)
    (i32.const 0)
    (i32.const 20)
   )
   (memory.init 0
    (i32.add
     (local.get $0)
     (i32.const 20)
    )
    (i32.const 0)
    (i32.const 4)
   )
   (memory.fill
    (i32.add
     (local.get $0)
     (i32.const 24)
    )
    (i32.const 0)
    (i32.const 20)
   )
   (memory.init 1
    (i32.add
     (local.get $0)
     (i32.const 44)
    )
    (i32.const 0)
    (i32.const 4)
   )
   (memory.fill
    (i32.add
     (local.get $0)
     (i32.const 48)
    )
    (i32.const 0)
    (i32.const 20)
   )
   (memory.init 2
    (i32.add
     (local.get $0)
     (i32.const 68)
    )
    (i32.const 0)
    (i32.const 6)
   )
   (memory.fill
    (i32.add
     (local.get $0)
     (i32.const 74)
    )
    (i32.const 0)
    (i32.const 20)
   )
  )
  (block
   (data.drop 0)
   (data.drop 1)
   (data.drop 2)
  )
 )
 (func $nonconst-offset (; 1 ;)
  (memory.init 3
   (i32.const 0)
   (global.get $param)
   (i32.const 94)
  )
  (block
   (data.drop 3)
  )
 )
 (func $nonconst-size (; 2 ;)
  (memory.init 4
   (i32.const 0)
   (i32.const 0)
   (global.get $param)
  )
  (block
   (data.drop 4)
  )
 )
 (func $partial-skip-start (; 3 ;)
  (block
   (memory.fill
    (i32.const 0)
    (i32.const 0)
    (i32.const 10)
   )
   (memory.init 5
    (i32.const 10)
    (i32.const 0)
    (i32.const 4)
   )
   (memory.fill
    (i32.const 14)
    (i32.const 0)
    (i32.const 20)
   )
   (memory.init 6
    (i32.const 34)
    (i32.const 0)
    (i32.const 4)
   )
   (memory.fill
    (i32.const 38)
    (i32.const 0)
    (i32.const 20)
   )
   (memory.init 7
    (i32.const 58)
    (i32.const 0)
    (i32.const 6)
   )
   (memory.fill
    (i32.const 64)
    (i32.const 0)
    (i32.const 20)
   )
  )
  (block
   (data.drop 5)
   (data.drop 6)
   (data.drop 7)
  )
 )
 (func $full-skip-start (; 4 ;)
  (block
   (memory.init 8
    (i32.const 0)
    (i32.const 2)
    (i32.const 2)
   )
   (memory.fill
    (i32.const 2)
    (i32.const 0)
    (i32.const 20)
   )
   (memory.init 9
    (i32.const 22)
    (i32.const 0)
    (i32.const 4)
   )
   (memory.fill
    (i32.const 26)
    (i32.const 0)
    (i32.const 20)
   )
   (memory.init 10
    (i32.const 46)
    (i32.const 0)
    (i32.const 6)
   )
   (memory.fill
    (i32.const 52)
    (i32.const 0)
    (i32.const 20)
   )
  )
  (block
   (data.drop 8)
   (data.drop 9)
   (data.drop 10)
  )
 )
 (func $partial-skip-end (; 5 ;)
  (block
   (memory.fill
    (i32.const 0)
    (i32.const 0)
    (i32.const 20)
   )
   (memory.init 11
    (i32.const 20)
    (i32.const 0)
    (i32.const 4)
   )
   (memory.fill
    (i32.const 24)
    (i32.const 0)
    (i32.const 20)
   )
   (memory.init 12
    (i32.const 44)
    (i32.const 0)
    (i32.const 4)
   )
   (memory.fill
    (i32.const 48)
    (i32.const 0)
    (i32.const 20)
   )
   (memory.init 13
    (i32.const 68)
    (i32.const 0)
    (i32.const 6)
   )
   (memory.fill
    (i32.const 74)
    (i32.const 0)
    (i32.const 10)
   )
  )
  (block
   (data.drop 11)
   (data.drop 12)
   (data.drop 13)
  )
 )
 (func $full-skip-end (; 6 ;)
  (block
   (memory.fill
    (i32.const 0)
    (i32.const 0)
    (i32.const 20)
   )
   (memory.init 14
    (i32.const 20)
    (i32.const 0)
    (i32.const 4)
   )
   (memory.fill
    (i32.const 24)
    (i32.const 0)
    (i32.const 20)
   )
   (memory.init 15
    (i32.const 44)
    (i32.const 0)
    (i32.const 4)
   )
   (memory.fill
    (i32.const 48)
    (i32.const 0)
    (i32.const 20)
   )
   (memory.init 16
    (i32.const 68)
    (i32.const 0)
    (i32.const 4)
   )
  )
  (block
   (data.drop 14)
   (data.drop 15)
   (data.drop 16)
  )
 )
 (func $slice-zeroes (; 7 ;)
  (block
   (memory.fill
    (i32.const 0)
    (i32.const 0)
    (i32.const 10)
   )
  )
  (block
   (data.drop 17)
   (data.drop 18)
   (data.drop 19)
  )
 )
 (func $slice-nonzeroes (; 8 ;)
  (block
   (memory.init 20
    (i32.const 0)
    (i32.const 1)
    (i32.const 2)
   )
  )
  (block
   (data.drop 20)
   (data.drop 21)
   (data.drop 22)
  )
 )
 (func $zero-size (; 9 ;)
  (block
   (drop
    (i32.const 0)
   )
   (drop
    (i32.const 40)
   )
  )
  (block
   (data.drop 23)
   (data.drop 24)
   (data.drop 25)
  )
 )
 (func $zero-size-undropped (; 10 ;)
  (drop
   (i32.const 0)
  )
  (drop
   (i32.const 40)
  )
 )
 (func $out-of-bounds-offset (; 11 ;)
  (block
   (drop
    (i32.const 0)
   )
   (drop
    (i32.const 95)
   )
   (if
    (i32.const 1)
    (unreachable)
   )
  )
  (block
   (data.drop 26)
   (data.drop 27)
   (data.drop 28)
  )
 )
 (func $out-of-bounds-size (; 12 ;)
  (block
   (drop
    (i32.const 0)
   )
   (drop
    (i32.const 0)
   )
   (if
    (i32.const 95)
    (unreachable)
   )
  )
  (block
   (data.drop 29)
   (data.drop 30)
   (data.drop 31)
  )
 )
)
