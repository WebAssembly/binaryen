(module
 (type $f64_f64_=>_f64 (func (param f64 f64) (result f64)))
 (type $none_=>_f32 (func (result f32)))
 (type $f32_=>_f32 (func (param f32) (result f32)))
 (type $f64_=>_f64 (func (param f64) (result f64)))
 (export "div" (func $0))
 (export "mul1" (func $1))
 (export "mul2" (func $2))
 (export "add1" (func $1))
 (export "add2" (func $2))
 (export "add3" (func $2))
 (export "add4" (func $2))
 (export "sub1" (func $2))
 (export "sub2" (func $2))
 (export "mul_neg_one1" (func $9))
 (export "mul_neg_one2" (func $10))
 (export "abs_sub_zero1" (func $11))
 (export "abs_sub_zero2" (func $12))
 (export "div_neg_add_const" (func $13))
 (export "mul_neg_add_const" (func $14))
 (export "neg_div_neg_add_const" (func $13))
 (export "neg_mul_add_const" (func $14))
 (export "neg_x_add_y" (func $17))
 (export "x_add_neg_y" (func $18))
 (export "x_sub_neg_y" (func $19))
 (func $0 (; has Stack IR ;) (result f32)
  (f32.const -nan:0x23017a)
 )
 (func $1 (; has Stack IR ;) (result f32)
  (f32.const -nan:0x34546d)
 )
 (func $2 (; has Stack IR ;) (result f32)
  (f32.const nan:0x400000)
 )
 (func $9 (; has Stack IR ;) (param $0 f32) (result f32)
  (f32.neg
   (local.get $0)
  )
 )
 (func $10 (; has Stack IR ;) (param $0 f64) (result f64)
  (f64.neg
   (local.get $0)
  )
 )
 (func $11 (; has Stack IR ;) (param $0 f32) (result f32)
  (f32.abs
   (local.get $0)
  )
 )
 (func $12 (; has Stack IR ;) (param $0 f64) (result f64)
  (f64.abs
   (local.get $0)
  )
 )
 (func $13 (; has Stack IR ;) (param $0 f64) (param $1 f64) (result f64)
  (f64.sub
   (f64.const 1)
   (f64.div
    (local.get $0)
    (local.get $1)
   )
  )
 )
 (func $14 (; has Stack IR ;) (param $0 f64) (param $1 f64) (result f64)
  (f64.sub
   (f64.const 1)
   (f64.mul
    (local.get $0)
    (local.get $1)
   )
  )
 )
 (func $17 (; has Stack IR ;) (param $0 f64) (param $1 f64) (result f64)
  (f64.sub
   (local.get $1)
   (local.get $0)
  )
 )
 (func $18 (; has Stack IR ;) (param $0 f64) (param $1 f64) (result f64)
  (f64.sub
   (local.get $0)
   (local.get $1)
  )
 )
 (func $19 (; has Stack IR ;) (param $0 f64) (param $1 f64) (result f64)
  (f64.add
   (local.get $0)
   (local.get $1)
  )
 )
)
