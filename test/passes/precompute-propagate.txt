(module
 (type $0 (func (param i32)))
 (type $1 (func (param i32) (result i32)))
 (type $2 (func (param i32 i32) (result i32)))
 (type $3 (func (param i32 i32 i32) (result i32)))
 (type $4 (func))
 (memory $0 10 10)
 (export "load-off-2" (func $load-off-2))
 (export "offset-realistic" (func $offset-realistic))
 (func $basic (; 0 ;) (type $0) (param $p i32)
  (local $x i32)
  (local.set $x
   (i32.const 10)
  )
  (call $basic
   (i32.const 20)
  )
 )
 (func $split (; 1 ;) (type $0) (param $p i32)
  (local $x i32)
  (if
   (i32.const 1)
   (local.set $x
    (i32.const 10)
   )
  )
  (call $basic
   (i32.add
    (local.get $x)
    (local.get $x)
   )
  )
 )
 (func $split-but-join (; 2 ;) (type $0) (param $p i32)
  (local $x i32)
  (if
   (i32.const 1)
   (local.set $x
    (i32.const 10)
   )
   (local.set $x
    (i32.const 10)
   )
  )
  (call $basic
   (i32.const 20)
  )
 )
 (func $split-but-join-different (; 3 ;) (type $0) (param $p i32)
  (local $x i32)
  (if
   (i32.const 1)
   (local.set $x
    (i32.const 10)
   )
   (local.set $x
    (i32.const 20)
   )
  )
  (call $basic
   (i32.add
    (local.get $x)
    (local.get $x)
   )
  )
 )
 (func $split-but-join-different-b (; 4 ;) (type $0) (param $p i32)
  (local $x i32)
  (if
   (i32.const 1)
   (local.set $x
    (i32.const 10)
   )
   (local.set $x
    (local.get $p)
   )
  )
  (call $basic
   (i32.add
    (local.get $x)
    (local.get $x)
   )
  )
 )
 (func $split-but-join-init0 (; 5 ;) (type $0) (param $p i32)
  (local $x i32)
  (if
   (i32.const 1)
   (local.set $x
    (i32.const 0)
   )
  )
  (call $basic
   (i32.const 0)
  )
 )
 (func $later (; 6 ;) (type $0) (param $p i32)
  (local $x i32)
  (local.set $x
   (i32.const 10)
  )
  (call $basic
   (i32.const 20)
  )
  (local.set $x
   (i32.const 22)
  )
  (call $basic
   (i32.const 44)
  )
  (local.set $x
   (i32.const 39)
  )
 )
 (func $later2 (; 7 ;) (type $1) (param $p i32) (result i32)
  (local $x i32)
  (local.set $x
   (i32.const 10)
  )
  (local.set $x
   (i32.const 20)
  )
  (i32.const 20)
 )
 (func $two-ways-but-identical (; 8 ;) (type $1) (param $p i32) (result i32)
  (local $x i32)
  (local $y i32)
  (local.set $x
   (i32.const 10)
  )
  (if
   (i32.const 1)
   (local.set $y
    (i32.const 11)
   )
   (local.set $y
    (i32.const 11)
   )
  )
  (local.set $y
   (i32.const 21)
  )
  (i32.const 21)
 )
 (func $two-ways-but-almost-identical (; 9 ;) (type $1) (param $p i32) (result i32)
  (local $x i32)
  (local $y i32)
  (local.set $x
   (i32.const 10)
  )
  (if
   (i32.const 1)
   (local.set $y
    (i32.const 12)
   )
   (local.set $y
    (i32.const 11)
   )
  )
  (local.set $y
   (i32.add
    (i32.const 10)
    (local.get $y)
   )
  )
  (local.get $y)
 )
 (func $deadloop (; 10 ;) (type $1) (param $p i32) (result i32)
  (local $x i32)
  (local $y i32)
  (loop $loop
   (local.set $x
    (i32.const 0)
   )
   (local.set $y
    (i32.const 0)
   )
   (br $loop)
  )
 )
 (func $deadloop2 (; 11 ;) (type $0) (param $p i32)
  (local $x i32)
  (local $y i32)
  (loop $loop
   (local.set $x
    (i32.const 0)
   )
   (local.set $y
    (i32.const 0)
   )
   (call $deadloop2
    (i32.const 0)
   )
   (call $deadloop2
    (i32.const 0)
   )
   (br $loop)
  )
 )
 (func $deadloop3 (; 12 ;) (type $0) (param $p i32)
  (local $x i32)
  (local $y i32)
  (loop $loop
   (local.set $x
    (i32.const 0)
   )
   (local.set $y
    (i32.const 0)
   )
   (call $deadloop2
    (i32.const 0)
   )
   (call $deadloop2
    (i32.const 0)
   )
   (br $loop)
  )
 )
 (func $through-tee (; 13 ;) (type $2) (param $x i32) (param $y i32) (result i32)
  (local.set $x
   (local.tee $y
    (i32.const 7)
   )
  )
  (return
   (i32.const 14)
  )
 )
 (func $through-tee-more (; 14 ;) (type $2) (param $x i32) (param $y i32) (result i32)
  (local.set $x
   (i32.eqz
    (local.tee $y
     (i32.const 7)
    )
   )
  )
  (return
   (i32.const 7)
  )
 )
 (func $multipass (; 15 ;) (type $3) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (nop)
  (nop)
  (local.get $2)
 )
 (func $offsets (; 16 ;) (type $0) (param $x i32)
  (drop
   (i32.load
    (i32.add
     (local.get $x)
     (i32.const 1)
    )
   )
  )
  (drop
   (i32.load
    (i32.add
     (local.get $x)
     (i32.const 8)
    )
   )
  )
  (drop
   (i32.load
    (i32.add
     (local.get $x)
     (i32.const 1023)
    )
   )
  )
  (drop
   (i32.load
    (i32.add
     (local.get $x)
     (i32.const 1024)
    )
   )
  )
  (drop
   (i32.load
    (i32.add
     (local.get $x)
     (i32.const 2048)
    )
   )
  )
  (drop
   (i32.load
    (i32.add
     (i32.const 4)
     (local.get $x)
    )
   )
  )
 )
 (func $load-off-2 (; 17 ;) (type $1) (param $0 i32) (result i32)
  (i32.store offset=2
   (i32.const 4)
   (local.get $0)
  )
  (i32.store offset=2
   (i32.const 4)
   (local.get $0)
  )
  (i32.store offset=2
   (i32.add
    (local.get $0)
    (i32.const 5)
   )
   (local.get $0)
  )
  (i32.store offset=2
   (i32.add
    (i32.const 7)
    (local.get $0)
   )
   (local.get $0)
  )
  (i32.store offset=2
   (i32.add
    (i32.const -11)
    (local.get $0)
   )
   (local.get $0)
  )
  (i32.store offset=2
   (i32.add
    (local.get $0)
    (i32.const -13)
   )
   (local.get $0)
  )
  (i32.store offset=2
   (i32.const 2)
   (local.get $0)
  )
  (i32.store offset=2
   (i32.const -2)
   (local.get $0)
  )
  (i32.store offset=2
   (i32.const 23)
   (local.get $0)
  )
  (i32.store offset=2
   (i32.const -25)
   (local.get $0)
  )
  (drop
   (i32.load offset=2
    (i32.const 6)
   )
  )
  (drop
   (i32.load offset=2
    (i32.const 6)
   )
  )
  (drop
   (i32.load offset=2
    (i32.add
     (local.get $0)
     (i32.const 6)
    )
   )
  )
  (drop
   (i32.load offset=2
    (i32.const 8)
   )
  )
  (i32.load offset=2
   (i32.add
    (i32.const 10)
    (local.get $0)
   )
  )
 )
 (func $offset-constant (; 18 ;) (type $4)
  (drop
   (i32.load offset=10
    (i32.const 0)
   )
  )
  (drop
   (i32.load
    (i32.const 10)
   )
  )
  (drop
   (i32.load offset=10
    (i32.const 10)
   )
  )
  (drop
   (i32.load offset=512
    (i32.const 512)
   )
  )
  (drop
   (i32.load offset=512
    (i32.const 511)
   )
  )
  (drop
   (i32.load offset=511
    (i32.const 512)
   )
  )
  (drop
   (i32.load offset=99999
    (i32.const 512)
   )
  )
 )
 (func $offset-propagate (; 19 ;) (type $4)
  (local $x i32)
  (local $y i32)
  (local.set $x
   (i32.const 1)
  )
  (drop
   (i32.load
    (i32.const 1)
   )
  )
 )
 (func $offset-propagate2 (; 20 ;) (type $4)
  (local $x i32)
  (local $y i32)
  (local.set $x
   (i32.const 3)
  )
  (drop
   (i32.load
    (i32.const 3)
   )
  )
 )
 (func $offset-propagate3 (; 21 ;) (type $4)
  (local $x i32)
  (local $y i32)
  (local.set $x
   (i32.const 1)
  )
  (drop
   (i32.load
    (i32.const 1)
   )
  )
 )
 (func $offset-propagate4 (; 22 ;) (type $4)
  (local $x i32)
  (local $y i32)
  (local.set $y
   (i32.const -1)
  )
  (local.set $x
   (i32.const 0)
  )
  (drop
   (i32.load
    (i32.const 0)
   )
  )
 )
 (func $offset-propagate5 (; 23 ;) (type $0) (param $z i32)
  (local $x i32)
  (local $y i32)
  (if
   (local.get $z)
   (local.set $y
    (i32.const -1)
   )
  )
  (local.set $x
   (i32.add
    (i32.const 1)
    (local.get $y)
   )
  )
  (drop
   (i32.load
    (local.get $x)
   )
  )
 )
 (func $offset-propagate6 (; 24 ;) (type $0) (param $z i32)
  (local $x i32)
  (local $y i32)
  (local.set $y
   (local.get $z)
  )
  (local.set $x
   (i32.add
    (i32.const 1)
    (local.get $y)
   )
  )
  (local.set $y
   (i32.const -2)
  )
  (drop
   (i32.load
    (local.get $x)
   )
  )
 )
 (func $offset-realistic (; 25 ;) (type $0) (param $ptr i32)
  (local $x i32)
  (local $y i32)
  (local $z i32)
  (local.set $x
   (i32.add
    (local.get $ptr)
    (i32.const 8)
   )
  )
  (local.set $y
   (i32.add
    (local.get $ptr)
    (i32.const 16)
   )
  )
  (local.set $z
   (i32.add
    (local.get $ptr)
    (i32.const 24)
   )
  )
  (loop $l
   (call $offset-realistic
    (i32.load
     (local.get $x)
    )
   )
   (call $offset-realistic
    (i32.load
     (local.get $y)
    )
   )
   (call $offset-realistic
    (i32.load
     (local.get $y)
    )
   )
   (i32.store
    (local.get $z)
    (i32.add
     (i32.load
      (local.get $z)
     )
     (i32.const 1)
    )
   )
   (br_if $l
    (i32.load
     (local.get $z)
    )
   )
  )
 )
)
