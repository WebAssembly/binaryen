(module
  (memory 16777216 16777216)
  (type $FUNCSIG$id (func (param f64) (result i32)))
  (type $FUNCSIG$ddd (func (param f64 f64) (result f64)))
  (type $FUNCSIG$vf (func (param f32)))
  (type $FUNCSIG$vi (func (param i32)))
  (import $f64-to-int "asm2wasm" "f64-to-int" (param f64) (result i32))
  (import $f64-rem "asm2wasm" "f64-rem" (param f64 f64) (result f64))
  (export "big_negative" $big_negative)
  (table $z $big_negative $z $z $w $w $importedDoubles $w $z $cneg)
  (func $big_negative
    (local $temp f64)
    (set_local $temp
      (f64.const -2147483648)
    )
    (set_local $temp
      (f64.const -2147483648)
    )
    (set_local $temp
      (f64.const -21474836480)
    )
    (set_local $temp
      (f64.const 0.039625)
    )
    (set_local $temp
      (f64.const -0.039625)
    )
  )
  (func $importedDoubles (result f64)
    (local $temp f64)
    (set_local $temp
      (f64.add
        (f64.add
          (f64.add
            (f64.load align=8
              (i32.const 8)
            )
            (f64.load align=8
              (i32.const 16)
            )
          )
          (f64.neg
            (f64.load align=8
              (i32.const 16)
            )
          )
        )
        (f64.neg
          (f64.load align=8
            (i32.const 8)
          )
        )
      )
    )
    (if
      (i32.gt_s
        (i32.load align=4
          (i32.const 24)
        )
        (i32.const 0)
      )
      (return
        (f64.const -3.4)
      )
    )
    (if
      (f64.gt
        (f64.load align=8
          (i32.const 32)
        )
        (f64.const 0)
      )
      (return
        (f64.const 5.6)
      )
    )
    (return
      (f64.const 1.2)
    )
  )
  (func $doubleCompares (param $x f64) (param $y f64) (result f64)
    (local $t f64)
    (local $Int f64)
    (local $Double i32)
    (if
      (f64.gt
        (get_local $x)
        (f64.const 0)
      )
      (return
        (f64.const 1.2)
      )
    )
    (if
      (f64.gt
        (get_local $Int)
        (f64.const 0)
      )
      (return
        (f64.const -3.4)
      )
    )
    (if
      (i32.gt_s
        (get_local $Double)
        (i32.const 0)
      )
      (return
        (f64.const 5.6)
      )
    )
    (if
      (f64.lt
        (get_local $x)
        (get_local $y)
      )
      (return
        (get_local $x)
      )
    )
    (return
      (get_local $y)
    )
  )
  (func $intOps (result i32)
    (local $x i32)
    (return
      (i32.eq
        (get_local $x)
        (i32.const 0)
      )
    )
  )
  (func $conversions
    (local $i i32)
    (local $d f64)
    (set_local $i
      (call_import $f64-to-int
        (get_local $d)
      )
    )
    (set_local $d
      (f64.convert_s/i32
        (get_local $i)
      )
    )
    (set_local $d
      (f64.convert_u/i32
        (get_local $i)
      )
    )
  )
  (func $seq
    (local $J f64)
    (set_local $J
      (f64.sub
        (block
          (f64.const 0.1)
          (f64.const 5.1)
        )
        (block
          (f64.const 3.2)
          (f64.const 4.2)
        )
      )
    )
  )
  (func $switcher (param $x i32) (result i32)
    (tableswitch $switch$0
      (i32.sub
        (get_local $x)
        (i32.const 1)
      )
      (table (case $switch-case$1) (case $switch-case$2)) (case $switch-default$3)
      (case $switch-case$1
        (return
          (i32.const 1)
        )
      )
      (case $switch-case$2
        (return
          (i32.const 2)
        )
      )
      (case $switch-default$3
        (nop)
      )
    )
    (tableswitch $switch$4
      (i32.sub
        (get_local $x)
        (i32.const 5)
      )
      (table (case $switch-case$6) (case $switch-default$7) (case $switch-default$7) (case $switch-default$7) (case $switch-default$7) (case $switch-default$7) (case $switch-default$7) (case $switch-case$5)) (case $switch-default$7)
      (case $switch-case$5
        (return
          (i32.const 121)
        )
      )
      (case $switch-case$6
        (return
          (i32.const 51)
        )
      )
      (case $switch-default$7
        (nop)
      )
    )
    (tableswitch $label$break$Lout
      (i32.sub
        (get_local $x)
        (i32.const 2)
      )
      (table (case $switch-case$15) (case $switch-default$16) (case $switch-default$16) (case $switch-case$12) (case $switch-default$16) (case $switch-default$16) (case $switch-default$16) (case $switch-default$16) (case $switch-case$9) (case $switch-default$16) (case $switch-case$8)) (case $switch-default$16)
      (case $switch-case$8
        (br $label$break$Lout)
      )
      (case $switch-case$9
        (br $label$break$Lout)
      )
      (case $switch-case$12
        (block
          (loop $while-out$10 $while-in$11
            (br $while-out$10)
            (br $while-in$11)
          )
          (br $label$break$Lout)
        )
      )
      (case $switch-case$15
        (block
          (loop $while-out$13 $while-in$14
            (br $label$break$Lout)
            (br $while-in$14)
          )
          (br $label$break$Lout)
        )
      )
      (case $switch-default$16
        (nop)
      )
    )
    (return
      (i32.const 0)
    )
  )
  (func $blocker
  )
  (func $frem (result f64)
    (return
      (call_import $f64-rem
        (f64.const 5.5)
        (f64.const 1.2)
      )
    )
  )
  (func $big_uint_div_u (result i32)
    (local $x i32)
    (set_local $x
      (i32.and
        (i32.div_u
          (i32.const -1)
          (i32.const 2)
        )
        (i32.const -1)
      )
    )
    (return
      (get_local $x)
    )
  )
  (func $fr (param $x f32)
    (local $y f32)
    (local $z f64)
    (f32.demote/f64
      (get_local $z)
    )
    (get_local $y)
    (f32.const 5)
    (f32.const 0)
    (f32.const 5)
    (f32.const 0)
  )
  (func $negZero (result f64)
    (return
      (f64.const -0)
    )
  )
  (func $abs
    (local $x i32)
    (local $y f64)
    (local $z f32)
    (local $asm2wasm_i32_temp i32)
    (set_local $x
      (block
        (set_local $asm2wasm_i32_temp
          (i32.const 0)
        )
        (i32.select
          (i32.sub
            (i32.const 0)
            (get_local $asm2wasm_i32_temp)
          )
          (get_local $asm2wasm_i32_temp)
          (i32.lt_s
            (get_local $asm2wasm_i32_temp)
            (i32.const 0)
          )
        )
      )
    )
    (set_local $y
      (f64.abs
        (f64.const 0)
      )
    )
    (set_local $z
      (f32.abs
        (f32.const 0)
      )
    )
  )
  (func $neg
    (local $x f32)
    (set_local $x
      (f32.neg
        (get_local $x)
      )
    )
    (call_indirect $FUNCSIG$vf
      (i32.add
        (i32.and
          (i32.const 1)
          (i32.const 7)
        )
        (i32.const 8)
      )
      (get_local $x)
    )
  )
  (func $cneg (param $x f32)
    (call_indirect $FUNCSIG$vf
      (i32.add
        (i32.and
          (i32.const 1)
          (i32.const 7)
        )
        (i32.const 8)
      )
      (get_local $x)
    )
  )
  (func $___syscall_ret
    (local $$0 i32)
    (i32.gt_u
      (get_local $$0)
      (i32.const -4096)
    )
  )
  (func $smallCompare (result i32)
    (local $i i32)
    (local $j i32)
    (if
      (i32.lt_s
        (get_local $i)
        (get_local $j)
      )
      (set_local $i
        (i32.add
          (get_local $i)
          (i32.const 1)
        )
      )
    )
    (if
      (i32.lt_u
        (get_local $i)
        (get_local $j)
      )
      (set_local $i
        (i32.add
          (get_local $i)
          (i32.const 1)
        )
      )
    )
    (return
      (get_local $i)
    )
  )
  (func $cneg_nosemicolon
    (call_indirect $FUNCSIG$vi
      (i32.add
        (i32.and
          (i32.const 1)
          (i32.const 7)
        )
        (i32.const 8)
      )
      (i32.const 1)
    )
  )
  (func $forLoop
    (local $i i32)
    (set_local $i
      (i32.const 1)
    )
    (loop $for-out$0 $for-in$1
      (if_else
        (i32.lt_s
          (get_local $i)
          (i32.const 200)
        )
        (nop)
        (br $for-out$0)
      )
      (call $h
        (get_local $i)
      )
      (set_local $i
        (i32.add
          (get_local $i)
          (i32.const 1)
        )
      )
      (br $for-in$1)
    )
  )
  (func $z
    (nop)
  )
  (func $w
    (nop)
  )
)
