(module
 (import "env" "memory" (memory $0 (shared 256 256)))
 (import "env" "memoryBase" (global $memoryBase i32))
 (global $tempRet0 (mut i32) (i32.const 0))
 (data (get_global $memoryBase) "threads.wasm-only.asm.js")
 (export "test64" (func $legalstub$test64))
 (export "getTempRet0" (func $getTempRet0))
 (export "setTempRet0" (func $setTempRet0))
 (func $test64 (; 0 ;) (; has Stack IR ;) (result i64)
  (local $0 i64)
  (local $1 i64)
  (local $2 i32)
  (i64.atomic.store
   (i32.const 4656)
   (i64.const 92)
  )
  (drop
   (i64.atomic.load
    (i32.const 4656)
   )
  )
  (drop
   (i64.atomic.rmw.cmpxchg
    (i32.const 1024)
    (tee_local $1
     (i64.atomic.rmw.xchg
      (i32.const 1024)
      (tee_local $0
       (i64.atomic.rmw.xor
        (i32.const 1024)
        (i64.atomic.rmw.or
         (i32.const 1024)
         (i64.atomic.rmw.and
          (i32.const 1024)
          (i64.atomic.rmw.sub
           (i32.const 1024)
           (i64.atomic.rmw.add
            (get_local $2)
            (i64.const 26)
           )
          )
         )
        )
       )
      )
     )
    )
    (get_local $0)
   )
  )
  (get_local $1)
 )
 (func $legalstub$test64 (; 1 ;) (; has Stack IR ;) (result i32)
  (local $0 i64)
  (set_local $0
   (call $test64)
  )
  (set_global $tempRet0
   (i32.wrap/i64
    (i64.shr_u
     (get_local $0)
     (i64.const 32)
    )
   )
  )
  (i32.wrap/i64
   (get_local $0)
  )
 )
 (func $getTempRet0 (; 2 ;) (; has Stack IR ;) (result i32)
  (get_global $tempRet0)
 )
 (func $setTempRet0 (; 3 ;) (; has Stack IR ;) (param $0 i32)
  (set_global $tempRet0
   (get_local $0)
  )
 )
)
