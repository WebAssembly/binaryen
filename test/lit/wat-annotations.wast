;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.

;; RUN: wasm-opt -all             %s -S -o - | filecheck %s
;; RUN: wasm-opt -all --roundtrip %s -S -o - | filecheck %s --check-prefix=BINARY

(module

  ;; CHECK:      (type $0 (func (param i32)))

  ;; CHECK:      (func $no-annotations (type $0) (param $x i32)
  ;; CHECK-NEXT:  (block $out
  ;; CHECK-NEXT:   (br_if $out
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  ;; BINARY:      (type $0 (func (param i32)))

  ;; BINARY:      (func $no-annotations (type $0) (param $x i32)
  ;; BINARY-NEXT:  (block $block
  ;; BINARY-NEXT:   (br_if $block
  ;; BINARY-NEXT:    (local.get $x)
  ;; BINARY-NEXT:   )
  ;; BINARY-NEXT:  )
  ;; BINARY-NEXT: )
  (func $no-annotations (param $x i32)
    ;; A function with no annotations. This tests that we use function indexes
    ;; properly in the section.
    (block $out
      (br_if $out
        (local.get $x)
      )
    )
  )

  ;; CHECK:      (func $branch-hints-br_if (type $0) (param $x i32)
  ;; CHECK-NEXT:  (block $out
  ;; CHECK-NEXT:   (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:   (br_if $out
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (@metadata.code.branch_hint "\01")
  ;; CHECK-NEXT:   (br_if $out
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:   (br_if $out
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  ;; BINARY:      (func $branch-hints-br_if (type $0) (param $x i32)
  ;; BINARY-NEXT:  (block $block
  ;; BINARY-NEXT:   (@metadata.code.branch_hint "\00")
  ;; BINARY-NEXT:   (br_if $block
  ;; BINARY-NEXT:    (local.get $x)
  ;; BINARY-NEXT:   )
  ;; BINARY-NEXT:   (@metadata.code.branch_hint "\01")
  ;; BINARY-NEXT:   (br_if $block
  ;; BINARY-NEXT:    (local.get $x)
  ;; BINARY-NEXT:   )
  ;; BINARY-NEXT:   (@metadata.code.branch_hint "\00")
  ;; BINARY-NEXT:   (br_if $block
  ;; BINARY-NEXT:    (local.get $x)
  ;; BINARY-NEXT:   )
  ;; BINARY-NEXT:  )
  ;; BINARY-NEXT: )
  (func $branch-hints-br_if (param $x i32)
    (block $out
      ;; A branch annotated as unlikely, and one as likely.
      (@metadata.code.branch_hint "\00")
      (br_if $out
        (local.get $x)
      )
      (@metadata.code.branch_hint "\01")
      (br_if $out
        (local.get $x)
      )
      ;; The last one wins.
      (@metadata.code.branch_hint "\01")
      (@metadata.code.branch_hint "\00")
      (br_if $out
        (local.get $x)
      )
    )
  )

  ;; CHECK:      (func $branch_hints-br_if-2 (type $0) (param $x i32)
  ;; CHECK-NEXT:  (local $unused f64)
  ;; CHECK-NEXT:  (block $out
  ;; CHECK-NEXT:   (@metadata.code.branch_hint "\01")
  ;; CHECK-NEXT:   (br_if $out
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  ;; BINARY:      (func $branch_hints-br_if-2 (type $0) (param $x i32)
  ;; BINARY-NEXT:  (local $unused f64)
  ;; BINARY-NEXT:  (block $block
  ;; BINARY-NEXT:   (@metadata.code.branch_hint "\01")
  ;; BINARY-NEXT:   (br_if $block
  ;; BINARY-NEXT:    (local.get $x)
  ;; BINARY-NEXT:   )
  ;; BINARY-NEXT:  )
  ;; BINARY-NEXT: )
  (func $branch_hints-br_if-2 (param $x i32)
    (local $unused f64)
    ;; A second function with hints. This one also has local definitions, which
    ;; should not confuse us (branch hint offsets are relative to the start of
    ;; the local definitions, not the end).
    (block $out
      (@metadata.code.branch_hint "\01")
      (br_if $out
        (local.get $x)
      )
    )
  )
)
