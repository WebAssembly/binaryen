;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.

;; Check that pops of GC types work correctly.

;; RUN: wasm-opt -all %s -S -o - | filecheck %s
;; RUN: wasm-opt -all --nominal %s -S -o - | filecheck %s --check-prefix=NOMNL

(module
  ;; CHECK:      (type $A (struct (field (mut i32))))
  ;; NOMNL:      (type $A (struct_subtype (field (mut i32)) data))
  (type $A (struct
    (field (mut i32))
  ))

  ;; CHECK:      (tag $tagA (param (ref $A)))
  ;; NOMNL:      (tag $tagA (param (ref $A)))
  (tag $tagA (param (ref $A)))

  ;; CHECK:      (func $foo (result (ref null $A))
  ;; CHECK-NEXT:  (try $try
  ;; CHECK-NEXT:   (do
  ;; CHECK-NEXT:    (nop)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (catch $tagA
  ;; CHECK-NEXT:    (return
  ;; CHECK-NEXT:     (pop (ref $A))
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (ref.null $A)
  ;; CHECK-NEXT: )
  ;; NOMNL:      (func $foo (type $none_=>_ref?|$A|) (result (ref null $A))
  ;; NOMNL-NEXT:  (try $try
  ;; NOMNL-NEXT:   (do
  ;; NOMNL-NEXT:    (nop)
  ;; NOMNL-NEXT:   )
  ;; NOMNL-NEXT:   (catch $tagA
  ;; NOMNL-NEXT:    (return
  ;; NOMNL-NEXT:     (pop (ref $A))
  ;; NOMNL-NEXT:    )
  ;; NOMNL-NEXT:   )
  ;; NOMNL-NEXT:  )
  ;; NOMNL-NEXT:  (ref.null $A)
  ;; NOMNL-NEXT: )
  (func $foo (result (ref null $A))
    (try
      (do
        (nop)
      )
      (catch $tagA
        (return
          (pop (ref $A))
        )
      )
    )
    (ref.null $A)
  )
)
