;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.

;; Test the flag to import from a given module in fuzzer generation.

;; Generate fuzz output using this wat as initial contents, and with the flag to
;; preserve imports and exports. There should be no new imports or exports, and
;; old ones must stay the same.

;; RUN: wasm-opt %s.ttf --initial-fuzz=%s -all -ttf --fuzz-import=%s.import.wast \
;; RUN:          -S -o - | filecheck %s

(module
  ;; This existing import will be made a non-import, but the ones from the
  ;; imported module will be ok.
  (import "a" "b" (func $import))
)

;; CHECK:      (type $0 (func))

;; CHECK:      (rec
;; CHECK-NEXT:  (type $1 (sub (shared (struct (field i32) (field (ref null (shared array))) (field (mut f64)) (field v128) (field (ref null $generated_type$5))))))

;; CHECK:       (type $2 (sub (array (ref null $6))))

;; CHECK:       (type $generated_type$4 (sub $1 (shared (struct (field i32) (field (ref null (shared none))) (field (mut f64)) (field v128) (field (ref null $generated_type$5))))))

;; CHECK:       (type $generated_type$5 (sub (shared (descriptor $5 (struct (field (ref (shared i31))) (field (ref $9)) (field (ref null $7)) (field (mut (ref null $7))) (field i16) (field i8))))))

;; CHECK:       (type $5 (shared (describes $generated_type$5 (struct (field i8)))))

;; CHECK:       (type $6 (sub $2 (array (ref null $6))))

;; CHECK:       (type $7 (sub $generated_type$4 (shared (struct (field i32) (field (ref null (shared none))) (field (mut f64)) (field v128) (field (ref null $generated_type$5))))))

;; CHECK:       (type $8 (array (ref $generated_type$4)))

;; CHECK:       (type $9 (sub final $7 (shared (struct (field i32) (field (ref null (shared none))) (field (mut f64)) (field v128) (field (ref null (shared none)))))))

;; CHECK:      (type $10 (struct))

;; CHECK:      (type $generated_type$11 (sub $generated_type$4 (shared (struct (field i32) (field (ref null (shared none))) (field (mut f64)) (field v128) (field (ref $generated_type$5)) (field (ref (shared eq)))))))

;; CHECK:      (type $12 (func (param i32)))

;; CHECK:      (type $13 (array i8))

;; CHECK:      (type $14 (func (param f64)))

;; CHECK:      (type $15 (func (param f32)))

;; CHECK:      (type $16 (shared (array i8)))

;; CHECK:      (type $17 (func (param i32) (result funcref)))

;; CHECK:      (type $18 (func (param i32 funcref)))

;; CHECK:      (type $19 (func (param i64)))

;; CHECK:      (type $20 (func (param v128)))

;; CHECK:      (type $21 (func (param funcref i32)))

;; CHECK:      (type $22 (func (param funcref) (result i32)))

;; CHECK:      (type $23 (array (mut i16)))

;; CHECK:      (type $24 (shared (struct)))

;; CHECK:      (type $25 (func (result i64)))

;; CHECK:      (type $26 (func (param i64 (ref null $0) f64 i32) (result (ref $5))))

;; CHECK:      (type $27 (func (param stringref) (result (ref $0))))

;; CHECK:      (import "fuzzing-support" "throw" (func $throw (type $12) (param i32)))

;; CHECK:      (import "fuzzing-support" "table-get" (func $table-get (type $17) (param i32) (result funcref)))

;; CHECK:      (import "fuzzing-support" "table-set" (func $table-set (type $18) (param i32 funcref)))

;; CHECK:      (import "fuzzing-support" "log-i32" (func $log-i32 (type $12) (param i32)))

;; CHECK:      (import "fuzzing-support" "log-i64" (func $log-i64 (type $19) (param i64)))

;; CHECK:      (import "fuzzing-support" "log-f32" (func $log-f32 (type $15) (param f32)))

;; CHECK:      (import "fuzzing-support" "log-f64" (func $log-f64 (type $14) (param f64)))

;; CHECK:      (import "fuzzing-support" "log-v128" (func $log-v128 (type $20) (param v128)))

;; CHECK:      (import "fuzzing-support" "call-ref" (func $call-ref (type $21) (param funcref i32)))

;; CHECK:      (import "fuzzing-support" "call-ref-catch" (func $call-ref-catch (type $22) (param funcref) (result i32)))

;; CHECK:      (global $global$ (mut stringref) (string.const "\c2\a3\c2\a3"))

;; CHECK:      (global $global$_1 (mut arrayref) (array.new_fixed $13 0))

;; CHECK:      (global $global$_2 (tuple (ref null $0) stringref) (tuple.make 2
;; CHECK-NEXT:  (ref.func $import)
;; CHECK-NEXT:  (string.const "")
;; CHECK-NEXT: ))

;; CHECK:      (global $global$_3 externref (ref.null noextern))

;; CHECK:      (global $global$_4 (mut f64) (f64.const -nan:0xffffffffff34b))

;; CHECK:      (global $global$_5 (ref null $9) (ref.null (shared none)))

;; CHECK:      (global $global$_6 (ref $6) (array.new_default $6
;; CHECK-NEXT:  (i32.const 73)
;; CHECK-NEXT: ))

;; CHECK:      (global $global$_7 funcref (ref.func $import))

;; CHECK:      (global $global$_8 f32 (f32.const 2147483648))

;; CHECK:      (global $global$_9 (ref $1) (struct.new $1
;; CHECK-NEXT:  (i32.const 129)
;; CHECK-NEXT:  (array.new_fixed $16 0)
;; CHECK-NEXT:  (f64.const 91)
;; CHECK-NEXT:  (v128.const i32x4 0x00820b8e 0xfee6ff27 0x92c3f9ff 0x209a6401)
;; CHECK-NEXT:  (struct.new $generated_type$5
;; CHECK-NEXT:   (ref.i31_shared
;; CHECK-NEXT:    (i32.const -134217728)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (struct.new_default $9)
;; CHECK-NEXT:   (struct.new $7
;; CHECK-NEXT:    (i32.const -65535)
;; CHECK-NEXT:    (ref.null (shared none))
;; CHECK-NEXT:    (f64.const -48)
;; CHECK-NEXT:    (v128.const i32x4 0xff841001 0xffbcffff 0x27210002 0x00800001)
;; CHECK-NEXT:    (struct.new $generated_type$5
;; CHECK-NEXT:     (ref.i31_shared
;; CHECK-NEXT:      (i32.const -254)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (struct.new $9
;; CHECK-NEXT:      (i32.const 1580403506)
;; CHECK-NEXT:      (ref.null (shared none))
;; CHECK-NEXT:      (f64.const -nan:0xfffffffffff92)
;; CHECK-NEXT:      (v128.const i32x4 0x0900d9fa 0x807f06cb 0x091b9cff 0x2fff7f05)
;; CHECK-NEXT:      (ref.null (shared none))
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (ref.null (shared none))
;; CHECK-NEXT:     (ref.null (shared none))
;; CHECK-NEXT:     (i32.const -9)
;; CHECK-NEXT:     (i32.const -44)
;; CHECK-NEXT:     (struct.new_default $5)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (struct.new $7
;; CHECK-NEXT:    (i32.const -76)
;; CHECK-NEXT:    (ref.null (shared none))
;; CHECK-NEXT:    (f64.const -1073741824)
;; CHECK-NEXT:    (v128.const i32x4 0x40f21cac 0x4f800000 0xff7fffff 0xff7fffff)
;; CHECK-NEXT:    (struct.new $generated_type$5
;; CHECK-NEXT:     (ref.i31_shared
;; CHECK-NEXT:      (i32.const -1)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (struct.new_default $9)
;; CHECK-NEXT:     (struct.new $7
;; CHECK-NEXT:      (i32.const 1060664392)
;; CHECK-NEXT:      (ref.null (shared none))
;; CHECK-NEXT:      (f64.const 4294959958)
;; CHECK-NEXT:      (v128.const i32x4 0x00000000 0x00000000 0xfffffff1 0xffffffff)
;; CHECK-NEXT:      (struct.new $generated_type$5
;; CHECK-NEXT:       (ref.i31_shared
;; CHECK-NEXT:        (i32.const -536870912)
;; CHECK-NEXT:       )
;; CHECK-NEXT:       (struct.new $9
;; CHECK-NEXT:        (i32.const -26867)
;; CHECK-NEXT:        (ref.null (shared none))
;; CHECK-NEXT:        (f64.const 68719476735.136)
;; CHECK-NEXT:        (v128.const i32x4 0x3b029c01 0x025f00db 0x7f0c33ff 0x7f00ff0c)
;; CHECK-NEXT:        (ref.null (shared none))
;; CHECK-NEXT:       )
;; CHECK-NEXT:       (struct.new $7
;; CHECK-NEXT:        (i32.const -59)
;; CHECK-NEXT:        (ref.null (shared none))
;; CHECK-NEXT:        (f64.const -2147483647.764)
;; CHECK-NEXT:        (v128.const i32x4 0x00000000 0x80000000 0x0000006e 0x00000000)
;; CHECK-NEXT:        (struct.new $generated_type$5
;; CHECK-NEXT:         (ref.i31_shared
;; CHECK-NEXT:          (i32.const 4194305)
;; CHECK-NEXT:         )
;; CHECK-NEXT:         (struct.new $9
;; CHECK-NEXT:          (i32.const -131072)
;; CHECK-NEXT:          (ref.null (shared none))
;; CHECK-NEXT:          (f64.const -nan:0xffffffffffff3)
;; CHECK-NEXT:          (v128.const i32x4 0x80000001 0xffffffff 0xffff9250 0xffffffff)
;; CHECK-NEXT:          (ref.null (shared none))
;; CHECK-NEXT:         )
;; CHECK-NEXT:         (struct.new_default $7)
;; CHECK-NEXT:         (ref.null (shared none))
;; CHECK-NEXT:         (i32.const 511)
;; CHECK-NEXT:         (i32.const 0)
;; CHECK-NEXT:         (struct.new $5
;; CHECK-NEXT:          (i32.const 256)
;; CHECK-NEXT:         )
;; CHECK-NEXT:        )
;; CHECK-NEXT:       )
;; CHECK-NEXT:       (ref.null (shared none))
;; CHECK-NEXT:       (i32.const 4098)
;; CHECK-NEXT:       (i32.const 206)
;; CHECK-NEXT:       (struct.new $5
;; CHECK-NEXT:        (i32.const -2147483648)
;; CHECK-NEXT:       )
;; CHECK-NEXT:      )
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (struct.new $7
;; CHECK-NEXT:      (i32.const -16384)
;; CHECK-NEXT:      (ref.null (shared none))
;; CHECK-NEXT:      (f64.const -512)
;; CHECK-NEXT:      (v128.const i32x4 0xf47600db 0xffb5a67b 0xf267ffb1 0x8000ffc9)
;; CHECK-NEXT:      (struct.new $generated_type$5
;; CHECK-NEXT:       (ref.i31_shared
;; CHECK-NEXT:        (i32.const 1)
;; CHECK-NEXT:       )
;; CHECK-NEXT:       (struct.new $9
;; CHECK-NEXT:        (i32.const -16384)
;; CHECK-NEXT:        (ref.null (shared none))
;; CHECK-NEXT:        (f64.const -nan:0xfffffffffff8f)
;; CHECK-NEXT:        (v128.const i32x4 0x00f000ed 0x0086e500 0x69004c00 0x78abc94a)
;; CHECK-NEXT:        (ref.null (shared none))
;; CHECK-NEXT:       )
;; CHECK-NEXT:       (struct.new $7
;; CHECK-NEXT:        (i32.const -28307)
;; CHECK-NEXT:        (ref.null (shared none))
;; CHECK-NEXT:        (f64.const -0.138)
;; CHECK-NEXT:        (v128.const i32x4 0x20000000 0x41600000 0xffffffdb 0xffffffff)
;; CHECK-NEXT:        (struct.new $generated_type$5
;; CHECK-NEXT:         (ref.i31_shared
;; CHECK-NEXT:          (i32.const 2147483647)
;; CHECK-NEXT:         )
;; CHECK-NEXT:         (struct.new $9
;; CHECK-NEXT:          (i32.const -68)
;; CHECK-NEXT:          (ref.null (shared none))
;; CHECK-NEXT:          (f64.const 4067708437)
;; CHECK-NEXT:          (v128.const i32x4 0xff000000 0x41efffff 0xff7126e9 0xc1cfffff)
;; CHECK-NEXT:          (ref.null (shared none))
;; CHECK-NEXT:         )
;; CHECK-NEXT:         (ref.null (shared none))
;; CHECK-NEXT:         (struct.new_default $7)
;; CHECK-NEXT:         (i32.const 33554433)
;; CHECK-NEXT:         (i32.const 1)
;; CHECK-NEXT:         (struct.new_default $5)
;; CHECK-NEXT:        )
;; CHECK-NEXT:       )
;; CHECK-NEXT:       (ref.null (shared none))
;; CHECK-NEXT:       (i32.const 134217728)
;; CHECK-NEXT:       (i32.const -98)
;; CHECK-NEXT:       (struct.new_default $5)
;; CHECK-NEXT:      )
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.const 65525)
;; CHECK-NEXT:     (i32.const -2985)
;; CHECK-NEXT:     (ref.null (shared none))
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (i32.const -563587298)
;; CHECK-NEXT:   (i32.const -2932924)
;; CHECK-NEXT:   (ref.null (shared none))
;; CHECK-NEXT:  )
;; CHECK-NEXT: ))

;; CHECK:      (global $global$_10 eqref (ref.null none))

;; CHECK:      (global $global$_11 stringref (ref.null noextern))

;; CHECK:      (global $global$_12 (ref $generated_type$4) (struct.new $generated_type$4
;; CHECK-NEXT:  (i32.const 1073741824)
;; CHECK-NEXT:  (ref.null (shared none))
;; CHECK-NEXT:  (f64.const 4294967213)
;; CHECK-NEXT:  (v128.const i32x4 0x0000008a 0x00400000 0x7fffffff 0xf2265e73)
;; CHECK-NEXT:  (struct.new $generated_type$5
;; CHECK-NEXT:   (ref.i31_shared
;; CHECK-NEXT:    (i32.const -19423)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (struct.new_default $9)
;; CHECK-NEXT:   (struct.new_default $7)
;; CHECK-NEXT:   (struct.new_default $7)
;; CHECK-NEXT:   (i32.const -128)
;; CHECK-NEXT:   (i32.const -15)
;; CHECK-NEXT:   (struct.new $5
;; CHECK-NEXT:    (i32.const 32767)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT: ))

;; CHECK:      (global $global$_13 i64 (i64.const -32768))

;; CHECK:      (global $global$_14 i32 (i32.const -7381244))

;; CHECK:      (global $global$_15 (mut (tuple i32 (ref null $8) exnref f32 i64 stringref)) (tuple.make 6
;; CHECK-NEXT:  (i32.const -13)
;; CHECK-NEXT:  (ref.null none)
;; CHECK-NEXT:  (ref.null noexn)
;; CHECK-NEXT:  (f32.const 3402823466385288598117041e14)
;; CHECK-NEXT:  (i64.const 45886)
;; CHECK-NEXT:  (string.const "\ed\bd\88")
;; CHECK-NEXT: ))

;; CHECK:      (global $global$_16 i32 (global.get $global$_14))

;; CHECK:      (global $global$_17 f32 (f32.const 9223372036854775808))

;; CHECK:      (global $global$_18 (ref null $9) (global.get $global$_5))

;; CHECK:      (global $global$_19 (ref $0) (ref.func $import))

;; CHECK:      (global $global$_20 (ref $9) (struct.new $9
;; CHECK-NEXT:  (i32.const 33375)
;; CHECK-NEXT:  (ref.null (shared none))
;; CHECK-NEXT:  (f64.const -nan:0xfffffffffffba)
;; CHECK-NEXT:  (v128.const i32x4 0x00000003 0x00000000 0xc0000001 0xffffffff)
;; CHECK-NEXT:  (ref.null (shared none))
;; CHECK-NEXT: ))

;; CHECK:      (global $global$_21 funcref (ref.func $import))

;; CHECK:      (global $hangLimit (mut i32) (i32.const 100))

;; CHECK:      (memory $0 i64 16 17 shared)

;; CHECK:      (data $0 "\b5\08ANA\b2\ae")

;; CHECK:      (data $1 (i64.const 0) "\c4I5\a6\8d>\c4\a1g\ff\a3\daf\90XX\14\b4n%\10\e2")

;; CHECK:      (data $2 "\f8\ea\df\82sNi\14s")

;; CHECK:      (data $3 (i64.const 22) "\d6=\8c\91\b9\c7\18\af@")

;; CHECK:      (table $fuzzing_table 5 funcref)

;; CHECK:      (table $exnref_table 8 exnref)

;; CHECK:      (elem $elem$ (table $fuzzing_table) (i32.const 0) func $func_12 $func_12 $func_14)

;; CHECK:      (elem declare func $func $import $log-f32 $log-i64)

;; CHECK:      (tag $tag$ (type $14) (param f64))

;; CHECK:      (export "table" (table $fuzzing_table))

;; CHECK:      (export "func" (func $func))

;; CHECK:      (export "func_12" (func $func_12))

;; CHECK:      (export "func_13" (func $func_13))

;; CHECK:      (export "func_14" (func $func_14))

;; CHECK:      (export "func_14_invoker" (func $func_14_invoker))

;; CHECK:      (export "func_16" (func $func_16))

;; CHECK:      (func $import (type $0)
;; CHECK-NEXT:  (block
;; CHECK-NEXT:   (if
;; CHECK-NEXT:    (i32.eqz
;; CHECK-NEXT:     (global.get $hangLimit)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (then
;; CHECK-NEXT:     (global.set $hangLimit
;; CHECK-NEXT:      (i32.const 100)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (unreachable)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (global.set $hangLimit
;; CHECK-NEXT:    (i32.sub
;; CHECK-NEXT:     (global.get $hangLimit)
;; CHECK-NEXT:     (i32.const 1)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (nop)
;; CHECK-NEXT: )

;; CHECK:      (func $func (type $0)
;; CHECK-NEXT:  (local $0 i32)
;; CHECK-NEXT:  (local $1 (tuple i64 f64 v128 stringref funcref))
;; CHECK-NEXT:  (local $2 (ref null $1))
;; CHECK-NEXT:  (local $3 arrayref)
;; CHECK-NEXT:  (local $4 f64)
;; CHECK-NEXT:  (block
;; CHECK-NEXT:   (if
;; CHECK-NEXT:    (i32.eqz
;; CHECK-NEXT:     (global.get $hangLimit)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (then
;; CHECK-NEXT:     (global.set $hangLimit
;; CHECK-NEXT:      (i32.const 100)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (unreachable)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (global.set $hangLimit
;; CHECK-NEXT:    (i32.sub
;; CHECK-NEXT:     (global.get $hangLimit)
;; CHECK-NEXT:     (i32.const 1)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (block $label$0
;; CHECK-NEXT:   (call $log-f32
;; CHECK-NEXT:    (f32.const -68719476736)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $func_12 (type $12) (param $0 i32)
;; CHECK-NEXT:  (local $1 (tuple i32 f32 f32 arrayref))
;; CHECK-NEXT:  (local $2 (ref null $generated_type$4))
;; CHECK-NEXT:  (local $3 f64)
;; CHECK-NEXT:  (local $4 (ref $9))
;; CHECK-NEXT:  (local $5 (ref struct))
;; CHECK-NEXT:  (local $6 (ref $generated_type$11))
;; CHECK-NEXT:  (local $7 (ref $5))
;; CHECK-NEXT:  (local $8 v128)
;; CHECK-NEXT:  (local $9 f64)
;; CHECK-NEXT:  (local $10 (ref func))
;; CHECK-NEXT:  (local $11 (ref $6))
;; CHECK-NEXT:  (local $12 i64)
;; CHECK-NEXT:  (local $13 structref)
;; CHECK-NEXT:  (block
;; CHECK-NEXT:   (if
;; CHECK-NEXT:    (i32.eqz
;; CHECK-NEXT:     (global.get $hangLimit)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (then
;; CHECK-NEXT:     (global.set $hangLimit
;; CHECK-NEXT:      (i32.const 100)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (unreachable)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (global.set $hangLimit
;; CHECK-NEXT:    (i32.sub
;; CHECK-NEXT:     (global.get $hangLimit)
;; CHECK-NEXT:     (i32.const 1)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (block
;; CHECK-NEXT:   (local.set $7
;; CHECK-NEXT:    (struct.new_default $5)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (block
;; CHECK-NEXT:    (local.set $6
;; CHECK-NEXT:     (struct.new $generated_type$11
;; CHECK-NEXT:      (global.get $global$_16)
;; CHECK-NEXT:      (ref.null (shared none))
;; CHECK-NEXT:      (f64.const -nan:0xfffffffffffb8)
;; CHECK-NEXT:      (local.get $8)
;; CHECK-NEXT:      (struct.new $generated_type$5
;; CHECK-NEXT:       (ref.i31_shared
;; CHECK-NEXT:        (i32.const 127)
;; CHECK-NEXT:       )
;; CHECK-NEXT:       (global.get $global$_20)
;; CHECK-NEXT:       (struct.new_default $7)
;; CHECK-NEXT:       (struct.new_default $7)
;; CHECK-NEXT:       (i32.const -2147483648)
;; CHECK-NEXT:       (local.get $0)
;; CHECK-NEXT:       (struct.new $5
;; CHECK-NEXT:        (i32.const -536870913)
;; CHECK-NEXT:       )
;; CHECK-NEXT:      )
;; CHECK-NEXT:      (struct.new_default $9)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (block
;; CHECK-NEXT:     (local.set $4
;; CHECK-NEXT:      (struct.new_default $9)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (block $label$0
;; CHECK-NEXT:      (nop)
;; CHECK-NEXT:      (nop)
;; CHECK-NEXT:      (loop $label$1
;; CHECK-NEXT:       (block
;; CHECK-NEXT:        (if
;; CHECK-NEXT:         (i32.eqz
;; CHECK-NEXT:          (global.get $hangLimit)
;; CHECK-NEXT:         )
;; CHECK-NEXT:         (then
;; CHECK-NEXT:          (global.set $hangLimit
;; CHECK-NEXT:           (i32.const 100)
;; CHECK-NEXT:          )
;; CHECK-NEXT:          (unreachable)
;; CHECK-NEXT:         )
;; CHECK-NEXT:        )
;; CHECK-NEXT:        (global.set $hangLimit
;; CHECK-NEXT:         (i32.sub
;; CHECK-NEXT:          (global.get $hangLimit)
;; CHECK-NEXT:          (i32.const 1)
;; CHECK-NEXT:         )
;; CHECK-NEXT:        )
;; CHECK-NEXT:       )
;; CHECK-NEXT:       (block
;; CHECK-NEXT:        (block $label$2
;; CHECK-NEXT:         (atomic.fence)
;; CHECK-NEXT:         (if
;; CHECK-NEXT:          (i32.eqz
;; CHECK-NEXT:           (ref.eq
;; CHECK-NEXT:            (struct.new_default $10)
;; CHECK-NEXT:            (struct.new_default $10)
;; CHECK-NEXT:           )
;; CHECK-NEXT:          )
;; CHECK-NEXT:          (then
;; CHECK-NEXT:           (block $label$3
;; CHECK-NEXT:            (call $table-set
;; CHECK-NEXT:             (local.tee $0
;; CHECK-NEXT:              (local.tee $0
;; CHECK-NEXT:               (tuple.extract 2 0
;; CHECK-NEXT:                (tuple.make 2
;; CHECK-NEXT:                 (i32.const 16777216)
;; CHECK-NEXT:                 (ref.null noextern)
;; CHECK-NEXT:                )
;; CHECK-NEXT:               )
;; CHECK-NEXT:              )
;; CHECK-NEXT:             )
;; CHECK-NEXT:             (ref.func $func_12)
;; CHECK-NEXT:            )
;; CHECK-NEXT:            (i32.atomic.store offset=22
;; CHECK-NEXT:             (i64.and
;; CHECK-NEXT:              (global.get $global$_13)
;; CHECK-NEXT:              (i64.const 15)
;; CHECK-NEXT:             )
;; CHECK-NEXT:             (i32.const -126)
;; CHECK-NEXT:            )
;; CHECK-NEXT:           )
;; CHECK-NEXT:          )
;; CHECK-NEXT:          (else
;; CHECK-NEXT:           (loop $label$4
;; CHECK-NEXT:            (block
;; CHECK-NEXT:             (if
;; CHECK-NEXT:              (i32.eqz
;; CHECK-NEXT:               (global.get $hangLimit)
;; CHECK-NEXT:              )
;; CHECK-NEXT:              (then
;; CHECK-NEXT:               (global.set $hangLimit
;; CHECK-NEXT:                (i32.const 100)
;; CHECK-NEXT:               )
;; CHECK-NEXT:               (unreachable)
;; CHECK-NEXT:              )
;; CHECK-NEXT:             )
;; CHECK-NEXT:             (global.set $hangLimit
;; CHECK-NEXT:              (i32.sub
;; CHECK-NEXT:               (global.get $hangLimit)
;; CHECK-NEXT:               (i32.const 1)
;; CHECK-NEXT:              )
;; CHECK-NEXT:             )
;; CHECK-NEXT:            )
;; CHECK-NEXT:            (block
;; CHECK-NEXT:             (block $label$5
;; CHECK-NEXT:              (nop)
;; CHECK-NEXT:             )
;; CHECK-NEXT:             (br_if $label$4
;; CHECK-NEXT:              (string.measure_wtf16
;; CHECK-NEXT:               (string.const "\ed\bd\88")
;; CHECK-NEXT:              )
;; CHECK-NEXT:             )
;; CHECK-NEXT:             (loop $label$6
;; CHECK-NEXT:              (block
;; CHECK-NEXT:               (if
;; CHECK-NEXT:                (i32.eqz
;; CHECK-NEXT:                 (global.get $hangLimit)
;; CHECK-NEXT:                )
;; CHECK-NEXT:                (then
;; CHECK-NEXT:                 (global.set $hangLimit
;; CHECK-NEXT:                  (i32.const 100)
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                 (unreachable)
;; CHECK-NEXT:                )
;; CHECK-NEXT:               )
;; CHECK-NEXT:               (global.set $hangLimit
;; CHECK-NEXT:                (i32.sub
;; CHECK-NEXT:                 (global.get $hangLimit)
;; CHECK-NEXT:                 (i32.const 1)
;; CHECK-NEXT:                )
;; CHECK-NEXT:               )
;; CHECK-NEXT:              )
;; CHECK-NEXT:              (block
;; CHECK-NEXT:               (table.set $fuzzing_table
;; CHECK-NEXT:                (i32.const 0)
;; CHECK-NEXT:                (ref.null nofunc)
;; CHECK-NEXT:               )
;; CHECK-NEXT:               (br_if $label$6
;; CHECK-NEXT:                (loop $label$7 (result i32)
;; CHECK-NEXT:                 (block
;; CHECK-NEXT:                  (if
;; CHECK-NEXT:                   (i32.eqz
;; CHECK-NEXT:                    (global.get $hangLimit)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                   (then
;; CHECK-NEXT:                    (global.set $hangLimit
;; CHECK-NEXT:                     (i32.const 100)
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                    (unreachable)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (global.set $hangLimit
;; CHECK-NEXT:                   (i32.sub
;; CHECK-NEXT:                    (global.get $hangLimit)
;; CHECK-NEXT:                    (i32.const 1)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                 (block $label$8 (result i32)
;; CHECK-NEXT:                  (br $label$0)
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                )
;; CHECK-NEXT:               )
;; CHECK-NEXT:               (atomic.fence)
;; CHECK-NEXT:              )
;; CHECK-NEXT:             )
;; CHECK-NEXT:            )
;; CHECK-NEXT:           )
;; CHECK-NEXT:          )
;; CHECK-NEXT:         )
;; CHECK-NEXT:        )
;; CHECK-NEXT:        (br_if $label$1
;; CHECK-NEXT:         (select
;; CHECK-NEXT:          (if (result i32)
;; CHECK-NEXT:           (i32.eqz
;; CHECK-NEXT:            (local.get $0)
;; CHECK-NEXT:           )
;; CHECK-NEXT:           (then
;; CHECK-NEXT:            (call $call-ref-catch
;; CHECK-NEXT:             (if (result (ref func))
;; CHECK-NEXT:              (ref.eq
;; CHECK-NEXT:               (struct.new_default $10)
;; CHECK-NEXT:               (struct.new_default $10)
;; CHECK-NEXT:              )
;; CHECK-NEXT:              (then
;; CHECK-NEXT:               (block $label$31 (result (ref func))
;; CHECK-NEXT:                (atomic.fence)
;; CHECK-NEXT:                (ref.func $func)
;; CHECK-NEXT:               )
;; CHECK-NEXT:              )
;; CHECK-NEXT:              (else
;; CHECK-NEXT:               (block $label$32 (result (ref func))
;; CHECK-NEXT:                (loop $label$33
;; CHECK-NEXT:                 (block
;; CHECK-NEXT:                  (if
;; CHECK-NEXT:                   (i32.eqz
;; CHECK-NEXT:                    (global.get $hangLimit)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                   (then
;; CHECK-NEXT:                    (global.set $hangLimit
;; CHECK-NEXT:                     (i32.const 100)
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                    (unreachable)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (global.set $hangLimit
;; CHECK-NEXT:                   (i32.sub
;; CHECK-NEXT:                    (global.get $hangLimit)
;; CHECK-NEXT:                    (i32.const 1)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                 (block
;; CHECK-NEXT:                  (nop)
;; CHECK-NEXT:                  (br_if $label$33
;; CHECK-NEXT:                   (i32.eqz
;; CHECK-NEXT:                    (struct.get $9 0
;; CHECK-NEXT:                     (global.get $global$_20)
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (nop)
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                )
;; CHECK-NEXT:                (local.tee $10
;; CHECK-NEXT:                 (if (result (ref func))
;; CHECK-NEXT:                  (i32.eqz
;; CHECK-NEXT:                   (local.tee $0
;; CHECK-NEXT:                    (i32.const 65444)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (then
;; CHECK-NEXT:                   (br_table $label$0 $label$1 $label$0 $label$0 $label$1 $label$0 $label$0 $label$0
;; CHECK-NEXT:                    (i32.shl
;; CHECK-NEXT:                     (ref.eq
;; CHECK-NEXT:                      (struct.new_default $10)
;; CHECK-NEXT:                      (if (result (ref $2))
;; CHECK-NEXT:                       (i32.eqz
;; CHECK-NEXT:                        (i32.const 128)
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                       (then
;; CHECK-NEXT:                        (local.tee $11
;; CHECK-NEXT:                         (global.get $global$_6)
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                       (else
;; CHECK-NEXT:                        (try_table (result (ref none)) (catch_all $label$0)
;; CHECK-NEXT:                         (ref.as_non_null
;; CHECK-NEXT:                          (ref.null none)
;; CHECK-NEXT:                         )
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                     (block $label$34 (result i32)
;; CHECK-NEXT:                      (call_ref $0
;; CHECK-NEXT:                       (ref.func $import)
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                      (br $label$1)
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (else
;; CHECK-NEXT:                   (if (result (ref $0))
;; CHECK-NEXT:                    (i32.load16_u offset=3
;; CHECK-NEXT:                     (i64.and
;; CHECK-NEXT:                      (try_table (result i64) (catch_all $label$1)
;; CHECK-NEXT:                       (i64.const -4398046511104)
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                      (i64.const 15)
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                    (then
;; CHECK-NEXT:                     (block $label$35 (result (ref $0))
;; CHECK-NEXT:                      (call $table-set
;; CHECK-NEXT:                       (i8x16.extract_lane_s 10
;; CHECK-NEXT:                        (block $label$36 (result v128)
;; CHECK-NEXT:                         (nop)
;; CHECK-NEXT:                         (br $label$0)
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                       (ref.func $func_12)
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                      (loop $label$37 (result (ref $0))
;; CHECK-NEXT:                       (block
;; CHECK-NEXT:                        (if
;; CHECK-NEXT:                         (i32.eqz
;; CHECK-NEXT:                          (global.get $hangLimit)
;; CHECK-NEXT:                         )
;; CHECK-NEXT:                         (then
;; CHECK-NEXT:                          (global.set $hangLimit
;; CHECK-NEXT:                           (i32.const 100)
;; CHECK-NEXT:                          )
;; CHECK-NEXT:                          (unreachable)
;; CHECK-NEXT:                         )
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                        (global.set $hangLimit
;; CHECK-NEXT:                         (i32.sub
;; CHECK-NEXT:                          (global.get $hangLimit)
;; CHECK-NEXT:                          (i32.const 1)
;; CHECK-NEXT:                         )
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                       (block (result (ref $0))
;; CHECK-NEXT:                        (block $label$38
;; CHECK-NEXT:                         (struct.set $9 2
;; CHECK-NEXT:                          (local.get $4)
;; CHECK-NEXT:                          (f64.const -4398046511104)
;; CHECK-NEXT:                         )
;; CHECK-NEXT:                         (call $table-set
;; CHECK-NEXT:                          (local.get $0)
;; CHECK-NEXT:                          (call $table-get
;; CHECK-NEXT:                           (loop $label$39 (result i32)
;; CHECK-NEXT:                            (block
;; CHECK-NEXT:                             (if
;; CHECK-NEXT:                              (i32.eqz
;; CHECK-NEXT:                               (global.get $hangLimit)
;; CHECK-NEXT:                              )
;; CHECK-NEXT:                              (then
;; CHECK-NEXT:                               (global.set $hangLimit
;; CHECK-NEXT:                                (i32.const 100)
;; CHECK-NEXT:                               )
;; CHECK-NEXT:                               (unreachable)
;; CHECK-NEXT:                              )
;; CHECK-NEXT:                             )
;; CHECK-NEXT:                             (global.set $hangLimit
;; CHECK-NEXT:                              (i32.sub
;; CHECK-NEXT:                               (global.get $hangLimit)
;; CHECK-NEXT:                               (i32.const 1)
;; CHECK-NEXT:                              )
;; CHECK-NEXT:                             )
;; CHECK-NEXT:                            )
;; CHECK-NEXT:                            (i32.const 10338)
;; CHECK-NEXT:                           )
;; CHECK-NEXT:                          )
;; CHECK-NEXT:                         )
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                        (br_if $label$37
;; CHECK-NEXT:                         (block $label$40 (result i32)
;; CHECK-NEXT:                          (nop)
;; CHECK-NEXT:                          (i32.atomic.load16_u offset=22
;; CHECK-NEXT:                           (i64.and
;; CHECK-NEXT:                            (i64.const -32768)
;; CHECK-NEXT:                            (i64.const 15)
;; CHECK-NEXT:                           )
;; CHECK-NEXT:                          )
;; CHECK-NEXT:                         )
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                        (ref.func $func)
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                    (else
;; CHECK-NEXT:                     (block $label$41
;; CHECK-NEXT:                      (nop)
;; CHECK-NEXT:                      (throw $tag$
;; CHECK-NEXT:                       (f64.const -nan:0xffffffffffff2)
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                )
;; CHECK-NEXT:               )
;; CHECK-NEXT:              )
;; CHECK-NEXT:             )
;; CHECK-NEXT:            )
;; CHECK-NEXT:           )
;; CHECK-NEXT:           (else
;; CHECK-NEXT:            (block $label$42 (result i32)
;; CHECK-NEXT:             (call $log-v128
;; CHECK-NEXT:              (v128.load offset=3 align=2
;; CHECK-NEXT:               (i64.and
;; CHECK-NEXT:                (loop $label$43 (result i64)
;; CHECK-NEXT:                 (block
;; CHECK-NEXT:                  (if
;; CHECK-NEXT:                   (i32.eqz
;; CHECK-NEXT:                    (global.get $hangLimit)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                   (then
;; CHECK-NEXT:                    (global.set $hangLimit
;; CHECK-NEXT:                     (i32.const 100)
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                    (unreachable)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (global.set $hangLimit
;; CHECK-NEXT:                   (i32.sub
;; CHECK-NEXT:                    (global.get $hangLimit)
;; CHECK-NEXT:                    (i32.const 1)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                 (block $label$44 (result i64)
;; CHECK-NEXT:                  (drop
;; CHECK-NEXT:                   (br_on_null $label$0
;; CHECK-NEXT:                    (block (result (ref (exact $12)))
;; CHECK-NEXT:                     (drop
;; CHECK-NEXT:                      (br_on_null $label$0
;; CHECK-NEXT:                       (block (result (ref string))
;; CHECK-NEXT:                        (drop
;; CHECK-NEXT:                         (br_on_null $label$1
;; CHECK-NEXT:                          (ref.i31
;; CHECK-NEXT:                           (i32.const 32767)
;; CHECK-NEXT:                          )
;; CHECK-NEXT:                         )
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                        (string.const "\f0\90\8d\88\f0\90\8d\88\ed\bd\88")
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                     (ref.func $func_12)
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (br $label$0)
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                )
;; CHECK-NEXT:                (i64.const 15)
;; CHECK-NEXT:               )
;; CHECK-NEXT:              )
;; CHECK-NEXT:             )
;; CHECK-NEXT:             (br $label$0)
;; CHECK-NEXT:            )
;; CHECK-NEXT:           )
;; CHECK-NEXT:          )
;; CHECK-NEXT:          (select
;; CHECK-NEXT:           (local.get $0)
;; CHECK-NEXT:           (loop $label$46 (result i32)
;; CHECK-NEXT:            (block
;; CHECK-NEXT:             (if
;; CHECK-NEXT:              (i32.eqz
;; CHECK-NEXT:               (global.get $hangLimit)
;; CHECK-NEXT:              )
;; CHECK-NEXT:              (then
;; CHECK-NEXT:               (global.set $hangLimit
;; CHECK-NEXT:                (i32.const 100)
;; CHECK-NEXT:               )
;; CHECK-NEXT:               (unreachable)
;; CHECK-NEXT:              )
;; CHECK-NEXT:             )
;; CHECK-NEXT:             (global.set $hangLimit
;; CHECK-NEXT:              (i32.sub
;; CHECK-NEXT:               (global.get $hangLimit)
;; CHECK-NEXT:               (i32.const 1)
;; CHECK-NEXT:              )
;; CHECK-NEXT:             )
;; CHECK-NEXT:            )
;; CHECK-NEXT:            (block (result i32)
;; CHECK-NEXT:             (block $label$47
;; CHECK-NEXT:              (struct.set $7 2
;; CHECK-NEXT:               (struct.new $7
;; CHECK-NEXT:                (i32.const -2)
;; CHECK-NEXT:                (ref.null (shared none))
;; CHECK-NEXT:                (f64.const -nan:0xfff81722f4d10)
;; CHECK-NEXT:                (v128.const i32x4 0x00008001 0xffff8002 0xfe000001 0xffff9a40)
;; CHECK-NEXT:                (ref.null (shared none))
;; CHECK-NEXT:               )
;; CHECK-NEXT:               (tuple.extract 2 0
;; CHECK-NEXT:                (tuple.make 2
;; CHECK-NEXT:                 (f64.const 24109)
;; CHECK-NEXT:                 (f32.const 3402823466385288598117041e14)
;; CHECK-NEXT:                )
;; CHECK-NEXT:               )
;; CHECK-NEXT:              )
;; CHECK-NEXT:              (call $table-set
;; CHECK-NEXT:               (local.get $0)
;; CHECK-NEXT:               (ref.func $log-i64)
;; CHECK-NEXT:              )
;; CHECK-NEXT:             )
;; CHECK-NEXT:             (br_if $label$46
;; CHECK-NEXT:              (i32.eqz
;; CHECK-NEXT:               (select
;; CHECK-NEXT:                (ref.eq
;; CHECK-NEXT:                 (if (result (ref $8))
;; CHECK-NEXT:                  (i32.eqz
;; CHECK-NEXT:                   (local.tee $0
;; CHECK-NEXT:                    (global.get $global$_14)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (then
;; CHECK-NEXT:                   (block $label$50 (result (ref $8))
;; CHECK-NEXT:                    (array.new $8
;; CHECK-NEXT:                     (local.get $6)
;; CHECK-NEXT:                     (i32.const 1)
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (else
;; CHECK-NEXT:                   (block $label$51 (result (ref $8))
;; CHECK-NEXT:                    (loop $label$52
;; CHECK-NEXT:                     (block
;; CHECK-NEXT:                      (if
;; CHECK-NEXT:                       (i32.eqz
;; CHECK-NEXT:                        (global.get $hangLimit)
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                       (then
;; CHECK-NEXT:                        (global.set $hangLimit
;; CHECK-NEXT:                         (i32.const 100)
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                        (unreachable)
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                      (global.set $hangLimit
;; CHECK-NEXT:                       (i32.sub
;; CHECK-NEXT:                        (global.get $hangLimit)
;; CHECK-NEXT:                        (i32.const 1)
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                     (block
;; CHECK-NEXT:                      (block $label$53
;; CHECK-NEXT:                       (call $log-f64
;; CHECK-NEXT:                        (f64x2.extract_lane 1
;; CHECK-NEXT:                         (v128.const i32x4 0x46f46e00 0x746d6f5c 0xdf000000 0xdf000000)
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                       (call $log-f32
;; CHECK-NEXT:                        (f32.const 4398046511104)
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                      (br_if $label$52
;; CHECK-NEXT:                       (block $label$54 (result i32)
;; CHECK-NEXT:                        (call $func)
;; CHECK-NEXT:                        (local.tee $0
;; CHECK-NEXT:                         (ref.eq
;; CHECK-NEXT:                          (array.new_fixed $13 0)
;; CHECK-NEXT:                          (local.get $13)
;; CHECK-NEXT:                         )
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                      (call $throw
;; CHECK-NEXT:                       (i32.const 0)
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                    (array.new $8
;; CHECK-NEXT:                     (struct.new_default $generated_type$4)
;; CHECK-NEXT:                     (i32.const 13)
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                 (struct.new_default $10)
;; CHECK-NEXT:                )
;; CHECK-NEXT:                (local.tee $0
;; CHECK-NEXT:                 (block $label$55 (result i32)
;; CHECK-NEXT:                  (call $table-set
;; CHECK-NEXT:                   (string.encode_wtf16_array
;; CHECK-NEXT:                    (loop $label$56 (result (ref string))
;; CHECK-NEXT:                     (block
;; CHECK-NEXT:                      (if
;; CHECK-NEXT:                       (i32.eqz
;; CHECK-NEXT:                        (global.get $hangLimit)
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                       (then
;; CHECK-NEXT:                        (global.set $hangLimit
;; CHECK-NEXT:                         (i32.const 100)
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                        (unreachable)
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                      (global.set $hangLimit
;; CHECK-NEXT:                       (i32.sub
;; CHECK-NEXT:                        (global.get $hangLimit)
;; CHECK-NEXT:                        (i32.const 1)
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                     (block (result (ref string))
;; CHECK-NEXT:                      (block $label$57
;; CHECK-NEXT:                       (call $log-i64
;; CHECK-NEXT:                        (local.get $12)
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                       (nop)
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                      (br_if $label$56
;; CHECK-NEXT:                       (i32.eqz
;; CHECK-NEXT:                        (local.get $0)
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                      (string.const "\e2\82\ac938\ed\a0\80")
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                    (array.new_default $23
;; CHECK-NEXT:                     (i32.const 72)
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                    (i32.atomic.load16_u offset=22
;; CHECK-NEXT:                     (i64.and
;; CHECK-NEXT:                      (global.get $global$_13)
;; CHECK-NEXT:                      (i64.const 15)
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                   (call $table-get
;; CHECK-NEXT:                    (local.get $0)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (i32.atomic.rmw16.xchg_u offset=3
;; CHECK-NEXT:                   (i64.and
;; CHECK-NEXT:                    (i64.extend8_s
;; CHECK-NEXT:                     (local.get $12)
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                    (i64.const 15)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                   (i8x16.extract_lane_s 15
;; CHECK-NEXT:                    (i32x4.splat
;; CHECK-NEXT:                     (global.get $global$_14)
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                )
;; CHECK-NEXT:                (struct.get $generated_type$11 0
;; CHECK-NEXT:                 (struct.new $generated_type$11
;; CHECK-NEXT:                  (i64.lt_s
;; CHECK-NEXT:                   (global.get $global$_13)
;; CHECK-NEXT:                   (local.get $12)
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (ref.null (shared none))
;; CHECK-NEXT:                  (f64.const 3)
;; CHECK-NEXT:                  (v128.load offset=3 align=8
;; CHECK-NEXT:                   (i64.and
;; CHECK-NEXT:                    (loop $label$48 (result i64)
;; CHECK-NEXT:                     (block
;; CHECK-NEXT:                      (if
;; CHECK-NEXT:                       (i32.eqz
;; CHECK-NEXT:                        (global.get $hangLimit)
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                       (then
;; CHECK-NEXT:                        (global.set $hangLimit
;; CHECK-NEXT:                         (i32.const 100)
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                        (unreachable)
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                      (global.set $hangLimit
;; CHECK-NEXT:                       (i32.sub
;; CHECK-NEXT:                        (global.get $hangLimit)
;; CHECK-NEXT:                        (i32.const 1)
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                     (block (result i64)
;; CHECK-NEXT:                      (block $label$49
;; CHECK-NEXT:                       (try_table (catch_all $label$0)
;; CHECK-NEXT:                        (atomic.fence)
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                       (local.set $7
;; CHECK-NEXT:                        (local.get $7)
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                      (br_if $label$48
;; CHECK-NEXT:                       (i32.eqz
;; CHECK-NEXT:                        (i32.const -18605)
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                      (local.tee $12
;; CHECK-NEXT:                       (local.get $12)
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                    (i64.const 15)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (struct.new $generated_type$5
;; CHECK-NEXT:                   (ref.i31_shared
;; CHECK-NEXT:                    (i32.const -569297635)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                   (struct.new_default $9)
;; CHECK-NEXT:                   (struct.new_default $7)
;; CHECK-NEXT:                   (ref.null (shared none))
;; CHECK-NEXT:                   (local.get $0)
;; CHECK-NEXT:                   (i32.const 20501)
;; CHECK-NEXT:                   (ref.null (shared none))
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (struct.new_default $24)
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                )
;; CHECK-NEXT:               )
;; CHECK-NEXT:              )
;; CHECK-NEXT:             )
;; CHECK-NEXT:             (i16x8.extract_lane_u 2
;; CHECK-NEXT:              (f64x2.splat
;; CHECK-NEXT:               (f64.const -16383.795)
;; CHECK-NEXT:              )
;; CHECK-NEXT:             )
;; CHECK-NEXT:            )
;; CHECK-NEXT:           )
;; CHECK-NEXT:           (local.get $0)
;; CHECK-NEXT:          )
;; CHECK-NEXT:          (string.measure_wtf16
;; CHECK-NEXT:           (block $label$9 (result (ref string))
;; CHECK-NEXT:            (try
;; CHECK-NEXT:             (do
;; CHECK-NEXT:              (drop
;; CHECK-NEXT:               (br_on_cast $label$9 (ref string) (ref string)
;; CHECK-NEXT:                (br_if $label$9
;; CHECK-NEXT:                 (if (result (ref string))
;; CHECK-NEXT:                  (i32.eqz
;; CHECK-NEXT:                   (local.get $0)
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (then
;; CHECK-NEXT:                   (block $label$10 (result (ref string))
;; CHECK-NEXT:                    (i32.atomic.store offset=22
;; CHECK-NEXT:                     (i64.and
;; CHECK-NEXT:                      (i64.const 4294941230)
;; CHECK-NEXT:                      (i64.const 15)
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                     (local.tee $0
;; CHECK-NEXT:                      (i32.const -65)
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                    (br $label$1)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (else
;; CHECK-NEXT:                   (block $label$11 (result (ref string))
;; CHECK-NEXT:                    (nop)
;; CHECK-NEXT:                    (select (result (ref string))
;; CHECK-NEXT:                     (if (result (ref string))
;; CHECK-NEXT:                      (i32.eqz
;; CHECK-NEXT:                       (local.get $0)
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                      (then
;; CHECK-NEXT:                       (string.const "\c2\a3\c2\a3\c2\a3")
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                      (else
;; CHECK-NEXT:                       (string.const "\c2\a3\ed\a0\80")
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                     (block $label$12 (result (ref string))
;; CHECK-NEXT:                      (br $label$0)
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                     (ref.is_null
;; CHECK-NEXT:                      (struct.new_default $10)
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                 (global.get $global$_14)
;; CHECK-NEXT:                )
;; CHECK-NEXT:               )
;; CHECK-NEXT:              )
;; CHECK-NEXT:             )
;; CHECK-NEXT:             (catch $tag$
;; CHECK-NEXT:              (local.set $3
;; CHECK-NEXT:               (pop f64)
;; CHECK-NEXT:              )
;; CHECK-NEXT:              (loop $label$13
;; CHECK-NEXT:               (block
;; CHECK-NEXT:                (if
;; CHECK-NEXT:                 (i32.eqz
;; CHECK-NEXT:                  (global.get $hangLimit)
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                 (then
;; CHECK-NEXT:                  (global.set $hangLimit
;; CHECK-NEXT:                   (i32.const 100)
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (unreachable)
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                )
;; CHECK-NEXT:                (global.set $hangLimit
;; CHECK-NEXT:                 (i32.sub
;; CHECK-NEXT:                  (global.get $hangLimit)
;; CHECK-NEXT:                  (i32.const 1)
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                )
;; CHECK-NEXT:               )
;; CHECK-NEXT:               (block
;; CHECK-NEXT:                (drop
;; CHECK-NEXT:                 (br_on_null $label$13
;; CHECK-NEXT:                  (local.tee $4
;; CHECK-NEXT:                   (struct.new $9
;; CHECK-NEXT:                    (global.get $global$_16)
;; CHECK-NEXT:                    (ref.null (shared none))
;; CHECK-NEXT:                    (global.get $global$_4)
;; CHECK-NEXT:                    (v128.const i32x4 0x0000fff6 0x8002fffe 0xff009b21 0x003fffc6)
;; CHECK-NEXT:                    (ref.null (shared none))
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                )
;; CHECK-NEXT:                (br_if $label$13
;; CHECK-NEXT:                 (i32.eqz
;; CHECK-NEXT:                  (local.get $0)
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                )
;; CHECK-NEXT:                (loop $label$14
;; CHECK-NEXT:                 (block
;; CHECK-NEXT:                  (if
;; CHECK-NEXT:                   (i32.eqz
;; CHECK-NEXT:                    (global.get $hangLimit)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                   (then
;; CHECK-NEXT:                    (global.set $hangLimit
;; CHECK-NEXT:                     (i32.const 100)
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                    (unreachable)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (global.set $hangLimit
;; CHECK-NEXT:                   (i32.sub
;; CHECK-NEXT:                    (global.get $hangLimit)
;; CHECK-NEXT:                    (i32.const 1)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                 (block
;; CHECK-NEXT:                  (block $label$15
;; CHECK-NEXT:                   (memory.fill
;; CHECK-NEXT:                    (i64.and
;; CHECK-NEXT:                     (i64.const -26772)
;; CHECK-NEXT:                     (i64.const 15)
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                    (ref.eq
;; CHECK-NEXT:                     (local.tee $5
;; CHECK-NEXT:                      (struct.new_default $10)
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                     (ref.as_non_null
;; CHECK-NEXT:                      (ref.null none)
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                    (i64.const -9223372036854775808)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                   (if
;; CHECK-NEXT:                    (i32.eqz
;; CHECK-NEXT:                     (memory.atomic.notify offset=22
;; CHECK-NEXT:                      (i64.and
;; CHECK-NEXT:                       (i64.const 9223372036854775807)
;; CHECK-NEXT:                       (i64.const 15)
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                      (block $label$16 (result i32)
;; CHECK-NEXT:                       (nop)
;; CHECK-NEXT:                       (local.get $0)
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                    (then
;; CHECK-NEXT:                     (br_if $label$1
;; CHECK-NEXT:                      (i32.eqz
;; CHECK-NEXT:                       (i32.const 8388608)
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (br_if $label$14
;; CHECK-NEXT:                   (call $call-ref-catch
;; CHECK-NEXT:                    (global.get $global$_19)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (nop)
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                )
;; CHECK-NEXT:               )
;; CHECK-NEXT:              )
;; CHECK-NEXT:             )
;; CHECK-NEXT:             (catch_all
;; CHECK-NEXT:              (struct.set $generated_type$11 2
;; CHECK-NEXT:               (local.tee $6
;; CHECK-NEXT:                (ref.cast (ref (shared none))
;; CHECK-NEXT:                 (struct.new_default $1)
;; CHECK-NEXT:                )
;; CHECK-NEXT:               )
;; CHECK-NEXT:               (if (result f64)
;; CHECK-NEXT:                (f32.ne
;; CHECK-NEXT:                 (if (result f32)
;; CHECK-NEXT:                  (struct.get_u $5 0
;; CHECK-NEXT:                   (local.tee $7
;; CHECK-NEXT:                    (ref.as_non_null
;; CHECK-NEXT:                     (ref.null (shared none))
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (then
;; CHECK-NEXT:                   (block $label$17 (result f32)
;; CHECK-NEXT:                    (f32.const -nan:0x7fff84)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (else
;; CHECK-NEXT:                   (block $label$18 (result f32)
;; CHECK-NEXT:                    (if
;; CHECK-NEXT:                     (i32.eqz
;; CHECK-NEXT:                      (loop $label$19 (result i32)
;; CHECK-NEXT:                       (block
;; CHECK-NEXT:                        (if
;; CHECK-NEXT:                         (i32.eqz
;; CHECK-NEXT:                          (global.get $hangLimit)
;; CHECK-NEXT:                         )
;; CHECK-NEXT:                         (then
;; CHECK-NEXT:                          (global.set $hangLimit
;; CHECK-NEXT:                           (i32.const 100)
;; CHECK-NEXT:                          )
;; CHECK-NEXT:                          (unreachable)
;; CHECK-NEXT:                         )
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                        (global.set $hangLimit
;; CHECK-NEXT:                         (i32.sub
;; CHECK-NEXT:                          (global.get $hangLimit)
;; CHECK-NEXT:                          (i32.const 1)
;; CHECK-NEXT:                         )
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                       (i32.const -129)
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                     (then
;; CHECK-NEXT:                      (loop $label$20
;; CHECK-NEXT:                       (block
;; CHECK-NEXT:                        (if
;; CHECK-NEXT:                         (i32.eqz
;; CHECK-NEXT:                          (global.get $hangLimit)
;; CHECK-NEXT:                         )
;; CHECK-NEXT:                         (then
;; CHECK-NEXT:                          (global.set $hangLimit
;; CHECK-NEXT:                           (i32.const 100)
;; CHECK-NEXT:                          )
;; CHECK-NEXT:                          (unreachable)
;; CHECK-NEXT:                         )
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                        (global.set $hangLimit
;; CHECK-NEXT:                         (i32.sub
;; CHECK-NEXT:                          (global.get $hangLimit)
;; CHECK-NEXT:                          (i32.const 1)
;; CHECK-NEXT:                         )
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                       (block
;; CHECK-NEXT:                        (nop)
;; CHECK-NEXT:                        (br_if $label$20
;; CHECK-NEXT:                         (local.get $0)
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                        (nop)
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                     (else
;; CHECK-NEXT:                      (block $label$21
;; CHECK-NEXT:                       (br_if $label$21
;; CHECK-NEXT:                        (block $label$22 (result i32)
;; CHECK-NEXT:                         (nop)
;; CHECK-NEXT:                         (select
;; CHECK-NEXT:                          (i32.const 268435456)
;; CHECK-NEXT:                          (if (result i32)
;; CHECK-NEXT:                           (i32.eqz
;; CHECK-NEXT:                            (local.tee $0
;; CHECK-NEXT:                             (local.get $0)
;; CHECK-NEXT:                            )
;; CHECK-NEXT:                           )
;; CHECK-NEXT:                           (then
;; CHECK-NEXT:                            (local.get $0)
;; CHECK-NEXT:                           )
;; CHECK-NEXT:                           (else
;; CHECK-NEXT:                            (local.get $0)
;; CHECK-NEXT:                           )
;; CHECK-NEXT:                          )
;; CHECK-NEXT:                          (try_table (result i32) (catch_all $label$0)
;; CHECK-NEXT:                           (i32.const 81)
;; CHECK-NEXT:                          )
;; CHECK-NEXT:                         )
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                       (table.set $fuzzing_table
;; CHECK-NEXT:                        (i32.const 1)
;; CHECK-NEXT:                        (call $table-get
;; CHECK-NEXT:                         (if (result i32)
;; CHECK-NEXT:                          (i32.const -2048)
;; CHECK-NEXT:                          (then
;; CHECK-NEXT:                           (local.get $0)
;; CHECK-NEXT:                          )
;; CHECK-NEXT:                          (else
;; CHECK-NEXT:                           (i32.const -77)
;; CHECK-NEXT:                          )
;; CHECK-NEXT:                         )
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                    (br $label$1)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                 (f32.div
;; CHECK-NEXT:                  (tuple.extract 2 0
;; CHECK-NEXT:                   (tuple.make 2
;; CHECK-NEXT:                    (f32.const 2147483648)
;; CHECK-NEXT:                    (f64.const 18)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (loop $label$23 (result f32)
;; CHECK-NEXT:                   (block
;; CHECK-NEXT:                    (if
;; CHECK-NEXT:                     (i32.eqz
;; CHECK-NEXT:                      (global.get $hangLimit)
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                     (then
;; CHECK-NEXT:                      (global.set $hangLimit
;; CHECK-NEXT:                       (i32.const 100)
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                      (unreachable)
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                    (global.set $hangLimit
;; CHECK-NEXT:                     (i32.sub
;; CHECK-NEXT:                      (global.get $hangLimit)
;; CHECK-NEXT:                      (i32.const 1)
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                   (block (result f32)
;; CHECK-NEXT:                    (nop)
;; CHECK-NEXT:                    (br_if $label$23
;; CHECK-NEXT:                     (i16x8.extract_lane_u 0
;; CHECK-NEXT:                      (local.get $8)
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                    (f32.const -2147483648)
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                )
;; CHECK-NEXT:                (then
;; CHECK-NEXT:                 (block $label$24 (result f64)
;; CHECK-NEXT:                  (nop)
;; CHECK-NEXT:                  (br $label$0)
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                )
;; CHECK-NEXT:                (else
;; CHECK-NEXT:                 (block $label$25 (result f64)
;; CHECK-NEXT:                  (call_ref $15
;; CHECK-NEXT:                   (f32.const 2199023255552)
;; CHECK-NEXT:                   (ref.func $log-f32)
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                  (loop $label$26 (result f64)
;; CHECK-NEXT:                   (block
;; CHECK-NEXT:                    (if
;; CHECK-NEXT:                     (i32.eqz
;; CHECK-NEXT:                      (global.get $hangLimit)
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                     (then
;; CHECK-NEXT:                      (global.set $hangLimit
;; CHECK-NEXT:                       (i32.const 100)
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                      (unreachable)
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                    (global.set $hangLimit
;; CHECK-NEXT:                     (i32.sub
;; CHECK-NEXT:                      (global.get $hangLimit)
;; CHECK-NEXT:                      (i32.const 1)
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                   (block (result f64)
;; CHECK-NEXT:                    (block $label$27
;; CHECK-NEXT:                     (call $log-f64
;; CHECK-NEXT:                      (f64.convert_i32_u
;; CHECK-NEXT:                       (if (result i32)
;; CHECK-NEXT:                        (i32.eqz
;; CHECK-NEXT:                         (i32.const -7)
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                        (then
;; CHECK-NEXT:                         (i32.const -110)
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                        (else
;; CHECK-NEXT:                         (i32.const -32162)
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                    (br_if $label$26
;; CHECK-NEXT:                     (i32.atomic.load16_u offset=22
;; CHECK-NEXT:                      (i64.and
;; CHECK-NEXT:                       (i64.const -6204899)
;; CHECK-NEXT:                       (i64.const 15)
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                    (try (result f64)
;; CHECK-NEXT:                     (do
;; CHECK-NEXT:                      (f64x2.extract_lane 1
;; CHECK-NEXT:                       (block $label$28 (result v128)
;; CHECK-NEXT:                        (local.get $8)
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                     (catch $tag$
;; CHECK-NEXT:                      (local.set $9
;; CHECK-NEXT:                       (pop f64)
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                      (if (result f64)
;; CHECK-NEXT:                       (i32.load16_u offset=22
;; CHECK-NEXT:                        (i64.and
;; CHECK-NEXT:                         (i64.const -19)
;; CHECK-NEXT:                         (i64.const 15)
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                       (then
;; CHECK-NEXT:                        (block $label$29 (result f64)
;; CHECK-NEXT:                         (call $log-v128
;; CHECK-NEXT:                          (local.tee $8
;; CHECK-NEXT:                           (v128.const i32x4 0x0dfff881 0x012638f1 0x69d9009f 0x00e0012a)
;; CHECK-NEXT:                          )
;; CHECK-NEXT:                         )
;; CHECK-NEXT:                         (br $label$26)
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                       (else
;; CHECK-NEXT:                        (block $label$30 (result f64)
;; CHECK-NEXT:                         (call $table-set
;; CHECK-NEXT:                          (local.get $0)
;; CHECK-NEXT:                          (call $table-get
;; CHECK-NEXT:                           (local.get $0)
;; CHECK-NEXT:                          )
;; CHECK-NEXT:                         )
;; CHECK-NEXT:                         (try_table (result f64) (catch $tag$ $label$25) (catch $tag$ $label$30) (catch $tag$ $label$30)
;; CHECK-NEXT:                          (f64.const 1797693134862315708145274e284)
;; CHECK-NEXT:                         )
;; CHECK-NEXT:                        )
;; CHECK-NEXT:                       )
;; CHECK-NEXT:                      )
;; CHECK-NEXT:                     )
;; CHECK-NEXT:                    )
;; CHECK-NEXT:                   )
;; CHECK-NEXT:                  )
;; CHECK-NEXT:                 )
;; CHECK-NEXT:                )
;; CHECK-NEXT:               )
;; CHECK-NEXT:              )
;; CHECK-NEXT:             )
;; CHECK-NEXT:            )
;; CHECK-NEXT:            (br $label$0)
;; CHECK-NEXT:           )
;; CHECK-NEXT:          )
;; CHECK-NEXT:         )
;; CHECK-NEXT:        )
;; CHECK-NEXT:        (v128.store offset=22 align=1
;; CHECK-NEXT:         (i64.and
;; CHECK-NEXT:          (local.get $12)
;; CHECK-NEXT:          (i64.const 15)
;; CHECK-NEXT:         )
;; CHECK-NEXT:         (v128.const i32x4 0x20000001 0xffffffd5 0x00010000 0xfffffffd)
;; CHECK-NEXT:        )
;; CHECK-NEXT:       )
;; CHECK-NEXT:      )
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $func_13 (type $25) (result i64)
;; CHECK-NEXT:  (local $0 i64)
;; CHECK-NEXT:  (local $1 i64)
;; CHECK-NEXT:  (block
;; CHECK-NEXT:   (if
;; CHECK-NEXT:    (i32.eqz
;; CHECK-NEXT:     (global.get $hangLimit)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (then
;; CHECK-NEXT:     (global.set $hangLimit
;; CHECK-NEXT:      (i32.const 100)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (unreachable)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (global.set $hangLimit
;; CHECK-NEXT:    (i32.sub
;; CHECK-NEXT:     (global.get $hangLimit)
;; CHECK-NEXT:     (i32.const 1)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load16_u offset=22
;; CHECK-NEXT:   (i64.load16_s offset=22 align=1
;; CHECK-NEXT:    (i64.and
;; CHECK-NEXT:     (local.tee $0
;; CHECK-NEXT:      (local.get $1)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i64.const 15)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $func_14 (type $26) (param $0 i64) (param $1 (ref null $0)) (param $2 f64) (param $3 i32) (result (ref $5))
;; CHECK-NEXT:  (local $4 f32)
;; CHECK-NEXT:  (local $5 (ref struct))
;; CHECK-NEXT:  (local $6 (ref array))
;; CHECK-NEXT:  (block
;; CHECK-NEXT:   (if
;; CHECK-NEXT:    (i32.eqz
;; CHECK-NEXT:     (global.get $hangLimit)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (then
;; CHECK-NEXT:     (global.set $hangLimit
;; CHECK-NEXT:      (i32.const 100)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (unreachable)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (global.set $hangLimit
;; CHECK-NEXT:    (i32.sub
;; CHECK-NEXT:     (global.get $hangLimit)
;; CHECK-NEXT:     (i32.const 1)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (return
;; CHECK-NEXT:   (struct.new $5
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $func_14_invoker (type $0)
;; CHECK-NEXT:  (block
;; CHECK-NEXT:   (if
;; CHECK-NEXT:    (i32.eqz
;; CHECK-NEXT:     (global.get $hangLimit)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (then
;; CHECK-NEXT:     (global.set $hangLimit
;; CHECK-NEXT:      (i32.const 100)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (unreachable)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (global.set $hangLimit
;; CHECK-NEXT:    (i32.sub
;; CHECK-NEXT:     (global.get $hangLimit)
;; CHECK-NEXT:     (i32.const 1)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (block
;; CHECK-NEXT:   (drop
;; CHECK-NEXT:    (call $func_14
;; CHECK-NEXT:     (i64.const -47)
;; CHECK-NEXT:     (ref.null nofunc)
;; CHECK-NEXT:     (f64.const 1.1754943508222875e-38)
;; CHECK-NEXT:     (i32.const -87)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (drop
;; CHECK-NEXT:    (call $func_14
;; CHECK-NEXT:     (i64.const -19)
;; CHECK-NEXT:     (ref.func $import)
;; CHECK-NEXT:     (f64.const -2147483648)
;; CHECK-NEXT:     (i32.const -124)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (drop
;; CHECK-NEXT:    (call $func_14
;; CHECK-NEXT:     (i64.const 51497)
;; CHECK-NEXT:     (ref.func $func)
;; CHECK-NEXT:     (f64.const -nan:0xfffffffffffbc)
;; CHECK-NEXT:     (i32.const -128)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $func_16 (type $27) (param $0 stringref) (result (ref $0))
;; CHECK-NEXT:  (block
;; CHECK-NEXT:   (if
;; CHECK-NEXT:    (i32.eqz
;; CHECK-NEXT:     (global.get $hangLimit)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (then
;; CHECK-NEXT:     (global.set $hangLimit
;; CHECK-NEXT:      (i32.const 100)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (unreachable)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (global.set $hangLimit
;; CHECK-NEXT:    (i32.sub
;; CHECK-NEXT:     (global.get $hangLimit)
;; CHECK-NEXT:     (i32.const 1)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (block $label$0
;; CHECK-NEXT:   (return
;; CHECK-NEXT:    (ref.as_non_null
;; CHECK-NEXT:     (ref.null nofunc)
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT: )
