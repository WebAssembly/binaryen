;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.

;; RUN: wasm-opt %s -all -o %t.text.wast -g -S
;; RUN: wasm-as %s -all -g -o %t.wasm
;; RUN: wasm-dis %t.wasm -all -o %t.bin.wast
;; RUN: wasm-as %s -all -o %t.nodebug.wasm
;; RUN: wasm-dis %t.nodebug.wasm -all -o %t.bin.nodebug.wast
;; RUN: cat %t.text.wast | filecheck %s --check-prefix=CHECK-TEXT
;; RUN: cat %t.bin.wast | filecheck %s --check-prefix=CHECK-BIN
;; RUN: cat %t.bin.nodebug.wast | filecheck %s --check-prefix=CHECK-BIN-NODEBUG

(module
 (memory 1 1)


 ;; CHECK-TEXT:      (type $0 (func (param i32) (result f32)))

 ;; CHECK-TEXT:      (type $1 (func (param i32 f32)))

 ;; CHECK-TEXT:      (type $2 (func (param f32) (result v128)))

 ;; CHECK-TEXT:      (type $3 (func (param v128) (result f32)))

 ;; CHECK-TEXT:      (type $4 (func (param v128 f32) (result v128)))

 ;; CHECK-TEXT:      (memory $0 1 1)

 ;; CHECK-TEXT:      (func $f32.load_f16 (type $0) (param $0 i32) (result f32)
 ;; CHECK-TEXT-NEXT:  (f32.load_f16
 ;; CHECK-TEXT-NEXT:   (local.get $0)
 ;; CHECK-TEXT-NEXT:  )
 ;; CHECK-TEXT-NEXT: )
 ;; CHECK-BIN:      (type $0 (func (param i32) (result f32)))

 ;; CHECK-BIN:      (type $1 (func (param i32 f32)))

 ;; CHECK-BIN:      (type $2 (func (param f32) (result v128)))

 ;; CHECK-BIN:      (type $3 (func (param v128) (result f32)))

 ;; CHECK-BIN:      (type $4 (func (param v128 f32) (result v128)))

 ;; CHECK-BIN:      (memory $0 1 1)

 ;; CHECK-BIN:      (func $f32.load_f16 (type $0) (param $0 i32) (result f32)
 ;; CHECK-BIN-NEXT:  (f32.load_f16
 ;; CHECK-BIN-NEXT:   (local.get $0)
 ;; CHECK-BIN-NEXT:  )
 ;; CHECK-BIN-NEXT: )
 (func $f32.load_f16 (param $0 i32) (result f32)
  (f32.load_f16
   (local.get $0)
  )
 )
 ;; CHECK-TEXT:      (func $f32.store_f16 (type $1) (param $0 i32) (param $1 f32)
 ;; CHECK-TEXT-NEXT:  (f32.store_f16
 ;; CHECK-TEXT-NEXT:   (local.get $0)
 ;; CHECK-TEXT-NEXT:   (local.get $1)
 ;; CHECK-TEXT-NEXT:  )
 ;; CHECK-TEXT-NEXT: )
 ;; CHECK-BIN:      (func $f32.store_f16 (type $1) (param $0 i32) (param $1 f32)
 ;; CHECK-BIN-NEXT:  (f32.store_f16
 ;; CHECK-BIN-NEXT:   (local.get $0)
 ;; CHECK-BIN-NEXT:   (local.get $1)
 ;; CHECK-BIN-NEXT:  )
 ;; CHECK-BIN-NEXT: )
 (func $f32.store_f16 (param $0 i32) (param $1 f32)
  (f32.store_f16
   (local.get $0)
   (local.get $1)
  )
 )

 ;; CHECK-TEXT:      (func $f16x8.splat (type $2) (param $0 f32) (result v128)
 ;; CHECK-TEXT-NEXT:  (f16x8.splat
 ;; CHECK-TEXT-NEXT:   (local.get $0)
 ;; CHECK-TEXT-NEXT:  )
 ;; CHECK-TEXT-NEXT: )
 ;; CHECK-BIN:      (func $f16x8.splat (type $2) (param $0 f32) (result v128)
 ;; CHECK-BIN-NEXT:  (f16x8.splat
 ;; CHECK-BIN-NEXT:   (local.get $0)
 ;; CHECK-BIN-NEXT:  )
 ;; CHECK-BIN-NEXT: )
 (func $f16x8.splat (param $0 f32) (result v128)
  (f16x8.splat
   (local.get $0)
  )
 )

  ;; CHECK-TEXT:      (func $f16x8.extract_lane (type $3) (param $0 v128) (result f32)
  ;; CHECK-TEXT-NEXT:  (f16x8.extract_lane 0
  ;; CHECK-TEXT-NEXT:   (local.get $0)
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT: )
  ;; CHECK-BIN:      (func $f16x8.extract_lane (type $3) (param $0 v128) (result f32)
  ;; CHECK-BIN-NEXT:  (f16x8.extract_lane 0
  ;; CHECK-BIN-NEXT:   (local.get $0)
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT: )
  (func $f16x8.extract_lane (param $0 v128) (result f32)
  (f16x8.extract_lane 0
   (local.get $0)
  )
 )

  ;; CHECK-TEXT:      (func $f16x8.replace_lane (type $4) (param $0 v128) (param $1 f32) (result v128)
  ;; CHECK-TEXT-NEXT:  (f16x8.replace_lane 0
  ;; CHECK-TEXT-NEXT:   (local.get $0)
  ;; CHECK-TEXT-NEXT:   (local.get $1)
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT: )
  ;; CHECK-BIN:      (func $f16x8.replace_lane (type $4) (param $0 v128) (param $1 f32) (result v128)
  ;; CHECK-BIN-NEXT:  (f16x8.replace_lane 0
  ;; CHECK-BIN-NEXT:   (local.get $0)
  ;; CHECK-BIN-NEXT:   (local.get $1)
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT: )
  (func $f16x8.replace_lane (param $0 v128) (param $1 f32) (result v128)
  (f16x8.replace_lane 0
   (local.get $0)
   (local.get $1)
  )
 )

)
;; CHECK-BIN-NODEBUG:      (type $0 (func (param i32) (result f32)))

;; CHECK-BIN-NODEBUG:      (type $1 (func (param i32 f32)))

;; CHECK-BIN-NODEBUG:      (type $2 (func (param f32) (result v128)))

;; CHECK-BIN-NODEBUG:      (type $3 (func (param v128) (result f32)))

;; CHECK-BIN-NODEBUG:      (type $4 (func (param v128 f32) (result v128)))

;; CHECK-BIN-NODEBUG:      (memory $0 1 1)

;; CHECK-BIN-NODEBUG:      (func $0 (type $0) (param $0 i32) (result f32)
;; CHECK-BIN-NODEBUG-NEXT:  (f32.load_f16
;; CHECK-BIN-NODEBUG-NEXT:   (local.get $0)
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT: )

;; CHECK-BIN-NODEBUG:      (func $1 (type $1) (param $0 i32) (param $1 f32)
;; CHECK-BIN-NODEBUG-NEXT:  (f32.store_f16
;; CHECK-BIN-NODEBUG-NEXT:   (local.get $0)
;; CHECK-BIN-NODEBUG-NEXT:   (local.get $1)
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT: )

;; CHECK-BIN-NODEBUG:      (func $2 (type $2) (param $0 f32) (result v128)
;; CHECK-BIN-NODEBUG-NEXT:  (f16x8.splat
;; CHECK-BIN-NODEBUG-NEXT:   (local.get $0)
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT: )

;; CHECK-BIN-NODEBUG:      (func $3 (type $3) (param $0 v128) (result f32)
;; CHECK-BIN-NODEBUG-NEXT:  (f16x8.extract_lane 0
;; CHECK-BIN-NODEBUG-NEXT:   (local.get $0)
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT: )

;; CHECK-BIN-NODEBUG:      (func $4 (type $4) (param $0 v128) (param $1 f32) (result v128)
;; CHECK-BIN-NODEBUG-NEXT:  (f16x8.replace_lane 0
;; CHECK-BIN-NODEBUG-NEXT:   (local.get $0)
;; CHECK-BIN-NODEBUG-NEXT:   (local.get $1)
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT: )
