;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.

;; RUN: wasm-opt %s -all -o %t.text.wast -g -S
;; RUN: wasm-as %s -all -g -o %t.wasm
;; RUN: wasm-dis %t.wasm -all -o %t.bin.wast
;; RUN: wasm-as %s -all -o %t.nodebug.wasm
;; RUN: wasm-dis %t.nodebug.wasm -all -o %t.bin.nodebug.wast
;; RUN: cat %t.text.wast | filecheck %s --check-prefix=CHECK-TEXT
;; RUN: cat %t.bin.wast | filecheck %s --check-prefix=CHECK-BIN
;; RUN: cat %t.bin.nodebug.wast | filecheck %s --check-prefix=CHECK-BIN-NODEBUG

(module
 ;; CHECK-TEXT:      (type $ft1 (func (param i32 i64 i32) (result i32)))
 ;; CHECK-BIN:      (type $ft1 (func (param i32 i64 i32) (result i32)))
 (type $ft1 (func (param i32 i64 i32) (result i32)))
 ;; CHECK-TEXT:      (type $ct1 (cont $ft1))

 ;; CHECK-TEXT:      (type $ft2 (func (param i32) (result i32)))
 ;; CHECK-BIN:      (type $ct1 (cont $ft1))

 ;; CHECK-BIN:      (type $ft2 (func (param i32) (result i32)))
 (type $ft2 (func (param i32) (result i32)))
 (type $ct1 (cont $ft1))
 ;; CHECK-TEXT:      (type $ct2 (cont $ft2))
 ;; CHECK-BIN:      (type $ct2 (cont $ft2))
 (type $ct2 (cont $ft2))

 ;; CHECK-TEXT:      (type $4 (func (param (ref $ct1)) (result (ref $ct2))))

 ;; CHECK-TEXT:      (type $5 (func (param (ref $ct1)) (result (ref $ct1))))

 ;; CHECK-TEXT:      (func $f (type $4) (param $x (ref $ct1)) (result (ref $ct2))
 ;; CHECK-TEXT-NEXT:  (cont.bind $ct1 $ct2
 ;; CHECK-TEXT-NEXT:   (i32.const 123)
 ;; CHECK-TEXT-NEXT:   (i64.const 456)
 ;; CHECK-TEXT-NEXT:   (local.get $x)
 ;; CHECK-TEXT-NEXT:  )
 ;; CHECK-TEXT-NEXT: )
 ;; CHECK-BIN:      (type $4 (func (param (ref $ct1)) (result (ref $ct2))))

 ;; CHECK-BIN:      (type $5 (func (param (ref $ct1)) (result (ref $ct1))))

 ;; CHECK-BIN:      (func $f (type $4) (param $x (ref $ct1)) (result (ref $ct2))
 ;; CHECK-BIN-NEXT:  (cont.bind $ct1 $ct2
 ;; CHECK-BIN-NEXT:   (i32.const 123)
 ;; CHECK-BIN-NEXT:   (i64.const 456)
 ;; CHECK-BIN-NEXT:   (local.get $x)
 ;; CHECK-BIN-NEXT:  )
 ;; CHECK-BIN-NEXT: )
 (func $f (param $x (ref $ct1)) (result (ref $ct2))
  (cont.bind $ct1 $ct2
   (i32.const 123)
   (i64.const 456)
   (local.get $x)
  )
 )

 ;; CHECK-TEXT:      (func $g (type $5) (param $x (ref $ct1)) (result (ref $ct1))
 ;; CHECK-TEXT-NEXT:  (cont.bind $ct1 $ct1
 ;; CHECK-TEXT-NEXT:   (local.get $x)
 ;; CHECK-TEXT-NEXT:  )
 ;; CHECK-TEXT-NEXT: )
 ;; CHECK-BIN:      (func $g (type $5) (param $x (ref $ct1)) (result (ref $ct1))
 ;; CHECK-BIN-NEXT:  (cont.bind $ct1 $ct1
 ;; CHECK-BIN-NEXT:   (local.get $x)
 ;; CHECK-BIN-NEXT:  )
 ;; CHECK-BIN-NEXT: )
 (func $g (param $x (ref $ct1)) (result (ref $ct1))
  (cont.bind $ct1 $ct1
   (local.get $x)
  )
 )
)
;; CHECK-BIN-NODEBUG:      (type $0 (func (param i32 i64 i32) (result i32)))

;; CHECK-BIN-NODEBUG:      (type $1 (cont $0))

;; CHECK-BIN-NODEBUG:      (type $2 (func (param i32) (result i32)))

;; CHECK-BIN-NODEBUG:      (type $3 (cont $2))

;; CHECK-BIN-NODEBUG:      (type $4 (func (param (ref $1)) (result (ref $3))))

;; CHECK-BIN-NODEBUG:      (type $5 (func (param (ref $1)) (result (ref $1))))

;; CHECK-BIN-NODEBUG:      (func $0 (type $4) (param $0 (ref $1)) (result (ref $3))
;; CHECK-BIN-NODEBUG-NEXT:  (cont.bind $1 $3
;; CHECK-BIN-NODEBUG-NEXT:   (i32.const 123)
;; CHECK-BIN-NODEBUG-NEXT:   (i64.const 456)
;; CHECK-BIN-NODEBUG-NEXT:   (local.get $0)
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT: )

;; CHECK-BIN-NODEBUG:      (func $1 (type $5) (param $0 (ref $1)) (result (ref $1))
;; CHECK-BIN-NODEBUG-NEXT:  (cont.bind $1 $1
;; CHECK-BIN-NODEBUG-NEXT:   (local.get $0)
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT: )
