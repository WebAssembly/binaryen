;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.

;; RUN: wasm-as %s -all -g -o %t.wasm
;; RUN: wasm-dis %t.wasm -all -o %t.wast
;; RUN: wasm-as %s -all -o %t.nodebug.wasm
;; RUN: wasm-dis %t.nodebug.wasm -all -o %t.nodebug.wast
;; RUN: wasm-opt %t.wast -all -o %t.text.wast -g -S
;; RUN: cat %t.wast | filecheck %s --check-prefix=CHECK-BINARY
;; RUN: cat %t.nodebug.wast | filecheck %s --check-prefix=CHECK-NODEBUG
;; RUN: cat %t.text.wast | filecheck %s --check-prefix=CHECK-TEXT

(module
 ;; CHECK-BINARY:      (type $ft (func (param i32) (result i32)))
 ;; CHECK-TEXT:      (type $ft (func (param i32) (result i32)))
 (type $ft (func (param i32) (result i32)))
 ;; CHECK-BINARY:      (type $ct (cont $ft))
 ;; CHECK-TEXT:      (type $ct (cont $ft))
 (type $ct (cont $ft))

 ;; CHECK-BINARY:      (type $2 (func (param (ref $ct)) (result (ref $ct))))

 ;; CHECK-BINARY:      (func $id (type $2) (param $x (ref $ct)) (result (ref $ct))
 ;; CHECK-BINARY-NEXT:  (local.get $x)
 ;; CHECK-BINARY-NEXT: )
 ;; CHECK-TEXT:      (type $2 (func (param (ref $ct)) (result (ref $ct))))

 ;; CHECK-TEXT:      (func $id (type $2) (param $x (ref $ct)) (result (ref $ct))
 ;; CHECK-TEXT-NEXT:  (local.get $x)
 ;; CHECK-TEXT-NEXT: )
 (func $id (param $x (ref $ct)) (result (ref $ct))
  (local.get $x)
 )
)
;; CHECK-NODEBUG:      (type $0 (func (param i32) (result i32)))

;; CHECK-NODEBUG:      (type $1 (cont $0))

;; CHECK-NODEBUG:      (type $2 (func (param (ref $1)) (result (ref $1))))

;; CHECK-NODEBUG:      (func $0 (type $2) (param $0 (ref $1)) (result (ref $1))
;; CHECK-NODEBUG-NEXT:  (local.get $0)
;; CHECK-NODEBUG-NEXT: )
