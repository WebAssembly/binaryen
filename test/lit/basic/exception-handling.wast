;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.

;; RUN: wasm-opt %s -all -o %t.text.wast -g -S
;; RUN: wasm-as %s -all -g -o %t.wasm
;; RUN: wasm-dis %t.wasm -all -o %t.bin.wast
;; RUN: wasm-as %s -all -o %t.nodebug.wasm
;; RUN: wasm-dis %t.nodebug.wasm -all -o %t.bin.nodebug.wast
;; RUN: cat %t.text.wast | filecheck %s --check-prefix=CHECK-TEXT
;; RUN: cat %t.bin.wast | filecheck %s --check-prefix=CHECK-BIN
;; RUN: cat %t.bin.nodebug.wast | filecheck %s --check-prefix=CHECK-BIN-NODEBUG

(module
  ;; CHECK-TEXT:      (type $0 (func))

  ;; CHECK-TEXT:      (type $1 (func (param i32)))

  ;; CHECK-TEXT:      (type $2 (func (param i64)))

  ;; CHECK-TEXT:      (type $3 (func (param i32 i64)))

  ;; CHECK-TEXT:      (type $4 (func (param eqref)))

  ;; CHECK-TEXT:      (type $5 (func (result exnref)))

  ;; CHECK-TEXT:      (tag $e-i32 (param i32))
  ;; CHECK-BIN:      (type $0 (func))

  ;; CHECK-BIN:      (type $1 (func (param i32)))

  ;; CHECK-BIN:      (type $2 (func (param i64)))

  ;; CHECK-BIN:      (type $3 (func (param i32 i64)))

  ;; CHECK-BIN:      (type $4 (func (param eqref)))

  ;; CHECK-BIN:      (type $5 (func (result exnref)))

  ;; CHECK-BIN:      (tag $e-i32 (param i32))
  (tag $e-i32 (param i32))
  ;; CHECK-TEXT:      (tag $e-i64 (param i64))
  ;; CHECK-BIN:      (tag $e-i64 (param i64))
  (tag $e-i64 (param i64))
  ;; CHECK-TEXT:      (tag $e-i32-i64 (param i32 i64))
  ;; CHECK-BIN:      (tag $e-i32-i64 (param i32 i64))
  (tag $e-i32-i64 (param i32 i64))
  ;; CHECK-TEXT:      (tag $e-eqref (param eqref))
  ;; CHECK-BIN:      (tag $e-eqref (param eqref))
  (tag $e-eqref (param (ref null eq)))
  ;; CHECK-TEXT:      (tag $e-empty)
  ;; CHECK-BIN:      (tag $e-empty)
  (tag $e-empty)

  ;; CHECK-TEXT:      (func $foo (type $0)
  ;; CHECK-TEXT-NEXT:  (nop)
  ;; CHECK-TEXT-NEXT: )
  ;; CHECK-BIN:      (func $foo (type $0)
  ;; CHECK-BIN-NEXT:  (nop)
  ;; CHECK-BIN-NEXT: )
  (func $foo)

  ;; CHECK-TEXT:      (func $bar (type $0)
  ;; CHECK-TEXT-NEXT:  (nop)
  ;; CHECK-TEXT-NEXT: )
  ;; CHECK-BIN:      (func $bar (type $0)
  ;; CHECK-BIN-NEXT:  (nop)
  ;; CHECK-BIN-NEXT: )
  (func $bar)

  ;; ---------------------------------------------------------------------------
  ;; Old Phase 3 exception handling

  ;; CHECK-TEXT:      (func $eh-test (type $0)
  ;; CHECK-TEXT-NEXT:  (local $x (i32 i64))
  ;; CHECK-TEXT-NEXT:  (try $try
  ;; CHECK-TEXT-NEXT:   (do
  ;; CHECK-TEXT-NEXT:    (throw $e-i32
  ;; CHECK-TEXT-NEXT:     (i32.const 0)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (catch $e-i32
  ;; CHECK-TEXT-NEXT:    (drop
  ;; CHECK-TEXT-NEXT:     (pop i32)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT:  (try $try0
  ;; CHECK-TEXT-NEXT:   (do
  ;; CHECK-TEXT-NEXT:    (throw $e-i32-i64
  ;; CHECK-TEXT-NEXT:     (i32.const 0)
  ;; CHECK-TEXT-NEXT:     (i64.const 0)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (catch $e-i32-i64
  ;; CHECK-TEXT-NEXT:    (local.set $x
  ;; CHECK-TEXT-NEXT:     (pop i32 i64)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:    (drop
  ;; CHECK-TEXT-NEXT:     (tuple.extract 2 0
  ;; CHECK-TEXT-NEXT:      (local.get $x)
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT:  (block $l11
  ;; CHECK-TEXT-NEXT:   (try $l1
  ;; CHECK-TEXT-NEXT:    (do
  ;; CHECK-TEXT-NEXT:     (br $l11)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:    (catch $e-i32
  ;; CHECK-TEXT-NEXT:     (drop
  ;; CHECK-TEXT-NEXT:      (pop i32)
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:     (br $l11)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT:  (try $try2
  ;; CHECK-TEXT-NEXT:   (do
  ;; CHECK-TEXT-NEXT:    (nop)
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (catch $e-i32
  ;; CHECK-TEXT-NEXT:    (drop
  ;; CHECK-TEXT-NEXT:     (pop i32)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT:  (try $try3
  ;; CHECK-TEXT-NEXT:   (do
  ;; CHECK-TEXT-NEXT:    (call $foo)
  ;; CHECK-TEXT-NEXT:    (call $bar)
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (catch $e-i32
  ;; CHECK-TEXT-NEXT:    (drop
  ;; CHECK-TEXT-NEXT:     (pop i32)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:    (call $foo)
  ;; CHECK-TEXT-NEXT:    (call $bar)
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT:  (try $try4
  ;; CHECK-TEXT-NEXT:   (do
  ;; CHECK-TEXT-NEXT:    (throw $e-i32
  ;; CHECK-TEXT-NEXT:     (i32.const 0)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (catch $e-i32
  ;; CHECK-TEXT-NEXT:    (drop
  ;; CHECK-TEXT-NEXT:     (pop i32)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (catch $e-i64
  ;; CHECK-TEXT-NEXT:    (drop
  ;; CHECK-TEXT-NEXT:     (pop i64)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT:  (try $try5
  ;; CHECK-TEXT-NEXT:   (do
  ;; CHECK-TEXT-NEXT:    (throw $e-i32
  ;; CHECK-TEXT-NEXT:     (i32.const 0)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (catch_all
  ;; CHECK-TEXT-NEXT:    (nop)
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT:  (try $try6
  ;; CHECK-TEXT-NEXT:   (do
  ;; CHECK-TEXT-NEXT:    (throw $e-i32
  ;; CHECK-TEXT-NEXT:     (i32.const 0)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (catch $e-i32
  ;; CHECK-TEXT-NEXT:    (drop
  ;; CHECK-TEXT-NEXT:     (pop i32)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (catch $e-i64
  ;; CHECK-TEXT-NEXT:    (drop
  ;; CHECK-TEXT-NEXT:     (pop i64)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (catch_all
  ;; CHECK-TEXT-NEXT:    (call $foo)
  ;; CHECK-TEXT-NEXT:    (call $bar)
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT:  (try $try7
  ;; CHECK-TEXT-NEXT:   (do
  ;; CHECK-TEXT-NEXT:    (try $try8
  ;; CHECK-TEXT-NEXT:     (do
  ;; CHECK-TEXT-NEXT:      (throw $e-i32
  ;; CHECK-TEXT-NEXT:       (i32.const 0)
  ;; CHECK-TEXT-NEXT:      )
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:     (catch $e-i32
  ;; CHECK-TEXT-NEXT:      (drop
  ;; CHECK-TEXT-NEXT:       (pop i32)
  ;; CHECK-TEXT-NEXT:      )
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:     (catch_all
  ;; CHECK-TEXT-NEXT:      (nop)
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (catch $e-i32
  ;; CHECK-TEXT-NEXT:    (drop
  ;; CHECK-TEXT-NEXT:     (pop i32)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (catch_all
  ;; CHECK-TEXT-NEXT:    (try $try9
  ;; CHECK-TEXT-NEXT:     (do
  ;; CHECK-TEXT-NEXT:      (throw $e-i32
  ;; CHECK-TEXT-NEXT:       (i32.const 0)
  ;; CHECK-TEXT-NEXT:      )
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:     (catch $e-i32
  ;; CHECK-TEXT-NEXT:      (drop
  ;; CHECK-TEXT-NEXT:       (pop i32)
  ;; CHECK-TEXT-NEXT:      )
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:     (catch_all
  ;; CHECK-TEXT-NEXT:      (nop)
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT:  (try $try10
  ;; CHECK-TEXT-NEXT:   (do
  ;; CHECK-TEXT-NEXT:    (throw $e-i32
  ;; CHECK-TEXT-NEXT:     (i32.const 0)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT: )
  ;; CHECK-BIN:      (func $eh-test (type $0)
  ;; CHECK-BIN-NEXT:  (local $x i32)
  ;; CHECK-BIN-NEXT:  (local $1 i64)
  ;; CHECK-BIN-NEXT:  (local $2 (i32 i64))
  ;; CHECK-BIN-NEXT:  (local $3 i32)
  ;; CHECK-BIN-NEXT:  (try $label$3
  ;; CHECK-BIN-NEXT:   (do
  ;; CHECK-BIN-NEXT:    (throw $e-i32
  ;; CHECK-BIN-NEXT:     (i32.const 0)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (catch $e-i32
  ;; CHECK-BIN-NEXT:    (drop
  ;; CHECK-BIN-NEXT:     (pop i32)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT:  (try $label$6
  ;; CHECK-BIN-NEXT:   (do
  ;; CHECK-BIN-NEXT:    (throw $e-i32-i64
  ;; CHECK-BIN-NEXT:     (i32.const 0)
  ;; CHECK-BIN-NEXT:     (i64.const 0)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (catch $e-i32-i64
  ;; CHECK-BIN-NEXT:    (local.set $2
  ;; CHECK-BIN-NEXT:     (pop i32 i64)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:    (local.set $x
  ;; CHECK-BIN-NEXT:     (block (result i32)
  ;; CHECK-BIN-NEXT:      (local.set $3
  ;; CHECK-BIN-NEXT:       (tuple.extract 2 0
  ;; CHECK-BIN-NEXT:        (local.get $2)
  ;; CHECK-BIN-NEXT:       )
  ;; CHECK-BIN-NEXT:      )
  ;; CHECK-BIN-NEXT:      (local.set $1
  ;; CHECK-BIN-NEXT:       (tuple.extract 2 1
  ;; CHECK-BIN-NEXT:        (local.get $2)
  ;; CHECK-BIN-NEXT:       )
  ;; CHECK-BIN-NEXT:      )
  ;; CHECK-BIN-NEXT:      (local.get $3)
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:    (drop
  ;; CHECK-BIN-NEXT:     (local.get $x)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT:  (block $label$7
  ;; CHECK-BIN-NEXT:   (try $label$10
  ;; CHECK-BIN-NEXT:    (do
  ;; CHECK-BIN-NEXT:     (br $label$7)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:    (catch $e-i32
  ;; CHECK-BIN-NEXT:     (drop
  ;; CHECK-BIN-NEXT:      (pop i32)
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:     (br $label$7)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT:  (try $label$13
  ;; CHECK-BIN-NEXT:   (do
  ;; CHECK-BIN-NEXT:    (nop)
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (catch $e-i32
  ;; CHECK-BIN-NEXT:    (drop
  ;; CHECK-BIN-NEXT:     (pop i32)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT:  (try $label$16
  ;; CHECK-BIN-NEXT:   (do
  ;; CHECK-BIN-NEXT:    (call $foo)
  ;; CHECK-BIN-NEXT:    (call $bar)
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (catch $e-i32
  ;; CHECK-BIN-NEXT:    (drop
  ;; CHECK-BIN-NEXT:     (pop i32)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:    (call $foo)
  ;; CHECK-BIN-NEXT:    (call $bar)
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT:  (try $label$19
  ;; CHECK-BIN-NEXT:   (do
  ;; CHECK-BIN-NEXT:    (throw $e-i32
  ;; CHECK-BIN-NEXT:     (i32.const 0)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (catch $e-i32
  ;; CHECK-BIN-NEXT:    (drop
  ;; CHECK-BIN-NEXT:     (pop i32)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (catch $e-i64
  ;; CHECK-BIN-NEXT:    (drop
  ;; CHECK-BIN-NEXT:     (pop i64)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT:  (try $label$22
  ;; CHECK-BIN-NEXT:   (do
  ;; CHECK-BIN-NEXT:    (throw $e-i32
  ;; CHECK-BIN-NEXT:     (i32.const 0)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (catch_all
  ;; CHECK-BIN-NEXT:    (nop)
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT:  (try $label$25
  ;; CHECK-BIN-NEXT:   (do
  ;; CHECK-BIN-NEXT:    (throw $e-i32
  ;; CHECK-BIN-NEXT:     (i32.const 0)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (catch $e-i32
  ;; CHECK-BIN-NEXT:    (drop
  ;; CHECK-BIN-NEXT:     (pop i32)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (catch $e-i64
  ;; CHECK-BIN-NEXT:    (drop
  ;; CHECK-BIN-NEXT:     (pop i64)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (catch_all
  ;; CHECK-BIN-NEXT:    (call $foo)
  ;; CHECK-BIN-NEXT:    (call $bar)
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT:  (try $label$34
  ;; CHECK-BIN-NEXT:   (do
  ;; CHECK-BIN-NEXT:    (try $label$29
  ;; CHECK-BIN-NEXT:     (do
  ;; CHECK-BIN-NEXT:      (throw $e-i32
  ;; CHECK-BIN-NEXT:       (i32.const 0)
  ;; CHECK-BIN-NEXT:      )
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:     (catch $e-i32
  ;; CHECK-BIN-NEXT:      (drop
  ;; CHECK-BIN-NEXT:       (pop i32)
  ;; CHECK-BIN-NEXT:      )
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:     (catch_all
  ;; CHECK-BIN-NEXT:      (nop)
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (catch $e-i32
  ;; CHECK-BIN-NEXT:    (drop
  ;; CHECK-BIN-NEXT:     (pop i32)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (catch_all
  ;; CHECK-BIN-NEXT:    (try $label$33
  ;; CHECK-BIN-NEXT:     (do
  ;; CHECK-BIN-NEXT:      (throw $e-i32
  ;; CHECK-BIN-NEXT:       (i32.const 0)
  ;; CHECK-BIN-NEXT:      )
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:     (catch $e-i32
  ;; CHECK-BIN-NEXT:      (drop
  ;; CHECK-BIN-NEXT:       (pop i32)
  ;; CHECK-BIN-NEXT:      )
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:     (catch_all
  ;; CHECK-BIN-NEXT:      (nop)
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT:  (try $label$37
  ;; CHECK-BIN-NEXT:   (do
  ;; CHECK-BIN-NEXT:    (throw $e-i32
  ;; CHECK-BIN-NEXT:     (i32.const 0)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT: )
  (func $eh-test (local $x (i32 i64))
    ;; Simple try-catch
    (try
      (do
        (throw $e-i32 (i32.const 0))
      )
      (catch $e-i32
        (drop (pop i32))
      )
    )

    ;; try-catch with multivalue tag
    (try
      (do
        (throw $e-i32-i64 (i32.const 0) (i64.const 0))
      )
      (catch $e-i32-i64
        (local.set $x (pop i32 i64))
        (drop
          (tuple.extract 2 0
            (local.get $x)
          )
        )
      )
    )

    ;; Try with a block label
    (try $l1
      (do
        (br $l1)
      )
      (catch $e-i32
        (drop (pop i32))
        (br $l1)
      )
    )

    ;; Empty try body
    (try
      (do)
      (catch $e-i32
        (drop (pop i32))
      )
    )

    ;; Multiple instructions within try and catch bodies
    (try
      (do
        (call $foo)
        (call $bar)
      )
      (catch $e-i32
        (drop (pop i32))
        (call $foo)
        (call $bar)
      )
    )

    ;; Multiple catch clauses
    (try
      (do
        (throw $e-i32 (i32.const 0))
      )
      (catch $e-i32
        (drop (pop i32))
      )
      (catch $e-i64
        (drop (pop i64))
      )
    )

    ;; Single catch-all clause
    (try
      (do
        (throw $e-i32 (i32.const 0))
      )
      (catch_all)
    )

    ;; catch and catch-all clauses together
    (try
      (do
        (throw $e-i32 (i32.const 0))
      )
      (catch $e-i32
        (drop (pop i32))
      )
      (catch $e-i64
        (drop (pop i64))
      )
      (catch_all
        (call $foo)
        (call $bar)
      )
    )

    ;; nested try-catch
    (try
      (do
        (try
          (do
            (throw $e-i32 (i32.const 0))
          )
          (catch $e-i32
            (drop (pop i32))
          )
          (catch_all)
        )
      )
      (catch $e-i32
        (drop (pop i32))
      )
      (catch_all
        (try
          (do
            (throw $e-i32 (i32.const 0))
          )
          (catch $e-i32
            (drop (pop i32))
          )
          (catch_all)
        )
      )
    )

    ;; try without catch or delegate
    (try
      (do
        (throw $e-i32 (i32.const 0))
      )
    )
  )

  ;; CHECK-TEXT:      (func $delegate-test (type $0)
  ;; CHECK-TEXT-NEXT:  (try $l0
  ;; CHECK-TEXT-NEXT:   (do
  ;; CHECK-TEXT-NEXT:    (try $try
  ;; CHECK-TEXT-NEXT:     (do
  ;; CHECK-TEXT-NEXT:      (call $foo)
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:     (delegate $l0)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:    (try $try11
  ;; CHECK-TEXT-NEXT:     (do
  ;; CHECK-TEXT-NEXT:      (call $foo)
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:     (delegate $l0)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (catch_all
  ;; CHECK-TEXT-NEXT:    (nop)
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT:  (block $l015
  ;; CHECK-TEXT-NEXT:   (try $l012
  ;; CHECK-TEXT-NEXT:    (do
  ;; CHECK-TEXT-NEXT:     (try $try13
  ;; CHECK-TEXT-NEXT:      (do
  ;; CHECK-TEXT-NEXT:       (br_if $l015
  ;; CHECK-TEXT-NEXT:        (i32.const 1)
  ;; CHECK-TEXT-NEXT:       )
  ;; CHECK-TEXT-NEXT:      )
  ;; CHECK-TEXT-NEXT:      (delegate $l012)
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:     (try $try14
  ;; CHECK-TEXT-NEXT:      (do
  ;; CHECK-TEXT-NEXT:       (br_if $l015
  ;; CHECK-TEXT-NEXT:        (i32.const 1)
  ;; CHECK-TEXT-NEXT:       )
  ;; CHECK-TEXT-NEXT:      )
  ;; CHECK-TEXT-NEXT:      (delegate $l012)
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:    (catch_all
  ;; CHECK-TEXT-NEXT:     (nop)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT:  (try $l016
  ;; CHECK-TEXT-NEXT:   (do
  ;; CHECK-TEXT-NEXT:    (try $try17
  ;; CHECK-TEXT-NEXT:     (do
  ;; CHECK-TEXT-NEXT:      (call $foo)
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:     (delegate $l016)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (delegate 0)
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT:  (try $try18
  ;; CHECK-TEXT-NEXT:   (do
  ;; CHECK-TEXT-NEXT:    (nop)
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (catch $e-empty
  ;; CHECK-TEXT-NEXT:    (nop)
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT: )
  ;; CHECK-BIN:      (func $delegate-test (type $0)
  ;; CHECK-BIN-NEXT:  (try $label$9
  ;; CHECK-BIN-NEXT:   (do
  ;; CHECK-BIN-NEXT:    (block $label$1
  ;; CHECK-BIN-NEXT:     (try $label$4
  ;; CHECK-BIN-NEXT:      (do
  ;; CHECK-BIN-NEXT:       (call $foo)
  ;; CHECK-BIN-NEXT:      )
  ;; CHECK-BIN-NEXT:      (delegate $label$9)
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:     (try $label$7
  ;; CHECK-BIN-NEXT:      (do
  ;; CHECK-BIN-NEXT:       (call $foo)
  ;; CHECK-BIN-NEXT:      )
  ;; CHECK-BIN-NEXT:      (delegate $label$9)
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (catch_all
  ;; CHECK-BIN-NEXT:    (nop)
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT:  (block $label$10
  ;; CHECK-BIN-NEXT:   (try $label$19
  ;; CHECK-BIN-NEXT:    (do
  ;; CHECK-BIN-NEXT:     (block $label$11
  ;; CHECK-BIN-NEXT:      (try $label$14
  ;; CHECK-BIN-NEXT:       (do
  ;; CHECK-BIN-NEXT:        (br_if $label$10
  ;; CHECK-BIN-NEXT:         (i32.const 1)
  ;; CHECK-BIN-NEXT:        )
  ;; CHECK-BIN-NEXT:       )
  ;; CHECK-BIN-NEXT:       (delegate $label$19)
  ;; CHECK-BIN-NEXT:      )
  ;; CHECK-BIN-NEXT:      (try $label$17
  ;; CHECK-BIN-NEXT:       (do
  ;; CHECK-BIN-NEXT:        (br_if $label$10
  ;; CHECK-BIN-NEXT:         (i32.const 1)
  ;; CHECK-BIN-NEXT:        )
  ;; CHECK-BIN-NEXT:       )
  ;; CHECK-BIN-NEXT:       (delegate $label$19)
  ;; CHECK-BIN-NEXT:      )
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:    (catch_all
  ;; CHECK-BIN-NEXT:     (nop)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT:  (try $label$25
  ;; CHECK-BIN-NEXT:   (do
  ;; CHECK-BIN-NEXT:    (block $label$20
  ;; CHECK-BIN-NEXT:     (try $label$23
  ;; CHECK-BIN-NEXT:      (do
  ;; CHECK-BIN-NEXT:       (call $foo)
  ;; CHECK-BIN-NEXT:      )
  ;; CHECK-BIN-NEXT:      (delegate $label$25)
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (delegate 0)
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT:  (try $label$28
  ;; CHECK-BIN-NEXT:   (do
  ;; CHECK-BIN-NEXT:    (nop)
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (catch $e-empty
  ;; CHECK-BIN-NEXT:    (nop)
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT: )
  (func $delegate-test
    ;; Inner delegates target an outer catch
    (try $l0
      (do
        (try
          (do
            (call $foo)
          )
          (delegate $l0) ;; by label
        )
        (try
          (do
            (call $foo)
          )
          (delegate 0) ;; by depth
        )
      )
      (catch_all)
    )

    ;; When there are both a branch and a delegate that target the same try
    ;; label. Because binaryen only allows blocks and loops to be targetted by
    ;; branches, we wrap the try with a block and make branches that block
    ;; instead, resulting in the br and delegate target different labels in the
    ;; output.
    (try $l0
      (do
        (try
          (do
            (br_if $l0 (i32.const 1))
          )
          (delegate $l0) ;; by label
        )
        (try
          (do
            (br_if $l0 (i32.const 1))
          )
          (delegate 0) ;; by depth
        )
      )
      (catch_all)
    )

    ;; The inner delegate targets the outer delegate, which in turn targets the
    ;; caller.
    (try $l0
      (do
        (try
          (do
            (call $foo)
          )
          (delegate $l0)
        )
      )
      (delegate 0)
    )

    ;; 'catch' body can be empty when the tag's type is none.
    (try
      (do)
      (catch $e-empty)
    )
  )

  ;; CHECK-TEXT:      (func $rethrow-test (type $0)
  ;; CHECK-TEXT-NEXT:  (try $l0
  ;; CHECK-TEXT-NEXT:   (do
  ;; CHECK-TEXT-NEXT:    (call $foo)
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (catch $e-i32
  ;; CHECK-TEXT-NEXT:    (drop
  ;; CHECK-TEXT-NEXT:     (pop i32)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:    (rethrow $l0)
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (catch_all
  ;; CHECK-TEXT-NEXT:    (rethrow $l0)
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT:  (block $l020
  ;; CHECK-TEXT-NEXT:   (try $l019
  ;; CHECK-TEXT-NEXT:    (do
  ;; CHECK-TEXT-NEXT:     (call $foo)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:    (catch $e-i32
  ;; CHECK-TEXT-NEXT:     (drop
  ;; CHECK-TEXT-NEXT:      (pop i32)
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:     (rethrow $l019)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:    (catch_all
  ;; CHECK-TEXT-NEXT:     (br $l020)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT:  (try $l021
  ;; CHECK-TEXT-NEXT:   (do
  ;; CHECK-TEXT-NEXT:    (call $foo)
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (catch_all
  ;; CHECK-TEXT-NEXT:    (try $try
  ;; CHECK-TEXT-NEXT:     (do
  ;; CHECK-TEXT-NEXT:      (call $foo)
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:     (catch $e-i32
  ;; CHECK-TEXT-NEXT:      (drop
  ;; CHECK-TEXT-NEXT:       (pop i32)
  ;; CHECK-TEXT-NEXT:      )
  ;; CHECK-TEXT-NEXT:      (rethrow $l021)
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:     (catch_all
  ;; CHECK-TEXT-NEXT:      (rethrow $l021)
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT:  (try $l022
  ;; CHECK-TEXT-NEXT:   (do
  ;; CHECK-TEXT-NEXT:    (call $foo)
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (catch_all
  ;; CHECK-TEXT-NEXT:    (try $try23
  ;; CHECK-TEXT-NEXT:     (do
  ;; CHECK-TEXT-NEXT:      (call $foo)
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:     (catch $e-i32
  ;; CHECK-TEXT-NEXT:      (drop
  ;; CHECK-TEXT-NEXT:       (pop i32)
  ;; CHECK-TEXT-NEXT:      )
  ;; CHECK-TEXT-NEXT:      (block $b0
  ;; CHECK-TEXT-NEXT:       (rethrow $l022)
  ;; CHECK-TEXT-NEXT:      )
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:     (catch_all
  ;; CHECK-TEXT-NEXT:      (block $b1
  ;; CHECK-TEXT-NEXT:       (rethrow $l022)
  ;; CHECK-TEXT-NEXT:      )
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT:  (try $l024
  ;; CHECK-TEXT-NEXT:   (do
  ;; CHECK-TEXT-NEXT:    (call $foo)
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (catch_all
  ;; CHECK-TEXT-NEXT:    (try $try25
  ;; CHECK-TEXT-NEXT:     (do
  ;; CHECK-TEXT-NEXT:      (rethrow $l024)
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:     (catch_all
  ;; CHECK-TEXT-NEXT:      (nop)
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT:  (try $l026
  ;; CHECK-TEXT-NEXT:   (do
  ;; CHECK-TEXT-NEXT:    (call $foo)
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (catch_all
  ;; CHECK-TEXT-NEXT:    (try $try27
  ;; CHECK-TEXT-NEXT:     (do
  ;; CHECK-TEXT-NEXT:      (rethrow $l026)
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:     (catch_all
  ;; CHECK-TEXT-NEXT:      (nop)
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT: )
  ;; CHECK-BIN:      (func $rethrow-test (type $0)
  ;; CHECK-BIN-NEXT:  (try $label$3
  ;; CHECK-BIN-NEXT:   (do
  ;; CHECK-BIN-NEXT:    (call $foo)
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (catch $e-i32
  ;; CHECK-BIN-NEXT:    (drop
  ;; CHECK-BIN-NEXT:     (pop i32)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:    (rethrow $label$3)
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (catch_all
  ;; CHECK-BIN-NEXT:    (rethrow $label$3)
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT:  (block $label$4
  ;; CHECK-BIN-NEXT:   (try $label$7
  ;; CHECK-BIN-NEXT:    (do
  ;; CHECK-BIN-NEXT:     (call $foo)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:    (catch $e-i32
  ;; CHECK-BIN-NEXT:     (drop
  ;; CHECK-BIN-NEXT:      (pop i32)
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:     (rethrow $label$7)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:    (catch_all
  ;; CHECK-BIN-NEXT:     (br $label$4)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT:  (try $label$13
  ;; CHECK-BIN-NEXT:   (do
  ;; CHECK-BIN-NEXT:    (call $foo)
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (catch_all
  ;; CHECK-BIN-NEXT:    (try $label$12
  ;; CHECK-BIN-NEXT:     (do
  ;; CHECK-BIN-NEXT:      (call $foo)
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:     (catch $e-i32
  ;; CHECK-BIN-NEXT:      (drop
  ;; CHECK-BIN-NEXT:       (pop i32)
  ;; CHECK-BIN-NEXT:      )
  ;; CHECK-BIN-NEXT:      (rethrow $label$13)
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:     (catch_all
  ;; CHECK-BIN-NEXT:      (rethrow $label$13)
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT:  (try $label$20
  ;; CHECK-BIN-NEXT:   (do
  ;; CHECK-BIN-NEXT:    (call $foo)
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (catch_all
  ;; CHECK-BIN-NEXT:    (try $label$19
  ;; CHECK-BIN-NEXT:     (do
  ;; CHECK-BIN-NEXT:      (call $foo)
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:     (catch $e-i32
  ;; CHECK-BIN-NEXT:      (drop
  ;; CHECK-BIN-NEXT:       (pop i32)
  ;; CHECK-BIN-NEXT:      )
  ;; CHECK-BIN-NEXT:      (block $label$18
  ;; CHECK-BIN-NEXT:       (rethrow $label$20)
  ;; CHECK-BIN-NEXT:      )
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:     (catch_all
  ;; CHECK-BIN-NEXT:      (rethrow $label$20)
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT:  (try $label$26
  ;; CHECK-BIN-NEXT:   (do
  ;; CHECK-BIN-NEXT:    (call $foo)
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (catch_all
  ;; CHECK-BIN-NEXT:    (try $label$25
  ;; CHECK-BIN-NEXT:     (do
  ;; CHECK-BIN-NEXT:      (rethrow $label$26)
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:     (catch_all
  ;; CHECK-BIN-NEXT:      (nop)
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT:  (try $label$32
  ;; CHECK-BIN-NEXT:   (do
  ;; CHECK-BIN-NEXT:    (call $foo)
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (catch_all
  ;; CHECK-BIN-NEXT:    (try $label$31
  ;; CHECK-BIN-NEXT:     (do
  ;; CHECK-BIN-NEXT:      (rethrow $label$32)
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:     (catch_all
  ;; CHECK-BIN-NEXT:      (nop)
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT: )
  (func $rethrow-test
    ;; Simple try-catch-rethrow
    (try $l0
      (do
        (call $foo)
      )
      (catch $e-i32
        (drop (pop i32))
        (rethrow $l0) ;; by label
      )
      (catch_all
        (rethrow 0) ;; by depth
      )
    )

    ;; When there are both a branch and a rethrow that target the same try
    ;; label. Because binaryen only allows blocks and loops to be targetted by
    ;; branches, we wrap the try with a block and make branches that block
    ;; instead, resulting in the br and rethrow target different labels in the
    ;; output.
    (try $l0
      (do
        (call $foo)
      )
      (catch $e-i32
        (drop (pop i32))
        (rethrow $l0)
      )
      (catch_all
        (br $l0)
      )
    )

    ;; One more level deep
    (try $l0
      (do
        (call $foo)
      )
      (catch_all
        (try
          (do
            (call $foo)
          )
          (catch $e-i32
            (drop (pop i32))
            (rethrow $l0) ;; by label
          )
          (catch_all
            (rethrow 1) ;; by depth
          )
        )
      )
    )

    ;; Interleaving block
    (try $l0
      (do
        (call $foo)
      )
      (catch_all
        (try
          (do
            (call $foo)
          )
          (catch $e-i32
            (drop (pop i32))
            (block $b0
              (rethrow $l0) ;; by label
            )
          )
          (catch_all
            (block $b1
              (rethrow 2) ;; by depth
            )
          )
        )
      )
    )

    ;; Within nested try, but rather in 'try' part and not 'catch'
    (try $l0
      (do
        (call $foo)
      )
      (catch_all
        (try
          (do
            (rethrow $l0) ;; by label
          )
          (catch_all)
        )
      )
    )
    (try $l0
      (do
        (call $foo)
      )
      (catch_all
        (try
          (do
            (rethrow 1) ;; by depth
          )
          (catch_all)
        )
      )
    )
  )

  ;; CHECK-TEXT:      (func $pop-test (type $0)
  ;; CHECK-TEXT-NEXT:  (try $try
  ;; CHECK-TEXT-NEXT:   (do
  ;; CHECK-TEXT-NEXT:    (nop)
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (catch $e-i32
  ;; CHECK-TEXT-NEXT:    (throw $e-i32
  ;; CHECK-TEXT-NEXT:     (if (result i32)
  ;; CHECK-TEXT-NEXT:      (pop i32)
  ;; CHECK-TEXT-NEXT:      (i32.const 0)
  ;; CHECK-TEXT-NEXT:      (i32.const 3)
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT:  (try $try28
  ;; CHECK-TEXT-NEXT:   (do
  ;; CHECK-TEXT-NEXT:    (nop)
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (catch $e-eqref
  ;; CHECK-TEXT-NEXT:    (drop
  ;; CHECK-TEXT-NEXT:     (pop anyref)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT: )
  ;; CHECK-BIN:      (func $pop-test (type $0)
  ;; CHECK-BIN-NEXT:  (try $label$5
  ;; CHECK-BIN-NEXT:   (do
  ;; CHECK-BIN-NEXT:    (nop)
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (catch $e-i32
  ;; CHECK-BIN-NEXT:    (throw $e-i32
  ;; CHECK-BIN-NEXT:     (if (result i32)
  ;; CHECK-BIN-NEXT:      (pop i32)
  ;; CHECK-BIN-NEXT:      (i32.const 0)
  ;; CHECK-BIN-NEXT:      (i32.const 3)
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT:  (try $label$8
  ;; CHECK-BIN-NEXT:   (do
  ;; CHECK-BIN-NEXT:    (nop)
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (catch $e-eqref
  ;; CHECK-BIN-NEXT:    (drop
  ;; CHECK-BIN-NEXT:     (pop eqref)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT: )
  (func $pop-test
    (try
      (do)
      (catch $e-i32
        (throw $e-i32
          (if (result i32)
            ;; pop is within an if condition, so this is OK.
            (pop i32)
            (i32.const 0)
            (i32.const 3)
          )
        )
      )
    )

    (try
      (do)
      (catch $e-eqref
        (drop
          (pop anyref) ;; pop can be supertype
        )
      )
    )
  )

  ;; CHECK-TEXT:      (func $catchless-try-with-inner-delegate (type $0)
  ;; CHECK-TEXT-NEXT:  (try $label$0
  ;; CHECK-TEXT-NEXT:   (do
  ;; CHECK-TEXT-NEXT:    (try $try
  ;; CHECK-TEXT-NEXT:     (do
  ;; CHECK-TEXT-NEXT:      (throw $e-i32
  ;; CHECK-TEXT-NEXT:       (i32.const 0)
  ;; CHECK-TEXT-NEXT:      )
  ;; CHECK-TEXT-NEXT:     )
  ;; CHECK-TEXT-NEXT:     (delegate $label$0)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT: )
  ;; CHECK-BIN:      (func $catchless-try-with-inner-delegate (type $0)
  ;; CHECK-BIN-NEXT:  (try $label$6
  ;; CHECK-BIN-NEXT:   (do
  ;; CHECK-BIN-NEXT:    (block $label$1
  ;; CHECK-BIN-NEXT:     (try $label$4
  ;; CHECK-BIN-NEXT:      (do
  ;; CHECK-BIN-NEXT:       (throw $e-i32
  ;; CHECK-BIN-NEXT:        (i32.const 0)
  ;; CHECK-BIN-NEXT:       )
  ;; CHECK-BIN-NEXT:      )
  ;; CHECK-BIN-NEXT:      (delegate $label$6)
  ;; CHECK-BIN-NEXT:     )
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT: )
  (func $catchless-try-with-inner-delegate
    (try $label$0
      (do
        (try
          (do
            (throw $e-i32
              (i32.const 0)
            )
          )
          (delegate $label$0)
        )
      )
    )
  )

  ;; When 'delegate' is next to a nested block, make sure its delegate argument
  ;; is parsed correctly.

  ;; CHECK-TEXT:      (func $nested-block-and-try (type $0)
  ;; CHECK-TEXT-NEXT:  (block $l0
  ;; CHECK-TEXT-NEXT:   (block $l1
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (try $try
  ;; CHECK-TEXT-NEXT:    (do
  ;; CHECK-TEXT-NEXT:     (nop)
  ;; CHECK-TEXT-NEXT:    )
  ;; CHECK-TEXT-NEXT:    (delegate 1)
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT:  (nop)
  ;; CHECK-TEXT-NEXT: )
  ;; CHECK-BIN:      (func $nested-block-and-try (type $0)
  ;; CHECK-BIN-NEXT:  (block $label$1
  ;; CHECK-BIN-NEXT:   (block $label$2
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (try $label$5
  ;; CHECK-BIN-NEXT:    (do
  ;; CHECK-BIN-NEXT:     (nop)
  ;; CHECK-BIN-NEXT:    )
  ;; CHECK-BIN-NEXT:    (delegate 1)
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT:  (nop)
  ;; CHECK-BIN-NEXT: )
  (func $nested-block-and-try
    (block $l0
      (block $l1)
      (try
        (do)
        (delegate 1) ;; to caller
      )
    )
    (nop)
  )

  ;; ---------------------------------------------------------------------------
  ;; New exception handling

  ;; CHECK-TEXT:      (func $exnref-test (type $5) (result exnref)
  ;; CHECK-TEXT-NEXT:  (local $exn exnref)
  ;; CHECK-TEXT-NEXT:  (local $null-exn nullexnref)
  ;; CHECK-TEXT-NEXT:  (if (result exnref)
  ;; CHECK-TEXT-NEXT:   (i32.const 1)
  ;; CHECK-TEXT-NEXT:   (if (result nullexnref)
  ;; CHECK-TEXT-NEXT:    (i32.const 1)
  ;; CHECK-TEXT-NEXT:    (local.get $null-exn)
  ;; CHECK-TEXT-NEXT:    (ref.null noexn)
  ;; CHECK-TEXT-NEXT:   )
  ;; CHECK-TEXT-NEXT:   (local.get $exn)
  ;; CHECK-TEXT-NEXT:  )
  ;; CHECK-TEXT-NEXT: )
  ;; CHECK-BIN:      (func $exnref-test (type $5) (result exnref)
  ;; CHECK-BIN-NEXT:  (local $exn exnref)
  ;; CHECK-BIN-NEXT:  (local $null-exn nullexnref)
  ;; CHECK-BIN-NEXT:  (if (result exnref)
  ;; CHECK-BIN-NEXT:   (i32.const 1)
  ;; CHECK-BIN-NEXT:   (if (result nullexnref)
  ;; CHECK-BIN-NEXT:    (i32.const 1)
  ;; CHECK-BIN-NEXT:    (local.get $null-exn)
  ;; CHECK-BIN-NEXT:    (ref.null noexn)
  ;; CHECK-BIN-NEXT:   )
  ;; CHECK-BIN-NEXT:   (local.get $exn)
  ;; CHECK-BIN-NEXT:  )
  ;; CHECK-BIN-NEXT: )
  (func $exnref-test (result exnref) (local $exn exnref) (local $null-exn nullexnref)
    (if (result exnref)
      (i32.const 1)
      (if (result nullexnref)
        (i32.const 1)
        (local.get $null-exn)
        (ref.null noexn)
      )
      (local.get $exn)
    )
  )
)
;; CHECK-BIN-NODEBUG:      (type $0 (func))

;; CHECK-BIN-NODEBUG:      (type $1 (func (param i32)))

;; CHECK-BIN-NODEBUG:      (type $2 (func (param i64)))

;; CHECK-BIN-NODEBUG:      (type $3 (func (param i32 i64)))

;; CHECK-BIN-NODEBUG:      (type $4 (func (param eqref)))

;; CHECK-BIN-NODEBUG:      (type $5 (func (result exnref)))

;; CHECK-BIN-NODEBUG:      (tag $tag$0 (param i32))

;; CHECK-BIN-NODEBUG:      (tag $tag$1 (param i64))

;; CHECK-BIN-NODEBUG:      (tag $tag$2 (param i32 i64))

;; CHECK-BIN-NODEBUG:      (tag $tag$3 (param eqref))

;; CHECK-BIN-NODEBUG:      (tag $tag$4)

;; CHECK-BIN-NODEBUG:      (func $0 (type $0)
;; CHECK-BIN-NODEBUG-NEXT:  (nop)
;; CHECK-BIN-NODEBUG-NEXT: )

;; CHECK-BIN-NODEBUG:      (func $1 (type $0)
;; CHECK-BIN-NODEBUG-NEXT:  (nop)
;; CHECK-BIN-NODEBUG-NEXT: )

;; CHECK-BIN-NODEBUG:      (func $2 (type $0)
;; CHECK-BIN-NODEBUG-NEXT:  (local $0 i32)
;; CHECK-BIN-NODEBUG-NEXT:  (local $1 i64)
;; CHECK-BIN-NODEBUG-NEXT:  (local $2 (i32 i64))
;; CHECK-BIN-NODEBUG-NEXT:  (local $3 i32)
;; CHECK-BIN-NODEBUG-NEXT:  (try $label$3
;; CHECK-BIN-NODEBUG-NEXT:   (do
;; CHECK-BIN-NODEBUG-NEXT:    (throw $tag$0
;; CHECK-BIN-NODEBUG-NEXT:     (i32.const 0)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (catch $tag$0
;; CHECK-BIN-NODEBUG-NEXT:    (drop
;; CHECK-BIN-NODEBUG-NEXT:     (pop i32)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT:  (try $label$6
;; CHECK-BIN-NODEBUG-NEXT:   (do
;; CHECK-BIN-NODEBUG-NEXT:    (throw $tag$2
;; CHECK-BIN-NODEBUG-NEXT:     (i32.const 0)
;; CHECK-BIN-NODEBUG-NEXT:     (i64.const 0)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (catch $tag$2
;; CHECK-BIN-NODEBUG-NEXT:    (local.set $2
;; CHECK-BIN-NODEBUG-NEXT:     (pop i32 i64)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:    (local.set $0
;; CHECK-BIN-NODEBUG-NEXT:     (block (result i32)
;; CHECK-BIN-NODEBUG-NEXT:      (local.set $3
;; CHECK-BIN-NODEBUG-NEXT:       (tuple.extract 2 0
;; CHECK-BIN-NODEBUG-NEXT:        (local.get $2)
;; CHECK-BIN-NODEBUG-NEXT:       )
;; CHECK-BIN-NODEBUG-NEXT:      )
;; CHECK-BIN-NODEBUG-NEXT:      (local.set $1
;; CHECK-BIN-NODEBUG-NEXT:       (tuple.extract 2 1
;; CHECK-BIN-NODEBUG-NEXT:        (local.get $2)
;; CHECK-BIN-NODEBUG-NEXT:       )
;; CHECK-BIN-NODEBUG-NEXT:      )
;; CHECK-BIN-NODEBUG-NEXT:      (local.get $3)
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:    (drop
;; CHECK-BIN-NODEBUG-NEXT:     (local.get $0)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT:  (block $label$7
;; CHECK-BIN-NODEBUG-NEXT:   (try $label$10
;; CHECK-BIN-NODEBUG-NEXT:    (do
;; CHECK-BIN-NODEBUG-NEXT:     (br $label$7)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:    (catch $tag$0
;; CHECK-BIN-NODEBUG-NEXT:     (drop
;; CHECK-BIN-NODEBUG-NEXT:      (pop i32)
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:     (br $label$7)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT:  (try $label$13
;; CHECK-BIN-NODEBUG-NEXT:   (do
;; CHECK-BIN-NODEBUG-NEXT:    (nop)
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (catch $tag$0
;; CHECK-BIN-NODEBUG-NEXT:    (drop
;; CHECK-BIN-NODEBUG-NEXT:     (pop i32)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT:  (try $label$16
;; CHECK-BIN-NODEBUG-NEXT:   (do
;; CHECK-BIN-NODEBUG-NEXT:    (call $0)
;; CHECK-BIN-NODEBUG-NEXT:    (call $1)
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (catch $tag$0
;; CHECK-BIN-NODEBUG-NEXT:    (drop
;; CHECK-BIN-NODEBUG-NEXT:     (pop i32)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:    (call $0)
;; CHECK-BIN-NODEBUG-NEXT:    (call $1)
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT:  (try $label$19
;; CHECK-BIN-NODEBUG-NEXT:   (do
;; CHECK-BIN-NODEBUG-NEXT:    (throw $tag$0
;; CHECK-BIN-NODEBUG-NEXT:     (i32.const 0)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (catch $tag$0
;; CHECK-BIN-NODEBUG-NEXT:    (drop
;; CHECK-BIN-NODEBUG-NEXT:     (pop i32)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (catch $tag$1
;; CHECK-BIN-NODEBUG-NEXT:    (drop
;; CHECK-BIN-NODEBUG-NEXT:     (pop i64)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT:  (try $label$22
;; CHECK-BIN-NODEBUG-NEXT:   (do
;; CHECK-BIN-NODEBUG-NEXT:    (throw $tag$0
;; CHECK-BIN-NODEBUG-NEXT:     (i32.const 0)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (catch_all
;; CHECK-BIN-NODEBUG-NEXT:    (nop)
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT:  (try $label$25
;; CHECK-BIN-NODEBUG-NEXT:   (do
;; CHECK-BIN-NODEBUG-NEXT:    (throw $tag$0
;; CHECK-BIN-NODEBUG-NEXT:     (i32.const 0)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (catch $tag$0
;; CHECK-BIN-NODEBUG-NEXT:    (drop
;; CHECK-BIN-NODEBUG-NEXT:     (pop i32)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (catch $tag$1
;; CHECK-BIN-NODEBUG-NEXT:    (drop
;; CHECK-BIN-NODEBUG-NEXT:     (pop i64)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (catch_all
;; CHECK-BIN-NODEBUG-NEXT:    (call $0)
;; CHECK-BIN-NODEBUG-NEXT:    (call $1)
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT:  (try $label$34
;; CHECK-BIN-NODEBUG-NEXT:   (do
;; CHECK-BIN-NODEBUG-NEXT:    (try $label$29
;; CHECK-BIN-NODEBUG-NEXT:     (do
;; CHECK-BIN-NODEBUG-NEXT:      (throw $tag$0
;; CHECK-BIN-NODEBUG-NEXT:       (i32.const 0)
;; CHECK-BIN-NODEBUG-NEXT:      )
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:     (catch $tag$0
;; CHECK-BIN-NODEBUG-NEXT:      (drop
;; CHECK-BIN-NODEBUG-NEXT:       (pop i32)
;; CHECK-BIN-NODEBUG-NEXT:      )
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:     (catch_all
;; CHECK-BIN-NODEBUG-NEXT:      (nop)
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (catch $tag$0
;; CHECK-BIN-NODEBUG-NEXT:    (drop
;; CHECK-BIN-NODEBUG-NEXT:     (pop i32)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (catch_all
;; CHECK-BIN-NODEBUG-NEXT:    (try $label$33
;; CHECK-BIN-NODEBUG-NEXT:     (do
;; CHECK-BIN-NODEBUG-NEXT:      (throw $tag$0
;; CHECK-BIN-NODEBUG-NEXT:       (i32.const 0)
;; CHECK-BIN-NODEBUG-NEXT:      )
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:     (catch $tag$0
;; CHECK-BIN-NODEBUG-NEXT:      (drop
;; CHECK-BIN-NODEBUG-NEXT:       (pop i32)
;; CHECK-BIN-NODEBUG-NEXT:      )
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:     (catch_all
;; CHECK-BIN-NODEBUG-NEXT:      (nop)
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT:  (try $label$37
;; CHECK-BIN-NODEBUG-NEXT:   (do
;; CHECK-BIN-NODEBUG-NEXT:    (throw $tag$0
;; CHECK-BIN-NODEBUG-NEXT:     (i32.const 0)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT: )

;; CHECK-BIN-NODEBUG:      (func $3 (type $0)
;; CHECK-BIN-NODEBUG-NEXT:  (try $label$9
;; CHECK-BIN-NODEBUG-NEXT:   (do
;; CHECK-BIN-NODEBUG-NEXT:    (block $label$1
;; CHECK-BIN-NODEBUG-NEXT:     (try $label$4
;; CHECK-BIN-NODEBUG-NEXT:      (do
;; CHECK-BIN-NODEBUG-NEXT:       (call $0)
;; CHECK-BIN-NODEBUG-NEXT:      )
;; CHECK-BIN-NODEBUG-NEXT:      (delegate $label$9)
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:     (try $label$7
;; CHECK-BIN-NODEBUG-NEXT:      (do
;; CHECK-BIN-NODEBUG-NEXT:       (call $0)
;; CHECK-BIN-NODEBUG-NEXT:      )
;; CHECK-BIN-NODEBUG-NEXT:      (delegate $label$9)
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (catch_all
;; CHECK-BIN-NODEBUG-NEXT:    (nop)
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT:  (block $label$10
;; CHECK-BIN-NODEBUG-NEXT:   (try $label$19
;; CHECK-BIN-NODEBUG-NEXT:    (do
;; CHECK-BIN-NODEBUG-NEXT:     (block $label$11
;; CHECK-BIN-NODEBUG-NEXT:      (try $label$14
;; CHECK-BIN-NODEBUG-NEXT:       (do
;; CHECK-BIN-NODEBUG-NEXT:        (br_if $label$10
;; CHECK-BIN-NODEBUG-NEXT:         (i32.const 1)
;; CHECK-BIN-NODEBUG-NEXT:        )
;; CHECK-BIN-NODEBUG-NEXT:       )
;; CHECK-BIN-NODEBUG-NEXT:       (delegate $label$19)
;; CHECK-BIN-NODEBUG-NEXT:      )
;; CHECK-BIN-NODEBUG-NEXT:      (try $label$17
;; CHECK-BIN-NODEBUG-NEXT:       (do
;; CHECK-BIN-NODEBUG-NEXT:        (br_if $label$10
;; CHECK-BIN-NODEBUG-NEXT:         (i32.const 1)
;; CHECK-BIN-NODEBUG-NEXT:        )
;; CHECK-BIN-NODEBUG-NEXT:       )
;; CHECK-BIN-NODEBUG-NEXT:       (delegate $label$19)
;; CHECK-BIN-NODEBUG-NEXT:      )
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:    (catch_all
;; CHECK-BIN-NODEBUG-NEXT:     (nop)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT:  (try $label$25
;; CHECK-BIN-NODEBUG-NEXT:   (do
;; CHECK-BIN-NODEBUG-NEXT:    (block $label$20
;; CHECK-BIN-NODEBUG-NEXT:     (try $label$23
;; CHECK-BIN-NODEBUG-NEXT:      (do
;; CHECK-BIN-NODEBUG-NEXT:       (call $0)
;; CHECK-BIN-NODEBUG-NEXT:      )
;; CHECK-BIN-NODEBUG-NEXT:      (delegate $label$25)
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (delegate 0)
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT:  (try $label$28
;; CHECK-BIN-NODEBUG-NEXT:   (do
;; CHECK-BIN-NODEBUG-NEXT:    (nop)
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (catch $tag$4
;; CHECK-BIN-NODEBUG-NEXT:    (nop)
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT: )

;; CHECK-BIN-NODEBUG:      (func $4 (type $0)
;; CHECK-BIN-NODEBUG-NEXT:  (try $label$3
;; CHECK-BIN-NODEBUG-NEXT:   (do
;; CHECK-BIN-NODEBUG-NEXT:    (call $0)
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (catch $tag$0
;; CHECK-BIN-NODEBUG-NEXT:    (drop
;; CHECK-BIN-NODEBUG-NEXT:     (pop i32)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:    (rethrow $label$3)
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (catch_all
;; CHECK-BIN-NODEBUG-NEXT:    (rethrow $label$3)
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT:  (block $label$4
;; CHECK-BIN-NODEBUG-NEXT:   (try $label$7
;; CHECK-BIN-NODEBUG-NEXT:    (do
;; CHECK-BIN-NODEBUG-NEXT:     (call $0)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:    (catch $tag$0
;; CHECK-BIN-NODEBUG-NEXT:     (drop
;; CHECK-BIN-NODEBUG-NEXT:      (pop i32)
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:     (rethrow $label$7)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:    (catch_all
;; CHECK-BIN-NODEBUG-NEXT:     (br $label$4)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT:  (try $label$13
;; CHECK-BIN-NODEBUG-NEXT:   (do
;; CHECK-BIN-NODEBUG-NEXT:    (call $0)
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (catch_all
;; CHECK-BIN-NODEBUG-NEXT:    (try $label$12
;; CHECK-BIN-NODEBUG-NEXT:     (do
;; CHECK-BIN-NODEBUG-NEXT:      (call $0)
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:     (catch $tag$0
;; CHECK-BIN-NODEBUG-NEXT:      (drop
;; CHECK-BIN-NODEBUG-NEXT:       (pop i32)
;; CHECK-BIN-NODEBUG-NEXT:      )
;; CHECK-BIN-NODEBUG-NEXT:      (rethrow $label$13)
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:     (catch_all
;; CHECK-BIN-NODEBUG-NEXT:      (rethrow $label$13)
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT:  (try $label$20
;; CHECK-BIN-NODEBUG-NEXT:   (do
;; CHECK-BIN-NODEBUG-NEXT:    (call $0)
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (catch_all
;; CHECK-BIN-NODEBUG-NEXT:    (try $label$19
;; CHECK-BIN-NODEBUG-NEXT:     (do
;; CHECK-BIN-NODEBUG-NEXT:      (call $0)
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:     (catch $tag$0
;; CHECK-BIN-NODEBUG-NEXT:      (drop
;; CHECK-BIN-NODEBUG-NEXT:       (pop i32)
;; CHECK-BIN-NODEBUG-NEXT:      )
;; CHECK-BIN-NODEBUG-NEXT:      (block $label$18
;; CHECK-BIN-NODEBUG-NEXT:       (rethrow $label$20)
;; CHECK-BIN-NODEBUG-NEXT:      )
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:     (catch_all
;; CHECK-BIN-NODEBUG-NEXT:      (rethrow $label$20)
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT:  (try $label$26
;; CHECK-BIN-NODEBUG-NEXT:   (do
;; CHECK-BIN-NODEBUG-NEXT:    (call $0)
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (catch_all
;; CHECK-BIN-NODEBUG-NEXT:    (try $label$25
;; CHECK-BIN-NODEBUG-NEXT:     (do
;; CHECK-BIN-NODEBUG-NEXT:      (rethrow $label$26)
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:     (catch_all
;; CHECK-BIN-NODEBUG-NEXT:      (nop)
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT:  (try $label$32
;; CHECK-BIN-NODEBUG-NEXT:   (do
;; CHECK-BIN-NODEBUG-NEXT:    (call $0)
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (catch_all
;; CHECK-BIN-NODEBUG-NEXT:    (try $label$31
;; CHECK-BIN-NODEBUG-NEXT:     (do
;; CHECK-BIN-NODEBUG-NEXT:      (rethrow $label$32)
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:     (catch_all
;; CHECK-BIN-NODEBUG-NEXT:      (nop)
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT: )

;; CHECK-BIN-NODEBUG:      (func $5 (type $0)
;; CHECK-BIN-NODEBUG-NEXT:  (try $label$5
;; CHECK-BIN-NODEBUG-NEXT:   (do
;; CHECK-BIN-NODEBUG-NEXT:    (nop)
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (catch $tag$0
;; CHECK-BIN-NODEBUG-NEXT:    (throw $tag$0
;; CHECK-BIN-NODEBUG-NEXT:     (if (result i32)
;; CHECK-BIN-NODEBUG-NEXT:      (pop i32)
;; CHECK-BIN-NODEBUG-NEXT:      (i32.const 0)
;; CHECK-BIN-NODEBUG-NEXT:      (i32.const 3)
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT:  (try $label$8
;; CHECK-BIN-NODEBUG-NEXT:   (do
;; CHECK-BIN-NODEBUG-NEXT:    (nop)
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (catch $tag$3
;; CHECK-BIN-NODEBUG-NEXT:    (drop
;; CHECK-BIN-NODEBUG-NEXT:     (pop eqref)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT: )

;; CHECK-BIN-NODEBUG:      (func $6 (type $0)
;; CHECK-BIN-NODEBUG-NEXT:  (try $label$6
;; CHECK-BIN-NODEBUG-NEXT:   (do
;; CHECK-BIN-NODEBUG-NEXT:    (block $label$1
;; CHECK-BIN-NODEBUG-NEXT:     (try $label$4
;; CHECK-BIN-NODEBUG-NEXT:      (do
;; CHECK-BIN-NODEBUG-NEXT:       (throw $tag$0
;; CHECK-BIN-NODEBUG-NEXT:        (i32.const 0)
;; CHECK-BIN-NODEBUG-NEXT:       )
;; CHECK-BIN-NODEBUG-NEXT:      )
;; CHECK-BIN-NODEBUG-NEXT:      (delegate $label$6)
;; CHECK-BIN-NODEBUG-NEXT:     )
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT: )

;; CHECK-BIN-NODEBUG:      (func $7 (type $0)
;; CHECK-BIN-NODEBUG-NEXT:  (block $label$1
;; CHECK-BIN-NODEBUG-NEXT:   (block $label$2
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (try $label$5
;; CHECK-BIN-NODEBUG-NEXT:    (do
;; CHECK-BIN-NODEBUG-NEXT:     (nop)
;; CHECK-BIN-NODEBUG-NEXT:    )
;; CHECK-BIN-NODEBUG-NEXT:    (delegate 1)
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT:  (nop)
;; CHECK-BIN-NODEBUG-NEXT: )

;; CHECK-BIN-NODEBUG:      (func $8 (type $5) (result exnref)
;; CHECK-BIN-NODEBUG-NEXT:  (local $0 exnref)
;; CHECK-BIN-NODEBUG-NEXT:  (local $1 nullexnref)
;; CHECK-BIN-NODEBUG-NEXT:  (if (result exnref)
;; CHECK-BIN-NODEBUG-NEXT:   (i32.const 1)
;; CHECK-BIN-NODEBUG-NEXT:   (if (result nullexnref)
;; CHECK-BIN-NODEBUG-NEXT:    (i32.const 1)
;; CHECK-BIN-NODEBUG-NEXT:    (local.get $1)
;; CHECK-BIN-NODEBUG-NEXT:    (ref.null noexn)
;; CHECK-BIN-NODEBUG-NEXT:   )
;; CHECK-BIN-NODEBUG-NEXT:   (local.get $0)
;; CHECK-BIN-NODEBUG-NEXT:  )
;; CHECK-BIN-NODEBUG-NEXT: )
