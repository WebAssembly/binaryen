;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.

;; RUN: wasm-opt %s -all -S -o - | filecheck %s

(module
  ;; CHECK:      (func $br_on_null-one (type $3) (result i32)
  ;; CHECK-NEXT:  (local $scratch nullref)
  ;; CHECK-NEXT:  (local $scratch_1 i32)
  ;; CHECK-NEXT:  (local $scratch_2 i32)
  ;; CHECK-NEXT:  (local $scratch_3 (ref none))
  ;; CHECK-NEXT:  (block $block (result i32)
  ;; CHECK-NEXT:   (block $block0
  ;; CHECK-NEXT:    (local.set $scratch_1
  ;; CHECK-NEXT:     (block (result i32)
  ;; CHECK-NEXT:      (local.set $scratch_2
  ;; CHECK-NEXT:       (i32.const 0)
  ;; CHECK-NEXT:      )
  ;; CHECK-NEXT:      (local.set $scratch
  ;; CHECK-NEXT:       (ref.null none)
  ;; CHECK-NEXT:      )
  ;; CHECK-NEXT:      (local.get $scratch_2)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (local.set $scratch_3
  ;; CHECK-NEXT:     (br_on_null $block0
  ;; CHECK-NEXT:      (local.get $scratch)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (drop
  ;; CHECK-NEXT:     (local.get $scratch_1)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (drop
  ;; CHECK-NEXT:     (local.get $scratch_3)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (br $block
  ;; CHECK-NEXT:     (unreachable)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (local.get $scratch_1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $br_on_null-one (result i32)
    block (result i32)
      i32.const 0
      ref.null none
      br_on_null 0
      unreachable
    end
  )

  ;; CHECK:      (func $br_on_null-two (type $0) (result i32 i64)
  ;; CHECK-NEXT:  (local $scratch nullref)
  ;; CHECK-NEXT:  (local $scratch_1 (tuple i32 i64))
  ;; CHECK-NEXT:  (local $scratch_2 i64)
  ;; CHECK-NEXT:  (local $scratch_3 (ref none))
  ;; CHECK-NEXT:  (block $block (type $0) (result i32 i64)
  ;; CHECK-NEXT:   (block $block0
  ;; CHECK-NEXT:    (local.set $scratch_1
  ;; CHECK-NEXT:     (tuple.make 2
  ;; CHECK-NEXT:      (i32.const 0)
  ;; CHECK-NEXT:      (block (result i64)
  ;; CHECK-NEXT:       (local.set $scratch_2
  ;; CHECK-NEXT:        (i64.const 1)
  ;; CHECK-NEXT:       )
  ;; CHECK-NEXT:       (local.set $scratch
  ;; CHECK-NEXT:        (ref.null none)
  ;; CHECK-NEXT:       )
  ;; CHECK-NEXT:       (local.get $scratch_2)
  ;; CHECK-NEXT:      )
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (local.set $scratch_3
  ;; CHECK-NEXT:     (br_on_null $block0
  ;; CHECK-NEXT:      (local.get $scratch)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (tuple.drop 2
  ;; CHECK-NEXT:     (local.get $scratch_1)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (drop
  ;; CHECK-NEXT:     (local.get $scratch_3)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (br $block
  ;; CHECK-NEXT:     (unreachable)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (local.get $scratch_1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $br_on_null-two (result i32 i64)
    block (result i32 i64)
      i32.const 0
      i64.const 1
      ref.null none
      br_on_null 0
      unreachable
    end
  )

  ;; CHECK:      (func $br_on_non_null-one (type $1) (result i32 (ref any))
  ;; CHECK-NEXT:  (local $scratch nullref)
  ;; CHECK-NEXT:  (local $scratch_1 i32)
  ;; CHECK-NEXT:  (local $scratch_2 i32)
  ;; CHECK-NEXT:  (local $scratch_3 (ref any))
  ;; CHECK-NEXT:  (block $block (type $1) (result i32 (ref any))
  ;; CHECK-NEXT:   (local.set $scratch_3
  ;; CHECK-NEXT:    (block $block0 (result (ref any))
  ;; CHECK-NEXT:     (local.set $scratch_1
  ;; CHECK-NEXT:      (block (result i32)
  ;; CHECK-NEXT:       (local.set $scratch_2
  ;; CHECK-NEXT:        (i32.const 0)
  ;; CHECK-NEXT:       )
  ;; CHECK-NEXT:       (local.set $scratch
  ;; CHECK-NEXT:        (ref.null none)
  ;; CHECK-NEXT:       )
  ;; CHECK-NEXT:       (local.get $scratch_2)
  ;; CHECK-NEXT:      )
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:     (br_on_non_null $block0
  ;; CHECK-NEXT:      (local.get $scratch)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:     (drop
  ;; CHECK-NEXT:      (local.get $scratch_1)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:     (br $block
  ;; CHECK-NEXT:      (unreachable)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (tuple.make 2
  ;; CHECK-NEXT:    (local.get $scratch_1)
  ;; CHECK-NEXT:    (local.get $scratch_3)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $br_on_non_null-one (result i32 (ref any))
    block (result i32 (ref any))
      i32.const 0
      ref.null none
      br_on_non_null 0
      unreachable
    end
  )

  ;; CHECK:      (func $br_on_non_null-two (type $2) (result i32 i64 (ref any))
  ;; CHECK-NEXT:  (local $scratch nullref)
  ;; CHECK-NEXT:  (local $scratch_1 (tuple i32 i64))
  ;; CHECK-NEXT:  (local $scratch_2 i64)
  ;; CHECK-NEXT:  (local $scratch_3 (ref any))
  ;; CHECK-NEXT:  (block $block (type $2) (result i32 i64 (ref any))
  ;; CHECK-NEXT:   (local.set $scratch_3
  ;; CHECK-NEXT:    (block $block0 (result (ref any))
  ;; CHECK-NEXT:     (local.set $scratch_1
  ;; CHECK-NEXT:      (tuple.make 2
  ;; CHECK-NEXT:       (i32.const 0)
  ;; CHECK-NEXT:       (block (result i64)
  ;; CHECK-NEXT:        (local.set $scratch_2
  ;; CHECK-NEXT:         (i64.const 1)
  ;; CHECK-NEXT:        )
  ;; CHECK-NEXT:        (local.set $scratch
  ;; CHECK-NEXT:         (ref.null none)
  ;; CHECK-NEXT:        )
  ;; CHECK-NEXT:        (local.get $scratch_2)
  ;; CHECK-NEXT:       )
  ;; CHECK-NEXT:      )
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:     (br_on_non_null $block0
  ;; CHECK-NEXT:      (local.get $scratch)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:     (tuple.drop 2
  ;; CHECK-NEXT:      (local.get $scratch_1)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:     (br $block
  ;; CHECK-NEXT:      (unreachable)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (tuple.make 3
  ;; CHECK-NEXT:    (tuple.extract 2 0
  ;; CHECK-NEXT:     (local.get $scratch_1)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (tuple.extract 2 1
  ;; CHECK-NEXT:     (local.get $scratch_1)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (local.get $scratch_3)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $br_on_non_null-two (result i32 i64 (ref any))
    block (result i32 i64 (ref any))
      i32.const 0
      i64.const 1
      ref.null none
      br_on_non_null 0
      unreachable
    end
  )

  ;; TODO: br_on_cast-one
  ;; TODO: br_on_cast-two
  ;; TODO: br_on_cast_fail-one nullable/non-nullable
  ;; TODO: br_on_cast_fail-two nullable/non-nullable
  ;; TODO: block with params
  ;; TODO: loop with params
  ;; TODO: if-else
  ;; TODO: if-else with params
  ;; TODO: try_catch
  ;; TODO: try_catch with params
  ;; TODO: try_table
  ;; TODO: try_table with params
)
