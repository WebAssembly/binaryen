;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.

;; Run normal -O2, which should lift, optimize, and lower strings, if the
;; string builtins feature is enabled (GC is required, as well, as the lowering
;; emits functions using arrays). We optimize identically in the last two here.

;; RUN: foreach %s %t wasm-opt -O2 -S -o - --enable-reference-types \
;; RUN:    | filecheck %s --check-prefix=MVP

;; RUN: foreach %s %t wasm-opt -O2 -S -o - -all \
;; RUN:    | filecheck %s --check-prefix=OPT

;; RUN: foreach %s %t wasm-opt -O2 -S -o - --enable-reference-types \
;; RUN:    --enable-string-builtins --enable-gc \
;; RUN:    | filecheck %s --check-prefix=OPT

(module
  (type $array16 (array (mut i16)))

  ;; MVP:      (type $0 (func (param externref externref) (result (ref extern))))

  ;; MVP:      (type $1 (func (result (ref extern))))

  ;; MVP:      (import "\'" "foo" (global $foo (ref extern)))
  (import "\'" "foo" (global $foo (ref extern)))

  ;; MVP:      (import "\'" "bar" (global $bar (ref extern)))
  (import "\'" "bar" (global $bar (ref extern)))

  ;; MVP:      (import "wasm:js-string" "concat" (func $concat (param externref externref) (result (ref extern))))
  (import "wasm:js-string" "concat" (func $concat (param externref externref) (result (ref extern))))

  ;; MVP:      (export "string.concat" (func $string.concat))

  ;; MVP:      (func $string.concat (result (ref extern))
  ;; MVP-NEXT:  (call $concat
  ;; MVP-NEXT:   (global.get $foo)
  ;; MVP-NEXT:   (global.get $bar)
  ;; MVP-NEXT:  )
  ;; MVP-NEXT: )
  ;; OPT:      (type $0 (func (result (ref extern))))

  ;; OPT:      (import "\'" "foobar" (global $"string.const_\"foobar\"" (ref extern)))

  ;; OPT:      (export "string.concat" (func $string.concat))

  ;; OPT:      (func $string.concat (type $0) (result (ref extern))
  ;; OPT-NEXT:  (global.get $"string.const_\"foobar\"")
  ;; OPT-NEXT: )
  (func $string.concat (export "string.concat") (result (ref extern))
    ;; When we optimize, we concatenate "foo" and "bar" here to "foobar". A new
    ;; imported global will appear for that, and we will get it here.
    (call $concat
      (global.get $foo)
      (global.get $bar)
    )
  )
)
