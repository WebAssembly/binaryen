;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-as %s -all -g -o %t.wasm
;; RUN: wasm-dis %t.wasm -o - | filecheck %s

(module
 ;; CHECK:      (memory $memorya 1 1)
 (memory $memorya 1 1)
 ;; CHECK:      (memory $memoryb 1 1)
 (memory $memoryb 1 1)
 ;; CHECK:      (memory $memoryc 1 1)
 (memory $memoryc 1 1)
 ;; CHECK:      (memory $memoryd 1 1)
 (memory $memoryd 1 1)
 ;; CHECK:      (func $v128.load (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load $memorya
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load (param $0 i32) (result v128)
  (v128.load offset=0 align=16
    (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load2 (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load $memoryb
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load2 (param $0 i32) (result v128)
  (v128.load $memoryb offset=0 align=16
    (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load8x8_s (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load8x8_s $memoryc
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load8x8_s (param $0 i32) (result v128)
  (v128.load8x8_s 2
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load8x8_s2 (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load8x8_s $memoryb
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load8x8_s2 (param $0 i32) (result v128)
  (v128.load8x8_s 1
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load8x8_u (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load8x8_u $memoryd
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load8x8_u (param $0 i32) (result v128)
  (v128.load8x8_u 3
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load8x8_u2 (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load8x8_u $memoryd
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load8x8_u2 (param $0 i32) (result v128)
  (v128.load8x8_u $memoryd
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load16x4_s (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load16x4_s $memorya
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load16x4_s (param $0 i32) (result v128)
  (v128.load16x4_s 0
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load16x4_s2 (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load16x4_s $memoryb
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load16x4_s2 (param $0 i32) (result v128)
  (v128.load16x4_s $memoryb
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load16x4_u (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load16x4_u $memorya
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load16x4_u (param $0 i32) (result v128)
  (v128.load16x4_u 0
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load16x4_u2 (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load16x4_u $memorya
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load16x4_u2 (param $0 i32) (result v128)
  (v128.load16x4_u $memorya
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load32x2_s (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load32x2_s $memoryc
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load32x2_s (param $0 i32) (result v128)
  (v128.load32x2_s 2
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load32x2_s2 (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load32x2_s $memoryb
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load32x2_s2 (param $0 i32) (result v128)
  (v128.load32x2_s $memoryb
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load32x2_u (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load32x2_u $memoryb
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load32x2_u (param $0 i32) (result v128)
  (v128.load32x2_u 1
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load32x2_u2 (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load32x2_u $memoryc
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load32x2_u2 (param $0 i32) (result v128)
  (v128.load32x2_u $memoryc
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load8_splat (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load8_splat $memoryb
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load8_splat (param $0 i32) (result v128)
  (v128.load8_splat 1
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load8_splat2 (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load8_splat $memoryb
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load8_splat2 (param $0 i32) (result v128)
  (v128.load8_splat $memoryb
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load16_splat (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load16_splat $memorya
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load16_splat (param $0 i32) (result v128)
  (v128.load16_splat $memorya
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load16_splat2 (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load16_splat $memorya
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load16_splat2 (param $0 i32) (result v128)
  (v128.load16_splat 0
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load32_splat (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load32_splat $memoryb
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load32_splat (param $0 i32) (result v128)
  (v128.load32_splat 1
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load32_splat2 (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load32_splat $memoryd
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load32_splat2 (param $0 i32) (result v128)
  (v128.load32_splat $memoryd
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load64_splat (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load64_splat $memoryb
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load64_splat (param $0 i32) (result v128)
  (v128.load64_splat 1
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load64_splat2 (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load64_splat $memorya
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load64_splat2 (param $0 i32) (result v128)
  (v128.load64_splat $memorya
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.store (param $0 i32) (param $1 v128)
 ;; CHECK-NEXT:  (v128.store $memorya
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.store (param $0 i32) (param $1 v128)
  (v128.store 0 offset=0 align=16
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.store2 (param $0 i32) (param $1 v128)
 ;; CHECK-NEXT:  (v128.store $memoryb
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.store2 (param $0 i32) (param $1 v128)
  (v128.store 1 offset=0 align=16
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.load8_lane (param $0 i32) (param $1 v128) (result v128)
 ;; CHECK-NEXT:  (v128.load8_lane $memorya 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load8_lane (param $0 i32) (param $1 v128) (result v128)
  (v128.load8_lane 0 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.load8_lane2 (param $0 i32) (param $1 v128) (result v128)
 ;; CHECK-NEXT:  (v128.load8_lane $memoryb 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load8_lane2 (param $0 i32) (param $1 v128) (result v128)
  (v128.load8_lane $memoryb 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.load16_lane (param $0 i32) (param $1 v128) (result v128)
 ;; CHECK-NEXT:  (v128.load16_lane $memoryb 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load16_lane (param $0 i32) (param $1 v128) (result v128)
  (v128.load16_lane 1 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.load16_lane2 (param $0 i32) (param $1 v128) (result v128)
 ;; CHECK-NEXT:  (v128.load16_lane $memoryd 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load16_lane2 (param $0 i32) (param $1 v128) (result v128)
  (v128.load16_lane $memoryd 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.load32_lane (param $0 i32) (param $1 v128) (result v128)
 ;; CHECK-NEXT:  (v128.load32_lane $memorya 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load32_lane (param $0 i32) (param $1 v128) (result v128)
  (v128.load32_lane $memorya 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.load32_lane2 (param $0 i32) (param $1 v128) (result v128)
 ;; CHECK-NEXT:  (v128.load32_lane $memoryb 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load32_lane2 (param $0 i32) (param $1 v128) (result v128)
  (v128.load32_lane 1 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.load64_lane (param $0 i32) (param $1 v128) (result v128)
 ;; CHECK-NEXT:  (v128.load64_lane $memoryd 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load64_lane (param $0 i32) (param $1 v128) (result v128)
  (v128.load64_lane $memoryd 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.load64_lane2 (param $0 i32) (param $1 v128) (result v128)
 ;; CHECK-NEXT:  (v128.load64_lane $memoryb 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load64_lane2 (param $0 i32) (param $1 v128) (result v128)
  (v128.load64_lane 1 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.load64_lane_align (param $0 i32) (param $1 v128) (result v128)
 ;; CHECK-NEXT:  (v128.load64_lane $memorya align=1 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load64_lane_align (param $0 i32) (param $1 v128) (result v128)
  (v128.load64_lane 0 align=1 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.load64_lane_align2 (param $0 i32) (param $1 v128) (result v128)
 ;; CHECK-NEXT:  (v128.load64_lane $memoryb align=1 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load64_lane_align2 (param $0 i32) (param $1 v128) (result v128)
  (v128.load64_lane $memoryb align=1 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.load64_lane_offset (param $0 i32) (param $1 v128) (result v128)
 ;; CHECK-NEXT:  (v128.load64_lane $memoryc offset=32 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load64_lane_offset (param $0 i32) (param $1 v128) (result v128)
  (v128.load64_lane 2 offset=32 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.load64_lane_offset2 (param $0 i32) (param $1 v128) (result v128)
 ;; CHECK-NEXT:  (v128.load64_lane $memoryb offset=32 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load64_lane_offset2 (param $0 i32) (param $1 v128) (result v128)
  (v128.load64_lane $memoryb offset=32 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.load64_lane_align_offset (param $0 i32) (param $1 v128) (result v128)
 ;; CHECK-NEXT:  (v128.load64_lane $memorya offset=32 align=1 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load64_lane_align_offset (param $0 i32) (param $1 v128) (result v128)
  (v128.load64_lane align=1 offset=32 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.load64_lane_align_offset2 (param $0 i32) (param $1 v128) (result v128)
 ;; CHECK-NEXT:  (v128.load64_lane $memoryd offset=32 align=1 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load64_lane_align_offset2 (param $0 i32) (param $1 v128) (result v128)
  (v128.load64_lane $memoryd align=1 offset=32 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.store8_lane (param $0 i32) (param $1 v128)
 ;; CHECK-NEXT:  (v128.store8_lane $memorya 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.store8_lane (param $0 i32) (param $1 v128)
  (v128.store8_lane 0 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.store8_lane2 (param $0 i32) (param $1 v128)
 ;; CHECK-NEXT:  (v128.store8_lane $memoryd 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.store8_lane2 (param $0 i32) (param $1 v128)
  (v128.store8_lane $memoryd 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.store16_lane (param $0 i32) (param $1 v128)
 ;; CHECK-NEXT:  (v128.store16_lane $memorya 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.store16_lane (param $0 i32) (param $1 v128)
  (v128.store16_lane $memorya 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.store16_lane2 (param $0 i32) (param $1 v128)
 ;; CHECK-NEXT:  (v128.store16_lane $memoryb 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.store16_lane2 (param $0 i32) (param $1 v128)
  (v128.store16_lane 1 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.store32_lane (param $0 i32) (param $1 v128)
 ;; CHECK-NEXT:  (v128.store32_lane $memoryb 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.store32_lane (param $0 i32) (param $1 v128)
  (v128.store32_lane $memoryb 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.store32_lane2 (param $0 i32) (param $1 v128)
 ;; CHECK-NEXT:  (v128.store32_lane $memoryc 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.store32_lane2 (param $0 i32) (param $1 v128)
  (v128.store32_lane 2 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.store64_lane (param $0 i32) (param $1 v128)
 ;; CHECK-NEXT:  (v128.store64_lane $memoryc 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.store64_lane (param $0 i32) (param $1 v128)
  (v128.store64_lane $memoryc 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.store64_lane2 (param $0 i32) (param $1 v128)
 ;; CHECK-NEXT:  (v128.store64_lane $memoryb 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.store64_lane2 (param $0 i32) (param $1 v128)
  (v128.store64_lane 1 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.store64_lane_align (param $0 i32) (param $1 v128)
 ;; CHECK-NEXT:  (v128.store64_lane $memoryb align=1 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.store64_lane_align (param $0 i32) (param $1 v128)
  (v128.store64_lane $memoryb align=1 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.store64_lane_align2 (param $0 i32) (param $1 v128)
 ;; CHECK-NEXT:  (v128.store64_lane $memorya align=1 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.store64_lane_align2 (param $0 i32) (param $1 v128)
  (v128.store64_lane 0 align=1 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.store64_lane_offset (param $0 i32) (param $1 v128)
 ;; CHECK-NEXT:  (v128.store64_lane $memoryd offset=32 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.store64_lane_offset (param $0 i32) (param $1 v128)
  (v128.store64_lane 3 offset=32 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.store64_lane_offset2 (param $0 i32) (param $1 v128)
 ;; CHECK-NEXT:  (v128.store64_lane $memorya offset=32 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.store64_lane_offset2 (param $0 i32) (param $1 v128)
  (v128.store64_lane $memorya offset=32 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.store64_lane_align_offset (param $0 i32) (param $1 v128)
 ;; CHECK-NEXT:  (v128.store64_lane $memoryb offset=32 align=1 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.store64_lane_align_offset (param $0 i32) (param $1 v128)
  (v128.store64_lane 1 align=1 offset=32 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.store64_lane_align_offset2 (param $0 i32) (param $1 v128)
 ;; CHECK-NEXT:  (v128.store64_lane $memoryd offset=32 align=1 0
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:   (local.get $1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.store64_lane_align_offset2 (param $0 i32) (param $1 v128)
  (v128.store64_lane $memoryd align=1 offset=32 0
   (local.get $0)
   (local.get $1)
  )
 )
 ;; CHECK:      (func $v128.load32_zero (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load32_zero $memorya
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load32_zero (param $0 i32) (result v128)
  (v128.load32_zero 0
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load32_zero2 (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load32_zero $memoryb
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load32_zero2 (param $0 i32) (result v128)
  (v128.load32_zero $memoryb
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load64_zero (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load64_zero $memoryb
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load64_zero (param $0 i32) (result v128)
  (v128.load64_zero 1
   (local.get $0)
  )
 )
 ;; CHECK:      (func $v128.load64_zero2 (param $0 i32) (result v128)
 ;; CHECK-NEXT:  (v128.load64_zero $memoryc
 ;; CHECK-NEXT:   (local.get $0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $v128.load64_zero2 (param $0 i32) (result v128)
  (v128.load64_zero $memoryc
   (local.get $0)
  )
 )
)

