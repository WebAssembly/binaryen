;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s -all --roundtrip -S -o - | filecheck %s
;; RUN: wasm-opt %s -all --roundtrip --nominal -S -o - | filecheck %s --check-prefix NOMNL

;; Regression test for an issue in which roundtripping failed to reproduce the
;; original types because type canonicalization was incorrect when the canonical
;; types already existed in the store.

(module
 (rec
  ;; CHECK:      (rec
  ;; CHECK-NEXT:  (type $A (struct (field (ref $C))))
  ;; NOMNL:      (type $A (struct (field (ref $C))))
  (type $A (struct (field (ref $C))))
  ;; CHECK:       (type $B (func (param (ref $A)) (result (ref $B))))
  ;; NOMNL:      (type $C (struct (field (mut (ref $B)))))

  ;; NOMNL:      (type $B (func (param (ref $A)) (result (ref $B))))
  (type $B (func (param (ref $A)) (result (ref $B))))

  ;; CHECK:       (type $C (struct (field (mut (ref $B)))))
  (type $C (struct (field (mut (ref $B)))))

  ;; CHECK:       (type $D (struct_subtype (field (ref $C)) (field (ref $A)) $A))
  ;; NOMNL:      (type $D (struct_subtype (field (ref $C)) (field (ref $A)) $A))
  (type $D (struct_subtype (field (ref $C)) (field (ref $A)) $A))
 )

 ;; CHECK:      (func $use-types (type $ref|$A|_ref|$D|_=>_none) (param $0 (ref $A)) (param $1 (ref $D))
 ;; CHECK-NEXT:  (nop)
 ;; CHECK-NEXT: )
 ;; NOMNL:      (func $use-types (type $ref|$A|_ref|$D|_=>_none) (param $0 (ref $A)) (param $1 (ref $D))
 ;; NOMNL-NEXT:  (nop)
 ;; NOMNL-NEXT: )
 (func $use-types (param (ref $A) (ref $D))
  (nop)
 )
)
