;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.
;; RUN: foreach %s %t wasm-opt -all --gufa --closed-world -S -o - | filecheck %s

(module
  ;; $struct is our main test class. $parent is a superclass *without* a
  ;; descriptor. $desc is $struct's descriptor.
  (rec
    ;; CHECK:      (rec
    ;; CHECK-NEXT:  (type $parent (sub (struct (field i32) (field i32))))
    (type $parent (sub (struct (field i32) (field i32))))
    ;; CHECK:       (type $struct (sub $parent (descriptor $desc (struct (field i32) (field i32)))))
    (type $struct (sub $parent (descriptor $desc (struct (field i32) (field i32)))))
    ;; CHECK:       (type $desc (describes $struct (struct (field funcref))))
    (type $desc (describes $struct (struct (field funcref))))
  )


  ;; CHECK:      (type $3 (func))

  ;; CHECK:      (type $4 (func (result i32)))

  ;; CHECK:      (global $parent (ref $parent) (struct.new $parent
  ;; CHECK-NEXT:  (i32.const 10)
  ;; CHECK-NEXT:  (i32.const 200)
  ;; CHECK-NEXT: ))
  (global $parent (ref $parent) (struct.new $parent
    (i32.const 10)  ;; disagrees with the child
    (i32.const 200) ;; agrees with the child
  ))

  ;; CHECK:      (global $desc (ref (exact $desc)) (struct.new $desc
  ;; CHECK-NEXT:  (ref.func $func)
  ;; CHECK-NEXT: ))
  (global $desc (ref (exact $desc)) (struct.new $desc
    (ref.func $func)
  ))

  ;; CHECK:      (global $struct (ref $struct) (struct.new $struct
  ;; CHECK-NEXT:  (i32.const 100)
  ;; CHECK-NEXT:  (i32.const 200)
  ;; CHECK-NEXT:  (global.get $desc)
  ;; CHECK-NEXT: ))
  (global $struct (ref $struct) (struct.new $struct
    (i32.const 100)
    (i32.const 200)
    (global.get $desc)
  ))

  ;; CHECK:      (elem declare func $func)

  ;; CHECK:      (export "desc" (func $desc))

  ;; CHECK:      (export "struct" (func $struct))

  ;; CHECK:      (export "parent" (func $parent))

  ;; CHECK:      (func $func (type $4) (result i32)
  ;; CHECK-NEXT:  (i32.const -1)
  ;; CHECK-NEXT: )
  (func $func (result i32)
    (i32.const -1)
  )

  ;; CHECK:      (func $desc (type $3)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (block (result (ref (exact $desc)))
  ;; CHECK-NEXT:    (drop
  ;; CHECK-NEXT:     (ref.get_desc $struct
  ;; CHECK-NEXT:      (global.get $struct)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (global.get $desc)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (block (result (ref (exact $4)))
  ;; CHECK-NEXT:    (drop
  ;; CHECK-NEXT:     (block (result (ref (exact $desc)))
  ;; CHECK-NEXT:      (drop
  ;; CHECK-NEXT:       (ref.get_desc $struct
  ;; CHECK-NEXT:        (global.get $struct)
  ;; CHECK-NEXT:       )
  ;; CHECK-NEXT:      )
  ;; CHECK-NEXT:      (global.get $desc)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (ref.func $func)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $desc (export "desc")
    ;; Show we can infer the descriptor.
    (drop
      (ref.get_desc $struct
        (global.get $struct)
      )
    )
    ;; Show we can read from the descriptor.
    (drop
      (struct.get $desc 0
        (ref.get_desc $struct
          (global.get $struct)
        )
      )
    )
  )

  ;; CHECK:      (func $struct (type $3)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.const 100)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.const 200)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $struct (export "struct")
    ;; Show we don't disrupt normal struct field inference. Field 1 is
    ;; particuarly interesting as we represent descriptors as field -1
    ;; internally.
    (drop
      (struct.get $struct 0
        (global.get $struct)
      )
    )
    (drop
      (struct.get $struct 1
        (global.get $struct)
      )
    )
  )

  ;; CHECK:      (func $parent (type $3)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (struct.get $parent 0
  ;; CHECK-NEXT:    (global.get $parent)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.const 200)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $parent (export "parent")
    ;; Show we don't disrupt the parent's inference. We can infer field 1, which
    ;; is in agreement among all possible subtypes.
    (drop
      (struct.get $parent 0
        (global.get $parent)
      )
    )
    (drop
      (struct.get $parent 1
        (global.get $parent)
      )
    )
  )
)
