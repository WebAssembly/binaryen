;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s --remove-unused-brs -all -S -o - \
;; RUN:   | filecheck %s

(module
  ;; CHECK:      (import "a" "b" (func $i32 (type $1) (result i32)))
  (import "a" "b" (func $i32 (result i32)))
  ;; CHECK:      (import "a" "b" (func $none (type $2)))
  (import "a" "b" (func $none))

  ;; CHECK:      (func $if-br (type $0) (param $x i32) (param $y i32)
  ;; CHECK-NEXT:  (block $out
  ;; CHECK-NEXT:   (nop)
  ;; CHECK-NEXT:   (@metadata.code.branch_hint "\01")
  ;; CHECK-NEXT:   (br_if $out
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-br (param $x i32) (param $y i32)
    (block $out
      ;; This nop prevents the entire testcase from being trivial.
      (nop)
      ;; The if-br will turn into a br_if. The branch hint should then go on the
      ;; br_if, and remain 01.
      (@metadata.code.branch_hint "\01")
      (if
        (local.get $x)
        (then
          (br $out)
        )
      )
    )
  )

  ;; CHECK:      (func $if-br_0 (type $0) (param $x i32) (param $y i32)
  ;; CHECK-NEXT:  (block $out
  ;; CHECK-NEXT:   (nop)
  ;; CHECK-NEXT:   (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:   (br_if $out
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-br_0 (param $x i32) (param $y i32)
    (block $out
      (nop)
      ;; As above, but a hint of 0.
      (@metadata.code.branch_hint "\00")
      (if
        (local.get $x)
        (then
          (br $out)
        )
      )
    )
  )

  ;; CHECK:      (func $if-br_if (type $0) (param $x i32) (param $y i32)
  ;; CHECK-NEXT:  (block $out
  ;; CHECK-NEXT:   (nop)
  ;; CHECK-NEXT:   (@metadata.code.branch_hint "\01")
  ;; CHECK-NEXT:   (br_if $out
  ;; CHECK-NEXT:    (select
  ;; CHECK-NEXT:     (local.get $x)
  ;; CHECK-NEXT:     (i32.const 0)
  ;; CHECK-NEXT:     (local.get $y)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-br_if (param $x i32) (param $y i32)
    (block $out
      (nop)
      ;; As above, but the br has a condition. We can merge conditions (using a
      ;; select), and then move the hint to the br_if.
      (@metadata.code.branch_hint "\01")
      (if
        (local.get $x)
        (then
          (br_if $out
            (local.get $y)
          )
        )
      )
    )
  )

  ;; CHECK:      (func $if-if-1* (type $0) (param $x i32) (param $y i32)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\01")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (select
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $none)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (select
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $none)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (select
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $none)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-if-1* (param $x i32) (param $y i32)
    ;; Both ifs have a hint of 1, so after we merge the ifs the combined
    ;; condition remains likely.
    (@metadata.code.branch_hint "\01")
    (if
      (local.get $x)
      (then
        (@metadata.code.branch_hint "\01")
        (if
          (local.get $y)
          (then
            (call $none)
          )
        )
      )
    )
    ;; The outer if still has a hint of 1, but the inner is 0. We emit no hint.
    (@metadata.code.branch_hint "\01")
    (if
      (local.get $x)
      (then
        (@metadata.code.branch_hint "\00")
        (if
          (local.get $y)
          (then
            (call $none)
          )
        )
      )
    )
    ;; The outer if still has a hint of 1, but the inner has none. We emit no
    ;; hint.
    (@metadata.code.branch_hint "\01")
    (if
      (local.get $x)
      (then
        (if
          (local.get $y)
          (then
            (call $none)
          )
        )
      )
    )
  )

  (func $if-if-0* (param $x i32) (param $y i32)
    ;; As above, but now the outer if has hints of 0.

    ;; The hints do not match, so we emit no hint.
    (@metadata.code.branch_hint "\00")
    (if
      (local.get $x)
      (then
        (@metadata.code.branch_hint "\01")
        (if
          (local.get $y)
          (then
            (call $none)
          )
        )
      )
    )
    ;; The hints match, so we emit 0. XXX
    (@metadata.code.branch_hint "\00")
    (if
      (local.get $x)
      (then
        (@metadata.code.branch_hint "\00")
        (if
          (local.get $y)
          (then
            (call $none)
          )
        )
      )
    )
    ;; No hint is emitted
    (@metadata.code.branch_hint "\01")
    (if
      (local.get $x)
      (then
        (if
          (local.get $y)
          (then
            (call $none)
          )
        )
      )
    )
  )
)
