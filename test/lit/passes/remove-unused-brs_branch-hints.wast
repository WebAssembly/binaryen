;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s --remove-unused-brs -all -S -o - \
;; RUN:   | filecheck %s

(module
  ;; CHECK:      (import "a" "b" (func $i32 (type $2) (result i32)))
  (import "a" "b" (func $i32 (result i32)))
  ;; CHECK:      (import "a" "b" (func $none (type $3)))
  (import "a" "b" (func $none))

  ;; CHECK:      (func $if-br (type $0) (param $x i32) (param $y i32)
  ;; CHECK-NEXT:  (block $out
  ;; CHECK-NEXT:   (nop)
  ;; CHECK-NEXT:   (@metadata.code.branch_hint "\01")
  ;; CHECK-NEXT:   (br_if $out
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-br (param $x i32) (param $y i32)
    (block $out
      ;; This nop prevents the entire testcase from being trivial.
      (nop)
      ;; The if-br will turn into a br_if. The branch hint should then go on the
      ;; br_if, and remain 01.
      (@metadata.code.branch_hint "\01")
      (if
        (local.get $x)
        (then
          (br $out)
        )
      )
    )
  )

  ;; CHECK:      (func $if-br_0 (type $0) (param $x i32) (param $y i32)
  ;; CHECK-NEXT:  (block $out
  ;; CHECK-NEXT:   (nop)
  ;; CHECK-NEXT:   (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:   (br_if $out
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-br_0 (param $x i32) (param $y i32)
    (block $out
      (nop)
      ;; As above, but a hint of 0.
      (@metadata.code.branch_hint "\00")
      (if
        (local.get $x)
        (then
          (br $out)
        )
      )
    )
  )

  ;; CHECK:      (func $if-br_if (type $0) (param $x i32) (param $y i32)
  ;; CHECK-NEXT:  (block $out
  ;; CHECK-NEXT:   (nop)
  ;; CHECK-NEXT:   (@metadata.code.branch_hint "\01")
  ;; CHECK-NEXT:   (br_if $out
  ;; CHECK-NEXT:    (select
  ;; CHECK-NEXT:     (local.get $x)
  ;; CHECK-NEXT:     (i32.const 0)
  ;; CHECK-NEXT:     (local.get $y)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-br_if (param $x i32) (param $y i32)
    (block $out
      (nop)
      ;; As above, but the br has a condition. We can merge conditions (using a
      ;; select), and then move the hint to the br_if.
      (@metadata.code.branch_hint "\01")
      (if
        (local.get $x)
        (then
          (br_if $out
            (local.get $y)
          )
        )
      )
    )
  )

  ;; CHECK:      (func $if-if-1* (type $0) (param $x i32) (param $y i32)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\01")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (select
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $none)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (select
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $none)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (select
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $none)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-if-1* (param $x i32) (param $y i32)
    ;; Both ifs have a hint of 1, so after we merge the ifs the combined
    ;; condition remains likely.
    (@metadata.code.branch_hint "\01")
    (if
      (local.get $x)
      (then
        (@metadata.code.branch_hint "\01")
        (if
          (local.get $y)
          (then
            (call $none)
          )
        )
      )
    )
    ;; The outer if still has a hint of 1, but the inner is 0. We emit no hint.
    (@metadata.code.branch_hint "\01")
    (if
      (local.get $x)
      (then
        (@metadata.code.branch_hint "\00")
        (if
          (local.get $y)
          (then
            (call $none)
          )
        )
      )
    )
    ;; The outer if still has a hint of 1, but the inner has none. We emit no
    ;; hint.
    (@metadata.code.branch_hint "\01")
    (if
      (local.get $x)
      (then
        (if
          (local.get $y)
          (then
            (call $none)
          )
        )
      )
    )
  )

  ;; CHECK:      (func $if-if-0* (type $0) (param $x i32) (param $y i32)
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (select
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $none)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (select
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $none)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (select
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $none)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-if-0* (param $x i32) (param $y i32)
    ;; As above, but now the outer if has hints of 0.

    ;; The hints do not match, so we emit no hint.
    (@metadata.code.branch_hint "\00")
    (if
      (local.get $x)
      (then
        (@metadata.code.branch_hint "\01")
        (if
          (local.get $y)
          (then
            (call $none)
          )
        )
      )
    )
    ;; The hints match, so the combined condition is unlikely.
    (@metadata.code.branch_hint "\00")
    (if
      (local.get $x)
      (then
        (@metadata.code.branch_hint "\00")
        (if
          (local.get $y)
          (then
            (call $none)
          )
        )
      )
    )
    ;; Inner lacks a hint, so we emit nothing.
    (@metadata.code.branch_hint "\01")
    (if
      (local.get $x)
      (then
        (if
          (local.get $y)
          (then
            (call $none)
          )
        )
      )
    )
  )

  ;; CHECK:      (func $if-if-?* (type $0) (param $x i32) (param $y i32)
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (select
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $none)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (select
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $none)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (select
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $none)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-if-?* (param $x i32) (param $y i32)
    ;; As above, but now the outer if has no hint. We emit no hints here.

    (if
      (local.get $x)
      (then
        (@metadata.code.branch_hint "\01")
        (if
          (local.get $y)
          (then
            (call $none)
          )
        )
      )
    )
    (if
      (local.get $x)
      (then
        (@metadata.code.branch_hint "\00")
        (if
          (local.get $y)
          (then
            (call $none)
          )
        )
      )
    )
    (if
      (local.get $x)
      (then
        (if
          (local.get $y)
          (then
            (call $none)
          )
        )
      )
    )
  )

  ;; CHECK:      (func $loop-br_if-flip (type $1) (param $x i32)
  ;; CHECK-NEXT:  (loop $loop
  ;; CHECK-NEXT:   (block $block
  ;; CHECK-NEXT:    (block
  ;; CHECK-NEXT:     (@metadata.code.branch_hint "\01")
  ;; CHECK-NEXT:     (br_if $loop
  ;; CHECK-NEXT:      (i32.eqz
  ;; CHECK-NEXT:       (local.get $x)
  ;; CHECK-NEXT:      )
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $loop-br_if-flip (param $x i32)
    (block $block
      (loop $loop
        ;; This br_if's condition will flip when it is turned from a break out
        ;; of the loop to a continue inside it. The hint should flip too.
        (@metadata.code.branch_hint "\00")
        (br_if $block
          (local.get $x)
        )
        (br $loop)
      )
    )
  )

  ;; CHECK:      (func $loop-br_if-flip-reverse (type $1) (param $x i32)
  ;; CHECK-NEXT:  (loop $loop
  ;; CHECK-NEXT:   (block $block
  ;; CHECK-NEXT:    (block
  ;; CHECK-NEXT:     (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:     (br_if $loop
  ;; CHECK-NEXT:      (i32.eqz
  ;; CHECK-NEXT:       (local.get $x)
  ;; CHECK-NEXT:      )
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $loop-br_if-flip-reverse (param $x i32)
    ;; As above, with a hint of 1, that should flip to 0.
    (block $block
      (loop $loop
        (@metadata.code.branch_hint "\01")
        (br_if $block
          (local.get $x)
        )
        (br $loop)
      )
    )
  )
)
