;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s --local-subtyping -all -S -o - \
;; RUN:   | filecheck %s

(module
  (import "out" "i32" (func $i32 (result i32)))
  (import "out" "i64" (func $i64 (result i64)))

  ;; refinalization can find a more specific type, where the declared type was
  ;; no the optimal LUB
  ;; CHECK:      (func $refinalize (param $x i32)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (if (result (ref func))
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (ref.func $i32)
  ;; CHECK-NEXT:    (ref.func $i64)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (block $block (result (ref func))
  ;; CHECK-NEXT:    (br $block
  ;; CHECK-NEXT:     (ref.func $i32)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (ref.func $i64)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $refinalize (param $x i32)
    (drop
      (if (result anyref)
        (local.get $x)
        (ref.func $i32)
        (ref.func $i64)
      )
    )
    (drop
      (block $block (result anyref)
        (br $block
          (ref.func $i32)
        )
        (ref.func $i64)
      )
    )
  )

  ;; CHECK:      (func $simple-local-but-not-param (param $x anyref)
  ;; CHECK-NEXT:  (local $y (ref null $none_=>_i32))
  ;; CHECK-NEXT:  (local.set $x
  ;; CHECK-NEXT:   (ref.func $i32)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (local.set $y
  ;; CHECK-NEXT:   (ref.func $i32)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $simple-local-but-not-param (param $x anyref)
    (local $y anyref)
    (local.set $x
      (ref.func $i32)
    )
    (local.set $y
      (ref.func $i32)
    )
  )
)
