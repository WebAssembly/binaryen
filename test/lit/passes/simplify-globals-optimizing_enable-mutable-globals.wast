;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.
;; NOTE: This test was ported using port_test.py and could be cleaned up.

;; RUN: foreach %s %t wasm-opt --simplify-globals-optimizing --enable-mutable-globals -S -o - | filecheck %s

(module
  ;; CHECK:      (type $none_=>_none (func))

  ;; CHECK:      (import "env" "global-1" (global $g1 i32))
  (import "env" "global-1" (global $g1 i32))
  ;; CHECK:      (global $g2 i32 (global.get $g1))
  (global $g2 (mut i32) (global.get $g1))
  ;; CHECK:      (func $foo
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $g1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $g1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $foo
   (drop (global.get $g1))
   (drop (global.get $g2))
  )
)
(module
  ;; CHECK:      (type $none_=>_none (func))

  ;; CHECK:      (import "env" "global-1" (global $g1 i32))
  (import "env" "global-1" (global $g1 i32))
  ;; CHECK:      (global $g2 i32 (global.get $g1))
  (global $g2 (mut i32) (global.get $g1))
  ;; CHECK:      (global $g3 i32 (global.get $g2))
  (global $g3 (mut i32) (global.get $g2))
  ;; CHECK:      (global $g4 i32 (global.get $g3))
  (global $g4 (mut i32) (global.get $g3))
  ;; CHECK:      (func $foo
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $g1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $g1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $g1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $g1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $foo
   (drop (global.get $g1))
   (drop (global.get $g2))
   (drop (global.get $g3))
   (drop (global.get $g4))
  )
)
(module
  ;; CHECK:      (import "env" "global-1" (global $g1 (mut i32)))
  (import "env" "global-1" (global $g1 (mut i32)))
  ;; CHECK:      (global $g2 i32 (global.get $g1))
  (global $g2 (mut i32) (global.get $g1))
)
(module
  ;; CHECK:      (type $none_=>_none (func))

  ;; CHECK:      (import "env" "global-1" (global $g1 i32))
  (import "env" "global-1" (global $g1 i32))
  ;; CHECK:      (global $g2 i32 (global.get $g1))
  (global $g2 (mut i32) (global.get $g1))
  ;; CHECK:      (func $foo
  ;; CHECK-NEXT:  (unreachable)
  ;; CHECK-NEXT: )
  (func $foo
   (global.set $g2 (unreachable))
  )
)
(module
  ;; CHECK:      (import "env" "global-1" (global $g1 (mut i32)))
  (import "env" "global-1" (global $g1 (mut i32)))
  ;; CHECK:      (global $g2 (mut i32) (global.get $g1))
  (global $g2 (mut i32) (global.get $g1))
  ;; CHECK:      (export "global-2" (global $g2))
  (export "global-2" (global $g2))
)
(module
  ;; CHECK:      (type $none_=>_none (func))

  ;; CHECK:      (global $g1 i32 (i32.const 1))
  (global $g1 i32 (i32.const 1))
  ;; CHECK:      (global $g2 i32 (i32.const 1))
  (global $g2 i32 (global.get $g1))
  ;; CHECK:      (global $g3 f64 (f64.const -3.4))
  (global $g3 f64 (f64.const -3.4))
  ;; CHECK:      (global $g4 f64 (f64.const -2.8))
  (global $g4 (mut f64) (f64.const -2.8))
  ;; CHECK:      (global $g5 i32 (i32.const 2))
  (global $g5 i32 (i32.const 2))
  ;; CHECK:      (global $g6 i32 (i32.const 2))
  (global $g6 (mut i32) (global.get $g5))
  ;; CHECK:      (global $g7 i32 (i32.const 3))
  (global $g7 (mut i32) (i32.const 3))
  ;; CHECK:      (global $g8 i32 (i32.const 3))
  (global $g8 i32 (global.get $g7))
  ;; CHECK:      (global $g9 i32 (i32.const 4))
  (global $g9 i32 (i32.const 4))
  ;; CHECK:      (global $ga (mut i32) (i32.const 4))
  (global $ga (mut i32) (global.get $g9))
  ;; CHECK:      (global $gb (mut i32) (i32.const 5))
  (global $gb (mut i32) (i32.const 5))
  ;; CHECK:      (global $gc i32 (i32.const 5))
  (global $gc i32 (global.get $gb))
  ;; CHECK:      (func $foo
  ;; CHECK-NEXT:  (global.set $ga
  ;; CHECK-NEXT:   (i32.const 6)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (global.set $gb
  ;; CHECK-NEXT:   (i32.const 7)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $foo
   (drop (global.get $g1))
   (drop (global.get $g2))
   (drop (global.get $g3))
   (drop (global.get $g4))
   (drop (global.get $g5))
   (drop (global.get $g6))
   (drop (global.get $g7))
   (drop (global.get $g8))
   (drop (global.get $g9))
   (drop (global.get $ga))
   (drop (global.get $gb))
   (drop (global.get $gc))
   (global.set $ga (i32.const 6))
   (global.set $gb (i32.const 7))
  )
)
(module
  ;; CHECK:      (type $i32_=>_i32 (func (param i32) (result i32)))

  ;; CHECK:      (global $g1 (mut i32) (i32.const 1))
  (global $g1 (mut i32) (i32.const 1))
  ;; CHECK:      (global $g2 (mut i32) (i32.const 1))
  (global $g2 (mut i32) (i32.const 1))
  ;; CHECK:      (func $f (param $0 i32) (result i32)
  ;; CHECK-NEXT:  (global.set $g1
  ;; CHECK-NEXT:   (i32.const 100)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (global.set $g2
  ;; CHECK-NEXT:   (local.get $0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $0)
  ;; CHECK-NEXT:   (return
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.tee $0
  ;; CHECK-NEXT:    (i32.add
  ;; CHECK-NEXT:     (global.get $g1)
  ;; CHECK-NEXT:     (global.get $g2)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (return
  ;; CHECK-NEXT:    (i32.const 1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (global.set $g1
  ;; CHECK-NEXT:   (i32.const 200)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (global.set $g2
  ;; CHECK-NEXT:   (local.get $0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (i32.add
  ;; CHECK-NEXT:   (global.get $g2)
  ;; CHECK-NEXT:   (i32.const 200)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $f (param $x i32) (result i32)
    (global.set $g1 (i32.const 100))
    (global.set $g2 (local.get $x))
    (if (local.get $x) (return (i32.const 0)))
    (local.set $x
      (i32.add
        (global.get $g1)
        (global.get $g2)
      )
    )
    (if (local.get $x) (return (i32.const 1)))
    (global.set $g1 (i32.const 200))
    (global.set $g2 (local.get $x))
    (local.set $x
      (i32.add
        (global.get $g1)
        (global.get $g2)
      )
    )
    (local.get $x)
  )
)
(module
  ;; CHECK:      (type $i32_=>_i32 (func (param i32) (result i32)))

  ;; CHECK:      (global $g1 (mut i32) (i32.const 1))
  (global $g1 (mut i32) (i32.const 1))
  ;; CHECK:      (global $g2 (mut i32) (i32.const 1))
  (global $g2 (mut i32) (i32.const 1))
  ;; CHECK:      (func $f (param $0 i32) (result i32)
  ;; CHECK-NEXT:  (global.set $g1
  ;; CHECK-NEXT:   (i32.const 100)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (global.set $g2
  ;; CHECK-NEXT:   (local.get $0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (i32.add
  ;; CHECK-NEXT:   (global.get $g2)
  ;; CHECK-NEXT:   (i32.const 200)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $f (param $x i32) (result i32)
    (global.set $g1 (i32.const 100))
    (global.set $g2 (local.get $x))
    (local.set $x
      (i32.add
        (i32.add
          (global.get $g1)
          (global.get $g1)
        )
        (global.get $g2)
      )
    )
    (local.get $x)
  )
)
(module
  ;; CHECK:      (type $i32_=>_i32 (func (param i32) (result i32)))

  ;; CHECK:      (global $g1 (mut i32) (i32.const 1))
  (global $g1 (mut i32) (i32.const 1))
  ;; CHECK:      (global $g2 i32 (i32.const 1))
  (global $g2 (mut i32) (i32.const 1))
  ;; CHECK:      (func $no (param $x i32) (result i32)
  ;; CHECK-NEXT:  (global.set $g1
  ;; CHECK-NEXT:   (i32.const 100)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (call $no
  ;; CHECK-NEXT:    (i32.const 200)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (global.get $g1)
  ;; CHECK-NEXT: )
  (func $no (param $x i32) (result i32)
    (global.set $g1 (i32.const 100))
    (drop (call $no (i32.const 200))) ;; invalidate
    (global.get $g1)
  )
  ;; CHECK:      (func $no2 (param $x i32) (result i32)
  ;; CHECK-NEXT:  (global.set $g1
  ;; CHECK-NEXT:   (i32.const 100)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (global.set $g1
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (global.get $g1)
  ;; CHECK-NEXT: )
  (func $no2 (param $x i32) (result i32)
    (global.set $g1 (i32.const 100))
    (global.set $g1 (local.get $x)) ;; invalidate
    (global.get $g1)
  )
  ;; CHECK:      (func $yes (param $0 i32) (result i32)
  ;; CHECK-NEXT:  (global.set $g1
  ;; CHECK-NEXT:   (i32.const 100)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (i32.const 100)
  ;; CHECK-NEXT: )
  (func $yes (param $x i32) (result i32)
    (global.set $g1 (i32.const 100))
    (global.set $g2 (local.get $x)) ;; almost invalidate
    (global.get $g1)
  )
)
;; don't remove a value with a side effect
(module
 ;; CHECK:      (type $none_=>_f64 (func (result f64)))

 ;; CHECK:      (global $global$0 i32 (i32.const 0))
 (global $global$0 (mut i32) (i32.const 0))
 ;; CHECK:      (global $global$1 i32 (i32.const 0))
 (global $global$1 (mut i32) (i32.const 0))
 ;; CHECK:      (export "func_9" (func $0))
 (export "func_9" (func $0))
 ;; CHECK:      (func $0 (result f64)
 ;; CHECK-NEXT:  (drop
 ;; CHECK-NEXT:   (unreachable)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $0 (result f64)
  (global.set $global$0
   (block $label$1 (result i32)
    (if
     (i32.eqz
      (global.get $global$1)
     )
     (unreachable)
    )
    (i32.const 2)
   )
  )
  (f64.const 1)
 )
)
