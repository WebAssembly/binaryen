;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s --branch-hint-analysis -all -S -o - \
;; RUN:   | filecheck %s
;;

(module
  ;; CHECK:      (tag $e (type $2))
  (tag $e)

  ;; CHECK:      (func $br-unreachable (type $0) (param $x i32)
  ;; CHECK-NEXT:  (block $block
  ;; CHECK-NEXT:   (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:   (br_if $block
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (return)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (unreachable)
  ;; CHECK-NEXT: )
  (func $br-unreachable (param $x i32)
    ;; The br_if is unlikely, as it reaches an unreachable.
    (block $block
      (br_if $block
        (local.get $x)
      )
      (return)
    )
    (unreachable)
  )

  ;; CHECK:      (func $br-unreachable-flip (type $0) (param $x i32)
  ;; CHECK-NEXT:  (block $block
  ;; CHECK-NEXT:   (@metadata.code.branch_hint "\01")
  ;; CHECK-NEXT:   (br_if $block
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (unreachable)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $br-unreachable-flip (param $x i32)
    ;; As above, but flipped: the hint should be reversed, since the unreachable
    ;; is if we do not branch.
    (block $block
      (br_if $block
        (local.get $x)
      )
      (unreachable)
    )
  )

  ;; CHECK:      (func $br_on-unreachable (type $1) (param $x anyref)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (block $block (result (ref any))
  ;; CHECK-NEXT:    (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:    (br_on_non_null $block
  ;; CHECK-NEXT:     (local.get $x)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (return)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (unreachable)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $br_on-unreachable (param $x anyref)
    ;; The br_on is unlikely, as it reaches an unreachable.
    (drop
      (block $block (result (ref any))
        (br_on_non_null $block
          (local.get $x)
        )
        (return)
      )
      (unreachable)
    )
  )

  ;; CHECK:      (func $br_on-unreachable-flip (type $1) (param $x anyref)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (block $block (result (ref any))
  ;; CHECK-NEXT:    (@metadata.code.branch_hint "\01")
  ;; CHECK-NEXT:    (br_on_non_null $block
  ;; CHECK-NEXT:     (local.get $x)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $br_on-unreachable-flip (param $x anyref)
    ;; As above, but flipped, so the hint is flipped too.
    (drop
      (block $block (result (ref any))
        (br_on_non_null $block
          (local.get $x)
        )
        (unreachable)
      )
    )
  )

  ;; CHECK:      (func $if-unreachable (type $0) (param $x i32)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (else
  ;; CHECK-NEXT:    (nop)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-unreachable (param $x i32)
    ;; The unreachable means the condition is unlikely.
    (if
      (local.get $x)
      (then
        (unreachable)
      )
      (else
        (nop)
      )
    )
  )

  ;; CHECK:      (func $if-unreachable-flip (type $0) (param $x i32)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\01")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (nop)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (else
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-unreachable-flip (param $x i32)
    ;; As above, but flipped, so the hint is flipped too.
    (if
      (local.get $x)
      (then
        (nop)
      )
      (else
        (unreachable)
      )
    )
  )

  ;; CHECK:      (func $if-unreachable-one-arm (type $0) (param $x i32)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-unreachable-one-arm (param $x i32)
    ;; The unreachable means the condition is unlikely.
    (if
      (local.get $x)
      (then
        (unreachable)
      )
    )
  )

  ;; CHECK:      (func $if-one-arm-unreachable-later (type $0) (param $x i32)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\01")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (return)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (unreachable)
  ;; CHECK-NEXT: )
  (func $if-one-arm-unreachable-later (param $x i32)
    ;; The unreachable after means the condition is likely.
    (if
      (local.get $x)
      (then
        (return)
      )
    )
    (unreachable)
  )

  ;; CHECK:      (func $if-one-arm-unreachable-always (type $0) (param $x i32)
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (nop)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (unreachable)
  ;; CHECK-NEXT: )
  (func $if-one-arm-unreachable-always (param $x i32)
    ;; The unreachable after means the if arm is unlikely, like the code after
    ;; the if, so we do not hint.
    (if
      (local.get $x)
      (then
        (nop)  ;; used to be a return here
      )
    )
    (unreachable)
  )

  ;; CHECK:      (func $if-throw (type $0) (param $x i32)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (throw $e)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (else
  ;; CHECK-NEXT:    (nop)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-throw (param $x i32)
    ;; A throw is unlikely.
    (if
      (local.get $x)
      (then
        (throw $e)
      )
      (else
        (nop)
      )
    )
  )

  ;; CHECK:      (func $if-throw_ref (type $3) (param $x i32) (param $y exnref)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (throw_ref
  ;; CHECK-NEXT:     (local.get $y)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (else
  ;; CHECK-NEXT:    (nop)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-throw_ref (param $x i32) (param $y exnref)
    ;; A throw is unlikely.
    (if
      (local.get $x)
      (then
        (throw_ref
          (local.get $y)
        )
      )
      (else
        (nop)
      )
    )
  )

  ;; CHECK:      (func $if-throw-unreachable (type $0) (param $x i32)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\01")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (throw $e)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (else
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-throw-unreachable (param $x i32)
    ;; A throw is less likely than an unreachable.
    (if
      (local.get $x)
      (then
        (throw $e)
      )
      (else
        (unreachable)
      )
    )
  )

  ;; CHECK:      (func $if-unreachable-double (type $0) (param $x i32)
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (else
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-unreachable-double (param $x i32)
    ;; Two unreachables are equally unlikely, so nothing to hint.
    (if
      (local.get $x)
      (then
        (unreachable)
      )
      (else
        (unreachable)
      )
    )
  )

  ;; CHECK:      (func $if-nesting (type $0) (param $x i32)
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (return)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (else
  ;; CHECK-NEXT:    (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:    (if
  ;; CHECK-NEXT:     (local.get $x)
  ;; CHECK-NEXT:     (then
  ;; CHECK-NEXT:      (unreachable)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-nesting (param $x i32)
    ;; We know nothing for this if.
    (if
      (local.get $x)
      (then
        (return)
      )
      (else
        ;; This condition is likely false.
        (if
          (local.get $x)
          (then
            (unreachable)
          )
        )
      )
    )
  )

  ;; CHECK:      (func $if-nesting-2 (type $0) (param $x i32)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\01")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (return)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (else
  ;; CHECK-NEXT:    (if
  ;; CHECK-NEXT:     (local.get $x)
  ;; CHECK-NEXT:     (then
  ;; CHECK-NEXT:      (unreachable)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:     (else
  ;; CHECK-NEXT:      (unreachable)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-nesting-2 (param $x i32)
    ;; The else is unlikely, so we hint here.
    (if
      (local.get $x)
      (then
        (return)
      )
      (else
        ;; Both arms are equally likely, so we do not hint here, but all this
        ;; code is unlikely.
        (if
          (local.get $x)
          (then
            (unreachable)
          )
          (else
            (unreachable)
          )
        )
      )
    )
  )

  ;; CHECK:      (func $loop (type $4) (param $x i32) (param $y i32)
  ;; CHECK-NEXT:  (loop $loop
  ;; CHECK-NEXT:   (drop
  ;; CHECK-NEXT:    (i32.const 10)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (if
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (then
  ;; CHECK-NEXT:     (return)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:   (if
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:    (then
  ;; CHECK-NEXT:     (unreachable)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (br $loop)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $loop (param $x i32) (param $y i32)
    ;; We should not error when computing cycles.
    (loop $loop
      (drop (i32.const 10))
      ;; No hint for the first if, but the second is unlikely.
      (if
        (local.get $x)
        (then
          (return)
        )
      )
      (if
        (local.get $y)
        (then
          (unreachable)
        )
      )
      (br $loop)
    )
  )
)
