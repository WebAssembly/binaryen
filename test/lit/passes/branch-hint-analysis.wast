;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s --branch-hint-analysis -all -S -o - \
;; RUN:   | filecheck %s
;;

(module
  ;; CHECK:      (tag $e (type $2))
  (tag $e)

  ;; CHECK:      (func $br-unreachable (type $0) (param $x i32)
  ;; CHECK-NEXT:  (block $block
  ;; CHECK-NEXT:   (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:   (br_if $block
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (return)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (unreachable)
  ;; CHECK-NEXT: )
  (func $br-unreachable (param $x i32)
    ;; The br_if is unlikely, as it reaches an unreachable.
    (block $block
      (br_if $block
        (local.get $x)
      )
      (return)
    )
    (unreachable)
  )

  ;; CHECK:      (func $br-unreachable-flip (type $0) (param $x i32)
  ;; CHECK-NEXT:  (block $block
  ;; CHECK-NEXT:   (@metadata.code.branch_hint "\01")
  ;; CHECK-NEXT:   (br_if $block
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (unreachable)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $br-unreachable-flip (param $x i32)
    ;; As above, but flipped: the hint should be reversed, since the unreachable
    ;; is if we do not branch.
    (block $block
      (br_if $block
        (local.get $x)
      )
      (unreachable)
    )
  )

  ;; CHECK:      (func $br_on-unreachable (type $1) (param $x anyref)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (block $block (result (ref any))
  ;; CHECK-NEXT:    (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:    (br_on_non_null $block
  ;; CHECK-NEXT:     (local.get $x)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (return)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (unreachable)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $br_on-unreachable (param $x anyref)
    ;; The br_on is unlikely, as it reaches an unreachable.
    (drop
      (block $block (result (ref any))
        (br_on_non_null $block
          (local.get $x)
        )
        (return)
      )
      (unreachable)
    )
  )

  ;; CHECK:      (func $br_on-unreachable-flip (type $1) (param $x anyref)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (block $block (result (ref any))
  ;; CHECK-NEXT:    (@metadata.code.branch_hint "\01")
  ;; CHECK-NEXT:    (br_on_non_null $block
  ;; CHECK-NEXT:     (local.get $x)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $br_on-unreachable-flip (param $x anyref)
    ;; As above, but flipped, so the hint is flipped too.
    (drop
      (block $block (result (ref any))
        (br_on_non_null $block
          (local.get $x)
        )
        (unreachable)
      )
    )
  )

  ;; CHECK:      (func $if-unreachable (type $0) (param $x i32)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (else
  ;; CHECK-NEXT:    (nop)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-unreachable (param $x i32)
    ;; The unreachable means the condition is unlikely.
    (if
      (local.get $x)
      (then
        (unreachable)
      )
      (else
        (nop)
      )
    )
  )

  ;; CHECK:      (func $if-unreachable-flip (type $0) (param $x i32)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\01")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (nop)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (else
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $if-unreachable-flip (param $x i32)
    ;; As above, but flipped, so the hint is flipped too.
    (if
      (local.get $x)
      (then
        (nop)
      )
      (else
        (unreachable)
      )
    )
  )
)

