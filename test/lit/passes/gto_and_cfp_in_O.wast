;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.

;; RUN: foreach %s %t wasm-opt -O -all --nominal                -S -o - | filecheck %s --check-prefix OPENED
;; RUN: foreach %s %t wasm-opt -O -all --nominal --closed-world -S -o - | filecheck %s --check-prefix CLOSED

;; Test that -O, with nominal typing + GC enabled, will run global type
;; optimization in conjunction with constant field propagation etc. For GTO,
;; we also need the closed world flag, as otherwise we will not modify the shape
;; of struct types.

(module
  ;; OPENED:      (type $struct (struct_subtype (field (mut (ref $none_=>_none))) (field (mut i32)) data))
  (type $struct (struct_subtype (field (mut funcref)) (field (mut i32)) data))

  ;; OPENED:      (type $none_=>_none (func_subtype func))

  ;; OPENED:      (type $none_=>_i32 (func_subtype (result i32) func))

  ;; OPENED:      (global $glob (ref $struct) (struct.new $struct
  ;; OPENED-NEXT:  (ref.func $by-ref)
  ;; OPENED-NEXT:  (i32.const 100)
  ;; OPENED-NEXT: ))
  (global $glob (ref $struct) (struct.new $struct
    (ref.func $by-ref)
    (i32.const 100)
  ))

  ;; OPENED:      (export "main" (func $main))

  ;; OPENED:      (func $by-ref (type $none_=>_none) (; has Stack IR ;)
  ;; OPENED-NEXT:  (struct.set $struct 1
  ;; OPENED-NEXT:   (global.get $glob)
  ;; OPENED-NEXT:   (i32.const 200)
  ;; OPENED-NEXT:  )
  ;; OPENED-NEXT: )
  (func $by-ref
    ;; This function is kept alive by the reference in $glob. After we remove
    ;; the field that the funcref is written to, we remove the funcref, which
    ;; means this function can be removed.
    ;;
    ;; Once it is removed, this write no longer exists, and does not hamper
    ;; constant field propagation from inferring the value of the i32 field.
    (struct.set $struct 1
      (global.get $glob)
      (i32.const 200)
    )
  )

  ;; OPENED:      (func $main (type $none_=>_i32) (; has Stack IR ;) (result i32)
  ;; OPENED-NEXT:  (struct.get $struct 1
  ;; OPENED-NEXT:   (global.get $glob)
  ;; OPENED-NEXT:  )
  ;; OPENED-NEXT: )
  ;; CLOSED:      (type $none_=>_i32 (func_subtype (result i32) func))

  ;; CLOSED:      (export "main" (func $main))

  ;; CLOSED:      (func $main (type $none_=>_i32) (; has Stack IR ;) (result i32)
  ;; CLOSED-NEXT:  (i32.const 100)
  ;; CLOSED-NEXT: )
  (func $main (export "main") (result i32)
    ;; After all the above optimizations, we can infer that $main should simply
    ;; return 100, at least in a closed world.
    (struct.get $struct 1
      (global.get $glob)
    )
  )
)

