;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.
;; NOTE: This test was ported using port_passes_tests_to_lit.py and could be cleaned up.

;; Run -O2 and then -O3. Both the -O2 and -O3 should lift and lower strings. If
;; the -O2 somehow prevented the -O3 from doing so (say, forgetting to reset the
;; state between the paired lifting and lowering pass) then we would see that
;; -O3 failed to fully optimize, as the function here requires
;; --precompute-propagate which only -O3 does.

;; RUN: foreach %s %t wasm-opt -O2 -O3 -all -S -o - | filecheck %s

(module
  (type $array16 (array (mut i16)))

  (import "\'" "foo" (global $foo (ref extern)))

  (import "\'" "bar" (global $bar (ref extern)))

  (import "wasm:js-string" "concat" (func $concat (param externref externref) (result (ref extern))))

  ;; CHECK:      (type $0 (func (result (ref extern))))

  ;; CHECK:      (import "\'" "foobarbar" (global $"string.const_\"foobarbar\"" (ref extern)))

  ;; CHECK:      (export "string.concat" (func $string.concat))

  ;; CHECK:      (func $string.concat (type $0) (result (ref extern))
  ;; CHECK-NEXT:  (global.get $"string.const_\"foobarbar\"")
  ;; CHECK-NEXT: )
  (func $string.concat (export "string.concat") (result (ref extern))
    (local $x (ref extern))
    (local $y (ref extern))
    ;; -O2 does not propagate the string constants through the locals, but -O3
    ;; will, allowing this function to return the concatenated final string.
    (local.set $x
      (global.get $foo)
    )
    (local.set $y
      (global.get $bar)
    )
    ;; Add an extra concat that is written to $x, so the local has multiple
    ;; writes (otherwise, simplify-locals manages to remove the locals, and -O2
    ;; does just as well as -O3).
    (local.set $x
      (call $concat
        (local.get $x)
        (local.get $y)
      )
    )
    (call $concat
      (local.get $x)
      (local.get $y)
    )
  )
)
