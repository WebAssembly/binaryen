;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s -all --optimize-instructions -S -o - | filecheck %s

(module
  (memory $0 16 17)

  (func $i32-direct (param $x i32)
    ;; We do not need to sign-extend twice.
    (drop
      (i32.extend8_s
        (i32.shr_s
          (i32.shl
            (local.get $x)
            (i32.const 24)
          )
          (i32.const 24)
        )
      )
    )
  )

  (func $i32-local
    ;; The local is sign-extended, so the i32.extend can be removed.
    (local $temp i32)
    (local.set $temp
      (i32.load8_s
        (i32.const 22)
      )
    )
    (drop
      (i32.extend8_s
        (local.get $temp)
      )
    )
  )

  (func $i32-local-i16
    ;; As above with i16.
    (local $temp i32)
    (local.set $temp
      (i32.load16_s
        (i32.const 22)
      )
    )
    (drop
      (i32.extend16_s
        (local.get $temp)
      )
    )
  )

  (func $i32-local-i16
    ;; As above with in i8/i16 mismatch. We do not optimize.
    (local $temp i32)
    (local.set $temp
      (i32.load8_s
        (i32.const 22)
      )
    )
    (drop
      (i32.extend16_s
        (local.get $temp)
      )
    )
  )

  (func $i64
    ;; As above, but with i64.
    (local $temp i64)
    (local.set $temp
      (i64.load8_s
        (i32.const 22)
      )
    )
    (drop
      (i64.extend8_s
        (local.get $temp)
      )
    )
  )

  (func $i64-i16
    (local $temp i64)
    (local.set $temp
      (i64.load16_s
        (i32.const 22)
      )
    )
    (drop
      (i64.extend16_s
        (local.get $temp)
      )
    )
  )

  (func $i64-i32
    (local $temp i64)
    (local.set $temp
      (i64.load32_s
        (i32.const 22)
      )
    )
    (drop
      (i64.extend32_s
        (local.get $temp)
      )
    )
  )
)
