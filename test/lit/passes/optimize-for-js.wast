;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s --optimize-for-js -all -S -o - \
;; RUN:  | filecheck %s

(module
 (memory 0)

 ;; i32.popcnt(x) == 1,
 ;; i64.popcnt(x) == 1   =>   !!x & !(x & (x - 1))

 ;; CHECK:      (func $is-power-of-2_32 (param $x i32) (result i32)
 ;; CHECK-NEXT:  (i32.and
 ;; CHECK-NEXT:   (i32.eqz
 ;; CHECK-NEXT:    (i32.eqz
 ;; CHECK-NEXT:     (local.get $x)
 ;; CHECK-NEXT:    )
 ;; CHECK-NEXT:   )
 ;; CHECK-NEXT:   (i32.eqz
 ;; CHECK-NEXT:    (i32.and
 ;; CHECK-NEXT:     (local.get $x)
 ;; CHECK-NEXT:     (i32.sub
 ;; CHECK-NEXT:      (local.get $x)
 ;; CHECK-NEXT:      (i32.const 1)
 ;; CHECK-NEXT:     )
 ;; CHECK-NEXT:    )
 ;; CHECK-NEXT:   )
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $is-power-of-2_32 (param $x i32) (result i32)
  (i32.eq
   (i32.popcnt (local.get $x))
   (i32.const 1)
  )
 )
 ;; CHECK:      (func $is-power-of-2_expr_32 (param $x i64) (result i32)
 ;; CHECK-NEXT:  (local $1 i32)
 ;; CHECK-NEXT:  (i32.and
 ;; CHECK-NEXT:   (i32.eqz
 ;; CHECK-NEXT:    (i32.eqz
 ;; CHECK-NEXT:     (local.tee $1
 ;; CHECK-NEXT:      (i32.wrap_i64
 ;; CHECK-NEXT:       (local.get $x)
 ;; CHECK-NEXT:      )
 ;; CHECK-NEXT:     )
 ;; CHECK-NEXT:    )
 ;; CHECK-NEXT:   )
 ;; CHECK-NEXT:   (i32.eqz
 ;; CHECK-NEXT:    (i32.and
 ;; CHECK-NEXT:     (local.get $1)
 ;; CHECK-NEXT:     (i32.sub
 ;; CHECK-NEXT:      (local.get $1)
 ;; CHECK-NEXT:      (i32.const 1)
 ;; CHECK-NEXT:     )
 ;; CHECK-NEXT:    )
 ;; CHECK-NEXT:   )
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $is-power-of-2_expr_32 (param $x i64) (result i32)
  (i32.eq
   (i32.popcnt (i32.wrap_i64 (local.get $x)))
   (i32.const 1)
  )
 )
 ;; CHECK:      (func $is-power-of-2_64 (param $x i64) (result i32)
 ;; CHECK-NEXT:  (i32.and
 ;; CHECK-NEXT:   (i32.eqz
 ;; CHECK-NEXT:    (i64.eqz
 ;; CHECK-NEXT:     (local.get $x)
 ;; CHECK-NEXT:    )
 ;; CHECK-NEXT:   )
 ;; CHECK-NEXT:   (i64.eqz
 ;; CHECK-NEXT:    (i64.and
 ;; CHECK-NEXT:     (local.get $x)
 ;; CHECK-NEXT:     (i64.sub
 ;; CHECK-NEXT:      (local.get $x)
 ;; CHECK-NEXT:      (i64.const 1)
 ;; CHECK-NEXT:     )
 ;; CHECK-NEXT:    )
 ;; CHECK-NEXT:   )
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $is-power-of-2_64 (param $x i64) (result i32)
  (i64.eq
   (i64.popcnt (local.get $x))
   (i64.const 1)
  )
 )

 ;; i64.store(ptr, C)   =>   f64.store(ptr, reinterpret<f64>(C))

 ;; CHECK:      (func $store-const-zero (param $ptr i32)
 ;; CHECK-NEXT:  (f64.store
 ;; CHECK-NEXT:   (local.get $ptr)
 ;; CHECK-NEXT:   (f64.const 0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $store-const-zero (param $ptr i32)
  (i64.store (local.get $ptr) (i64.const 0))
 )
 ;; CHECK:      (func $store-const-one (param $ptr i32)
 ;; CHECK-NEXT:  (f64.store
 ;; CHECK-NEXT:   (local.get $ptr)
 ;; CHECK-NEXT:   (f64.const 5e-324)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $store-const-one (param $ptr i32)
  (i64.store (local.get $ptr) (i64.const 1))
 )
 ;; CHECK:      (func $store-const-two (param $ptr i32)
 ;; CHECK-NEXT:  (f64.store
 ;; CHECK-NEXT:   (local.get $ptr)
 ;; CHECK-NEXT:   (f64.const 1e-323)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $store-const-two (param $ptr i32)
  (i64.store (local.get $ptr) (i64.const 2))
 )
 ;; CHECK:      (func $store-const-smin (param $ptr i32)
 ;; CHECK-NEXT:  (f64.store
 ;; CHECK-NEXT:   (local.get $ptr)
 ;; CHECK-NEXT:   (f64.const -0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $store-const-smin (param $ptr i32)
  (i64.store (local.get $ptr) (i64.const 0x8000000000000000))
 )
 ;; CHECK:      (func $store-const-minus-inf (param $ptr i32)
 ;; CHECK-NEXT:  (f64.store
 ;; CHECK-NEXT:   (local.get $ptr)
 ;; CHECK-NEXT:   (f64.const -inf)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $store-const-minus-inf (param $ptr i32)
  (i64.store (local.get $ptr) (i64.const 0xFFF0000000000000))
 )
 ;; CHECK:      (func $store-unsafe-const-1_skip (param $ptr i32)
 ;; CHECK-NEXT:  (i64.store
 ;; CHECK-NEXT:   (local.get $ptr)
 ;; CHECK-NEXT:   (i64.const -1)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $store-unsafe-const-1_skip (param $ptr i32)
  (i64.store (local.get $ptr) (i64.const -1)) ;; will be NaN
 )
 ;; CHECK:      (func $store-unsafe-const-2_skip (param $ptr i32)
 ;; CHECK-NEXT:  (i64.store
 ;; CHECK-NEXT:   (local.get $ptr)
 ;; CHECK-NEXT:   (i64.const -2)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $store-unsafe-const-2_skip (param $ptr i32)
  (i64.store (local.get $ptr) (i64.const -2))
 )
 ;; CHECK:      (func $store-unsafe-const-3_skip (param $ptr i32)
 ;; CHECK-NEXT:  (i64.store
 ;; CHECK-NEXT:   (local.get $ptr)
 ;; CHECK-NEXT:   (i64.const -2251799813685248)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $store-unsafe-const-3_skip (param $ptr i32)
  (i64.store (local.get $ptr) (i64.const 0xFFF8000000000000))
 )
 ;; CHECK:      (func $store-non-const_skip (param $ptr i32) (param $x i64)
 ;; CHECK-NEXT:  (i64.store
 ;; CHECK-NEXT:   (local.get $ptr)
 ;; CHECK-NEXT:   (local.get $x)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $store-non-const_skip (param $ptr i32) (param $x i64)
  (i64.store (local.get $ptr) (local.get $x))
 )
)
