;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s --optimize-instructions --ignore-implicit-traps --enable-reference-types --enable-gc -S -o - \
;; RUN:   | filecheck %s
;; RUN: wasm-opt %s --optimize-instructions --ignore-implicit-traps --enable-reference-types --enable-gc --nominal -S -o - \
;; RUN:   | filecheck %s --check-prefix NOMNL
;; Also test trapsNeverHappen (with nominal; no need for both type system modes).
;; RUN: wasm-opt %s --optimize-instructions --traps-never-happen --enable-reference-types --enable-gc --nominal -S -o - \
;; RUN:   | filecheck %s --check-prefix TNHNL

(module
  ;; CHECK:      (type $parent (struct (field i32)))
  ;; NOMNL:      (type $parent (struct (field i32)))
  ;; TNHNL:      (type $parent (struct (field i32)))
  (type $parent (struct (field i32)))
  ;; CHECK:      (type $child (struct (field i32) (field f64)))
  ;; NOMNL:      (type $child (struct (field i32) (field f64)) (extends $parent))
  ;; TNHNL:      (type $child (struct (field i32) (field f64)) (extends $parent))
  (type $child  (struct (field i32) (field f64)) (extends $parent))
  ;; CHECK:      (type $other (struct (field i64) (field f32)))
  ;; NOMNL:      (type $other (struct (field i64) (field f32)))
  ;; TNHNL:      (type $other (struct (field i64) (field f32)))
  (type $other  (struct (field i64) (field f32)))

  ;; CHECK:      (func $foo
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT: )
  ;; NOMNL:      (func $foo
  ;; NOMNL-NEXT:  (nop)
  ;; NOMNL-NEXT: )
  ;; TNHNL:      (func $foo
  ;; TNHNL-NEXT:  (nop)
  ;; TNHNL-NEXT: )
  (func $foo)


  ;; CHECK:      (func $ref-cast-iit (param $parent (ref $parent)) (param $child (ref $child)) (param $other (ref $other)) (param $parent-rtt (rtt $parent)) (param $child-rtt (rtt $child)) (param $other-rtt (rtt $other))
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (block (result (ref $parent))
  ;; CHECK-NEXT:    (drop
  ;; CHECK-NEXT:     (local.get $parent-rtt)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (local.get $parent)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (block (result (ref $child))
  ;; CHECK-NEXT:    (drop
  ;; CHECK-NEXT:     (local.get $parent-rtt)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (local.get $child)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (ref.cast
  ;; CHECK-NEXT:    (local.get $parent)
  ;; CHECK-NEXT:    (local.get $child-rtt)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (ref.cast
  ;; CHECK-NEXT:    (local.get $child)
  ;; CHECK-NEXT:    (local.get $other-rtt)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  ;; NOMNL:      (func $ref-cast-iit (param $parent (ref $parent)) (param $child (ref $child)) (param $other (ref $other)) (param $parent-rtt (rtt $parent)) (param $child-rtt (rtt $child)) (param $other-rtt (rtt $other))
  ;; NOMNL-NEXT:  (drop
  ;; NOMNL-NEXT:   (block (result (ref $parent))
  ;; NOMNL-NEXT:    (drop
  ;; NOMNL-NEXT:     (local.get $parent-rtt)
  ;; NOMNL-NEXT:    )
  ;; NOMNL-NEXT:    (local.get $parent)
  ;; NOMNL-NEXT:   )
  ;; NOMNL-NEXT:  )
  ;; NOMNL-NEXT:  (drop
  ;; NOMNL-NEXT:   (block (result (ref $child))
  ;; NOMNL-NEXT:    (drop
  ;; NOMNL-NEXT:     (local.get $parent-rtt)
  ;; NOMNL-NEXT:    )
  ;; NOMNL-NEXT:    (local.get $child)
  ;; NOMNL-NEXT:   )
  ;; NOMNL-NEXT:  )
  ;; NOMNL-NEXT:  (drop
  ;; NOMNL-NEXT:   (ref.cast
  ;; NOMNL-NEXT:    (local.get $parent)
  ;; NOMNL-NEXT:    (local.get $child-rtt)
  ;; NOMNL-NEXT:   )
  ;; NOMNL-NEXT:  )
  ;; NOMNL-NEXT:  (drop
  ;; NOMNL-NEXT:   (ref.cast
  ;; NOMNL-NEXT:    (local.get $child)
  ;; NOMNL-NEXT:    (local.get $other-rtt)
  ;; NOMNL-NEXT:   )
  ;; NOMNL-NEXT:  )
  ;; NOMNL-NEXT: )
  ;; TNHNL:      (func $ref-cast-iit (param $parent (ref $parent)) (param $child (ref $child)) (param $other (ref $other)) (param $parent-rtt (rtt $parent)) (param $child-rtt (rtt $child)) (param $other-rtt (rtt $other))
  ;; TNHNL-NEXT:  (drop
  ;; TNHNL-NEXT:   (block (result (ref $parent))
  ;; TNHNL-NEXT:    (drop
  ;; TNHNL-NEXT:     (local.get $parent-rtt)
  ;; TNHNL-NEXT:    )
  ;; TNHNL-NEXT:    (local.get $parent)
  ;; TNHNL-NEXT:   )
  ;; TNHNL-NEXT:  )
  ;; TNHNL-NEXT:  (drop
  ;; TNHNL-NEXT:   (block (result (ref $child))
  ;; TNHNL-NEXT:    (drop
  ;; TNHNL-NEXT:     (local.get $parent-rtt)
  ;; TNHNL-NEXT:    )
  ;; TNHNL-NEXT:    (local.get $child)
  ;; TNHNL-NEXT:   )
  ;; TNHNL-NEXT:  )
  ;; TNHNL-NEXT:  (drop
  ;; TNHNL-NEXT:   (ref.cast
  ;; TNHNL-NEXT:    (local.get $parent)
  ;; TNHNL-NEXT:    (local.get $child-rtt)
  ;; TNHNL-NEXT:   )
  ;; TNHNL-NEXT:  )
  ;; TNHNL-NEXT:  (drop
  ;; TNHNL-NEXT:   (ref.cast
  ;; TNHNL-NEXT:    (local.get $child)
  ;; TNHNL-NEXT:    (local.get $other-rtt)
  ;; TNHNL-NEXT:   )
  ;; TNHNL-NEXT:  )
  ;; TNHNL-NEXT: )
  (func $ref-cast-iit
    (param $parent (ref $parent))
    (param $child (ref $child))
    (param $other (ref $other))

    (param $parent-rtt (rtt $parent))
    (param $child-rtt (rtt $child))
    (param $other-rtt (rtt $other))

    ;; a cast of parent to an rtt of parent: static subtyping matches.
    (drop
      (ref.cast
        (local.get $parent)
        (local.get $parent-rtt)
      )
    )
    ;; a cast of child to a supertype: static subtyping matches.
    (drop
      (ref.cast
        (local.get $child)
        (local.get $parent-rtt)
      )
    )
    ;; a cast of parent to a subtype: static subtyping does not match.
    (drop
      (ref.cast
        (local.get $parent)
        (local.get $child-rtt)
      )
    )
    ;; a cast of child to an unrelated type: static subtyping does not match.
    (drop
      (ref.cast
        (local.get $child)
        (local.get $other-rtt)
      )
    )
  )

  ;; CHECK:      (func $ref-cast-iit-bad (param $parent (ref $parent)) (param $parent-rtt (rtt $parent))
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (ref.cast
  ;; CHECK-NEXT:    (block $block (result (ref $parent))
  ;; CHECK-NEXT:     (call $foo)
  ;; CHECK-NEXT:     (local.get $parent)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (block $block0 (result (rtt $parent))
  ;; CHECK-NEXT:     (call $foo)
  ;; CHECK-NEXT:     (local.get $parent-rtt)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (ref.cast
  ;; CHECK-NEXT:    (local.get $parent)
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (ref.cast
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:    (local.get $parent-rtt)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  ;; NOMNL:      (func $ref-cast-iit-bad (param $parent (ref $parent)) (param $parent-rtt (rtt $parent))
  ;; NOMNL-NEXT:  (drop
  ;; NOMNL-NEXT:   (ref.cast
  ;; NOMNL-NEXT:    (block $block (result (ref $parent))
  ;; NOMNL-NEXT:     (call $foo)
  ;; NOMNL-NEXT:     (local.get $parent)
  ;; NOMNL-NEXT:    )
  ;; NOMNL-NEXT:    (block $block0 (result (rtt $parent))
  ;; NOMNL-NEXT:     (call $foo)
  ;; NOMNL-NEXT:     (local.get $parent-rtt)
  ;; NOMNL-NEXT:    )
  ;; NOMNL-NEXT:   )
  ;; NOMNL-NEXT:  )
  ;; NOMNL-NEXT:  (drop
  ;; NOMNL-NEXT:   (ref.cast
  ;; NOMNL-NEXT:    (local.get $parent)
  ;; NOMNL-NEXT:    (unreachable)
  ;; NOMNL-NEXT:   )
  ;; NOMNL-NEXT:  )
  ;; NOMNL-NEXT:  (drop
  ;; NOMNL-NEXT:   (ref.cast
  ;; NOMNL-NEXT:    (unreachable)
  ;; NOMNL-NEXT:    (local.get $parent-rtt)
  ;; NOMNL-NEXT:   )
  ;; NOMNL-NEXT:  )
  ;; NOMNL-NEXT: )
  ;; TNHNL:      (func $ref-cast-iit-bad (param $parent (ref $parent)) (param $parent-rtt (rtt $parent))
  ;; TNHNL-NEXT:  (drop
  ;; TNHNL-NEXT:   (ref.cast
  ;; TNHNL-NEXT:    (block $block (result (ref $parent))
  ;; TNHNL-NEXT:     (call $foo)
  ;; TNHNL-NEXT:     (local.get $parent)
  ;; TNHNL-NEXT:    )
  ;; TNHNL-NEXT:    (block $block0 (result (rtt $parent))
  ;; TNHNL-NEXT:     (call $foo)
  ;; TNHNL-NEXT:     (local.get $parent-rtt)
  ;; TNHNL-NEXT:    )
  ;; TNHNL-NEXT:   )
  ;; TNHNL-NEXT:  )
  ;; TNHNL-NEXT:  (drop
  ;; TNHNL-NEXT:   (ref.cast
  ;; TNHNL-NEXT:    (local.get $parent)
  ;; TNHNL-NEXT:    (unreachable)
  ;; TNHNL-NEXT:   )
  ;; TNHNL-NEXT:  )
  ;; TNHNL-NEXT:  (drop
  ;; TNHNL-NEXT:   (ref.cast
  ;; TNHNL-NEXT:    (unreachable)
  ;; TNHNL-NEXT:    (local.get $parent-rtt)
  ;; TNHNL-NEXT:   )
  ;; TNHNL-NEXT:  )
  ;; TNHNL-NEXT: )
  (func $ref-cast-iit-bad
    (param $parent (ref $parent))
    (param $parent-rtt (rtt $parent))

    ;; ignore due to the inability to reorder
    (drop
      (ref.cast
        (block (result (ref $parent))
          (call $foo)
          (local.get $parent)
        )
        (block (result (rtt $parent))
          (call $foo)
          (local.get $parent-rtt)
        )
      )
    )

    ;; ignore unreachability
    (drop
      (ref.cast
        (local.get $parent)
        (unreachable)
      )
    )
    (drop
      (ref.cast
        (unreachable)
        (local.get $parent-rtt)
      )
    )
  )

  ;; CHECK:      (func $ref-eq-ref-cast (param $x eqref)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  ;; NOMNL:      (func $ref-eq-ref-cast (param $x eqref)
  ;; NOMNL-NEXT:  (drop
  ;; NOMNL-NEXT:   (i32.const 1)
  ;; NOMNL-NEXT:  )
  ;; NOMNL-NEXT: )
  ;; TNHNL:      (func $ref-eq-ref-cast (param $x eqref)
  ;; TNHNL-NEXT:  (drop
  ;; TNHNL-NEXT:   (i32.const 1)
  ;; TNHNL-NEXT:  )
  ;; TNHNL-NEXT: )
  (func $ref-eq-ref-cast (param $x eqref)
    ;; we can look through a ref.cast if we ignore traps
    (drop
      (ref.eq
        (local.get $x)
        (ref.cast
          (local.get $x)
          (rtt.canon $parent)
        )
      )
    )
  )
)
