;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: foreach %s %t wasm-opt --all-features --merge-functions -S -o - | filecheck %s

(module
  ;; CHECK:      (type $[i8] (array i8))
  (type $[i8] (array i8))
  ;; CHECK:      (func $callee-0 (result i32)
  ;; CHECK-NEXT:  (i32.const 0)
  ;; CHECK-NEXT: )
  (func $callee-0 (result i32) (i32.const 0))
  ;; CHECK:      (func $callee-1 (result i32)
  ;; CHECK-NEXT:  (i32.const 1)
  ;; CHECK-NEXT: )
  (func $callee-1 (result i32) (i32.const 1))
  ;; CHECK:      (func $callee-2 (result i32)
  ;; CHECK-NEXT:  (i32.const 2)
  ;; CHECK-NEXT: )
  (func $callee-2 (result i32) (i32.const 2))

  ;; CHECK:      (func $callee-take-arg-0 (param $0 i32) (result i32)
  ;; CHECK-NEXT:  (i32.const 0)
  ;; CHECK-NEXT: )
  (func $callee-take-arg-0 (param i32) (result i32) (i32.const 0))
  ;; CHECK:      (func $callee-take-arg-1 (param $0 i32) (result i32)
  ;; CHECK-NEXT:  (i32.const 1)
  ;; CHECK-NEXT: )
  (func $callee-take-arg-1 (param i32) (result i32) (i32.const 1))
  ;; CHECK:      (func $callee-take-arg-2 (param $0 i32) (result i32)
  ;; CHECK-NEXT:  (i32.const 2)
  ;; CHECK-NEXT: )
  (func $callee-take-arg-2 (param i32) (result i32) (i32.const 2))

  ;; CHECK:      (func $yes-call-callee-0 (result i32)
  ;; CHECK-NEXT:  (call $byn$mgfn-shared$yes-call-callee-0
  ;; CHECK-NEXT:   (ref.func $callee-0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $yes-call-callee-0 (result i32)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (call $callee-0)
  )
  ;; CHECK:      (func $yes-call-callee-1 (result i32)
  ;; CHECK-NEXT:  (call $byn$mgfn-shared$yes-call-callee-0
  ;; CHECK-NEXT:   (ref.func $callee-1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $yes-call-callee-1 (result i32)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (call $callee-1)
  )
  ;; CHECK:      (func $yes-call-callee-2 (result i32)
  ;; CHECK-NEXT:  (call $byn$mgfn-shared$yes-call-callee-0
  ;; CHECK-NEXT:   (ref.func $callee-2)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $yes-call-callee-2 (result i32)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (call $callee-2)
  )


  ;; CHECK:      (func $yes-call-callee-take-arg-0 (result i32)
  ;; CHECK-NEXT:  (call $byn$mgfn-shared$yes-call-callee-take-arg-0
  ;; CHECK-NEXT:   (ref.func $callee-take-arg-0)
  ;; CHECK-NEXT:   (i32.const 0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $yes-call-callee-take-arg-0 (result i32)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (call $callee-take-arg-0 (i32.const 0))
  )
  ;; CHECK:      (func $yes-call-callee-take-arg-1 (result i32)
  ;; CHECK-NEXT:  (call $byn$mgfn-shared$yes-call-callee-take-arg-0
  ;; CHECK-NEXT:   (ref.func $callee-take-arg-1)
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $yes-call-callee-take-arg-1 (result i32)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (call $callee-take-arg-1 (i32.const 1))
  )


  ;; CHECK:      (func $no-call-callee-take-arg-0 (result i32)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (call $callee-take-arg-0
  ;; CHECK-NEXT:   (block $block (result i32)
  ;; CHECK-NEXT:    (drop
  ;; CHECK-NEXT:     (i32.const 0)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $no-call-callee-take-arg-0 (result i32)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (call $callee-take-arg-0
      (block (result i32)
        (drop (i32.const 0))
        (i32.const 0)
      )
    )
  )
  ;; CHECK:      (func $no-call-callee-take-arg-1 (result i32)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (call $callee-take-arg-1
  ;; CHECK-NEXT:   (block $block (result i32)
  ;; CHECK-NEXT:    (drop
  ;; CHECK-NEXT:     (i32.const 0)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (drop
  ;; CHECK-NEXT:     (i32.const 0)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $no-call-callee-take-arg-1 (result i32)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (call $callee-take-arg-1
      (block (result i32)
        (drop (i32.const 0))
        (drop (i32.const 0))
        (i32.const 0)
      )
    )
  )


  ;; CHECK:      (func $take-ref-null-data (param $0 (ref null data))
  ;; CHECK-NEXT:  (unreachable)
  ;; CHECK-NEXT: )
  (func $take-ref-null-data (param (ref null data))
    (unreachable)
  )
  ;; CHECK:      (func $take-ref-eq (param $0 (ref eq))
  ;; CHECK-NEXT:  (unreachable)
  ;; CHECK-NEXT: )
  (func $take-ref-eq (param (ref eq))
    (unreachable)
  )
  ;; CHECK:      (func $no-call-subtyping-same-operand-0
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (call $take-ref-null-data
  ;; CHECK-NEXT:   (array.init_static $[i8])
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $no-call-subtyping-same-operand-0
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (call $take-ref-null-data
      (array.init_static $[i8])
    )
  )
  ;; CHECK:      (func $no-call-subtyping-same-operand-1
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (call $take-ref-eq
  ;; CHECK-NEXT:   (array.init_static $[i8])
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $no-call-subtyping-same-operand-1
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (call $take-ref-eq
      (array.init_static $[i8])
    )
  )

)
