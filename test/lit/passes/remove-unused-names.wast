;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.
;; NOTE: This test was ported using port_test.py and could be cleaned up.

;; RUN: foreach %s %t wasm-opt --remove-unused-names -S -o - | filecheck %s

(module
  (memory 256 256)
  ;; CHECK:      (type $1 (func))

  ;; CHECK:      (type $0 (func (param i32) (result i32)))
  (type $0 (func (param i32) (result i32)))
  (type $1 (func))
  ;; CHECK:      (type $none_=>_i32 (func (result i32)))

  ;; CHECK:      (memory $0 256 256)

  ;; CHECK:      (func $b0 (param $i1 i32) (result i32)
  ;; CHECK-NEXT:  (i32.const 0)
  ;; CHECK-NEXT: )
  (func $b0 (type $0) (param $i1 i32) (result i32)
    (block $topmost (result i32)
      (i32.const 0)
    )
  )
  ;; CHECK:      (func $loops
  ;; CHECK-NEXT:  (block $out
  ;; CHECK-NEXT:   (loop $in
  ;; CHECK-NEXT:    (br $out)
  ;; CHECK-NEXT:    (br $in)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (loop $in0
  ;; CHECK-NEXT:   (br $in0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT:  (block $out4
  ;; CHECK-NEXT:   (loop $in5
  ;; CHECK-NEXT:    (br $out4)
  ;; CHECK-NEXT:    (br $in5)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (block $out6
  ;; CHECK-NEXT:   (loop $in7
  ;; CHECK-NEXT:    (br $out6)
  ;; CHECK-NEXT:    (br $in7)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (loop $in8
  ;; CHECK-NEXT:   (block $out9
  ;; CHECK-NEXT:    (br $out9)
  ;; CHECK-NEXT:    (br $in8)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (loop $in10
  ;; CHECK-NEXT:   (block $out11
  ;; CHECK-NEXT:    (br $out11)
  ;; CHECK-NEXT:    (br $in10)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (block $out12
  ;; CHECK-NEXT:   (loop $in13
  ;; CHECK-NEXT:    (br $out12)
  ;; CHECK-NEXT:    (br $in13)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $loops (type $1)
    (block $out
      (loop $in
        (br $out)
        (br $in)
      )
    )
    (loop $in
      (br $in)
    )
    (loop $in
      (nop)
    )
    (block $out
      (loop $in
        (block $out
          (loop $in
            (br $out)
            (br $in)
          )
        )
      )
    )
    (block $out
      (loop $in
        (br $out)
        (br $in)
      )
    )
    (loop $in
      (block $out
        (br $out)
        (br $in)
      )
    )
    (loop $in
      (block $out
        (br $out)
        (br $in)
      )
    )
    (block $out
      (loop $in
        (br $out)
        (br $in)
      )
    )
  )
  ;; CHECK:      (func $merges
  ;; CHECK-NEXT:  (block $b
  ;; CHECK-NEXT:   (br $b)
  ;; CHECK-NEXT:   (br $b)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (block $b15
  ;; CHECK-NEXT:   (br_table $b15 $b15
  ;; CHECK-NEXT:    (i32.const 3)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (block $b17
  ;; CHECK-NEXT:   (br_table $b17 $b17
  ;; CHECK-NEXT:    (i32.const 3)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $merges (type $1)
    (block $a
      (block $b
        (br $a)
        (br $b)
      )
    )
    (block $a
      (block $b
        (br_table $a $b
          (i32.const 3)
        )
      )
    )
    (block $a
      (block $b
        (br_table $b $a
          (i32.const 3)
        )
      )
    )
  )
  ;; CHECK:      (func $merge-typed-with-unreachable-child (result i32)
  ;; CHECK-NEXT:  (local $0 f32)
  ;; CHECK-NEXT:  (block $label$1 (result i32)
  ;; CHECK-NEXT:   (br_if $label$1
  ;; CHECK-NEXT:    (i32.const 1)
  ;; CHECK-NEXT:    (br_if $label$1
  ;; CHECK-NEXT:     (i32.const 0)
  ;; CHECK-NEXT:     (br $label$1
  ;; CHECK-NEXT:      (i32.const 0)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $merge-typed-with-unreachable-child (result i32)
   (local $0 f32)
   (block $label$0 (result i32)
    (block $label$1 (result i32)
     (br_if $label$1
      (i32.const 1)
      (br_if $label$0
       (i32.const 0)
       (br $label$0
        (i32.const 0)
       )
      )
     )
    )
   )
  )
  ;; CHECK:      (func $loop-with-child-of-other-type
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (loop (result i32)
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $loop-with-child-of-other-type
   (drop
    (loop (result i32) ;; the loop has no name, but can't be replaced by the child
     (block $l         ;; as the type differs
      (unreachable)
     )
    )
   )
  )
)
