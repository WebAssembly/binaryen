;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.

;; As in monomorphize-types.wast, test in both "always" mode, which always
;; monomorphizes, and in "careful" mode which does it only when it appears to
;; actually help.

;; This file specifically tests that we optimize constants in MVP mode (most
;; of the pass benefits from other features, but we should still do work in
;; MVP).

;; RUN: foreach %s %t wasm-opt --monomorphize-always -all -S -o - | filecheck %s --check-prefix ALWAYS
;; RUN: foreach %s %t wasm-opt --monomorphize        -all -S -o - | filecheck %s --check-prefix CAREFUL

(module
  ;; ALWAYS:      (elem declare func $calls)

  ;; ALWAYS:      (func $calls (type $2)
  ;; ALWAYS-NEXT:  (call $target_8
  ;; ALWAYS-NEXT:   (i32.eqz
  ;; ALWAYS-NEXT:    (i32.const 2)
  ;; ALWAYS-NEXT:   )
  ;; ALWAYS-NEXT:  )
  ;; ALWAYS-NEXT:  (call $target_8
  ;; ALWAYS-NEXT:   (i32.eqz
  ;; ALWAYS-NEXT:    (i32.const 3)
  ;; ALWAYS-NEXT:   )
  ;; ALWAYS-NEXT:  )
  ;; ALWAYS-NEXT:  (call $target_9
  ;; ALWAYS-NEXT:   (i32.eqz
  ;; ALWAYS-NEXT:    (i32.const 2)
  ;; ALWAYS-NEXT:   )
  ;; ALWAYS-NEXT:  )
  ;; ALWAYS-NEXT: )
  ;; CAREFUL:      (elem declare func $calls)

  ;; CAREFUL:      (func $calls (type $2)
  ;; CAREFUL-NEXT:  (call $target
  ;; CAREFUL-NEXT:   (i32.const 1)
  ;; CAREFUL-NEXT:   (i32.eqz
  ;; CAREFUL-NEXT:    (i32.const 2)
  ;; CAREFUL-NEXT:   )
  ;; CAREFUL-NEXT:   (ref.func $calls)
  ;; CAREFUL-NEXT:   (string.const "foo")
  ;; CAREFUL-NEXT:  )
  ;; CAREFUL-NEXT:  (call $target
  ;; CAREFUL-NEXT:   (i32.const 1)
  ;; CAREFUL-NEXT:   (i32.eqz
  ;; CAREFUL-NEXT:    (i32.const 3)
  ;; CAREFUL-NEXT:   )
  ;; CAREFUL-NEXT:   (ref.func $calls)
  ;; CAREFUL-NEXT:   (string.const "foo")
  ;; CAREFUL-NEXT:  )
  ;; CAREFUL-NEXT:  (call $target
  ;; CAREFUL-NEXT:   (i32.const 3)
  ;; CAREFUL-NEXT:   (i32.eqz
  ;; CAREFUL-NEXT:    (i32.const 2)
  ;; CAREFUL-NEXT:   )
  ;; CAREFUL-NEXT:   (ref.func $calls)
  ;; CAREFUL-NEXT:   (string.const "foo")
  ;; CAREFUL-NEXT:  )
  ;; CAREFUL-NEXT: )
  (func $call
    ;; The first parameter can be monomorphized.
    (call $target
      (i32.const 1)
      (i32.eqz
        (i32.const 2)
      )
    )

  ;; ALWAYS:      (func $target (type $1) (param $x i32) (param $y i32) (param $func funcref) (param $str stringref)
  ;; ALWAYS-NEXT:  (drop
  ;; ALWAYS-NEXT:   (local.get $x)
  ;; ALWAYS-NEXT:  )
  ;; ALWAYS-NEXT:  (drop
  ;; ALWAYS-NEXT:   (local.get $y)
  ;; ALWAYS-NEXT:  )
  ;; ALWAYS-NEXT:  (drop
  ;; ALWAYS-NEXT:   (local.get $func)
  ;; ALWAYS-NEXT:  )
  ;; ALWAYS-NEXT:  (drop
  ;; ALWAYS-NEXT:   (local.get $str)
  ;; ALWAYS-NEXT:  )
  ;; ALWAYS-NEXT: )
  ;; CAREFUL:      (func $target (type $0) (param $0 i32) (param $1 i32) (param $2 funcref) (param $3 stringref)
  ;; CAREFUL-NEXT:  (nop)
  ;; CAREFUL-NEXT: )
  (func $target (param $x i32) (param $y i32)
    (drop
      (local.get $x)
    )
    (drop
      (local.get $y)
    )
  )
)

