;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s --branch-hint-analysis -all -S -o - \
;; RUN:   | filecheck %s

;; Tests "lto"-like behavior of BranchHintAnalysis, that is, inferences between
;; functions.

(module
  ;; CHECK:      (tag $e (type $1))
  (tag $e)

  ;; CHECK:      (func $unreachable (type $1)
  ;; CHECK-NEXT:  (unreachable)
  ;; CHECK-NEXT: )
  (func $unreachable
    ;; Helper for below.
    (unreachable)
  )

  ;; CHECK:      (func $throw (type $1)
  ;; CHECK-NEXT:  (throw $e)
  ;; CHECK-NEXT: )
  (func $throw
    ;; Helper for below.
    (throw $e)
  )

  ;; CHECK:      (func $nop (type $1)
  ;; CHECK-NEXT: )
  (func $nop
    ;; Helper for below.
  )

  ;; CHECK:      (func $call-unreachable (type $0) (param $x i32)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $call-unreachable (param $x i32)
    ;; This is unlikely as the call's target is.
    (if
      (local.get $x)
      (then
        (call $unreachable)
      )
    )
  )

  ;; CHECK:      (func $call-throw (type $0) (param $x i32)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $throw)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $call-throw (param $x i32)
    ;; This is unlikely as the call's target is.
    (if
      (local.get $x)
      (then
        (call $throw)
      )
    )
  )

  ;; CHECK:      (func $call-nop (type $0) (param $x i32)
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $nop)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $call-nop (param $x i32)
    ;; Nothing to infer here.
    (if
      (local.get $x)
      (then
        (call $nop)
      )
    )
  )

  ;; CHECK:      (func $call-both (type $0) (param $x i32)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\01")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $throw)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (else
  ;; CHECK-NEXT:    (call $unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $call-both (param $x i32)
    ;; Unreachable is less likely than throw.
    (if
      (local.get $x)
      (then
        (call $throw)
      )
      (else
        (call $unreachable)
      )
    )
  )

  ;; CHECK:      (func $call-both-flip (type $0) (param $x i32)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (else
  ;; CHECK-NEXT:    (call $throw)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $call-both-flip (param $x i32)
    ;; As above, but flipped.
    (if
      (local.get $x)
      (then
        (call $unreachable)
      )
      (else
        (call $throw)
      )
    )
  )

  ;; CHECK:      (func $call-both-mix (type $0) (param $x i32)
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (else
  ;; CHECK-NEXT:    (call $unreachable)
  ;; CHECK-NEXT:    (call $throw)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $call-both-mix (param $x i32)
    ;; As above, but mix calls in one arm. Nothing to infer.
    (if
      (local.get $x)
      (then
        (call $unreachable)
      )
      (else
        (call $unreachable)
        (call $throw)
      )
    )
  )

  ;; CHECK:      (func $call-both-mix-flip (type $0) (param $x i32)
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (else
  ;; CHECK-NEXT:    (call $throw)
  ;; CHECK-NEXT:    (call $unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $call-both-mix-flip (param $x i32)
    ;; As above, but flipped in that arm. Still nothing to infer.
    (if
      (local.get $x)
      (then
        (call $unreachable)
      )
      (else
        (call $throw)
        (call $unreachable)
      )
    )
  )

  ;; CHECK:      (func $flow-back (type $0) (param $x i32)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (drop
  ;; CHECK-NEXT:     (i32.const 10)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (if
  ;; CHECK-NEXT:     (local.get $x)
  ;; CHECK-NEXT:     (then
  ;; CHECK-NEXT:      (drop
  ;; CHECK-NEXT:       (i32.const 20)
  ;; CHECK-NEXT:      )
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (drop
  ;; CHECK-NEXT:     (i32.const 30)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (call $unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $flow-back (param $x i32)
    ;; We must flow back what we infer about the call, to previous blocks, in
    ;; order to infer a hint on this if.
    (if
      (local.get $x)
      (then
        ;; Add some basic blocks and code in the middle.
        (drop
          (i32.const 10)
        )
        (if
          (local.get $x)
          (then
            (drop
              (i32.const 20)
            )
          )
        )
        (drop
          (i32.const 30)
        )
        (call $unreachable)
      )
    )
  )

  ;; CHECK:      (func $chain-0 (type $1)
  ;; CHECK-NEXT:  (call $throw)
  ;; CHECK-NEXT: )
  (func $chain-0
    ;; The end of a chain of functions that calls something unlikely. Helper for
    ;; below.
    (call $throw)
  )

  ;; CHECK:      (func $chain-1 (type $1)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\01")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (i32.const 10)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $chain-0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (else
  ;; CHECK-NEXT:    (call $unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $chain-1
    ;; This callchain segment needs some flow internally. We can also infer this
    ;; if is likely (since throw is more likely than unreachable).
    (if
      (i32.const 10)
      (then
        (call $chain-0)
      )
      (else
        (call $unreachable)
      )
    )
  )

  ;; CHECK:      (func $chain-2 (type $1)
  ;; CHECK-NEXT:  (call $chain-1)
  ;; CHECK-NEXT: )
  (func $chain-2
    (call $chain-1)
  )

  ;; CHECK:      (func $call-chain (type $0) (param $x i32)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $chain-2)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $call-chain (param $x i32)
    ;; This is unlikely as the callchain ends that way.
    (if
      (local.get $x)
      (then
        (call $chain-2)
      )
    )
  )
)
