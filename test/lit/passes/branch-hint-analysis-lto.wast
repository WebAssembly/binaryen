;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s --branch-hint-analysis -all -S -o - \
;; RUN:   | filecheck %s

;; Tests "lto"-like behavior of BranchHintAnalysis, that is, inferences between
;; functions.

(module
  ;; CHECK:      (tag $e (type $1))
  (tag $e)

  ;; CHECK:      (func $unreachable (type $1)
  ;; CHECK-NEXT:  (unreachable)
  ;; CHECK-NEXT: )
  (func $unreachable
    ;; Helper for below.
    (unreachable)
  )

  ;; CHECK:      (func $throw (type $1)
  ;; CHECK-NEXT:  (throw $e)
  ;; CHECK-NEXT: )
  (func $throw
    ;; Helper for below.
    (throw $e)
  )

  ;; CHECK:      (func $nop (type $1)
  ;; CHECK-NEXT: )
  (func $nop
    ;; Helper for below.
  )

  ;; CHECK:      (func $call-unreachable (type $0) (param $x i32)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $call-unreachable (param $x i32)
    ;; This is unlikely as the call's target is.
    (if
      (local.get $x)
      (then
        (call $unreachable)
      )
    )
  )

  ;; CHECK:      (func $call-throw (type $0) (param $x i32)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $throw)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $call-throw (param $x i32)
    ;; This is unlikely as the call's target is.
    (if
      (local.get $x)
      (then
        (call $throw)
      )
    )
  )

  ;; CHECK:      (func $call-nop (type $0) (param $x i32)
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $nop)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $call-nop (param $x i32)
    ;; Nothing to infer here.
    (if
      (local.get $x)
      (then
        (call $nop)
      )
    )
  )

  ;; CHECK:      (func $call-both (type $0) (param $x i32)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\01")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $throw)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (else
  ;; CHECK-NEXT:    (call $unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $call-both (param $x i32)
    ;; Unreachable is less likely than throw.
    (if
      (local.get $x)
      (then
        (call $throw)
      )
      (else
        (call $unreachable)
      )
    )
  )

  ;; CHECK:      (func $call-both-flip (type $0) (param $x i32)
  ;; CHECK-NEXT:  (@metadata.code.branch_hint "\00")
  ;; CHECK-NEXT:  (if
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:   (then
  ;; CHECK-NEXT:    (call $unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (else
  ;; CHECK-NEXT:    (call $throw)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $call-both-flip (param $x i32)
    ;; As above, but flipped.
    (if
      (local.get $x)
      (then
        (call $unreachable)
      )
      (else
        (call $throw)
      )
    )
  )

;; TODO: flow back from call, to get the hint
;; TODO: flow back throgh chain of calls
)
