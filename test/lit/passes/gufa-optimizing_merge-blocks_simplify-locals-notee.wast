;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s --gufa-optimizing  --merge-blocks --simplify-locals-notee -all -S -o - | filecheck %s
;;
;; GUFA manages to generate IR that makes merge-blocks leave a stale type, if we
;; are not careful. simplify-locals-notee then errors if that stale type is
;; present, so we need to include all of the passes here in order to hit this
;; bizarre corner case.
;;
;; The specific bug that happened here was that merge-blocks operated on
;; dead but not refinalized code. That pass should skip dead code and wait for
;; dce to work first, to avoid generating invalid/stale code.

(module
 ;; CHECK:      (type $0 (func (param i32 i32) (result i32)))
 (type $0 (func (param i32 i32) (result i32)))
 ;; CHECK:      (func $0 (type $0) (param $0 i32) (param $1 i32) (result i32)
 ;; CHECK-NEXT:  (if
 ;; CHECK-NEXT:   (i32.trunc_f32_s
 ;; CHECK-NEXT:    (f32.const 0)
 ;; CHECK-NEXT:   )
 ;; CHECK-NEXT:   (then
 ;; CHECK-NEXT:    (drop
 ;; CHECK-NEXT:     (block (result i32)
 ;; CHECK-NEXT:      (drop
 ;; CHECK-NEXT:       (unreachable)
 ;; CHECK-NEXT:      )
 ;; CHECK-NEXT:      (i32.const 0)
 ;; CHECK-NEXT:     )
 ;; CHECK-NEXT:    )
 ;; CHECK-NEXT:   )
 ;; CHECK-NEXT:   (else
 ;; CHECK-NEXT:    (unreachable)
 ;; CHECK-NEXT:   )
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT:  (i32.const 0)
 ;; CHECK-NEXT: )
 (func $0 (param $0 i32) (param $1 i32) (result i32)
  (if (result i32)
   (i32.trunc_f32_s
    (f32.const 0)
   )
   (then
    (if (result i32)
     (i32.const 0)
     (then
      (i32.const 0)
     )
     (else
      (unreachable)
     )
    )
   )
   (else
    (unreachable)
   )
  )
 )
)

