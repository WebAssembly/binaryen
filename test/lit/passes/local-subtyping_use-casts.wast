;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s --local-subtyping -all -S -o - \
;; RUN:   | filecheck %s

(module
  (type $A (struct_subtype data))

  (type $B (struct_subtype $A))

  (func $ref.as (param $x (ref null $A))
    ;; After the first ref.as, we can use the cast value in later gets, which is
    ;; more refined.
    (drop
      (local.get $x)
    )
    (drop
      (ref.as_non_null
        (local.get $x)
      )
    )
    (drop
      (local.get $x)
    )
    (drop
      (ref.as_non_null
        (local.get $x)
      )
    )
  )

  (func $ref.as-no (param $x (ref $A))
    ;; As above, but the param is now non-nullable anyhow, so we should do
    ;; nothing.
    (drop
      (local.get $x)
    )
    (drop
      (ref.as_non_null
        (local.get $x)
      )
    )
    (drop
      (local.get $x)
    )
    (drop
      (ref.as_non_null
        (local.get $x)
      )
    )
  )

  (func $ref.cast (param $x (ref data))
    ;; As $ref.as but with ref.casts: we should use the cast value after it has
    ;; been computed, in both gets.
    (drop
      (ref.cast_static $A
        (local.get $x)
      )
    )
    (drop
      (local.get $x)
    )
    (drop
      (local.get $x)
    )
  )

  (func $not-past-set (param $x (ref data))
    (drop
      (ref.cast_static $A
        (local.get $x)
      )
    )
    (drop
      (local.get $x)
    )
    ;; The local.set in the middle stops us from helping the last get.
    (local.set $x
      (call $get)
    )
    (drop
      (local.get $x)
    )
  )

  (func $best (param $x (ref data))
    (drop
      (ref.cast_static $A
        (local.get $x)
      )
    )
    ;; Here we should use $A.
    (drop
      (local.get $x)
    )
    (drop
      (ref.cast_static $B
        (local.get $x)
      )
    )
    ;; Here we should use $B, which is even better.
    (drop
      (local.get $x)
    )
  )

  (func $best-2 (param $x (ref data))
    ;; As above, but with the casts reversed. Now we should use $B in both
    ;; gets.
    (drop
      (ref.cast_static $B
        (local.get $x)
      )
    )
    (drop
      (local.get $x)
    )
    (drop
      (ref.cast_static $A
        (local.get $x)
      )
    )
    (drop
      (local.get $x)
    )
  )

  (func $fallthrough (param $x (ref data))
    (drop
      (ref.cast_static $A
        ;; We look through the block, and optimize.
        (block (result (ref data))
          (local.get $x)
        )
      )
    )
    (drop
      (local.get $x)
    )
  )

  (func $get (result (ref data))
    ;; Helper for the above.
    (unreachable)
  )
)
