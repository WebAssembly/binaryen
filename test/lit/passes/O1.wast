;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.
;; NOTE: This test was ported using port_passes_tests_to_lit.py and could be cleaned up.

;; RUN: foreach %s %t wasm-opt -O1 -S -o - | filecheck %s

(module

 (import "env" "fimport$0" (func $fimport$0 (param i32)))
 ;; CHECK:      (type $0 (func (result i32)))

 ;; CHECK:      (type $1 (func))

 ;; CHECK:      (memory $0 1 1)
 (memory $0 1 1)
 (global $global$0 (mut i32) (i32.const 10))
 ;; CHECK:      (export "foo" (func $foo))

 ;; CHECK:      (export "two-branches-unreachable" (func $two-branches-unreachable))

 ;; CHECK:      (func $foo (result i32)
 ;; CHECK-NEXT:  (drop
 ;; CHECK-NEXT:   (i32.const 0)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT:  (i32.load align=1
 ;; CHECK-NEXT:   (i32.const 4)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $foo (export "foo") (result i32)
  (i32.load offset=4 align=1
   (i32.and
    (block $label$1 (result i32)
     (global.set $global$0
      (i32.const 0)
     )
     (i32.const -64)
    )
    (i32.const 15)
   )
  )
 )
 (func $signed-overflow (param $0 f32) (result i32)
  (i32.sub
   (i32.const 268435456)
   (i32.const -2147483648)
  )
 )
 ;; CHECK:      (func $two-branches-unreachable
 ;; CHECK-NEXT:  (local $0 i32)
 ;; CHECK-NEXT:  (if
 ;; CHECK-NEXT:   (i32.eqz
 ;; CHECK-NEXT:    (local.get $0)
 ;; CHECK-NEXT:   )
 ;; CHECK-NEXT:   (then
 ;; CHECK-NEXT:    (unreachable)
 ;; CHECK-NEXT:   )
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $two-branches-unreachable (export "two-branches-unreachable")
  ;; remove-unused-brs makes the break unconditional,
  ;; thus in this case the two branches are unreachable,
  ;; refinalization is required.
  (local $0 i32)
  (block $label
   (block $block
    (if
     (local.get $0)
     (then
      (if
       (local.tee $0
        (i32.const 1)
       )
       (then
        (br $label)
       )
       (else
        (br $block)
       )
      )
     )
     (else
      (unreachable)
     )
    )
   )
   (call $fimport$0
    (local.get $0)
   )
  )
 )
)

