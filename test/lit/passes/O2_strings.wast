;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.
;; NOTE: This test was ported using port_passes_tests_to_lit.py and could be cleaned up.

;; Run normal -O2, which should lift, optimize, and lower strings. Also see that
;; -O2 plus the flag to skip the lowering works properly.

;; RUN: foreach %s %t wasm-opt -O2 -all -S -o - | filecheck %s
;; RUN: foreach %s %t wasm-opt -O2 --no-string-lowering -all -S -o - | filecheck %s --check-prefix=NO_LOWER

(module
  (type $array16 (array (mut i16)))

  (import "\'" "foo" (global $foo (ref extern)))

  (import "\'" "bar" (global $bar (ref extern)))

  (import "wasm:js-string" "concat" (func $concat (param externref externref) (result (ref extern))))

  ;; CHECK:      (type $0 (func (result (ref extern))))

  ;; CHECK:      (import "\'" "foobar" (global $"string.const_\"foobar\"" (ref extern)))

  ;; CHECK:      (export "string.concat" (func $string.concat))

  ;; CHECK:      (func $string.concat (type $0) (result (ref extern))
  ;; CHECK-NEXT:  (global.get $"string.const_\"foobar\"")
  ;; CHECK-NEXT: )
  ;; NO_LOWER:      (type $0 (func (result (ref extern))))

  ;; NO_LOWER:      (export "string.concat" (func $string.concat))

  ;; NO_LOWER:      (func $string.concat (type $0) (result (ref extern))
  ;; NO_LOWER-NEXT:  (string.const "foobar")
  ;; NO_LOWER-NEXT: )
  (func $string.concat (export "string.concat") (result (ref extern))
    ;; We concatenate "foo" and "bar" here, and can optimize this at compile
    ;; time to "foobar". A new imported global will appear for that, and we
    ;; will only do a get of that global here.
    ;;
    ;; When we skip the lowering, we will have a string.const here.
    (call $concat
      (global.get $foo)
      (global.get $bar)
    )
  )
)
