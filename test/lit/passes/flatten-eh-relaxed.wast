;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s -all --flatten-relaxed -S -o - | filecheck %s

(module
  ;; CHECK:      (import "env" "test" (func $test (type $0)))
  (import "env" "test" (func $test))
  ;; CHECK:      (import "env" "f_i32" (func $f_i32 (type $1) (param i32)))
  (import "env" "f_i32" (func $f_i32 (param i32)))
  ;; CHECK:      (import "env" "f_i32_exnref" (func $f_i32_exnref (type $3) (param i32 exnref)))
  (import "env" "f_i32_exnref" (func $f_i32_exnref (param i32 exnref)))
  ;; CHECK:      (import "env" "f_exnref" (func $f_exnref (type $4) (param exnref)))
  (import "env" "f_exnref" (func $f_exnref (param exnref)))

  ;; CHECK:      (tag $my_tag (type $1) (param i32))
  (tag $my_tag (param i32))

  ;; CHECK:      (func $thrower (type $1) (param $p i32)
  ;; CHECK-NEXT:  (local $1 i32)
  ;; CHECK-NEXT:  (local.set $1
  ;; CHECK-NEXT:   (local.get $p)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (throw $my_tag
  ;; CHECK-NEXT:   (local.get $1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (unreachable)
  ;; CHECK-NEXT: )
  (func $thrower (param $p i32)
    local.get $p
    throw $my_tag
  )

  ;; CHECK:      (func $test_catch (type $0)
  ;; CHECK-NEXT:  (local $0 i32)
  ;; CHECK-NEXT:  (local $1 i32)
  ;; CHECK-NEXT:  (block $outer_block
  ;; CHECK-NEXT:   (local.set $0
  ;; CHECK-NEXT:    (block $catch_block (result i32)
  ;; CHECK-NEXT:     (try_table (catch $my_tag $catch_block)
  ;; CHECK-NEXT:      (call $thrower
  ;; CHECK-NEXT:       (i32.const 123)
  ;; CHECK-NEXT:      )
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:     (br $outer_block)
  ;; CHECK-NEXT:     (unreachable)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (local.set $1
  ;; CHECK-NEXT:    (local.get $0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (call $f_i32
  ;; CHECK-NEXT:    (local.get $1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $test_catch
    (block $outer_block
      (call $f_i32
        (block $catch_block (result i32)
          (try_table
            (catch $my_tag $catch_block)
            (call $thrower (i32.const 123))
          )
          (br $outer_block)
        )
      )
    )
  )

  ;; CHECK:      (func $test_catch_ref (type $0)
  ;; CHECK-NEXT:  (local $scratch (tuple i32 exnref))
  ;; CHECK-NEXT:  (local $1 (tuple i32 exnref))
  ;; CHECK-NEXT:  (local $2 (tuple i32 exnref))
  ;; CHECK-NEXT:  (local $3 (tuple i32 exnref))
  ;; CHECK-NEXT:  (local $4 i32)
  ;; CHECK-NEXT:  (local $5 (tuple i32 exnref))
  ;; CHECK-NEXT:  (local $6 exnref)
  ;; CHECK-NEXT:  (block $outer_block
  ;; CHECK-NEXT:   (local.set $1
  ;; CHECK-NEXT:    (block $catch_block (type $2) (result i32 exnref)
  ;; CHECK-NEXT:     (try_table (catch_ref $my_tag $catch_block)
  ;; CHECK-NEXT:      (call $thrower
  ;; CHECK-NEXT:       (i32.const 456)
  ;; CHECK-NEXT:      )
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:     (br $outer_block)
  ;; CHECK-NEXT:     (unreachable)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (local.set $2
  ;; CHECK-NEXT:    (local.get $1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (local.set $scratch
  ;; CHECK-NEXT:    (local.get $2)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (local.set $3
  ;; CHECK-NEXT:    (local.get $scratch)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (local.set $4
  ;; CHECK-NEXT:    (tuple.extract 2 0
  ;; CHECK-NEXT:     (local.get $3)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (local.set $5
  ;; CHECK-NEXT:    (local.get $scratch)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (local.set $6
  ;; CHECK-NEXT:    (tuple.extract 2 1
  ;; CHECK-NEXT:     (local.get $5)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (call $f_i32_exnref
  ;; CHECK-NEXT:    (local.get $4)
  ;; CHECK-NEXT:    (local.get $6)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $test_catch_ref
    (block $outer_block
      (call $f_i32_exnref
        (block $catch_block (result i32 exnref)
          (try_table
            (catch_ref $my_tag $catch_block)
            (call $thrower (i32.const 456))
          )
          (br $outer_block)
        )
      )
    )
  )

  ;; CHECK:      (func $test_catch_all_ref (type $0)
  ;; CHECK-NEXT:  (local $0 exnref)
  ;; CHECK-NEXT:  (local $1 exnref)
  ;; CHECK-NEXT:  (block $outer_block
  ;; CHECK-NEXT:   (local.set $0
  ;; CHECK-NEXT:    (block $catch_block (result exnref)
  ;; CHECK-NEXT:     (try_table (catch_all_ref $catch_block)
  ;; CHECK-NEXT:      (call $test)
  ;; CHECK-NEXT:     )
  ;; CHECK-NEXT:     (br $outer_block)
  ;; CHECK-NEXT:     (unreachable)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (local.set $1
  ;; CHECK-NEXT:    (local.get $0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (call $f_exnref
  ;; CHECK-NEXT:    (local.get $1)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $test_catch_all_ref
    (block $outer_block
      (call $f_exnref
        (block $catch_block (result exnref)
          (try_table
            (catch_all_ref $catch_block)
            (call $test)
          )
          (br $outer_block)
        )
      )
    )
  )

  ;; CHECK:      (func $test_catch_all (type $0)
  ;; CHECK-NEXT:  (block $outer_block
  ;; CHECK-NEXT:   (block $catch_block
  ;; CHECK-NEXT:    (try_table (catch_all $catch_block)
  ;; CHECK-NEXT:     (call $test)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (br $outer_block)
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:   (call $test)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $test_catch_all
    (block $outer_block
      (block $catch_block
        (try_table
          (catch_all $catch_block)
          (call $test)
        )
        (br $outer_block)
      )
      (call $test)
    )
  )
)
