;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.

;; As in monomorphize-types.wast, test in both "always" mode, which always
;; monomorphizes, and in "careful" mode which does it only when it appears to
;; actually help.

;; RUN: foreach %s %t wasm-opt --monomorphize-always -all -S -o - | filecheck %s --check-prefix ALWAYS
;; RUN: foreach %s %t wasm-opt --monomorphize        -all -S -o - | filecheck %s --check-prefix CAREFUL

(module
  ;; Test that dropped functions are monomorphized, and the drop is reverse-
  ;; inlined into the called function, enabling more optimizations.

  ;; ALWAYS:      (type $0 (func))

  ;; ALWAYS:      (type $iii (func (param i32 i32) (result i32)))

  ;; ALWAYS:      (type $i (func (result i32)))
  ;; CAREFUL:      (type $iii (func (param i32 i32) (result i32)))

  ;; CAREFUL:      (type $i (func (result i32)))
  (type $i (func (result i32)))

  (type $iii (func (param i32 i32) (result i32)))

  ;; ALWAYS:      (type $3 (func (param i32)))

  ;; ALWAYS:      (type $4 (func (param i32) (result i32)))

  ;; ALWAYS:      (type $5 (func (param i32 i32)))

  ;; ALWAYS:      (import "a" "b" (func $import (type $iii) (param i32 i32) (result i32)))
  ;; CAREFUL:      (type $2 (func))

  ;; CAREFUL:      (type $3 (func (param i32)))

  ;; CAREFUL:      (type $4 (func (param i32) (result i32)))

  ;; CAREFUL:      (type $5 (func (param i32 i32)))

  ;; CAREFUL:      (import "a" "b" (func $import (type $iii) (param i32 i32) (result i32)))
  (import "a" "b" (func $import (param i32 i32) (result i32)))

  (import "a" "c" (func $import2))

  ;; ALWAYS:      (table $table 10 10 funcref)
  ;; CAREFUL:      (table $table 10 10 funcref)
  (table $table 10 10 funcref)

  ;; ALWAYS:      (elem declare func $import)

  ;; ALWAYS:      (func $work (type $iii) (param $x i32) (param $y i32) (result i32)
  ;; ALWAYS-NEXT:  (i32.mul
  ;; ALWAYS-NEXT:   (i32.xor
  ;; ALWAYS-NEXT:    (local.get $x)
  ;; ALWAYS-NEXT:    (local.get $y)
  ;; ALWAYS-NEXT:   )
  ;; ALWAYS-NEXT:   (i32.add
  ;; ALWAYS-NEXT:    (local.get $x)
  ;; ALWAYS-NEXT:    (local.get $y)
  ;; ALWAYS-NEXT:   )
  ;; ALWAYS-NEXT:  )
  ;; ALWAYS-NEXT: )
  ;; CAREFUL:      (elem declare func $import)

  ;; CAREFUL:      (func $work (type $iii) (param $0 i32) (param $1 i32) (result i32)
  ;; CAREFUL-NEXT:  (i32.mul
  ;; CAREFUL-NEXT:   (i32.add
  ;; CAREFUL-NEXT:    (local.get $0)
  ;; CAREFUL-NEXT:    (local.get $1)
  ;; CAREFUL-NEXT:   )
  ;; CAREFUL-NEXT:   (i32.xor
  ;; CAREFUL-NEXT:    (local.get $0)
  ;; CAREFUL-NEXT:    (local.get $1)
  ;; CAREFUL-NEXT:   )
  ;; CAREFUL-NEXT:  )
  ;; CAREFUL-NEXT: )
  (func $work (param $x i32) (param $y i32) (result i32)
    ;; Do some nontrivial work that we return. If this is dropped then we don't
    ;; need that work.
    (i32.mul
      (i32.xor
        (local.get $x)
        (local.get $y)
      )
      (i32.add
        (local.get $x)
        (local.get $y)
      )
    )
  )

  ;; ALWAYS:      (func $calls (type $3) (param $x i32)
  ;; ALWAYS-NEXT:  (call $work_10)
  ;; ALWAYS-NEXT:  (call $work_10)
  ;; ALWAYS-NEXT:  (call $work_11
  ;; ALWAYS-NEXT:   (local.get $x)
  ;; ALWAYS-NEXT:  )
  ;; ALWAYS-NEXT:  (call $work_12
  ;; ALWAYS-NEXT:   (local.get $x)
  ;; ALWAYS-NEXT:   (local.get $x)
  ;; ALWAYS-NEXT:  )
  ;; ALWAYS-NEXT: )
  ;; CAREFUL:      (func $calls (type $3) (param $x i32)
  ;; CAREFUL-NEXT:  (call $work_10)
  ;; CAREFUL-NEXT:  (call $work_10)
  ;; CAREFUL-NEXT:  (call $work_11
  ;; CAREFUL-NEXT:   (local.get $x)
  ;; CAREFUL-NEXT:  )
  ;; CAREFUL-NEXT:  (call $work_12
  ;; CAREFUL-NEXT:   (local.get $x)
  ;; CAREFUL-NEXT:   (local.get $x)
  ;; CAREFUL-NEXT:  )
  ;; CAREFUL-NEXT: )
  (func $calls (param $x i32)
    ;; Both of these can call the same monomorphized function. In CAREFUL mode
    ;; that function's body can also be optimized into a nop.
    (drop
      (call $work
        (i32.const 3)
        (i32.const 4)
      )
    )
    (drop
      (call $work
        (i32.const 3)
        (i32.const 4)
      )
    )
    ;; Another call, now with an unknown parameter. This calls a different
    ;; monomorphized function, but once again the body can be optimized into a
    ;; nop in CAREFUL.
    (drop
      (call $work
        (i32.const 3)
        (local.get $x)
      )
    )
    ;; Two unknown parameters. Yet another monomorphized function, but the same
    ;; outcome.
    (drop
      (call $work
        (local.get $x)
        (local.get $x)
      )
    )
  )

  ;; ALWAYS:      (func $call-undropped-trivial (type $4) (param $x i32) (result i32)
  ;; ALWAYS-NEXT:  (call $work
  ;; ALWAYS-NEXT:   (local.get $x)
  ;; ALWAYS-NEXT:   (local.get $x)
  ;; ALWAYS-NEXT:  )
  ;; ALWAYS-NEXT: )
  ;; CAREFUL:      (func $call-undropped-trivial (type $4) (param $x i32) (result i32)
  ;; CAREFUL-NEXT:  (call $work
  ;; CAREFUL-NEXT:   (local.get $x)
  ;; CAREFUL-NEXT:   (local.get $x)
  ;; CAREFUL-NEXT:  )
  ;; CAREFUL-NEXT: )
  (func $call-undropped-trivial (param $x i32) (result i32)
    ;; A call of the same target that is dropped in the previous function, but
    ;; now without a drop. We know nothing nontrivial here, so we do nothing.
    (call $work
      (local.get $x)
      (local.get $x)
    )
  )

  ;; ALWAYS:      (func $call-undropped (type $i) (result i32)
  ;; ALWAYS-NEXT:  (call $work_13)
  ;; ALWAYS-NEXT: )
  ;; CAREFUL:      (func $call-undropped (type $i) (result i32)
  ;; CAREFUL-NEXT:  (call $work_13)
  ;; CAREFUL-NEXT: )
  (func $call-undropped (result i32)
    ;; As above but now with constant params. We can monomorphize here - there
    ;; is no issue in optimizing here without a drop and with a drop elsewhere -
    ;; but we do call a different function of course, that returns an i32.
    (call $work
      (i32.const 3)
      (i32.const 4)
    )
  )

  (func $no-params (result i32)
    ;; A function that will be dropped, and has no params.
    (i32.const 42)
  )

  (func $call-no-params (result i32)
    (drop
      (call $no-params)
    )
    (call $no-params)
  )

  ;; ALWAYS:      (func $call-import (type $0)
  ;; ALWAYS-NEXT:  (drop
  ;; ALWAYS-NEXT:   (call $import
  ;; ALWAYS-NEXT:    (i32.const 3)
  ;; ALWAYS-NEXT:    (i32.const 4)
  ;; ALWAYS-NEXT:   )
  ;; ALWAYS-NEXT:  )
  ;; ALWAYS-NEXT: )
  ;; CAREFUL:      (func $call-import (type $2)
  ;; CAREFUL-NEXT:  (drop
  ;; CAREFUL-NEXT:   (call $import
  ;; CAREFUL-NEXT:    (i32.const 3)
  ;; CAREFUL-NEXT:    (i32.const 4)
  ;; CAREFUL-NEXT:   )
  ;; CAREFUL-NEXT:  )
  ;; CAREFUL-NEXT: )
  (func $call-import
    ;; Calling an import allows no optimizations.
    (drop
      (call $import
        (i32.const 3)
        (i32.const 4)
      )
    )
  )

  ;; ALWAYS:      (func $import-work (type $iii) (param $x i32) (param $y i32) (result i32)
  ;; ALWAYS-NEXT:  (call $import
  ;; ALWAYS-NEXT:   (i32.xor
  ;; ALWAYS-NEXT:    (local.get $x)
  ;; ALWAYS-NEXT:    (local.get $y)
  ;; ALWAYS-NEXT:   )
  ;; ALWAYS-NEXT:   (i32.add
  ;; ALWAYS-NEXT:    (local.get $x)
  ;; ALWAYS-NEXT:    (local.get $y)
  ;; ALWAYS-NEXT:   )
  ;; ALWAYS-NEXT:  )
  ;; ALWAYS-NEXT: )
  ;; CAREFUL:      (func $import-work (type $iii) (param $0 i32) (param $1 i32) (result i32)
  ;; CAREFUL-NEXT:  (call $import
  ;; CAREFUL-NEXT:   (i32.xor
  ;; CAREFUL-NEXT:    (local.get $0)
  ;; CAREFUL-NEXT:    (local.get $1)
  ;; CAREFUL-NEXT:   )
  ;; CAREFUL-NEXT:   (i32.add
  ;; CAREFUL-NEXT:    (local.get $0)
  ;; CAREFUL-NEXT:    (local.get $1)
  ;; CAREFUL-NEXT:   )
  ;; CAREFUL-NEXT:  )
  ;; CAREFUL-NEXT: )
  (func $import-work (param $x i32) (param $y i32) (result i32)
    ;; Do some work and also call an import.
    (call $import
      (i32.xor
        (local.get $x)
        (local.get $y)
      )
      (i32.add
        (local.get $x)
        (local.get $y)
      )
    )
  )

  ;; ALWAYS:      (func $call-import-work (type $0)
  ;; ALWAYS-NEXT:  (call $import-work_14)
  ;; ALWAYS-NEXT: )
  ;; CAREFUL:      (func $call-import-work (type $2)
  ;; CAREFUL-NEXT:  (drop
  ;; CAREFUL-NEXT:   (call $import-work
  ;; CAREFUL-NEXT:    (i32.const 3)
  ;; CAREFUL-NEXT:    (i32.const 4)
  ;; CAREFUL-NEXT:   )
  ;; CAREFUL-NEXT:  )
  ;; CAREFUL-NEXT: )
  (func $call-import-work
    ;; This is monomorphized in ALWAYS (as the drop means the call context is
    ;; not trivial), but not in CAREFUL mode (as there is no significant benefit
    ;; from optimizations on the monomorphized function - the import is opaque
    ;; work we cannot do anything with, even if we see it is handed consts).
    (drop
      (call $import-work
        (i32.const 3)
        (i32.const 4)
      )
    )
  )

  ;; ALWAYS:      (func $many-returns (type $i) (result i32)
  ;; ALWAYS-NEXT:  (if
  ;; ALWAYS-NEXT:   (call $import
  ;; ALWAYS-NEXT:    (i32.const 1)
  ;; ALWAYS-NEXT:    (i32.const 2)
  ;; ALWAYS-NEXT:   )
  ;; ALWAYS-NEXT:   (then
  ;; ALWAYS-NEXT:    (return
  ;; ALWAYS-NEXT:     (i32.const 3)
  ;; ALWAYS-NEXT:    )
  ;; ALWAYS-NEXT:   )
  ;; ALWAYS-NEXT:   (else
  ;; ALWAYS-NEXT:    (return_call $import
  ;; ALWAYS-NEXT:     (i32.const 4)
  ;; ALWAYS-NEXT:     (i32.const 5)
  ;; ALWAYS-NEXT:    )
  ;; ALWAYS-NEXT:   )
  ;; ALWAYS-NEXT:  )
  ;; ALWAYS-NEXT:  (if
  ;; ALWAYS-NEXT:   (call $import
  ;; ALWAYS-NEXT:    (i32.const 6)
  ;; ALWAYS-NEXT:    (i32.const 7)
  ;; ALWAYS-NEXT:   )
  ;; ALWAYS-NEXT:   (then
  ;; ALWAYS-NEXT:    (return_call_indirect $table (type $i)
  ;; ALWAYS-NEXT:     (i32.const 8)
  ;; ALWAYS-NEXT:    )
  ;; ALWAYS-NEXT:   )
  ;; ALWAYS-NEXT:   (else
  ;; ALWAYS-NEXT:    (return_call_ref $iii
  ;; ALWAYS-NEXT:     (i32.const 1)
  ;; ALWAYS-NEXT:     (i32.const 2)
  ;; ALWAYS-NEXT:     (ref.func $import)
  ;; ALWAYS-NEXT:    )
  ;; ALWAYS-NEXT:   )
  ;; ALWAYS-NEXT:  )
  ;; ALWAYS-NEXT:  (i32.const 4)
  ;; ALWAYS-NEXT: )
  ;; CAREFUL:      (func $many-returns (type $i) (result i32)
  ;; CAREFUL-NEXT:  (if
  ;; CAREFUL-NEXT:   (call $import
  ;; CAREFUL-NEXT:    (i32.const 1)
  ;; CAREFUL-NEXT:    (i32.const 2)
  ;; CAREFUL-NEXT:   )
  ;; CAREFUL-NEXT:   (then
  ;; CAREFUL-NEXT:    (return
  ;; CAREFUL-NEXT:     (i32.const 3)
  ;; CAREFUL-NEXT:    )
  ;; CAREFUL-NEXT:   )
  ;; CAREFUL-NEXT:   (else
  ;; CAREFUL-NEXT:    (return_call $import
  ;; CAREFUL-NEXT:     (i32.const 4)
  ;; CAREFUL-NEXT:     (i32.const 5)
  ;; CAREFUL-NEXT:    )
  ;; CAREFUL-NEXT:   )
  ;; CAREFUL-NEXT:  )
  ;; CAREFUL-NEXT:  (if
  ;; CAREFUL-NEXT:   (call $import
  ;; CAREFUL-NEXT:    (i32.const 6)
  ;; CAREFUL-NEXT:    (i32.const 7)
  ;; CAREFUL-NEXT:   )
  ;; CAREFUL-NEXT:   (then
  ;; CAREFUL-NEXT:    (return_call_indirect $table (type $i)
  ;; CAREFUL-NEXT:     (i32.const 8)
  ;; CAREFUL-NEXT:    )
  ;; CAREFUL-NEXT:   )
  ;; CAREFUL-NEXT:   (else
  ;; CAREFUL-NEXT:    (return_call_ref $iii
  ;; CAREFUL-NEXT:     (i32.const 1)
  ;; CAREFUL-NEXT:     (i32.const 2)
  ;; CAREFUL-NEXT:     (ref.func $import)
  ;; CAREFUL-NEXT:    )
  ;; CAREFUL-NEXT:   )
  ;; CAREFUL-NEXT:  )
  ;; CAREFUL-NEXT:  (i32.const 4)
  ;; CAREFUL-NEXT: )
  (func $return-normal (param $x i32) (result i32)
    ;; This function has a return, which needs to be handled in the
    ;; monomorphized function, as we'll no longer return a value.
    (if
      (local.get $x)
      (then
        (drop
          (call $import2)
        )
        (return
          (i32.const 0)
        )
      )
    )
    ;; Also return a value by flowing it out.
    (i32.const 1)
  )

  (func $call-return-normal (param $x i32)
    ;; Call the above function with 0, 1, and an unknown value, to test the two
    ;; code paths there + the case of the input being unknown.
    (drop
      (call $return-normal
        (i32.const 0)
      )
    )
    (drop
      (call $return-normal
        (i32.const 1)
      )
    )
    (drop
      (call $return-normal
        (local.get $x)
      )
    )
  )

  (func $return-call (param $x i32) (result i32)
    ;; As above, but now with a return_call. We do not monomorphize the drop
    ;; part, as if we included the drop we'd turn the call into a non-return
    ;; call, which can break things.
    (if
      (local.get $x)
      (then
        (return_call
          (call $import2)
        )
      )
    )
    (i32.const 1)
  )

  (func $call-return-call (param $x i32)
    ;; As above, but due to the return call we won't monomorphize the drop.
    (drop
      (call $return-call
        (i32.const 0)
      )
    )
    (drop
      (call $return-call
        (i32.const 1)
      )
    )
    (drop
      (call $return-call
        (local.get $x)
      )
    )
  )

  (func $return-call-indirect (param $x i32) (result i32)
    ;; As above, but now with a return_call_indirect. The outcome is similar.
    (if
      (local.get $x)
      (then
        (return_call_indirect (type $i)
          (call $import2)
        )
      )
    )
    (i32.const 1)
  )

  (func $call-return-call (param $x i32)
    (drop
      (call $return-call-indirect
        (i32.const 0)
      )
    )
    (drop
      (call $return-call-indirect
        (i32.const 1)
      )
    )
    (drop
      (call $return-call-indirect
        (local.get $x)
      )
    )
  )

  (func $return-call-ref (param $x i32) (result i32)
    ;; As above, but now with a return_call_ref. The outcome is similar.
    (if
      (local.get $x)
      (then
        (return_call_ref (type $i)
          (ref.func $import2)
        )
      )
    )
    (i32.const 1)
  )

  (func $call-return-call (param $x i32)
    (drop
      (call $return-call-ref
        (i32.const 0)
      )
    )
    (drop
      (call $return-call-ref
        (i32.const 1)
      )
    )
    (drop
      (call $return-call-ref
        (local.get $x)
      )
    )
  )
)
;; ALWAYS:      (func $work_10 (type $0)
;; ALWAYS-NEXT:  (local $x i32)
;; ALWAYS-NEXT:  (local $y i32)
;; ALWAYS-NEXT:  (drop
;; ALWAYS-NEXT:   (block (result i32)
;; ALWAYS-NEXT:    (local.set $x
;; ALWAYS-NEXT:     (i32.const 3)
;; ALWAYS-NEXT:    )
;; ALWAYS-NEXT:    (local.set $y
;; ALWAYS-NEXT:     (i32.const 4)
;; ALWAYS-NEXT:    )
;; ALWAYS-NEXT:    (i32.mul
;; ALWAYS-NEXT:     (i32.xor
;; ALWAYS-NEXT:      (local.get $x)
;; ALWAYS-NEXT:      (local.get $y)
;; ALWAYS-NEXT:     )
;; ALWAYS-NEXT:     (i32.add
;; ALWAYS-NEXT:      (local.get $x)
;; ALWAYS-NEXT:      (local.get $y)
;; ALWAYS-NEXT:     )
;; ALWAYS-NEXT:    )
;; ALWAYS-NEXT:   )
;; ALWAYS-NEXT:  )
;; ALWAYS-NEXT: )

;; ALWAYS:      (func $work_11 (type $3) (param $0 i32)
;; ALWAYS-NEXT:  (local $x i32)
;; ALWAYS-NEXT:  (local $y i32)
;; ALWAYS-NEXT:  (drop
;; ALWAYS-NEXT:   (block (result i32)
;; ALWAYS-NEXT:    (local.set $x
;; ALWAYS-NEXT:     (i32.const 3)
;; ALWAYS-NEXT:    )
;; ALWAYS-NEXT:    (local.set $y
;; ALWAYS-NEXT:     (local.get $0)
;; ALWAYS-NEXT:    )
;; ALWAYS-NEXT:    (i32.mul
;; ALWAYS-NEXT:     (i32.xor
;; ALWAYS-NEXT:      (local.get $x)
;; ALWAYS-NEXT:      (local.get $y)
;; ALWAYS-NEXT:     )
;; ALWAYS-NEXT:     (i32.add
;; ALWAYS-NEXT:      (local.get $x)
;; ALWAYS-NEXT:      (local.get $y)
;; ALWAYS-NEXT:     )
;; ALWAYS-NEXT:    )
;; ALWAYS-NEXT:   )
;; ALWAYS-NEXT:  )
;; ALWAYS-NEXT: )

;; ALWAYS:      (func $work_12 (type $5) (param $0 i32) (param $1 i32)
;; ALWAYS-NEXT:  (local $x i32)
;; ALWAYS-NEXT:  (local $y i32)
;; ALWAYS-NEXT:  (drop
;; ALWAYS-NEXT:   (block (result i32)
;; ALWAYS-NEXT:    (local.set $x
;; ALWAYS-NEXT:     (local.get $0)
;; ALWAYS-NEXT:    )
;; ALWAYS-NEXT:    (local.set $y
;; ALWAYS-NEXT:     (local.get $1)
;; ALWAYS-NEXT:    )
;; ALWAYS-NEXT:    (i32.mul
;; ALWAYS-NEXT:     (i32.xor
;; ALWAYS-NEXT:      (local.get $x)
;; ALWAYS-NEXT:      (local.get $y)
;; ALWAYS-NEXT:     )
;; ALWAYS-NEXT:     (i32.add
;; ALWAYS-NEXT:      (local.get $x)
;; ALWAYS-NEXT:      (local.get $y)
;; ALWAYS-NEXT:     )
;; ALWAYS-NEXT:    )
;; ALWAYS-NEXT:   )
;; ALWAYS-NEXT:  )
;; ALWAYS-NEXT: )

;; ALWAYS:      (func $work_13 (type $i) (result i32)
;; ALWAYS-NEXT:  (local $x i32)
;; ALWAYS-NEXT:  (local $y i32)
;; ALWAYS-NEXT:  (local.set $x
;; ALWAYS-NEXT:   (i32.const 3)
;; ALWAYS-NEXT:  )
;; ALWAYS-NEXT:  (local.set $y
;; ALWAYS-NEXT:   (i32.const 4)
;; ALWAYS-NEXT:  )
;; ALWAYS-NEXT:  (i32.mul
;; ALWAYS-NEXT:   (i32.xor
;; ALWAYS-NEXT:    (local.get $x)
;; ALWAYS-NEXT:    (local.get $y)
;; ALWAYS-NEXT:   )
;; ALWAYS-NEXT:   (i32.add
;; ALWAYS-NEXT:    (local.get $x)
;; ALWAYS-NEXT:    (local.get $y)
;; ALWAYS-NEXT:   )
;; ALWAYS-NEXT:  )
;; ALWAYS-NEXT: )

;; ALWAYS:      (func $import-work_14 (type $0)
;; ALWAYS-NEXT:  (local $x i32)
;; ALWAYS-NEXT:  (local $y i32)
;; ALWAYS-NEXT:  (drop
;; ALWAYS-NEXT:   (block (result i32)
;; ALWAYS-NEXT:    (local.set $x
;; ALWAYS-NEXT:     (i32.const 3)
;; ALWAYS-NEXT:    )
;; ALWAYS-NEXT:    (local.set $y
;; ALWAYS-NEXT:     (i32.const 4)
;; ALWAYS-NEXT:    )
;; ALWAYS-NEXT:    (call $import
;; ALWAYS-NEXT:     (i32.xor
;; ALWAYS-NEXT:      (local.get $x)
;; ALWAYS-NEXT:      (local.get $y)
;; ALWAYS-NEXT:     )
;; ALWAYS-NEXT:     (i32.add
;; ALWAYS-NEXT:      (local.get $x)
;; ALWAYS-NEXT:      (local.get $y)
;; ALWAYS-NEXT:     )
;; ALWAYS-NEXT:    )
;; ALWAYS-NEXT:   )
;; ALWAYS-NEXT:  )
;; ALWAYS-NEXT: )

;; CAREFUL:      (func $work_10 (type $2)
;; CAREFUL-NEXT:  (nop)
;; CAREFUL-NEXT: )

;; CAREFUL:      (func $work_11 (type $3) (param $0 i32)
;; CAREFUL-NEXT:  (nop)
;; CAREFUL-NEXT: )

;; CAREFUL:      (func $work_12 (type $5) (param $0 i32) (param $1 i32)
;; CAREFUL-NEXT:  (nop)
;; CAREFUL-NEXT: )

;; CAREFUL:      (func $work_13 (type $i) (result i32)
;; CAREFUL-NEXT:  (i32.const 49)
;; CAREFUL-NEXT: )
