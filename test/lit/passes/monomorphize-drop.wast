;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.

;; As in monomorphize-types.wast, test in both "always" mode, which always
;; monomorphizes, and in "careful" mode which does it only when it appears to
;; actually help.

;; RUN: foreach %s %t wasm-opt --monomorphize-always -all -S -o - | filecheck %s --check-prefix ALWAYS
;; RUN: foreach %s %t wasm-opt --monomorphize        -all -S -o - | filecheck %s --check-prefix CAREFUL

(module
  ;; Test that dropped functions are monomorphized, and the drop is reverse-
  ;; inlined into the called function, enabling more optimizations.

  ;; ALWAYS:      (type $0 (func))

  ;; ALWAYS:      (type $1 (func (param i32 i32) (result i32)))

  ;; ALWAYS:      (func $work (type $1) (param $x i32) (param $y i32) (result i32)
  ;; ALWAYS-NEXT:  (i32.mul
  ;; ALWAYS-NEXT:   (i32.xor
  ;; ALWAYS-NEXT:    (local.get $x)
  ;; ALWAYS-NEXT:    (local.get $y)
  ;; ALWAYS-NEXT:   )
  ;; ALWAYS-NEXT:   (i32.add
  ;; ALWAYS-NEXT:    (local.get $x)
  ;; ALWAYS-NEXT:    (local.get $y)
  ;; ALWAYS-NEXT:   )
  ;; ALWAYS-NEXT:  )
  ;; ALWAYS-NEXT: )
  ;; CAREFUL:      (type $0 (func))

  ;; CAREFUL:      (type $1 (func (param i32 i32) (result i32)))

  ;; CAREFUL:      (func $work (type $1) (param $0 i32) (param $1 i32) (result i32)
  ;; CAREFUL-NEXT:  (i32.mul
  ;; CAREFUL-NEXT:   (i32.add
  ;; CAREFUL-NEXT:    (local.get $0)
  ;; CAREFUL-NEXT:    (local.get $1)
  ;; CAREFUL-NEXT:   )
  ;; CAREFUL-NEXT:   (i32.xor
  ;; CAREFUL-NEXT:    (local.get $0)
  ;; CAREFUL-NEXT:    (local.get $1)
  ;; CAREFUL-NEXT:   )
  ;; CAREFUL-NEXT:  )
  ;; CAREFUL-NEXT: )
  (func $work (param $x i32) (param $y i32) (result i32)
    ;; Do some nontrivial work that we return. If this is dropped then we don't
    ;; need that work.
    (i32.mul
      (i32.xor
        (local.get $x)
        (local.get $y)
      )
      (i32.add
        (local.get $x)
        (local.get $y)
      )
    )
  )

  ;; ALWAYS:      (func $calls (type $0)
  ;; ALWAYS-NEXT:  (call $work_2)
  ;; ALWAYS-NEXT:  (call $work_2)
  ;; ALWAYS-NEXT: )
  ;; CAREFUL:      (func $calls (type $0)
  ;; CAREFUL-NEXT:  (call $work_2)
  ;; CAREFUL-NEXT:  (call $work_2)
  ;; CAREFUL-NEXT: )
  (func $calls
    (drop
      (call $work
        (i32.const 3)
        (i32.const 4)
      )
    )
    (drop
      (call $work
        (i32.const 3)
        (i32.const 4)
      )
    )
  )
)
;; ALWAYS:      (func $work_2 (type $0)
;; ALWAYS-NEXT:  (local $x i32)
;; ALWAYS-NEXT:  (local $y i32)
;; ALWAYS-NEXT:  (drop
;; ALWAYS-NEXT:   (block (result i32)
;; ALWAYS-NEXT:    (local.set $x
;; ALWAYS-NEXT:     (i32.const 3)
;; ALWAYS-NEXT:    )
;; ALWAYS-NEXT:    (local.set $y
;; ALWAYS-NEXT:     (i32.const 4)
;; ALWAYS-NEXT:    )
;; ALWAYS-NEXT:    (i32.mul
;; ALWAYS-NEXT:     (i32.xor
;; ALWAYS-NEXT:      (local.get $x)
;; ALWAYS-NEXT:      (local.get $y)
;; ALWAYS-NEXT:     )
;; ALWAYS-NEXT:     (i32.add
;; ALWAYS-NEXT:      (local.get $x)
;; ALWAYS-NEXT:      (local.get $y)
;; ALWAYS-NEXT:     )
;; ALWAYS-NEXT:    )
;; ALWAYS-NEXT:   )
;; ALWAYS-NEXT:  )
;; ALWAYS-NEXT: )

;; CAREFUL:      (func $work_2 (type $0)
;; CAREFUL-NEXT:  (nop)
;; CAREFUL-NEXT: )
