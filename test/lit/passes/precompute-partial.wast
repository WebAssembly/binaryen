;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.

;; RUN: wasm-opt %s --precompute-propagate -all -S -o - | filecheck %s

(module
  ;; CHECK:      (type $vtable (struct (field funcref)))
  (type $vtable (struct funcref))

  ;; CHECK:      (global $A$vtable (ref $vtable) (struct.new $vtable
  ;; CHECK-NEXT:  (ref.func $A$func)
  ;; CHECK-NEXT: ))
  (global $A$vtable (ref $vtable) (struct.new $vtable
    (ref.func $A$func)
  ))

  ;; CHECK:      (global $B$vtable (ref $vtable) (struct.new $vtable
  ;; CHECK-NEXT:  (ref.func $B$func)
  ;; CHECK-NEXT: ))
  (global $B$vtable (ref $vtable) (struct.new $vtable
    (ref.func $B$func)
  ))

  ;; CHECK:      (func $test-expanded (type $3) (param $x i32) (result funcref)
  ;; CHECK-NEXT:  (select (result (ref $2))
  ;; CHECK-NEXT:   (ref.func $A$func)
  ;; CHECK-NEXT:   (ref.func $B$func)
  ;; CHECK-NEXT:   (local.get $x)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $test-expanded (export "test-expanded") (param $x i32) (result funcref)
    ;; We can apply the struct.get to the select arms: As the globals are all
    ;; immutable, we can read the function references from them, and emit a
    ;; select on those values, saving the struct.get operation entirely.
    (struct.get $vtable 0
      (select
        (global.get $A$vtable)
        (global.get $B$vtable)
        (local.get $x)
      )
    )
  )

  ;; CHECK:      (func $A$func (type $2) (result i32)
  ;; CHECK-NEXT:  (i32.const 1)
  ;; CHECK-NEXT: )
  (func $A$func (result i32)
    ;; Helper for above.
    (i32.const 1)
  )

  ;; CHECK:      (func $B$func (type $2) (result i32)
  ;; CHECK-NEXT:  (i32.const 2)
  ;; CHECK-NEXT: )
  (func $B$func (result i32)
    ;; Helper for above.
    (i32.const 2)
  )

  ;; CHECK:      (func $simple-1 (type $0) (param $param i32) (result i32)
  ;; CHECK-NEXT:  (select
  ;; CHECK-NEXT:   (i32.const 0)
  ;; CHECK-NEXT:   (i32.const 0)
  ;; CHECK-NEXT:   (local.get $param)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $simple-1 (param $param i32) (result i32)
    ;; Test simple i32 operations as well.
    (i32.eqz
      (select
        (i32.const 42)
        (i32.const 1337)
        (local.get $param)
      )
    )
  )

  ;; CHECK:      (func $simple-2 (type $0) (param $param i32) (result i32)
  ;; CHECK-NEXT:  (select
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:   (i32.const 0)
  ;; CHECK-NEXT:   (local.get $param)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $simple-2 (param $param i32) (result i32)
    (i32.eqz
      (select
        (i32.const 0)
        (i32.const 10)
        (local.get $param)
      )
    )
  )

  ;; CHECK:      (func $simple-3 (type $0) (param $param i32) (result i32)
  ;; CHECK-NEXT:  (select
  ;; CHECK-NEXT:   (i32.const 0)
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:   (local.get $param)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $simple-3 (param $param i32) (result i32)
    (i32.eqz
      (select
        (i32.const 20)
        (i32.const 0)
        (local.get $param)
      )
    )
  )

  ;; CHECK:      (func $simple-4 (type $0) (param $param i32) (result i32)
  ;; CHECK-NEXT:  (select
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:   (local.get $param)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $simple-4 (param $param i32) (result i32)
    (i32.eqz
      (select
        (i32.const 0)
        (i32.const 0)
        (local.get $param)
      )
    )
  )

  ;; CHECK:      (func $unreachable (type $0) (param $param i32) (result i32)
  ;; CHECK-NEXT:  (i32.eqz
  ;; CHECK-NEXT:   (select
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:    (unreachable)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $unreachable (param $param i32) (result i32)
    ;; We should ignore unreachable code like this. We would need to make sure
    ;; to emit the proper type on the outside, and it's simpler to just defer
    ;; this to DCE.
    (i32.eqz
      (select
        (i32.const 0)
        (i32.const 0)
        (unreachable)
      )
    )
  )
)
