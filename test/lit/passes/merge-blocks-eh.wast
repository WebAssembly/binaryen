;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s -all --merge-blocks -all -S -o - | filecheck %s

(module
  (tag $empty)

  (tag $i32 (param i32))

  (func $drop-block-try_catch_all_ref
    ;; This block is dropped, so the try_table's exnref value can be removed
    ;; by replacing catch_all_ref with catch_all.
    (drop
      (block $catch (result exnref)
        (try_table (catch_all_ref $empty $catch)
          (throw $empty)
        )
      )
    )
  )

  (func $drop-block-try_catch_ref
    ;; As above, but with catch_ref instead of catch_all_ref. We can still
    ;; optimize.
    (drop
      (block $catch (result exnref)
        (try_table (catch_ref $empty $catch)
          (throw $empty)
        )
      )
    )
  )

  (func $drop-block-try_catch_multi
    ;; As above, but with two catches, both of whom can be optimized.
    (drop
      (block $catch (result exnref)
        (try_table (catch_ref $empty $catch) (catch_all_ref $empty $catch)
          (throw $empty)
        )
      )
    )
  )

  (func $drop-block-try_catch_all_i32
    ;; Now the tag has a value, but catch_all_ref can still be optimized.
    (drop
      (block $catch (result exnref)
        (try_table (catch_all_ref $i32 $catch)
          (throw $i32
            (i32.const 42)
          )
        )
      )
    )
  )

  (func $drop-block-try_catch_all_i32
    ;; As above but without _all, so there is a problem: we are sending more
    ;; than the ref. TODO
    (tuple.drop 2
      (block $catch (result i32 exnref)
        (try_table (catch_ref $i32 $catch)
          (throw $i32
            (i32.const 42)
          )
        )
      )
    )
  )

  (func $drop-block-try_catch_multi_partial
    ;; Two possible tags can be thrown and caught, and we can optimize one.
    (tuple.drop 2
      (block $outer (result i32 exnref)
        (drop
          (block $inner (result exnref)
            (try_table (catch_ref $i32 $outer) (catch_all_ref $inner)
              (call $drop-block-try_catch_multi_partial)
            )
          )
        )
        (unreachable)
      )
    )
  )

  (func $drop-block-try_catch_all
    ;; Without _ref, there is nothing to optimize (and we should not error).
    (block $catch
      (try_table (catch_all $empty $catch)
        (throw $empty)
      )
    )
  )

  (func $drop-block-try_catch
    ;; As above, without _all.
    (block $catch
      (try_table (catch $empty $catch)
        (throw $empty)
      )
    )
  )

  (func $drop-block-try_catch_i32
    ;; As above, with an i32. We could optimize here TODO
    (block $catch
      (try_table (catch $i32 $catch)
        (throw $i32
          (i32.const 42)
        )
      )
    )
  )
)

