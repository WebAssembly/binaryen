;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.
;; RUN: foreach %s %t wasm-opt -O2                --nominal -all -S -o - | filecheck %s --check-prefix OPEN_WORLD
;; RUN: foreach %s %t wasm-opt -O2 --closed-world --nominal -all -S -o - | filecheck %s --check-prefix CLOSED_WORLD

;; Test both open world (default) and closed world. In a closed world we can do
;; more with struct types and so we run more passes, whose impact is noticeable
;; in this test, which verifies we don't run them in an open world. Each test
;; verifies a particular pass is run or not run in -O2 and above.

;; --type-refining: In a closed world we can refine the field from anyref to
;; ref $struct.
(module
  ;; OPEN_WORLD:      (type $struct (struct (field (mut anyref))))
  ;; CLOSED_WORLD:      (type $struct (struct (field (mut (ref $struct)))))
  (type $struct (struct_subtype (field (mut anyref)) data))

  ;; OPEN_WORLD:      (type $ref|$struct|_=>_anyref (func (param (ref $struct)) (result anyref)))

  ;; OPEN_WORLD:      (export "work" (func $work))

  ;; OPEN_WORLD:      (func $work (type $ref|$struct|_=>_anyref) (; has Stack IR ;) (param $0 (ref $struct)) (result anyref)
  ;; OPEN_WORLD-NEXT:  (struct.set $struct 0
  ;; OPEN_WORLD-NEXT:   (local.get $0)
  ;; OPEN_WORLD-NEXT:   (local.get $0)
  ;; OPEN_WORLD-NEXT:  )
  ;; OPEN_WORLD-NEXT:  (struct.get $struct 0
  ;; OPEN_WORLD-NEXT:   (local.get $0)
  ;; OPEN_WORLD-NEXT:  )
  ;; OPEN_WORLD-NEXT: )
  ;; CLOSED_WORLD:      (type $ref|$struct|_=>_anyref (func (param (ref $struct)) (result anyref)))

  ;; CLOSED_WORLD:      (export "work" (func $work))

  ;; CLOSED_WORLD:      (func $work (type $ref|$struct|_=>_anyref) (; has Stack IR ;) (param $0 (ref $struct)) (result anyref)
  ;; CLOSED_WORLD-NEXT:  (struct.set $struct 0
  ;; CLOSED_WORLD-NEXT:   (local.get $0)
  ;; CLOSED_WORLD-NEXT:   (local.get $0)
  ;; CLOSED_WORLD-NEXT:  )
  ;; CLOSED_WORLD-NEXT:  (struct.get $struct 0
  ;; CLOSED_WORLD-NEXT:   (local.get $0)
  ;; CLOSED_WORLD-NEXT:  )
  ;; CLOSED_WORLD-NEXT: )
  (func $work (export "work") (param $struct (ref $struct)) (result anyref)
    (struct.set $struct 0
      (local.get $struct)
      (local.get $struct)
    )
    (struct.get $struct 0
      (local.get $struct)
    )
  )
)

;; --signature-pruning: In a closed world we can remove the argument.
(module
  ;; OPEN_WORLD:      (type $i32_=>_i32 (func (param i32) (result i32)))
  ;; CLOSED_WORLD:      (type $i32_=>_i32 (func (result i32)))
  (type $i32_=>_i32 (func (param i32) (result i32)))

  ;; OPEN_WORLD:      (type $none_=>_funcref (func (result funcref)))

  ;; OPEN_WORLD:      (elem declare func $work)

  ;; OPEN_WORLD:      (export "caller" (func $caller))

  ;; OPEN_WORLD:      (func $work (type $i32_=>_i32) (; has Stack IR ;) (param $0 i32) (result i32)
  ;; OPEN_WORLD-NEXT:  (drop
  ;; OPEN_WORLD-NEXT:   (call $caller)
  ;; OPEN_WORLD-NEXT:  )
  ;; OPEN_WORLD-NEXT:  (i32.const 0)
  ;; OPEN_WORLD-NEXT: )
  ;; CLOSED_WORLD:      (type $none_=>_funcref (func (result funcref)))

  ;; CLOSED_WORLD:      (elem declare func $work)

  ;; CLOSED_WORLD:      (export "caller" (func $caller))

  ;; CLOSED_WORLD:      (func $work (type $i32_=>_i32) (; has Stack IR ;) (result i32)
  ;; CLOSED_WORLD-NEXT:  (drop
  ;; CLOSED_WORLD-NEXT:   (call $caller)
  ;; CLOSED_WORLD-NEXT:  )
  ;; CLOSED_WORLD-NEXT:  (i32.const 0)
  ;; CLOSED_WORLD-NEXT: )
  (func $work (type $i32_=>_i32) (param i32) (result i32)
    ;; Avoid this function being inlined.
    (drop
      (call $caller)
    )
    (i32.const 0)
  )

  ;; OPEN_WORLD:      (func $caller (type $none_=>_funcref) (; has Stack IR ;) (result funcref)
  ;; OPEN_WORLD-NEXT:  (drop
  ;; OPEN_WORLD-NEXT:   (call $work
  ;; OPEN_WORLD-NEXT:    (i32.const 42)
  ;; OPEN_WORLD-NEXT:   )
  ;; OPEN_WORLD-NEXT:  )
  ;; OPEN_WORLD-NEXT:  (ref.func $work)
  ;; OPEN_WORLD-NEXT: )
  ;; CLOSED_WORLD:      (func $caller (type $none_=>_funcref) (; has Stack IR ;) (result funcref)
  ;; CLOSED_WORLD-NEXT:  (drop
  ;; CLOSED_WORLD-NEXT:   (call $work)
  ;; CLOSED_WORLD-NEXT:  )
  ;; CLOSED_WORLD-NEXT:  (ref.func $work)
  ;; CLOSED_WORLD-NEXT: )
  (func $caller (export "caller") (result funcref)
    (drop
      (call_ref $i32_=>_i32
        (i32.const 42)
        (ref.func $work)
      )
    )
    (ref.func $work)
  )
)

;; --signature-refining: In a closed world we can refine the argument.
(module
  ;; OPEN_WORLD:      (type $func (func (param funcref) (result funcref)))
  ;; CLOSED_WORLD:      (type $func (func (param (ref $func)) (result funcref)))
  (type $func (func (param funcref) (result funcref)))

  ;; OPEN_WORLD:      (type $i32_=>_funcref (func (param i32) (result funcref)))

  ;; OPEN_WORLD:      (elem declare func $other $work)

  ;; OPEN_WORLD:      (export "caller" (func $caller))

  ;; OPEN_WORLD:      (func $work (type $func) (; has Stack IR ;) (param $0 funcref) (result funcref)
  ;; OPEN_WORLD-NEXT:  (drop
  ;; OPEN_WORLD-NEXT:   (call $caller
  ;; OPEN_WORLD-NEXT:    (i32.const 42)
  ;; OPEN_WORLD-NEXT:   )
  ;; OPEN_WORLD-NEXT:  )
  ;; OPEN_WORLD-NEXT:  (local.get $0)
  ;; OPEN_WORLD-NEXT: )
  ;; CLOSED_WORLD:      (type $i32_=>_funcref (func (param i32) (result funcref)))

  ;; CLOSED_WORLD:      (elem declare func $other $work)

  ;; CLOSED_WORLD:      (export "caller" (func $caller))

  ;; CLOSED_WORLD:      (func $work (type $func) (; has Stack IR ;) (param $0 (ref $func)) (result funcref)
  ;; CLOSED_WORLD-NEXT:  (drop
  ;; CLOSED_WORLD-NEXT:   (call $caller
  ;; CLOSED_WORLD-NEXT:    (i32.const 42)
  ;; CLOSED_WORLD-NEXT:   )
  ;; CLOSED_WORLD-NEXT:  )
  ;; CLOSED_WORLD-NEXT:  (local.get $0)
  ;; CLOSED_WORLD-NEXT: )
  (func $work (type $func) (param $func funcref) (result funcref)
    ;; Avoid this function being inlined.
    (drop
      (call $caller
        (i32.const 42)
      )
    )
    (local.get $func)
  )

  ;; OPEN_WORLD:      (func $other (type $func) (; has Stack IR ;) (param $0 funcref) (result funcref)
  ;; OPEN_WORLD-NEXT:  (local.get $0)
  ;; OPEN_WORLD-NEXT: )
  ;; CLOSED_WORLD:      (func $other (type $func) (; has Stack IR ;) (param $0 (ref $func)) (result funcref)
  ;; CLOSED_WORLD-NEXT:  (unreachable)
  ;; CLOSED_WORLD-NEXT: )
  (func $other (type $func) (param $func funcref) (result funcref)
    (local.get $func)
  )

  ;; OPEN_WORLD:      (func $caller (type $i32_=>_funcref) (; has Stack IR ;) (param $0 i32) (result funcref)
  ;; OPEN_WORLD-NEXT:  (drop
  ;; OPEN_WORLD-NEXT:   (call $work
  ;; OPEN_WORLD-NEXT:    (select (result (ref $func))
  ;; OPEN_WORLD-NEXT:     (ref.func $work)
  ;; OPEN_WORLD-NEXT:     (ref.func $other)
  ;; OPEN_WORLD-NEXT:     (local.get $0)
  ;; OPEN_WORLD-NEXT:    )
  ;; OPEN_WORLD-NEXT:   )
  ;; OPEN_WORLD-NEXT:  )
  ;; OPEN_WORLD-NEXT:  (ref.func $work)
  ;; OPEN_WORLD-NEXT: )
  ;; CLOSED_WORLD:      (func $caller (type $i32_=>_funcref) (; has Stack IR ;) (param $0 i32) (result funcref)
  ;; CLOSED_WORLD-NEXT:  (drop
  ;; CLOSED_WORLD-NEXT:   (call $work
  ;; CLOSED_WORLD-NEXT:    (select (result (ref $func))
  ;; CLOSED_WORLD-NEXT:     (ref.func $work)
  ;; CLOSED_WORLD-NEXT:     (ref.func $other)
  ;; CLOSED_WORLD-NEXT:     (local.get $0)
  ;; CLOSED_WORLD-NEXT:    )
  ;; CLOSED_WORLD-NEXT:   )
  ;; CLOSED_WORLD-NEXT:  )
  ;; CLOSED_WORLD-NEXT:  (ref.func $work)
  ;; CLOSED_WORLD-NEXT: )
  (func $caller (export "caller") (param $x i32) (result funcref)
    (drop
      (call_ref $func
        (select (result (ref $func))
          (ref.func $work)
          (ref.func $other)
          (local.get $x)
        )
        (ref.func $work)
      )
    )
    (ref.func $work)
  )
)

