;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.
;; RUN: foreach %s %t wasm-opt --nominal --gto -all -S -o - | filecheck %s

(module
  ;; A struct with a field that is never read or written, so it can be
  ;; removed. However, there is an imported table here, which prevents that
  ;; (this could be improved).

  ;; CHECK:      (type $ref|$struct|_=>_none (func_subtype (param (ref $struct)) func))

  ;; CHECK:      (type $struct (struct_subtype (field (mut funcref)) data))
  (type $struct (struct_subtype (field (mut funcref)) data))

  ;; CHECK:      (import "import" "import" (table $table 0 funcref))
  (import "import" "import" (table $table 0 funcref))

  ;; CHECK:      (func $func (type $ref|$struct|_=>_none) (param $x (ref $struct))
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT: )
  (func $func (param $x (ref $struct))
  )
)

(module
  ;; An imported global prevents optimization.

  ;; CHECK:      (type $ref|$struct|_=>_none (func_subtype (param (ref $struct)) func))

  ;; CHECK:      (type $struct (struct_subtype (field (mut funcref)) data))
  (type $struct (struct_subtype (field (mut funcref)) data))

  ;; CHECK:      (import "import" "import" (global $glob (mut anyref)))
  (import "import" "import" (global $glob (mut anyref)))

  ;; CHECK:      (func $func (type $ref|$struct|_=>_none) (param $x (ref $struct))
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT: )
  (func $func (param $x (ref $struct))
  )
)

(module
  ;; An imported func param prevents optimization.

  ;; CHECK:      (type $anyref_=>_none (func_subtype (param anyref) func))

  ;; CHECK:      (type $ref|$struct|_=>_none (func_subtype (param (ref $struct)) func))

  ;; CHECK:      (type $struct (struct_subtype (field (mut funcref)) data))
  (type $struct (struct_subtype (field (mut funcref)) data))

  ;; CHECK:      (import "import" "import" (func $func-1 (param anyref)))
  (import "import" "import" (func $func-1 (param anyref)))

  ;; CHECK:      (func $func (type $ref|$struct|_=>_none) (param $x (ref $struct))
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT: )
  (func $func (param $x (ref $struct))
  )
)

(module
  ;; An exported table prevents the optimization (this could be improved).

  ;; CHECK:      (type $ref|$struct|_=>_none (func_subtype (param (ref $struct)) func))

  ;; CHECK:      (type $struct (struct_subtype (field (mut funcref)) data))
  (type $struct (struct_subtype (field (mut funcref)) data))

  ;; CHECK:      (table $table 0 funcref)
  (table $table 0 funcref)

  ;; CHECK:      (export "table" (table $table))
  (export "table" (table $table))

  ;; CHECK:      (func $func (type $ref|$struct|_=>_none) (param $x (ref $struct))
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT: )
  (func $func (param $x (ref $struct))
  )
)

(module
  ;; An exported global prevents the optimization.

  ;; CHECK:      (type $struct (struct_subtype (field (mut funcref)) data))
  (type $struct (struct_subtype (field (mut funcref)) data))

  ;; CHECK:      (type $ref|$struct|_=>_none (func_subtype (param (ref $struct)) func))

  ;; CHECK:      (global $glob anyref (struct.new $struct
  ;; CHECK-NEXT:  (ref.null func)
  ;; CHECK-NEXT: ))
  (global $glob anyref (struct.new $struct (ref.null func)))

  ;; CHECK:      (export "glob" (global $glob))
  (export "glob" (global $glob))

  ;; CHECK:      (func $func (type $ref|$struct|_=>_none) (param $x (ref $struct))
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT: )
  (func $func (param $x (ref $struct))
  )
)

(module
  ;; An exported func result prevents optimization.

  ;; CHECK:      (type $struct (struct_subtype (field (mut funcref)) data))
  (type $struct (struct_subtype (field (mut funcref)) data))

  ;; CHECK:      (type $ref|$struct|_=>_none (func_subtype (param (ref $struct)) func))

  ;; CHECK:      (type $none_=>_ref|$struct| (func_subtype (result (ref $struct)) func))

  ;; CHECK:      (export "func-1" (func $func-1))
  (export "func-1" (func $func-1))

  ;; CHECK:      (func $func (type $ref|$struct|_=>_none) (param $x (ref $struct))
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT: )
  (func $func (param $x (ref $struct))
  )

  ;; CHECK:      (func $func-1 (type $none_=>_ref|$struct|) (result (ref $struct))
  ;; CHECK-NEXT:  (unreachable)
  ;; CHECK-NEXT: )
  (func $func-1 (result (ref $struct))
    (unreachable)
  )
)

(module
  ;; CHECK:      (type $none_=>_anyref (func_subtype (result anyref) func))

  ;; CHECK:      (type $ref|$struct|_=>_none (func_subtype (param (ref $struct)) func))

  ;; CHECK:      (type $struct (struct_subtype  data))
  (type $struct (struct_subtype (field (mut funcref)) data))

  ;; An imported global of a type that cannot be a struct does *not* prevent
  ;; this optimization. Also, if the global is immutable, that is ok as well.

  ;; CHECK:      (import "import" "import" (global $glob-1 externref))
  (import "import" "import" (global $glob-1 externref))
  ;; CHECK:      (import "import" "import" (global $glob-2 i32))
  (import "import" "import" (global $glob-2 i32))
  ;; CHECK:      (import "import" "import" (global $glob-3 anyref))
  (import "import" "import" (global $glob-3 anyref))

  ;; An imported function's result is not a problem.
  ;; CHECK:      (import "import" "import" (func $func-1 (result anyref)))
  (import "import" "import" (func $func-1 (result anyref)))

  ;; An exported function's param is not a problem.
  ;; CHECK:      (export "func-1" (func $func))
  (export "func-1" (func $func))

  ;; CHECK:      (func $func (type $ref|$struct|_=>_none) (param $x (ref $struct))
  ;; CHECK-NEXT:  (nop)
  ;; CHECK-NEXT: )
  (func $func (param $x (ref $struct))
  )
)

