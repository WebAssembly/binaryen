;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.

;; RUN: foreach %s %t wasm-opt --nominal --monomorphize-always --gufa -all -S -o - | filecheck %s

;; Monomorphize will generate a version of the function $main that calls a null
;; type. Gufa should not crash on that. (We must run both passes in sequence, as
;; either text or binary parsing will turn a call_ref of null into an
;; unreachable, which would avoid the issue.)

(module
 ;; CHECK:      (type $ret-i32 (func_subtype (result i32) func))
 (type $ret-i32 (func_subtype (result i32) func))

 ;; CHECK:      (type $ref?|$ret-i32|_=>_i32 (func_subtype (param (ref null $ret-i32)) (result i32) func))

 ;; CHECK:      (type $nullfuncref_=>_i32 (func_subtype (param nullfuncref) (result i32) func))

 ;; CHECK:      (func $call_reffer (type $ref?|$ret-i32|_=>_i32) (param $0 (ref null $ret-i32)) (result i32)
 ;; CHECK-NEXT:  (drop
 ;; CHECK-NEXT:   (block ;; (replaces something unreachable we can't emit)
 ;; CHECK-NEXT:    (drop
 ;; CHECK-NEXT:     (unreachable)
 ;; CHECK-NEXT:    )
 ;; CHECK-NEXT:    (unreachable)
 ;; CHECK-NEXT:   )
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT:  (unreachable)
 ;; CHECK-NEXT: )
 (func $call_reffer (param $0 (ref null $ret-i32)) (result i32)
  (call_ref $ret-i32
   (local.get $0)
  )
 )

 ;; CHECK:      (func $main (type $ret-i32) (result i32)
 ;; CHECK-NEXT:  (drop
 ;; CHECK-NEXT:   (call $call_reffer_0
 ;; CHECK-NEXT:    (ref.null nofunc)
 ;; CHECK-NEXT:   )
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT:  (unreachable)
 ;; CHECK-NEXT: )
 (func $main (type $ret-i32) (result i32)
  ;; This should be switched to call a new monomorphized function. That function
  ;; will trap, so we'll put a trap after the call.
  (call $call_reffer
   (ref.null nofunc)
  )
 )
)
;; CHECK:      (func $call_reffer_0 (type $nullfuncref_=>_i32) (param $0 nullfuncref) (result i32)
;; CHECK-NEXT:  (unreachable)
;; CHECK-NEXT: )
