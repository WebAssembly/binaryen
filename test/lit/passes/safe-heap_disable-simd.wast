;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.
;; NOTE: This test was ported using port_test.py and could be cleaned up.

;; RUN: foreach %s %t wasm-opt --safe-heap --disable-simd -S -o - | filecheck %s

(module
  (memory 1 1)
)
;; CHECK:      (type $i32_i32_=>_i64 (func (param i32 i32) (result i64)))

;; CHECK:      (type $i32_i32_i64_=>_none (func (param i32 i32 i64)))

;; CHECK:      (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))

;; CHECK:      (type $i32_i32_i32_=>_none (func (param i32 i32 i32)))

;; CHECK:      (type $i32_i32_=>_f64 (func (param i32 i32) (result f64)))

;; CHECK:      (type $i32_i32_f64_=>_none (func (param i32 i32 f64)))

;; CHECK:      (type $i32_i32_=>_f32 (func (param i32 i32) (result f32)))

;; CHECK:      (type $i32_i32_f32_=>_none (func (param i32 i32 f32)))

;; CHECK:      (type $none_=>_none (func))

;; CHECK:      (type $none_=>_i32 (func (result i32)))

;; CHECK:      (import "env" "emscripten_get_sbrk_ptr" (func $emscripten_get_sbrk_ptr (result i32)))

;; CHECK:      (import "env" "segfault" (func $segfault))

;; CHECK:      (import "env" "alignfault" (func $alignfault))

;; CHECK:      (memory $0 1 1)

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_1_1 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 1)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load8_s
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_1_U_1 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 1)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load8_u
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_2_1 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load16_s align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_2_2 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load16_s
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_2_U_1 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load16_u align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_2_U_2 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load16_u
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_4_1 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_4_2 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load align=2
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_4_4 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_1_1 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 1)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load8_s
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_1_U_1 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 1)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load8_u
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_2_1 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load16_s align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_2_2 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load16_s
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_2_U_1 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load16_u align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_2_U_2 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load16_u
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_4_1 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load32_s align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_4_2 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load32_s align=2
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_4_4 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load32_s
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_4_U_1 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load32_u align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_4_U_2 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load32_u align=2
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_4_U_4 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load32_u
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_8_1 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_8_2 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load align=2
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_8_4 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load align=4
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_8_8 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 7)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_f32_4_1 (param $0 i32) (param $1 i32) (result f32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f32.load align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_f32_4_2 (param $0 i32) (param $1 i32) (result f32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f32.load align=2
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_f32_4_4 (param $0 i32) (param $1 i32) (result f32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f32.load
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_f64_8_1 (param $0 i32) (param $1 i32) (result f64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.load align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_f64_8_2 (param $0 i32) (param $1 i32) (result f64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.load align=2
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_f64_8_4 (param $0 i32) (param $1 i32) (result f64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.load align=4
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_f64_8_8 (param $0 i32) (param $1 i32) (result f64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 7)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.load
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i32_1_1 (param $0 i32) (param $1 i32) (param $2 i32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 1)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store8
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i32_2_1 (param $0 i32) (param $1 i32) (param $2 i32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store16 align=1
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i32_2_2 (param $0 i32) (param $1 i32) (param $2 i32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store16
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i32_4_1 (param $0 i32) (param $1 i32) (param $2 i32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store align=1
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i32_4_2 (param $0 i32) (param $1 i32) (param $2 i32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store align=2
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i32_4_4 (param $0 i32) (param $1 i32) (param $2 i32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_1_1 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 1)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store8
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_2_1 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store16 align=1
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_2_2 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store16
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_4_1 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store32 align=1
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_4_2 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store32 align=2
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_4_4 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store32
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_8_1 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store align=1
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_8_2 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store align=2
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_8_4 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store align=4
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_8_8 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 7)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_f32_4_1 (param $0 i32) (param $1 i32) (param $2 f32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f32.store align=1
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_f32_4_2 (param $0 i32) (param $1 i32) (param $2 f32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f32.store align=2
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_f32_4_4 (param $0 i32) (param $1 i32) (param $2 f32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f32.store
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_f64_8_1 (param $0 i32) (param $1 i32) (param $2 f64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.store align=1
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_f64_8_2 (param $0 i32) (param $1 i32) (param $2 f64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.store align=2
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_f64_8_4 (param $0 i32) (param $1 i32) (param $2 f64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.store align=4
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_f64_8_8 (param $0 i32) (param $1 i32) (param $2 f64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $emscripten_get_sbrk_ptr)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 7)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.store
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )
(module
  (memory 1 1)
  ;; CHECK:      (type $i32_i32_=>_i64 (func (param i32 i32) (result i64)))

  ;; CHECK:      (type $i32_i32_i64_=>_none (func (param i32 i32 i64)))

  ;; CHECK:      (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))

  ;; CHECK:      (type $i32_i32_i32_=>_none (func (param i32 i32 i32)))

  ;; CHECK:      (type $i32_i32_=>_f64 (func (param i32 i32) (result f64)))

  ;; CHECK:      (type $i32_i32_f64_=>_none (func (param i32 i32 f64)))

  ;; CHECK:      (type $i32_i32_=>_f32 (func (param i32 i32) (result f32)))

  ;; CHECK:      (type $i32_i32_f32_=>_none (func (param i32 i32 f32)))

  ;; CHECK:      (type $none_=>_none (func))

  ;; CHECK:      (type $none_=>_i32 (func (result i32)))

  ;; CHECK:      (import "env" "emscripten_get_sbrk_ptr" (func $foo (result i32)))
  (import "env" "emscripten_get_sbrk_ptr" (func $foo (result i32)))
)
;; CHECK:      (import "env" "segfault" (func $segfault))

;; CHECK:      (import "env" "alignfault" (func $alignfault))

;; CHECK:      (memory $0 1 1)

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_1_1 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 1)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load8_s
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_1_U_1 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 1)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load8_u
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_2_1 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load16_s align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_2_2 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load16_s
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_2_U_1 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load16_u align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_2_U_2 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load16_u
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_4_1 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_4_2 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load align=2
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_4_4 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_1_1 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 1)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load8_s
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_1_U_1 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 1)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load8_u
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_2_1 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load16_s align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_2_2 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load16_s
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_2_U_1 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load16_u align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_2_U_2 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load16_u
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_4_1 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load32_s align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_4_2 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load32_s align=2
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_4_4 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load32_s
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_4_U_1 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load32_u align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_4_U_2 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load32_u align=2
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_4_U_4 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load32_u
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_8_1 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_8_2 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load align=2
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_8_4 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load align=4
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_8_8 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 7)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_f32_4_1 (param $0 i32) (param $1 i32) (result f32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f32.load align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_f32_4_2 (param $0 i32) (param $1 i32) (result f32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f32.load align=2
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_f32_4_4 (param $0 i32) (param $1 i32) (result f32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f32.load
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_f64_8_1 (param $0 i32) (param $1 i32) (result f64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.load align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_f64_8_2 (param $0 i32) (param $1 i32) (result f64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.load align=2
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_f64_8_4 (param $0 i32) (param $1 i32) (result f64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.load align=4
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_f64_8_8 (param $0 i32) (param $1 i32) (result f64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 7)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.load
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i32_1_1 (param $0 i32) (param $1 i32) (param $2 i32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 1)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store8
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i32_2_1 (param $0 i32) (param $1 i32) (param $2 i32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store16 align=1
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i32_2_2 (param $0 i32) (param $1 i32) (param $2 i32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store16
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i32_4_1 (param $0 i32) (param $1 i32) (param $2 i32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store align=1
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i32_4_2 (param $0 i32) (param $1 i32) (param $2 i32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store align=2
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i32_4_4 (param $0 i32) (param $1 i32) (param $2 i32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_1_1 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 1)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store8
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_2_1 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store16 align=1
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_2_2 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store16
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_4_1 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store32 align=1
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_4_2 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store32 align=2
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_4_4 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store32
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_8_1 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store align=1
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_8_2 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store align=2
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_8_4 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store align=4
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_8_8 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 7)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_f32_4_1 (param $0 i32) (param $1 i32) (param $2 f32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f32.store align=1
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_f32_4_2 (param $0 i32) (param $1 i32) (param $2 f32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f32.store align=2
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_f32_4_4 (param $0 i32) (param $1 i32) (param $2 f32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f32.store
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_f64_8_1 (param $0 i32) (param $1 i32) (param $2 f64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.store align=1
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_f64_8_2 (param $0 i32) (param $1 i32) (param $2 f64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.store align=2
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_f64_8_4 (param $0 i32) (param $1 i32) (param $2 f64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.store align=4
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_f64_8_8 (param $0 i32) (param $1 i32) (param $2 f64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 7)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.store
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )
(module
  (memory 1 1)
  ;; CHECK:      (type $i32_i32_=>_i64 (func (param i32 i32) (result i64)))

  ;; CHECK:      (type $i32_i32_i64_=>_none (func (param i32 i32 i64)))

  ;; CHECK:      (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))

  ;; CHECK:      (type $i32_i32_i32_=>_none (func (param i32 i32 i32)))

  ;; CHECK:      (type $i32_i32_=>_f64 (func (param i32 i32) (result f64)))

  ;; CHECK:      (type $i32_i32_f64_=>_none (func (param i32 i32 f64)))

  ;; CHECK:      (type $i32_i32_=>_f32 (func (param i32 i32) (result f32)))

  ;; CHECK:      (type $i32_i32_f32_=>_none (func (param i32 i32 f32)))

  ;; CHECK:      (type $none_=>_none (func))

  ;; CHECK:      (type $none_=>_i32 (func (result i32)))

  ;; CHECK:      (import "env" "segfault" (func $segfault))

  ;; CHECK:      (import "env" "alignfault" (func $alignfault))

  ;; CHECK:      (memory $0 1 1)

  ;; CHECK:      (export "emscripten_get_sbrk_ptr" (func $foo))
  (export "emscripten_get_sbrk_ptr" (func $foo))
  ;; CHECK:      (func $foo (result i32)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.load
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (i32.const 1234)
  ;; CHECK-NEXT: )
  (func $foo (result i32)
   (drop (i32.load (i32.const 0))) ;; should not be modified!
   (i32.const 1234)
  )
)
;; CHECK:      (func $SAFE_HEAP_LOAD_i32_1_1 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 1)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load8_s
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_1_U_1 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 1)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load8_u
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_2_1 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load16_s align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_2_2 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load16_s
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_2_U_1 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load16_u align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_2_U_2 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load16_u
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_4_1 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_4_2 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load align=2
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i32_4_4 (param $0 i32) (param $1 i32) (result i32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.load
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_1_1 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 1)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load8_s
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_1_U_1 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 1)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load8_u
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_2_1 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load16_s align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_2_2 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load16_s
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_2_U_1 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load16_u align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_2_U_2 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load16_u
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_4_1 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load32_s align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_4_2 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load32_s align=2
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_4_4 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load32_s
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_4_U_1 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load32_u align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_4_U_2 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load32_u align=2
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_4_U_4 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load32_u
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_8_1 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_8_2 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load align=2
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_8_4 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load align=4
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_i64_8_8 (param $0 i32) (param $1 i32) (result i64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 7)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.load
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_f32_4_1 (param $0 i32) (param $1 i32) (result f32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f32.load align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_f32_4_2 (param $0 i32) (param $1 i32) (result f32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f32.load align=2
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_f32_4_4 (param $0 i32) (param $1 i32) (result f32)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f32.load
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_f64_8_1 (param $0 i32) (param $1 i32) (result f64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.load align=1
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_f64_8_2 (param $0 i32) (param $1 i32) (result f64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.load align=2
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_f64_8_4 (param $0 i32) (param $1 i32) (result f64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.load align=4
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_LOAD_f64_8_8 (param $0 i32) (param $1 i32) (result f64)
;; CHECK-NEXT:  (local $2 i32)
;; CHECK-NEXT:  (local.set $2
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $2)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $2)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $2)
;; CHECK-NEXT:    (i32.const 7)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.load
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i32_1_1 (param $0 i32) (param $1 i32) (param $2 i32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 1)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store8
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i32_2_1 (param $0 i32) (param $1 i32) (param $2 i32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store16 align=1
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i32_2_2 (param $0 i32) (param $1 i32) (param $2 i32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store16
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i32_4_1 (param $0 i32) (param $1 i32) (param $2 i32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store align=1
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i32_4_2 (param $0 i32) (param $1 i32) (param $2 i32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store align=2
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i32_4_4 (param $0 i32) (param $1 i32) (param $2 i32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i32.store
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_1_1 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 1)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store8
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_2_1 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store16 align=1
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_2_2 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 2)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store16
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_4_1 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store32 align=1
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_4_2 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store32 align=2
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_4_4 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store32
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_8_1 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store align=1
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_8_2 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store align=2
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_8_4 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store align=4
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_i64_8_8 (param $0 i32) (param $1 i32) (param $2 i64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 7)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (i64.store
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_f32_4_1 (param $0 i32) (param $1 i32) (param $2 f32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f32.store align=1
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_f32_4_2 (param $0 i32) (param $1 i32) (param $2 f32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f32.store align=2
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_f32_4_4 (param $0 i32) (param $1 i32) (param $2 f32)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 4)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f32.store
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_f64_8_1 (param $0 i32) (param $1 i32) (param $2 f64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.store align=1
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_f64_8_2 (param $0 i32) (param $1 i32) (param $2 f64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.store align=2
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_f64_8_4 (param $0 i32) (param $1 i32) (param $2 f64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 3)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.store align=4
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )

;; CHECK:      (func $SAFE_HEAP_STORE_f64_8_8 (param $0 i32) (param $1 i32) (param $2 f64)
;; CHECK-NEXT:  (local $3 i32)
;; CHECK-NEXT:  (local.set $3
;; CHECK-NEXT:   (i32.add
;; CHECK-NEXT:    (local.get $0)
;; CHECK-NEXT:    (local.get $1)
;; CHECK-NEXT:   )
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.or
;; CHECK-NEXT:    (i32.eq
;; CHECK-NEXT:     (local.get $3)
;; CHECK-NEXT:     (i32.const 0)
;; CHECK-NEXT:    )
;; CHECK-NEXT:    (i32.gt_u
;; CHECK-NEXT:     (i32.add
;; CHECK-NEXT:      (local.get $3)
;; CHECK-NEXT:      (i32.const 8)
;; CHECK-NEXT:     )
;; CHECK-NEXT:     (i32.load
;; CHECK-NEXT:      (call $foo)
;; CHECK-NEXT:     )
;; CHECK-NEXT:    )
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $segfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (if
;; CHECK-NEXT:   (i32.and
;; CHECK-NEXT:    (local.get $3)
;; CHECK-NEXT:    (i32.const 7)
;; CHECK-NEXT:   )
;; CHECK-NEXT:   (call $alignfault)
;; CHECK-NEXT:  )
;; CHECK-NEXT:  (f64.store
;; CHECK-NEXT:   (local.get $3)
;; CHECK-NEXT:   (local.get $2)
;; CHECK-NEXT:  )
;; CHECK-NEXT: )
