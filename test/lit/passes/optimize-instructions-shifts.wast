;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-opt %s --optimize-instructions -S -o - | filecheck %s

(module
  ;; CHECK:      (func $less-than-shifted (param $x i32) (param $y i64)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.lt_s
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 400)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i64.lt_s
  ;; CHECK-NEXT:    (local.get $y)
  ;; CHECK-NEXT:    (i64.const 400)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $less-than-shifted (param $x i32) (param $y i64)
    ;; (x >> 2) < 100  =>  x < 400
    (drop
      (i32.lt_s
        (i32.shr_s
          (local.get $x)
          (i32.const 2)
        )
        (i32.const 100)
      )
    )
    ;; As above, but with i64.
    (drop
      (i64.lt_s
        (i64.shr_s
          (local.get $y)
          (i64.const 2)
        )
        (i64.const 100)
      )
    )
  )

  ;; CHECK:      (func $less-than-shifted-overflow (param $x i32)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.lt_s
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 2139095040)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.lt_s
  ;; CHECK-NEXT:    (i32.shr_s
  ;; CHECK-NEXT:     (local.get $x)
  ;; CHECK-NEXT:     (i32.const 24)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (i32.const 255)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.lt_s
  ;; CHECK-NEXT:    (i32.shr_s
  ;; CHECK-NEXT:     (local.get $x)
  ;; CHECK-NEXT:     (i32.const 25)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (i32.const 255)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $less-than-shifted-overflow (param $x i32)
    ;; Borderline values: we don't want the constant on the right, when shifted
    ;; by the number of shifts, to become signed, as that might alter the
    ;; result. This case can be optimized, and the ones after it not.
    (drop
      (i32.lt_s
        (i32.shr_s
          (local.get $x)
          (i32.const 23)
        )
        (i32.const 255)
      )
    )
    (drop
      (i32.lt_s
        (i32.shr_s
          (local.get $x)
          (i32.const 24)
        )
        (i32.const 255)
      )
    )
    (drop
      (i32.lt_s
        (i32.shr_s
          (local.get $x)
          (i32.const 25)
        )
        (i32.const 255)
      )
    )
  )

  ;; CHECK:      (func $less-than-shifted-todo (param $x i32)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.lt_u
  ;; CHECK-NEXT:    (i32.shr_s
  ;; CHECK-NEXT:     (local.get $x)
  ;; CHECK-NEXT:     (i32.const 2)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (i32.const 100)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.lt_u
  ;; CHECK-NEXT:    (i32.shr_u
  ;; CHECK-NEXT:     (local.get $x)
  ;; CHECK-NEXT:     (i32.const 2)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (i32.const 100)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $less-than-shifted-todo (param $x i32)
    ;; We don't optimize these yet.
    ;; This comparison is unsigned.
    (drop
      (i32.lt_u
        (i32.shr_s
          (local.get $x)
          (i32.const 2)
        )
        (i32.const 100)
      )
    )
    ;; This shift is unsigned.
    (drop
      (i32.lt_s
        (i32.shr_u
          (local.get $x)
          (i32.const 2)
        )
        (i32.const 100)
      )
    )
  )

  ;; CHECK:      (func $other-comparisons (param $x i32)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.le_s
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 403)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.gt_s
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 403)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.ge_s
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:    (i32.const 400)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $other-comparisons (param $x i32)
    ;; <= :
    ;;   (x >> 2) <= 100  =>  x <= 403
    (drop
      (i32.le_s
        (i32.shr_s
          (local.get $x)
          (i32.const 2)
        )
        (i32.const 100)
      )
    )
    ;; > :
    ;;   (x >> 2) > 100  =>  x > 403
    (drop
      (i32.gt_s
        (i32.shr_s
          (local.get $x)
          (i32.const 2)
        )
        (i32.const 100)
      )
    )
    ;; >= :
    ;;   (x >> 2) >= 100  =>  x >= 400
    (drop
      (i32.ge_s
        (i32.shr_s
          (local.get $x)
          (i32.const 2)
        )
        (i32.const 100)
      )
    )
  )
)
