;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: foreach %s %t wasm-opt --enable-reference-types --enable-typed-function-references --merge-functions -S -o - | filecheck %s

(module
  ;; CHECK:      (func $big-const-42 (result i32)
  ;; CHECK-NEXT:  (call $byn$mgfn-shared$big-const-42
  ;; CHECK-NEXT:   (i32.const 42)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $big-const-42 (result i32)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (i32.const 42)
  )

  ;; same as $big-const-42, but the set of $big-const-* derives {42, 42, 43} params
  ;; CHECK:      (func $big-const-42-1 (result i32)
  ;; CHECK-NEXT:  (call $byn$mgfn-shared$big-const-42
  ;; CHECK-NEXT:   (i32.const 42)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $big-const-42-1 (result i32)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (i32.const 42)
  )
  ;; CHECK:      (func $big-const-43 (result i32)
  ;; CHECK-NEXT:  (call $byn$mgfn-shared$big-const-42
  ;; CHECK-NEXT:   (i32.const 43)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $big-const-43 (result i32)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (i32.const 43)
  )

  ;; CHECK:      (func $small-const-44 (result i32)
  ;; CHECK-NEXT:  (i32.const 44)
  ;; CHECK-NEXT: )
  (func $small-const-44 (result i32)
    (i32.const 44)
  )
  ;; CHECK:      (func $small-const-45 (result i32)
  ;; CHECK-NEXT:  (i32.const 45)
  ;; CHECK-NEXT: )
  (func $small-const-45 (result i32)
    (i32.const 45)
  )
)

;; offset locals for extra params
(module
  ;; CHECK:      (func $take-param-and-local-0 (param $0 i32) (result i32)
  ;; CHECK-NEXT:  (call $byn$mgfn-shared$take-param-and-local-0
  ;; CHECK-NEXT:   (local.get $0)
  ;; CHECK-NEXT:   (i32.const 42)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $take-param-and-local-0 (param $0 i32) (result i32)
    (local $1 i32)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (i32.add (i32.add (i32.const 42) (local.get $0)) (local.get $1))
  )
  ;; CHECK:      (func $take-param-and-local-1 (param $0 i32) (result i32)
  ;; CHECK-NEXT:  (call $byn$mgfn-shared$take-param-and-local-0
  ;; CHECK-NEXT:   (local.get $0)
  ;; CHECK-NEXT:   (i32.const 43)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $take-param-and-local-1 (param $0 i32) (result i32)
    (local $1 i32)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (i32.add (i32.add (i32.const 43) (local.get $0)) (local.get $1))
  )
)

;; allowing locals indexes order difference by reoder-locals
(module
  ;; CHECK:      (func $use-locals-0-1 (result i32)
  ;; CHECK-NEXT:  (call $byn$mgfn-shared$use-locals-0-1
  ;; CHECK-NEXT:   (i32.const 42)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $use-locals-0-1 (result i32)
    (local $0 i32)
    (local $1 i32)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (drop (local.get $0))
    (i32.add (local.get $1) (i32.const 42))
  )
  ;; CHECK:      (func $use-locals-1-0 (result i32)
  ;; CHECK-NEXT:  (call $byn$mgfn-shared$use-locals-0-1
  ;; CHECK-NEXT:   (i32.const 43)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $use-locals-1-0 (result i32)
    (local $0 i32)
    (local $1 i32)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (drop (local.get $1))
    (i32.add (local.get $0) (i32.const 43))
  )

)

;; different callees
(module
  ;; CHECK:      (func $callee-0 (result i32)
  ;; CHECK-NEXT:  (i32.const 24)
  ;; CHECK-NEXT: )
  (func $callee-0 (result i32) (i32.const 24))
  ;; CHECK:      (func $callee-1 (result i32)
  ;; CHECK-NEXT:  (i32.const 34)
  ;; CHECK-NEXT: )
  (func $callee-1 (result i32) (i32.const 34))
  ;; CHECK:      (func $call-callee-0 (result i32)
  ;; CHECK-NEXT:  (call $byn$mgfn-shared$call-callee-0
  ;; CHECK-NEXT:   (ref.func $callee-0)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $call-callee-0 (result i32)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (call $callee-0)
  )
  ;; CHECK:      (func $call-callee-1 (result i32)
  ;; CHECK-NEXT:  (call $byn$mgfn-shared$call-callee-0
  ;; CHECK-NEXT:   (ref.func $callee-1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $call-callee-1 (result i32)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (call $callee-1)
  )
)

(module
  ;; CHECK:      (func $use-42-twice (result i32)
  ;; CHECK-NEXT:  (call $byn$mgfn-shared$use-42-twice
  ;; CHECK-NEXT:   (i32.const 42)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $use-42-twice (result i32)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (i32.add
      (i32.const 42)
      (i32.const 42)
    )
  )
  ;; CHECK:      (func $use-43-twice (result i32)
  ;; CHECK-NEXT:  (call $byn$mgfn-shared$use-42-twice
  ;; CHECK-NEXT:   (i32.const 43)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $use-43-twice (result i32)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (nop) (nop) (nop) (nop) (nop) (nop)
    (i32.add
      (i32.const 43)
      (i32.const 43)
    )
  )
)

(module
  ;; CHECK:      (func $yes-offset-local-indices-1 (param $a i32) (param $b i32)
  ;; CHECK-NEXT:  (call $byn$mgfn-shared$yes-offset-local-indices-1
  ;; CHECK-NEXT:   (local.get $a)
  ;; CHECK-NEXT:   (local.get $b)
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $yes-offset-local-indices-1 (param $a i32) (param $b i32)
    (local $x i32)
    (local $y i32)
    (drop (local.get $a))
    (drop (local.get $b))
    (drop (local.get $x))
    (drop (local.get $y))
    (drop (local.tee $x (local.get $x)))
    (drop (local.tee $y (local.get $y)))
    (drop (local.tee $a (local.get $a)))
    (drop (local.tee $b (local.get $b)))
    (drop (i32.const 1))
  )
  ;; CHECK:      (func $yes-offset-local-indices-2 (param $a i32) (param $b i32)
  ;; CHECK-NEXT:  (call $byn$mgfn-shared$yes-offset-local-indices-1
  ;; CHECK-NEXT:   (local.get $a)
  ;; CHECK-NEXT:   (local.get $b)
  ;; CHECK-NEXT:   (i32.const 2)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $yes-offset-local-indices-2 (param $a i32) (param $b i32)
    (local $x i32)
    (local $y i32)
    (drop (local.get $a))
    (drop (local.get $b))
    (drop (local.get $x))
    (drop (local.get $y))
    (drop (local.tee $x (local.get $x)))
    (drop (local.tee $y (local.get $y)))
    (drop (local.tee $a (local.get $a)))
    (drop (local.tee $b (local.get $b)))
    (drop (i32.const 2))
  )
)
