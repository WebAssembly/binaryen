;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.
;; RUN: foreach %s %t wasm-opt --nominal            --gufa -Os                -all -S -o - | filecheck %s --check-prefix NOP
;; RUN: foreach %s %t wasm-opt --nominal --type-ssa --gufa -Os --type-merging -all -S -o - | filecheck %s --check-prefix YES

;; Show that the combination of type-ssa and type-merging can find things that
;; otherwise cannot be optimized. NOP will fail to optimize something that YES
;; can.

(module
  ;; NOP:      (type $A (struct (field (mut i32))))
  ;; YES:      (type $A (struct (field (mut i32))))
  (type $A (struct_subtype (field (mut i32)) data))

  ;; NOP:      (type $dataref_=>_none (func (param dataref)))

  ;; NOP:      (type $none_=>_i32 (func (result i32)))

  ;; NOP:      (import "a" "b" (func $escape (param dataref)))
  ;; YES:      (type $dataref_=>_none (func (param dataref)))

  ;; YES:      (type $none_=>_i32 (func (result i32)))

  ;; YES:      (import "a" "b" (func $escape (param dataref)))
  (import "a" "b" (func $escape (param dataref)))

  ;; NOP:      (export "foo" (func $foo))

  ;; NOP:      (func $foo (type $none_=>_i32) (; has Stack IR ;) (result i32)
  ;; NOP-NEXT:  (local $0 (ref $A))
  ;; NOP-NEXT:  (local $1 (ref $A))
  ;; NOP-NEXT:  (local.set $0
  ;; NOP-NEXT:   (struct.new $A
  ;; NOP-NEXT:    (i32.const 1337)
  ;; NOP-NEXT:   )
  ;; NOP-NEXT:  )
  ;; NOP-NEXT:  (call $escape
  ;; NOP-NEXT:   (local.tee $1
  ;; NOP-NEXT:    (struct.new $A
  ;; NOP-NEXT:     (i32.const 42)
  ;; NOP-NEXT:    )
  ;; NOP-NEXT:   )
  ;; NOP-NEXT:  )
  ;; NOP-NEXT:  (call $escape
  ;; NOP-NEXT:   (local.get $0)
  ;; NOP-NEXT:  )
  ;; NOP-NEXT:  (struct.set $A 0
  ;; NOP-NEXT:   (local.get $1)
  ;; NOP-NEXT:   (i32.const 100)
  ;; NOP-NEXT:  )
  ;; NOP-NEXT:  (struct.set $A 0
  ;; NOP-NEXT:   (local.get $0)
  ;; NOP-NEXT:   (i32.const 1337)
  ;; NOP-NEXT:  )
  ;; NOP-NEXT:  (i32.add
  ;; NOP-NEXT:   (struct.get $A 0
  ;; NOP-NEXT:    (local.get $1)
  ;; NOP-NEXT:   )
  ;; NOP-NEXT:   (struct.get $A 0
  ;; NOP-NEXT:    (local.get $0)
  ;; NOP-NEXT:   )
  ;; NOP-NEXT:  )
  ;; NOP-NEXT: )
  ;; YES:      (export "foo" (func $foo))

  ;; YES:      (func $foo (type $none_=>_i32) (result i32)
  ;; YES-NEXT:  (local $0 (ref $A))
  ;; YES-NEXT:  (local $1 (ref $A))
  ;; YES-NEXT:  (local.set $0
  ;; YES-NEXT:   (struct.new $A
  ;; YES-NEXT:    (i32.const 1337)
  ;; YES-NEXT:   )
  ;; YES-NEXT:  )
  ;; YES-NEXT:  (call $escape
  ;; YES-NEXT:   (local.tee $1
  ;; YES-NEXT:    (struct.new $A
  ;; YES-NEXT:     (i32.const 42)
  ;; YES-NEXT:    )
  ;; YES-NEXT:   )
  ;; YES-NEXT:  )
  ;; YES-NEXT:  (call $escape
  ;; YES-NEXT:   (local.get $0)
  ;; YES-NEXT:  )
  ;; YES-NEXT:  (struct.set $A 0
  ;; YES-NEXT:   (local.get $1)
  ;; YES-NEXT:   (i32.const 100)
  ;; YES-NEXT:  )
  ;; YES-NEXT:  (struct.set $A 0
  ;; YES-NEXT:   (local.get $0)
  ;; YES-NEXT:   (i32.const 1337)
  ;; YES-NEXT:  )
  ;; YES-NEXT:  (i32.add
  ;; YES-NEXT:   (struct.get $A 0
  ;; YES-NEXT:    (local.get $1)
  ;; YES-NEXT:   )
  ;; YES-NEXT:   (i32.const 1337)
  ;; YES-NEXT:  )
  ;; YES-NEXT: )
  (func $foo (export "foo") (result i32)
    (local $a-42 (ref null $A))
    (local $a-1337 (ref null $A))

    ;; Two instances of $a. Both escape, so we can't just do escape analysis
    ;; here, and the field is mutable.
    (local.set $a-42
      (struct.new $A
        (i32.const 42)
      )
    )
    (local.set $a-1337
      (struct.new $A
        (i32.const 1337)
      )
    )
    (call $escape
      (local.get $a-42)
    )
    (call $escape
      (local.get $a-1337)
    )

    ;; Write some values back to them. The first gets a different value than
    ;; before.
    (struct.set $A 0
      (local.get $a-42)
      (i32.const 100)
    )
    (struct.set $A 0
      (local.get $a-1337)
      (i32.const 1337)
    )

    ;; We can infer 1337 in the second local: that type, after SSA, always gets
    ;; written the same constant.
    (i32.add
      (struct.get $A 0
        (local.get $a-42)
      )
      (struct.get $A 0       ;; in YES this will become a constant 1337
        (local.get $a-1337)
      )
    )
  )
)
