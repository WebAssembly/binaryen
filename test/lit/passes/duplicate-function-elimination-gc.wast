;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.
;; RUN: foreach %s %t wasm-opt --nominal --duplicate-function-elimination -all -S -o - | filecheck %s

(module
  ;; CHECK:      (type $A (func_subtype func))
  (type $A (func_subtype func))

  ;; CHECK:      (type $B (func_subtype func))
  (type $B (func_subtype func))

  ;; CHECK:      (type $C (func_subtype (result i32) func))
  (type $C (func_subtype (result i32) func))

  ;; CHECK:      (func $A-1 (type $A)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $A-1 (type $A)
    (drop
      (i32.const 1)
    )
  )

  (func $A-2 (type $A)
    (drop
      (i32.const 1) ;; same value as $A-1, can be merged
    )
  )

  ;; CHECK:      (func $A-3 (type $A)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.const 2)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $A-3 (type $A)
    (drop
      (i32.const 2) ;; different value
    )
  )

  ;; CHECK:      (func $B-1 (type $B)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.const 1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $B-1 (type $B)
    (drop
      (i32.const 1)
    )
  )

  (func $B-2 (type $B)
    (drop
      (i32.const 1) ;; same value as $B-1, can be merged
    )
  )

  ;; CHECK:      (func $B-3 (type $B)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (i32.const 2)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $B-3 (type $B)
    (drop
      (i32.const 2) ;; different value
    )
  )

  ;; CHECK:      (func $C-1 (type $C) (result i32)
  ;; CHECK-NEXT:  (i32.const 1)
  ;; CHECK-NEXT: )
  (func $C-1 (type $C) (result i32)
    (i32.const 1)
  )

  (func $C-2 (type $C)
    (i32.const 1) ;; same value as $C-1, can be merged
  )

  ;; CHECK:      (func $C-3 (type $C) (result i32)
  ;; CHECK-NEXT:  (i32.const 2)
  ;; CHECK-NEXT: )
  (func $C-3 (type $C)
    (i32.const 2) ;; different value
  )

  ;; CHECK:      (func $calls (type $A)
  ;; CHECK-NEXT:  (call $A-1)
  ;; CHECK-NEXT:  (call $A-1)
  ;; CHECK-NEXT:  (call $A-3)
  ;; CHECK-NEXT:  (call $B-1)
  ;; CHECK-NEXT:  (call $B-1)
  ;; CHECK-NEXT:  (call $B-3)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (call $C-1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (call $C-1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (call $C-3)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $calls
    ;; In each triple, we can merge the first two but not the last so we'll see
    ;; calls to 1,1,3.

    (call $A-1)
    (call $A-2)
    (call $A-3)

    (call $B-1)
    (call $B-2)
    (call $B-3)

    (drop
      (call $C-1)
    )
    (drop
      (call $C-2)
    )
    (drop
      (call $C-3)
    )
  )
)
