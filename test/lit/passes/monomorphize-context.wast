;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.

;; As in monomorphize-types.wast, test in both "always" mode, which always
;; monomorphizes, and in "careful" mode which does it only when it appears to
;; actually help.

;; RUN: foreach %s %t wasm-opt --monomorphize-always -all -S -o - | filecheck %s --check-prefix ALWAYS
;; RUN: foreach %s %t wasm-opt --monomorphize        -all -S -o - | filecheck %s --check-prefix CAREFUL

(module
  (type $struct (struct))

  (memory 10 20)

  (global $imm i32 (i32.const 10))

  (global $mut (mut i32) (i32.const 20))

  (func $caller (param $x i32) (result i32)
    ;; Show the variety of things we can and cannot move into the call context.
    (block $out
      (call $target
        ;; We can't move control flow.
        (block (result i32)
          (i32.const 0)
        )
        (if (result i32)
          (i32.const 1)
          (then
            (i32.const 2)
          )
          (else
            (i32.const 3)
          )
        )
        ;; We don't move calls.
        (call $caller
          (i32.const 4)
        )
        ;; We can't move local operations.
        (local.get $x)
        (local.tee $x
          (i32.const 5)
        )
        ;; We can move globals, even mutable.
        (global.get $imm)
        (global.get $mut)
        ;; We can move loads and other options that might trap.
        (i32.load
          (i32.const 6)
        )
        ;; We can move constants.
        (i32.const 7)
      )
    )
    (i32.const 13)
  )

  (func $target
    (param i32)
    (param i32)
    (param i32)
    (param i32)
    (param i32)
    (param i32)
    (param i32)
    (param i32)
    (param i32)
  )
)

;; TODO: nesting inside, children that are some in and some out

