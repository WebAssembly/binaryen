;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.
;; NOTE: This test was ported using port_passes_tests_to_lit.py and could be cleaned up.

;; RUN: foreach %s %t wasm-opt --localize-children -S -o - | filecheck %s

;; Also show a real-world testcase with interactions, see below.
;; RUN: foreach %s %t wasm-opt --localize-children --precompute-propagate --optimize-instructions -S -o - | filecheck %s --check-prefix=OPTS

(module
  ;; CHECK:      (type $0 (func (result i32)))

  ;; CHECK:      (type $1 (func (param i32) (result i32)))

  ;; CHECK:      (memory $memory 10 20)
  ;; OPTS:      (type $0 (func (result i32)))

  ;; OPTS:      (type $1 (func (param i32) (result i32)))

  ;; OPTS:      (memory $memory 10 20)
  (memory $memory 10 20)


  ;; CHECK:      (export "interactions" (func $interactions))

  ;; CHECK:      (func $fallthrough-const (result i32)
  ;; CHECK-NEXT:  (local $0 i32)
  ;; CHECK-NEXT:  (local $1 i32)
  ;; CHECK-NEXT:  (local.set $0
  ;; CHECK-NEXT:   (call $fallthrough-const)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (local.set $1
  ;; CHECK-NEXT:   (block (result i32)
  ;; CHECK-NEXT:    (drop
  ;; CHECK-NEXT:     (call $fallthrough-const)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (i32.const 42)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (i32.add
  ;; CHECK-NEXT:   (local.get $0)
  ;; CHECK-NEXT:   (local.get $1)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  ;; OPTS:      (export "interactions" (func $interactions))

  ;; OPTS:      (func $fallthrough-const (result i32)
  ;; OPTS-NEXT:  (local $0 i32)
  ;; OPTS-NEXT:  (local $1 i32)
  ;; OPTS-NEXT:  (local.set $0
  ;; OPTS-NEXT:   (call $fallthrough-const)
  ;; OPTS-NEXT:  )
  ;; OPTS-NEXT:  (local.set $1
  ;; OPTS-NEXT:   (block (result i32)
  ;; OPTS-NEXT:    (drop
  ;; OPTS-NEXT:     (call $fallthrough-const)
  ;; OPTS-NEXT:    )
  ;; OPTS-NEXT:    (i32.const 42)
  ;; OPTS-NEXT:   )
  ;; OPTS-NEXT:  )
  ;; OPTS-NEXT:  (i32.add
  ;; OPTS-NEXT:   (local.get $0)
  ;; OPTS-NEXT:   (i32.const 42)
  ;; OPTS-NEXT:  )
  ;; OPTS-NEXT: )
  (func $fallthrough-const (result i32)
    ;; We move the children out to locals, as there is a constant that looks
    ;; promising to optimize.
    (i32.add
      (call $fallthrough-const)
      (block (result i32)
        (drop
          (call $fallthrough-const)
        )
        (i32.const 42)
      )
    )
  )

  ;; CHECK:      (func $call-ignore (result i32)
  ;; CHECK-NEXT:  (i32.add
  ;; CHECK-NEXT:   (call $call-ignore)
  ;; CHECK-NEXT:   (i32.const 42)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  ;; OPTS:      (func $call-ignore (result i32)
  ;; OPTS-NEXT:  (i32.add
  ;; OPTS-NEXT:   (call $call-ignore)
  ;; OPTS-NEXT:   (i32.const 42)
  ;; OPTS-NEXT:  )
  ;; OPTS-NEXT: )
  (func $call-ignore (result i32)
    ;; The call has effects, but we ignore it: we look for falling-through
    ;; constants.
    (i32.add
      (call $call-ignore)
      (i32.const 42)
    )
  )

  ;; CHECK:      (func $nothing (result i32)
  ;; CHECK-NEXT:  (i32.add
  ;; CHECK-NEXT:   (i32.const 10)
  ;; CHECK-NEXT:   (i32.const 20)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  ;; OPTS:      (func $nothing (result i32)
  ;; OPTS-NEXT:  (i32.const 30)
  ;; OPTS-NEXT: )
  (func $nothing (result i32)
    ;; There is nothing for us to do here.
    (i32.add
      (i32.const 10)
      (i32.const 20)
    )
  )

  ;; CHECK:      (func $interactions (param $x i32) (result i32)
  ;; CHECK-NEXT:  (local $1 i32)
  ;; CHECK-NEXT:  (local $2 i32)
  ;; CHECK-NEXT:  (local.set $1
  ;; CHECK-NEXT:   (i32.load
  ;; CHECK-NEXT:    (local.get $x)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (local.set $2
  ;; CHECK-NEXT:   (block (result i32)
  ;; CHECK-NEXT:    (i32.store
  ;; CHECK-NEXT:     (local.get $x)
  ;; CHECK-NEXT:     (i32.const 0)
  ;; CHECK-NEXT:    )
  ;; CHECK-NEXT:    (i32.const 0)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (i32.ge_u
  ;; CHECK-NEXT:   (local.get $1)
  ;; CHECK-NEXT:   (local.get $2)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  ;; OPTS:      (func $interactions (param $x i32) (result i32)
  ;; OPTS-NEXT:  (local $1 i32)
  ;; OPTS-NEXT:  (local $2 i32)
  ;; OPTS-NEXT:  (local.set $1
  ;; OPTS-NEXT:   (i32.load
  ;; OPTS-NEXT:    (local.get $x)
  ;; OPTS-NEXT:   )
  ;; OPTS-NEXT:  )
  ;; OPTS-NEXT:  (local.set $2
  ;; OPTS-NEXT:   (block (result i32)
  ;; OPTS-NEXT:    (i32.store
  ;; OPTS-NEXT:     (local.get $x)
  ;; OPTS-NEXT:     (i32.const 0)
  ;; OPTS-NEXT:    )
  ;; OPTS-NEXT:    (i32.const 0)
  ;; OPTS-NEXT:   )
  ;; OPTS-NEXT:  )
  ;; OPTS-NEXT:  (i32.const 1)
  ;; OPTS-NEXT: )
  (func $interactions (export "interactions") (param $x i32) (result i32)
    ;; The load and store interact here, which prevents merge-blocks from
    ;; simply moving the store outside. However, this is optimizable as shown
    ;; in OPTS:
    ;;  * --localize-children moves effects out of the >=.
    ;;  * --precompute-propagate propagates the 0 to one >= arm.
    ;;  * --optimize-instructions then sees (unsigned) >= 0 and applies the
    ;;    result of 1.
    (i32.ge_u
      (i32.load
        (local.get $x)
      )
      (block (result i32)
        (i32.store
          (local.get $x)
          (i32.const 0)
        )
        (i32.const 0)
      )
    )
  )
)
