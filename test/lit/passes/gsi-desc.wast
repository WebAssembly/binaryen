;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.
;; RUN: foreach %s %t wasm-opt --gsi -all --closed-world -S -o - | filecheck %s

(module
  (rec
    ;; CHECK:      (rec
    ;; CHECK-NEXT:  (type $super (sub (struct)))
    (type $super (sub (struct)))

    ;; CHECK:       (type $A (sub $super (descriptor $A.desc (struct))))
    (type $A (sub $super (descriptor $A.desc (struct))))
    ;; CHECK:       (type $A.desc (describes $A (struct)))
    (type $A.desc (describes $A (struct)))

    ;; CHECK:       (type $B (sub $super (struct)))
    (type $B (sub $super (descriptor $B.desc (struct))))
    ;; CHECK:       (type $B.desc (struct))
    (type $B.desc (describes $B (struct)))

    ;; CHECK:       (type $B (sub $super (struct)))
    (type $other (sub (descriptor $other.desc (struct))))
    ;; CHECK:       (type $B.desc (struct))
    (type $other.desc (describes $other (struct)))
  )

  (global $A (ref $A) (struct.new $A
    (struct.new $A.desc)
  ))

  (global $B (ref $B) (struct.new $B
    (struct.new $B.desc)
  ))

  (global $other (ref $other) (struct.new $other
    (struct.new $other.desc)
  ))

  (global $other2 (ref $other) (struct.new $other
    (struct.new $other.desc)
  ))


  ;; CHECK:       (type $5 (func (param (ref $A))))

  ;; CHECK:      (func $test (type $5) (param $A (ref $A))
  ;; CHECK-NEXT:  (local $B (ref $B))
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (ref.get_desc $A
  ;; CHECK-NEXT:    (local.get $A)
  ;; CHECK-NEXT:   )
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $test (param $super (ref $super)) (param $A (ref $A)) (param $B (ref $B)) (param $other (ref $other))
    ;; We can optimize the super with a select.
    (drop
      (ref.get_desc $super
        (local.get $super)
      )
    )
    ;; We can optimize the siblings directly..
    (drop
      (ref.get_desc $A
        (local.get $A)
      )
    )
    (drop
      (ref.get_desc $B
        (local.get $B)
      )
    )
    ;; We cannot optimize $other, which has two values.
    (drop
      (ref.get_desc $other
        (local.get $other)
      )
    )
  )
)

