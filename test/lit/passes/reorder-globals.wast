;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: foreach %s %t wasm-opt -all --reorder-globals-always -S -o - | filecheck %s
;; RUN: foreach %s %t wasm-opt -all --reorder-globals-always --roundtrip -S -o - | filecheck %s

;; Also check roundtripping here, so verify we don't end up emitting invalid
;; binaries.

;; Global $b has more uses, so it should be sorted first.
(module

  ;; CHECK:      (global $b i32 (i32.const 20))

  ;; CHECK:      (global $a i32 (i32.const 10))
  (global $a i32 (i32.const 10))
  (global $b i32 (i32.const 20))

  ;; CHECK:      (func $uses (type $0)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $b)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $uses
    (drop
      (global.get $b)
    )
  )
)

;; As above, but now with global.sets. Again $b should be sorted first.
(module

  ;; CHECK:      (global $b (mut i32) (i32.const 20))

  ;; CHECK:      (global $a (mut i32) (i32.const 10))
  (global $a (mut i32) (i32.const 10))
  (global $b (mut i32) (i32.const 20))

  ;; CHECK:      (func $uses (type $0)
  ;; CHECK-NEXT:  (global.set $b
  ;; CHECK-NEXT:   (i32.const 30)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (global.set $b
  ;; CHECK-NEXT:   (i32.const 40)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $a)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $uses
    (global.set $b
      (i32.const 30)
    )
    (global.set $b
      (i32.const 40)
    )
    (drop
      (global.get $a)
    )
  )
)

;; As above, but flipped so now $a has more, and should remain first.
(module
  ;; CHECK:      (global $a (mut i32) (i32.const 10))
  (global $a (mut i32) (i32.const 10))
  ;; CHECK:      (global $b (mut i32) (i32.const 20))
  (global $b (mut i32) (i32.const 20))

  ;; CHECK:      (func $uses (type $0)
  ;; CHECK-NEXT:  (global.set $a
  ;; CHECK-NEXT:   (i32.const 30)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (global.set $a
  ;; CHECK-NEXT:   (i32.const 40)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $b)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $uses
    (global.set $a
      (i32.const 30)
    )
    (global.set $a
      (i32.const 40)
    )
    (drop
      (global.get $b)
    )
  )
)

;; $b has more uses, but it depends on $a and cannot be sorted before it.
(module
  ;; CHECK:      (global $a i32 (i32.const 10))
  (global $a i32 (i32.const 10))
  ;; CHECK:      (global $b i32 (global.get $a))
  (global $b i32 (global.get $a))

  ;; CHECK:      (func $uses (type $0)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $b)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $uses
    (drop
      (global.get $b)
    )
  )
)

;; $c has more uses, but it depends on $b and $a and cannot be sorted before
;; them. Likewise $b cannot be before $a.
(module
  ;; CHECK:      (global $a i32 (i32.const 10))
  (global $a i32 (i32.const 10))
  ;; CHECK:      (global $b i32 (global.get $a))
  (global $b i32 (global.get $a))
  ;; CHECK:      (global $c i32 (global.get $b))
  (global $c i32 (global.get $b))

  ;; CHECK:      (func $uses (type $0)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $b)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $c)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $c)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $uses
    (drop
      (global.get $b)
    )
    (drop
      (global.get $c)
    )
    (drop
      (global.get $c)
    )
  )
)

;; As above, but without dependencies, so now $c is first and then $b.
(module
  ;; CHECK:      (global $c i32 (i32.const 30))

  ;; CHECK:      (global $b i32 (i32.const 20))

  ;; CHECK:      (global $a i32 (i32.const 10))
  (global $a i32 (i32.const 10))
  (global $b i32 (i32.const 20))
  (global $c i32 (i32.const 30))

  ;; CHECK:      (func $uses (type $0)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $b)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $c)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $c)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $uses
    (drop
      (global.get $b)
    )
    (drop
      (global.get $c)
    )
    (drop
      (global.get $c)
    )
  )
)

;; As above, but a mixed case: $b depends on $a but $c has no dependencies, and
;; the counts are $c with the most, followed by $b, and then $a. $c can be
;; first here, but $b must follow $a.
(module
  ;; CHECK:      (global $c i32 (i32.const 30))

  ;; CHECK:      (global $a i32 (i32.const 10))
  (global $a i32 (i32.const 10))
  ;; CHECK:      (global $b i32 (global.get $a))
  (global $b i32 (global.get $a))
  (global $c i32 (i32.const 30))

  ;; CHECK:      (func $uses (type $0)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $b)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $c)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $c)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $uses
    (drop
      (global.get $b)
    )
    (drop
      (global.get $c)
    )
    (drop
      (global.get $c)
    )
  )
)

;; As above, but with the counts adjusted: before we had $c, $b, $a from most to
;; least uses, and now $b, $c, $a. We cannot put $b first, however, due to its
;; dependency on $a.
(module
  ;; CHECK:      (global $c i32 (i32.const 30))

  ;; CHECK:      (global $a i32 (i32.const 10))
  (global $a i32 (i32.const 10))
  ;; CHECK:      (global $b i32 (global.get $a))
  (global $b i32 (global.get $a))
  (global $c i32 (i32.const 30))

  ;; CHECK:      (func $uses (type $0)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $b)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $b)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $c)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $uses
    (drop
      (global.get $b)
    )
    (drop
      (global.get $b) ;; this changed
    )
    (drop
      (global.get $c)
    )
  )
)

;; As above, but with the counts adjusted to $b, $a, $c.
(module
  ;; CHECK:      (global $a i32 (i32.const 10))
  (global $a i32 (i32.const 10))
  ;; CHECK:      (global $b i32 (global.get $a))
  (global $b i32 (global.get $a))
  ;; CHECK:      (global $c i32 (i32.const 30))
  (global $c i32 (i32.const 30))

  ;; CHECK:      (func $uses (type $0)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $b)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $b)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $a)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $uses
    (drop
      (global.get $b)
    )
    (drop
      (global.get $b)
    )
    (drop
      (global.get $a) ;; this changed
    )
  )
)

;; As above, but with the counts adjusted to $c, $a, $b.
(module
  ;; CHECK:      (global $c i32 (i32.const 30))

  ;; CHECK:      (global $a i32 (i32.const 10))
  (global $a i32 (i32.const 10))
  ;; CHECK:      (global $b i32 (global.get $a))
  (global $b i32 (global.get $a))
  (global $c i32 (i32.const 30))

  ;; CHECK:      (func $uses (type $0)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $c)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $c)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $a)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $uses
    (drop
      (global.get $c) ;; this changed
    )
    (drop
      (global.get $c) ;; this changed
    )
    (drop
      (global.get $a)
    )
  )
)

;; As above, but with the counts adjusted to $a, $b, $c.
(module
  ;; CHECK:      (global $a i32 (i32.const 10))
  (global $a i32 (i32.const 10))
  ;; CHECK:      (global $b i32 (global.get $a))
  (global $b i32 (global.get $a))
  ;; CHECK:      (global $c i32 (i32.const 30))
  (global $c i32 (i32.const 30))

  ;; CHECK:      (func $uses (type $0)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $a)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $a)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $b)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $uses
    (drop
      (global.get $a) ;; this changed
    )
    (drop
      (global.get $a) ;; this changed
    )
    (drop
      (global.get $b) ;; this changed
    )
  )
)

;; As above, but with the counts adjusted to $a, $c, $b.
(module
  ;; CHECK:      (global $a i32 (i32.const 10))
  (global $a i32 (i32.const 10))
  ;; CHECK:      (global $c i32 (i32.const 30))

  ;; CHECK:      (global $b i32 (global.get $a))
  (global $b i32 (global.get $a))
  (global $c i32 (i32.const 30))

  ;; CHECK:      (func $uses (type $0)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $a)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $a)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $c)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $uses
    (drop
      (global.get $a)
    )
    (drop
      (global.get $a)
    )
    (drop
      (global.get $c) ;; this changed
    )
  )
)

;; $b has more uses, but $a is an import and must remain first.
(module
  ;; CHECK:      (import "a" "b" (global $a i32))
  (import "a" "b" (global $a i32))
  ;; CHECK:      (global $b i32 (i32.const 10))
  (global $b i32 (i32.const 10))

  ;; CHECK:      (func $uses (type $0)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $b)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $uses
    (drop
      (global.get $b)
    )
  )
)

;; As above, but with a and b's names flipped, to check that the names do not
;; matter, and we keep imports first.
(module
  ;; CHECK:      (import "a" "b" (global $b i32))
  (import "a" "b" (global $b i32))

  ;; CHECK:      (global $a i32 (i32.const 10))
  (global $a i32 (i32.const 10))

  ;; CHECK:      (func $uses (type $0)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $a)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $uses
    (drop
      (global.get $a)
    )
  )
)

;; Lower letters have lower counts: $a has the least, and $e has the most.
;;
;; Dependency graph (left depends on right):
;;
;;    $c - $a
;;   /
;; $e
;;   \
;;    $d - $b
;;
;; $e has the most uses, followed by $c and $d. $a and $b have a reverse
;; ordering from their dependers, so a naive topological sort will fail to
;; be optimal. There are multiple optimal orders however, including:
;;
;;   $b, $a, $c, $d, $e
;;   $b, $d, $a, $c, $e
;;
;; $b and $e must be at the edges, but there is no single way to sort the
;; others: the first sorting here puts $a before both $d (though $a has
;; lower count) while the second puts $d before $c. Our greedy algorithm
;; picks the second order here.
(module
  ;; CHECK:      (global $b i32 (i32.const 20))

  ;; CHECK:      (global $d i32 (global.get $b))

  ;; CHECK:      (global $a i32 (i32.const 10))
  (global $a i32 (i32.const 10))

  (global $b i32 (i32.const 20))

  ;; CHECK:      (global $c i32 (global.get $a))
  (global $c i32 (global.get $a))

  (global $d i32 (global.get $b))

  ;; CHECK:      (global $e i32 (i32.add
  ;; CHECK-NEXT:  (global.get $c)
  ;; CHECK-NEXT:  (global.get $d)
  ;; CHECK-NEXT: ))
  (global $e i32 (i32.add
    (global.get $c)
    (global.get $d)
  ))

  ;; CHECK:      (func $uses (type $0)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $e)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $e)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $e)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $e)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $e)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $d)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $d)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $d)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $c)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $c)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $b)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $uses
    ;; $a, $b, $c, $d each have one already from the globals. Add more so that
    ;; $a has the least, and $e has the most
    (drop (global.get $e))
    (drop (global.get $e))
    (drop (global.get $e))
    (drop (global.get $e))
    (drop (global.get $e))

    (drop (global.get $d))
    (drop (global.get $d))
    (drop (global.get $d))

    (drop (global.get $c))
    (drop (global.get $c))

    (drop (global.get $b))
  )
)

;; As above, but add a direct dep from $d to $a:
;;
;;    $c - $a
;;   /    /
;; $e    / <-- this was added
;;   \  /
;;    $d - $b
;;
;; This forces $a to appear before $d: the order goes from before, which was
;;   $b, $d, $a, $c, $e
;; to
;;   $b, $a, $d, $c, $e
(module
  ;; CHECK:      (global $b i32 (i32.const 20))

  ;; CHECK:      (global $a i32 (i32.const 10))
  (global $a i32 (i32.const 10))

  (global $b i32 (i32.const 20))

  ;; CHECK:      (global $d i32 (i32.add
  ;; CHECK-NEXT:  (global.get $b)
  ;; CHECK-NEXT:  (global.get $a)
  ;; CHECK-NEXT: ))

  ;; CHECK:      (global $c i32 (global.get $a))
  (global $c i32 (global.get $a))

  (global $d i32 (i32.add
    (global.get $b)
    (global.get $a) ;; this was added
  ))

  ;; CHECK:      (global $e i32 (i32.add
  ;; CHECK-NEXT:  (global.get $c)
  ;; CHECK-NEXT:  (global.get $d)
  ;; CHECK-NEXT: ))
  (global $e i32 (i32.add
    (global.get $c)
    (global.get $d)
  ))

  ;; CHECK:      (func $uses (type $0)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $e)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $e)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $e)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $e)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $e)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $e)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $d)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $d)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $d)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $d)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $c)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $c)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $c)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $b)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $b)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $uses
    ;; $b, $c, $d each have one already from the globals, and $a has two. Add
    ;; more so that $a has the least, and $e has the most.
    (drop (global.get $e))
    (drop (global.get $e))
    (drop (global.get $e))
    (drop (global.get $e))
    (drop (global.get $e))
    (drop (global.get $e))

    (drop (global.get $d))
    (drop (global.get $d))
    (drop (global.get $d))
    (drop (global.get $d))

    (drop (global.get $c))
    (drop (global.get $c))
    (drop (global.get $c))

    (drop (global.get $b))
    (drop (global.get $b))
  )
)

;; A situation where the simple greedy sort fails to be optimal. We have 128
;; globals, enough for the LEB size to grow by 1 for the last. 127 globals are
;; in a chain:
;;
;;  global0 <- global1 <- global2 <- .. <- global126
;;
;; and global127 is independent of all of them. Because of the counts it will
;; appear that global127 is worth putting first, as it has a higher count than
;; global0 (the only other global that can appear first). However, their counts
;; are actually low, as all counts are minimal except for global126 which has a
;; huge count. As a result, it is best to emit global0,..,global126,global127
;; because that lets us get the "heavy" global126 in just before the LEB size
;; grows.
(module
  ;; CHECK:      (global $global127 i32 (i32.const 127))

  ;; CHECK:      (global $global0 i32 (i32.const 0))
  (global $global0 i32 (i32.const 0))
  ;; CHECK:      (global $global1 i32 (global.get $global0))
  (global $global1 i32 (global.get $global0))
  ;; CHECK:      (global $global2 i32 (global.get $global1))
  (global $global2 i32 (global.get $global1))
  ;; CHECK:      (global $global3 i32 (global.get $global2))
  (global $global3 i32 (global.get $global2))
  ;; CHECK:      (global $global4 i32 (global.get $global3))
  (global $global4 i32 (global.get $global3))
  ;; CHECK:      (global $global5 i32 (global.get $global4))
  (global $global5 i32 (global.get $global4))
  ;; CHECK:      (global $global6 i32 (global.get $global5))
  (global $global6 i32 (global.get $global5))
  ;; CHECK:      (global $global7 i32 (global.get $global6))
  (global $global7 i32 (global.get $global6))
  ;; CHECK:      (global $global8 i32 (global.get $global7))
  (global $global8 i32 (global.get $global7))
  ;; CHECK:      (global $global9 i32 (global.get $global8))
  (global $global9 i32 (global.get $global8))
  ;; CHECK:      (global $global10 i32 (global.get $global9))
  (global $global10 i32 (global.get $global9))
  ;; CHECK:      (global $global11 i32 (global.get $global10))
  (global $global11 i32 (global.get $global10))
  ;; CHECK:      (global $global12 i32 (global.get $global11))
  (global $global12 i32 (global.get $global11))
  ;; CHECK:      (global $global13 i32 (global.get $global12))
  (global $global13 i32 (global.get $global12))
  ;; CHECK:      (global $global14 i32 (global.get $global13))
  (global $global14 i32 (global.get $global13))
  ;; CHECK:      (global $global15 i32 (global.get $global14))
  (global $global15 i32 (global.get $global14))
  ;; CHECK:      (global $global16 i32 (global.get $global15))
  (global $global16 i32 (global.get $global15))
  ;; CHECK:      (global $global17 i32 (global.get $global16))
  (global $global17 i32 (global.get $global16))
  ;; CHECK:      (global $global18 i32 (global.get $global17))
  (global $global18 i32 (global.get $global17))
  ;; CHECK:      (global $global19 i32 (global.get $global18))
  (global $global19 i32 (global.get $global18))
  ;; CHECK:      (global $global20 i32 (global.get $global19))
  (global $global20 i32 (global.get $global19))
  ;; CHECK:      (global $global21 i32 (global.get $global20))
  (global $global21 i32 (global.get $global20))
  ;; CHECK:      (global $global22 i32 (global.get $global21))
  (global $global22 i32 (global.get $global21))
  ;; CHECK:      (global $global23 i32 (global.get $global22))
  (global $global23 i32 (global.get $global22))
  ;; CHECK:      (global $global24 i32 (global.get $global23))
  (global $global24 i32 (global.get $global23))
  ;; CHECK:      (global $global25 i32 (global.get $global24))
  (global $global25 i32 (global.get $global24))
  ;; CHECK:      (global $global26 i32 (global.get $global25))
  (global $global26 i32 (global.get $global25))
  ;; CHECK:      (global $global27 i32 (global.get $global26))
  (global $global27 i32 (global.get $global26))
  ;; CHECK:      (global $global28 i32 (global.get $global27))
  (global $global28 i32 (global.get $global27))
  ;; CHECK:      (global $global29 i32 (global.get $global28))
  (global $global29 i32 (global.get $global28))
  ;; CHECK:      (global $global30 i32 (global.get $global29))
  (global $global30 i32 (global.get $global29))
  ;; CHECK:      (global $global31 i32 (global.get $global30))
  (global $global31 i32 (global.get $global30))
  ;; CHECK:      (global $global32 i32 (global.get $global31))
  (global $global32 i32 (global.get $global31))
  ;; CHECK:      (global $global33 i32 (global.get $global32))
  (global $global33 i32 (global.get $global32))
  ;; CHECK:      (global $global34 i32 (global.get $global33))
  (global $global34 i32 (global.get $global33))
  ;; CHECK:      (global $global35 i32 (global.get $global34))
  (global $global35 i32 (global.get $global34))
  ;; CHECK:      (global $global36 i32 (global.get $global35))
  (global $global36 i32 (global.get $global35))
  ;; CHECK:      (global $global37 i32 (global.get $global36))
  (global $global37 i32 (global.get $global36))
  ;; CHECK:      (global $global38 i32 (global.get $global37))
  (global $global38 i32 (global.get $global37))
  ;; CHECK:      (global $global39 i32 (global.get $global38))
  (global $global39 i32 (global.get $global38))
  ;; CHECK:      (global $global40 i32 (global.get $global39))
  (global $global40 i32 (global.get $global39))
  ;; CHECK:      (global $global41 i32 (global.get $global40))
  (global $global41 i32 (global.get $global40))
  ;; CHECK:      (global $global42 i32 (global.get $global41))
  (global $global42 i32 (global.get $global41))
  ;; CHECK:      (global $global43 i32 (global.get $global42))
  (global $global43 i32 (global.get $global42))
  ;; CHECK:      (global $global44 i32 (global.get $global43))
  (global $global44 i32 (global.get $global43))
  ;; CHECK:      (global $global45 i32 (global.get $global44))
  (global $global45 i32 (global.get $global44))
  ;; CHECK:      (global $global46 i32 (global.get $global45))
  (global $global46 i32 (global.get $global45))
  ;; CHECK:      (global $global47 i32 (global.get $global46))
  (global $global47 i32 (global.get $global46))
  ;; CHECK:      (global $global48 i32 (global.get $global47))
  (global $global48 i32 (global.get $global47))
  ;; CHECK:      (global $global49 i32 (global.get $global48))
  (global $global49 i32 (global.get $global48))
  ;; CHECK:      (global $global50 i32 (global.get $global49))
  (global $global50 i32 (global.get $global49))
  ;; CHECK:      (global $global51 i32 (global.get $global50))
  (global $global51 i32 (global.get $global50))
  ;; CHECK:      (global $global52 i32 (global.get $global51))
  (global $global52 i32 (global.get $global51))
  ;; CHECK:      (global $global53 i32 (global.get $global52))
  (global $global53 i32 (global.get $global52))
  ;; CHECK:      (global $global54 i32 (global.get $global53))
  (global $global54 i32 (global.get $global53))
  ;; CHECK:      (global $global55 i32 (global.get $global54))
  (global $global55 i32 (global.get $global54))
  ;; CHECK:      (global $global56 i32 (global.get $global55))
  (global $global56 i32 (global.get $global55))
  ;; CHECK:      (global $global57 i32 (global.get $global56))
  (global $global57 i32 (global.get $global56))
  ;; CHECK:      (global $global58 i32 (global.get $global57))
  (global $global58 i32 (global.get $global57))
  ;; CHECK:      (global $global59 i32 (global.get $global58))
  (global $global59 i32 (global.get $global58))
  ;; CHECK:      (global $global60 i32 (global.get $global59))
  (global $global60 i32 (global.get $global59))
  ;; CHECK:      (global $global61 i32 (global.get $global60))
  (global $global61 i32 (global.get $global60))
  ;; CHECK:      (global $global62 i32 (global.get $global61))
  (global $global62 i32 (global.get $global61))
  ;; CHECK:      (global $global63 i32 (global.get $global62))
  (global $global63 i32 (global.get $global62))
  ;; CHECK:      (global $global64 i32 (global.get $global63))
  (global $global64 i32 (global.get $global63))
  ;; CHECK:      (global $global65 i32 (global.get $global64))
  (global $global65 i32 (global.get $global64))
  ;; CHECK:      (global $global66 i32 (global.get $global65))
  (global $global66 i32 (global.get $global65))
  ;; CHECK:      (global $global67 i32 (global.get $global66))
  (global $global67 i32 (global.get $global66))
  ;; CHECK:      (global $global68 i32 (global.get $global67))
  (global $global68 i32 (global.get $global67))
  ;; CHECK:      (global $global69 i32 (global.get $global68))
  (global $global69 i32 (global.get $global68))
  ;; CHECK:      (global $global70 i32 (global.get $global69))
  (global $global70 i32 (global.get $global69))
  ;; CHECK:      (global $global71 i32 (global.get $global70))
  (global $global71 i32 (global.get $global70))
  ;; CHECK:      (global $global72 i32 (global.get $global71))
  (global $global72 i32 (global.get $global71))
  ;; CHECK:      (global $global73 i32 (global.get $global72))
  (global $global73 i32 (global.get $global72))
  ;; CHECK:      (global $global74 i32 (global.get $global73))
  (global $global74 i32 (global.get $global73))
  ;; CHECK:      (global $global75 i32 (global.get $global74))
  (global $global75 i32 (global.get $global74))
  ;; CHECK:      (global $global76 i32 (global.get $global75))
  (global $global76 i32 (global.get $global75))
  ;; CHECK:      (global $global77 i32 (global.get $global76))
  (global $global77 i32 (global.get $global76))
  ;; CHECK:      (global $global78 i32 (global.get $global77))
  (global $global78 i32 (global.get $global77))
  ;; CHECK:      (global $global79 i32 (global.get $global78))
  (global $global79 i32 (global.get $global78))
  ;; CHECK:      (global $global80 i32 (global.get $global79))
  (global $global80 i32 (global.get $global79))
  ;; CHECK:      (global $global81 i32 (global.get $global80))
  (global $global81 i32 (global.get $global80))
  ;; CHECK:      (global $global82 i32 (global.get $global81))
  (global $global82 i32 (global.get $global81))
  ;; CHECK:      (global $global83 i32 (global.get $global82))
  (global $global83 i32 (global.get $global82))
  ;; CHECK:      (global $global84 i32 (global.get $global83))
  (global $global84 i32 (global.get $global83))
  ;; CHECK:      (global $global85 i32 (global.get $global84))
  (global $global85 i32 (global.get $global84))
  ;; CHECK:      (global $global86 i32 (global.get $global85))
  (global $global86 i32 (global.get $global85))
  ;; CHECK:      (global $global87 i32 (global.get $global86))
  (global $global87 i32 (global.get $global86))
  ;; CHECK:      (global $global88 i32 (global.get $global87))
  (global $global88 i32 (global.get $global87))
  ;; CHECK:      (global $global89 i32 (global.get $global88))
  (global $global89 i32 (global.get $global88))
  ;; CHECK:      (global $global90 i32 (global.get $global89))
  (global $global90 i32 (global.get $global89))
  ;; CHECK:      (global $global91 i32 (global.get $global90))
  (global $global91 i32 (global.get $global90))
  ;; CHECK:      (global $global92 i32 (global.get $global91))
  (global $global92 i32 (global.get $global91))
  ;; CHECK:      (global $global93 i32 (global.get $global92))
  (global $global93 i32 (global.get $global92))
  ;; CHECK:      (global $global94 i32 (global.get $global93))
  (global $global94 i32 (global.get $global93))
  ;; CHECK:      (global $global95 i32 (global.get $global94))
  (global $global95 i32 (global.get $global94))
  ;; CHECK:      (global $global96 i32 (global.get $global95))
  (global $global96 i32 (global.get $global95))
  ;; CHECK:      (global $global97 i32 (global.get $global96))
  (global $global97 i32 (global.get $global96))
  ;; CHECK:      (global $global98 i32 (global.get $global97))
  (global $global98 i32 (global.get $global97))
  ;; CHECK:      (global $global99 i32 (global.get $global98))
  (global $global99 i32 (global.get $global98))
  ;; CHECK:      (global $global100 i32 (global.get $global99))
  (global $global100 i32 (global.get $global99))
  ;; CHECK:      (global $global101 i32 (global.get $global100))
  (global $global101 i32 (global.get $global100))
  ;; CHECK:      (global $global102 i32 (global.get $global101))
  (global $global102 i32 (global.get $global101))
  ;; CHECK:      (global $global103 i32 (global.get $global102))
  (global $global103 i32 (global.get $global102))
  ;; CHECK:      (global $global104 i32 (global.get $global103))
  (global $global104 i32 (global.get $global103))
  ;; CHECK:      (global $global105 i32 (global.get $global104))
  (global $global105 i32 (global.get $global104))
  ;; CHECK:      (global $global106 i32 (global.get $global105))
  (global $global106 i32 (global.get $global105))
  ;; CHECK:      (global $global107 i32 (global.get $global106))
  (global $global107 i32 (global.get $global106))
  ;; CHECK:      (global $global108 i32 (global.get $global107))
  (global $global108 i32 (global.get $global107))
  ;; CHECK:      (global $global109 i32 (global.get $global108))
  (global $global109 i32 (global.get $global108))
  ;; CHECK:      (global $global110 i32 (global.get $global109))
  (global $global110 i32 (global.get $global109))
  ;; CHECK:      (global $global111 i32 (global.get $global110))
  (global $global111 i32 (global.get $global110))
  ;; CHECK:      (global $global112 i32 (global.get $global111))
  (global $global112 i32 (global.get $global111))
  ;; CHECK:      (global $global113 i32 (global.get $global112))
  (global $global113 i32 (global.get $global112))
  ;; CHECK:      (global $global114 i32 (global.get $global113))
  (global $global114 i32 (global.get $global113))
  ;; CHECK:      (global $global115 i32 (global.get $global114))
  (global $global115 i32 (global.get $global114))
  ;; CHECK:      (global $global116 i32 (global.get $global115))
  (global $global116 i32 (global.get $global115))
  ;; CHECK:      (global $global117 i32 (global.get $global116))
  (global $global117 i32 (global.get $global116))
  ;; CHECK:      (global $global118 i32 (global.get $global117))
  (global $global118 i32 (global.get $global117))
  ;; CHECK:      (global $global119 i32 (global.get $global118))
  (global $global119 i32 (global.get $global118))
  ;; CHECK:      (global $global120 i32 (global.get $global119))
  (global $global120 i32 (global.get $global119))
  ;; CHECK:      (global $global121 i32 (global.get $global120))
  (global $global121 i32 (global.get $global120))
  ;; CHECK:      (global $global122 i32 (global.get $global121))
  (global $global122 i32 (global.get $global121))
  ;; CHECK:      (global $global123 i32 (global.get $global122))
  (global $global123 i32 (global.get $global122))
  ;; CHECK:      (global $global124 i32 (global.get $global123))
  (global $global124 i32 (global.get $global123))
  ;; CHECK:      (global $global125 i32 (global.get $global124))
  (global $global125 i32 (global.get $global124))
  ;; CHECK:      (global $global126 i32 (global.get $global125))
  (global $global126 i32 (global.get $global125))

  (global $global127 i32 (i32.const 127))

  ;; CHECK:      (func $uses (type $0)
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $global127)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $global127)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $global126)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $global126)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $global126)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $global126)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $global126)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $global126)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $global126)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $global126)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $global126)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT:  (drop
  ;; CHECK-NEXT:   (global.get $global126)
  ;; CHECK-NEXT:  )
  ;; CHECK-NEXT: )
  (func $uses
    ;; Aside from the uses in the globals themselves (which means one use for
    ;; each of global0..global125), we add two uses of global127, to make it
    ;; have a higher count than global0, and 10 uses of global126, to make it
    ;; have the highest count by far.
    (drop (global.get $global127))
    (drop (global.get $global127))

    (drop (global.get $global126))
    (drop (global.get $global126))
    (drop (global.get $global126))
    (drop (global.get $global126))
    (drop (global.get $global126))
    (drop (global.get $global126))
    (drop (global.get $global126))
    (drop (global.get $global126))
    (drop (global.get $global126))
    (drop (global.get $global126))
  )
)
