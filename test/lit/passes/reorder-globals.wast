;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: foreach %s %t wasm-opt --reorder-globals -S -o - | filecheck %s
;; RUN: foreach %s %t wasm-opt --reorder-globals --roundtrip -S -o - | filecheck --check-prefix ROUNDTRIP %s

;; Also check roundtripping here, so verify we don't end up emitting invalid
;; binaries somehow.

;; Global $b has more uses, so it should be sorted first.
(module
  (global $a i32 (i32.const 10))
  (global $b i32 (i32.const 20))

  (func $uses
    (drop
      (global.get $b)
    )
  )
)

;; As above, but now with global.sets. Again $b should be sorted first.
(module
  (global $a (mut i32) (i32.const 10))
  (global $b (mut i32) (i32.const 20))

  (func $uses
    (global.set $b
      (i32.const 30)
    )
    (global.set $b
      (i32.const 40)
    )
    (drop
      (global.get $a)
    )
  )
)

;; As above, but flipped so now $a has more, and should remain first.
(module
  (global $a (mut i32) (i32.const 10))
  (global $b (mut i32) (i32.const 20))

  (func $uses
    (global.set $a
      (i32.const 30)
    )
    (global.set $a
      (i32.const 40)
    )
    (drop
      (global.get $b)
    )
  )
)

;; $b has more uses, but it depends on $a and cannot be sorted before it.
(module
  (global $a i32 (i32.const 10))
  (global $b i32 (global.get $a))

  (func $uses
    (drop
      (global.get $b)
    )
  )
)

;; $b has more uses, but $a is an import and must remain first.
(module
  (import "a" "b" (global $a i32))
  (global $b i32 (i32.const 10))

  (func $uses
    (drop
      (global.get $b)
    )
  )
)
