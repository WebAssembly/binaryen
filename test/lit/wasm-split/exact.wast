;; NOTE: Assertions have been generated by update_lit_checks.py --all-items and should not be edited.

;; RUN: wasm-split -all -g %s --keep-funcs=foo -o1 %t.1.wasm -o2 %t.2.wasm
;; RUN: wasm-opt -all %t.1.wasm --print | filecheck %s --check-prefix=PRIMARY
;; RUN: wasm-opt -all %t.2.wasm --print | filecheck %s --check-prefix=SECONDARY

;; Get references to both functions from both modules, and ensure they are
;; exact.

(module
 ;; PRIMARY:      (type $func (sub (func)))
 (type $func (sub (func)))

 ;; PRIMARY:      (import "placeholder.deferred" "0" (func $placeholder_0 (type $func)))

 ;; PRIMARY:      (table $0 1 funcref)

 ;; PRIMARY:      (elem $0 (i32.const 0) $placeholder_0)

 ;; PRIMARY:      (elem declare func $foo $trampoline_bar)

 ;; PRIMARY:      (export "foo" (func $foo))

 ;; PRIMARY:      (export "table" (table $0))

 ;; PRIMARY:      (func $foo (type $func)
 ;; PRIMARY-NEXT:  (local $exact (ref (exact $func)))
 ;; PRIMARY-NEXT:  (local.set $exact
 ;; PRIMARY-NEXT:   (ref.func $foo)
 ;; PRIMARY-NEXT:  )
 ;; PRIMARY-NEXT:  (local.set $exact
 ;; PRIMARY-NEXT:   (ref.func $trampoline_bar)
 ;; PRIMARY-NEXT:  )
 ;; PRIMARY-NEXT: )
 (func $foo (type $func)
  (local $exact (ref (exact $func)))
  (local.set $exact
   (ref.func $foo)
  )
  (local.set $exact
   (ref.func $bar)
  )
 )

 ;; SECONDARY:      (type $0 (sub (func)))

 ;; SECONDARY:      (import "primary" "table" (table $timport$0 1 funcref))

 ;; SECONDARY:      (import "primary" "foo" (func $foo (type $0)))

 ;; SECONDARY:      (elem $0 (i32.const 0) $bar)

 ;; SECONDARY:      (elem declare func $foo)

 ;; SECONDARY:      (func $bar (type $0)
 ;; SECONDARY-NEXT:  (local $exact (ref (exact $0)))
 ;; SECONDARY-NEXT:  (local.set $exact
 ;; SECONDARY-NEXT:   (ref.cast (ref (exact $0))
 ;; SECONDARY-NEXT:    (ref.func $foo)
 ;; SECONDARY-NEXT:   )
 ;; SECONDARY-NEXT:  )
 ;; SECONDARY-NEXT:  (local.set $exact
 ;; SECONDARY-NEXT:   (ref.func $bar)
 ;; SECONDARY-NEXT:  )
 ;; SECONDARY-NEXT: )
 (func $bar (type $func)
  (local $exact (ref (exact $func)))
  (local.set $exact
   (ref.func $foo)
  )
  (local.set $exact
   (ref.func $bar)
  )
 )
)
;; PRIMARY:      (func $trampoline_bar (type $func)
;; PRIMARY-NEXT:  (call_indirect $0 (type $func)
;; PRIMARY-NEXT:   (i32.const 0)
;; PRIMARY-NEXT:  )
;; PRIMARY-NEXT: )
