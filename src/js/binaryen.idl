enum WasmType {
  "none",
  "i32",
  "i64",
  "f32",
  "f64",
  "unreachable"
};

interface Literal {
  void Literal(double x);
  attribute WasmType type;
  float getf32();
  long geti32();
  double getf64();
  long geti64Low();
  long geti64High();
};

interface I32Literal {
  void I32Literal(double x);
};

I32Literal implements Literal;

interface F32Literal {
  void F32Literal(double x);
};

F32Literal implements Literal;

interface I64Literal {
  void I64Literal(long x, long y);
};

I64Literal implements Literal;

interface F64Literal {
  void F64Literal(double x);
};

F64Literal implements Literal;

interface Name {
  void Name(DOMString x);

  [Const] DOMString c_str();
};

interface Module {
  void Module();
};

[Prefix="ModuleInstance::", NoDelete]
interface ExternalInterface {
};

interface ShellExternalInterface {
  void ShellExternalInterface();
};

ShellExternalInterface implements ExternalInterface;

interface ModuleInstance {
  void ModuleInstance([Ref] Module m, ExternalInterface i);

  [Value] Literal callExport([Ref] Name name, [Ref] LiteralList arguments);
};

[Prefix="ModuleInstance::"]
interface LiteralList {
  void LiteralList();

  void push_back([Ref] Literal l);
};

// S-Expressions

interface Element {
  boolean isList();
  boolean isStr();
  void dump();

  // list methods
  [Operator="[]"] Element getChild(long i);
  long size();

  // string methods
  [Const] DOMString c_str();
};

interface SExpressionParser {
  void SExpressionParser(DOMString input);
  attribute Element root;
};

interface SExpressionWasmBuilder {
  void SExpressionWasmBuilder([Ref] Module wasm, [Ref] Element input);
};

// Wasm printing

interface WasmPrinter {
  static void printModule(Module m);
};

