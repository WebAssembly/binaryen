name: CI

on:
  # If we run CI on all branches then we end up doing duplicate work for
  # branches which are also PRs.
  push:
    branches:
      - main
      - kripken/*
  pull_request:

jobs:

  lint:
    name: lint
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    env:
      # Keep this in sync with clang-format-diff.sh
      LLVM_VERSION: 17
    steps:
    - uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0
    - name: install tools
      run: |
        sudo pip3 install -r requirements-dev.txt
        sudo apt install lsb-release wget software-properties-common gnupg
        wget https://apt.llvm.org/llvm.sh
        sudo chmod +x llvm.sh
        sudo ./llvm.sh ${LLVM_VERSION}
        sudo apt-get install clang-format clang-format-${LLVM_VERSION} clang-tidy-${LLVM_VERSION}
    - run: flake8
    - run: ./scripts/clang-format-diff.sh
    - name: clang-tidy
      run: |
        # clang-tidy requires compile_commands.json generated by cmake
        cmake . -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        ./scripts/clang-tidy-diff.sh

  build:
    name: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: install Python dev dependencies
      run: pip3 install -r requirements-dev.txt

    - name: gen-s-parser
      run: ./scripts/gen-s-parser.py | diff src/gen-s-parser.inc -
      if: matrix.os == 'ubuntu-latest'

    - name: install ninja (linux)
      run: sudo apt-get install ninja-build
      if: matrix.os == 'ubuntu-latest'

    - name: install ninja (macos)
      run: brew install ninja
      if: matrix.os == 'macos-latest'

    - name: install ninja (win)
      run: choco install ninja
      if: matrix.os == 'windows-latest'

    - name: mkdir
      run: mkdir -p out

    - name: cmake (linux)
      run: cmake -S . -B out -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=out/install
      if: matrix.os == 'ubuntu-latest'

    - name: cmake (macos)
      run: cmake -S . -B out -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=out/install '-DCMAKE_OSX_ARCHITECTURES=x86_64;arm64'
      if: matrix.os == 'macos-latest'

    - name: cmake (win)
      # -G "Visual Studio 15 2017"
      run: cmake -S . -B out -DCMAKE_INSTALL_PREFIX=out/install
      if: matrix.os == 'windows-latest'

    - name: build
      run: cmake --build out --config Release -v

    - name: install
      run: cmake --install out --config Release

    - name: strip
      run: find out/install/ -type f -perm -u=x -exec strip -x {} +
      if: matrix.os != 'windows-latest'

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}
        path: out/install

    - name: test binaryen-lit
      run: python out/bin/binaryen-lit -vv test/lit/parse-error.wast

    - name: test
      run: python check.py --binaryen-bin=out/bin

